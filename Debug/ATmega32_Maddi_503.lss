
ATmega32_Maddi_503.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004614  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001de  00800060  00004614  000046a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080023e  0080023e  00004886  2**0
                  ALLOC
  3 .stab         000053d0  00000000  00000000  00004888  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002301  00000000  00000000  00009c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000bf59  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000c0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000c2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000e2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000f42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0001042c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0001088d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001113b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__vector_1>
       8:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_2>
       c:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 33       	cpi	r26, 0x3F	; 63
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 1c 	call	0x3836	; 0x3836 <main>
      8a:	0c 94 08 23 	jmp	0x4610	; 0x4610 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 22 	jmp	0x45a2	; 0x45a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ec       	ldi	r26, 0xCC	; 204
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 22 	jmp	0x45a2	; 0x45a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ec       	ldi	r24, 0xCC	; 204
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 22 	jmp	0x45da	; 0x45da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dd 22 	jmp	0x45ba	; 0x45ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e1 22 	jmp	0x45c2	; 0x45c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 d9 22 	jmp	0x45b2	; 0x45b2 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 f5 22 	jmp	0x45ea	; 0x45ea <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ec 52       	subi	r30, 0x2C	; 44
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GIE_enuInit>:

#include "..\..\Libraries\stdTypes.h"
#include "..\..\Libraries\errorState.h"

ES_t GIE_enuInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
     cde:	f8 94       	cli

	return ES_OK;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <GIE_enuEnable>:

ES_t GIE_enuEnable(void)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62

	asm("SEI");
     cf0:	78 94       	sei
	return ES_OK;
     cf2:	80 e0       	ldi	r24, 0x00	; 0
}
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
     d02:	f8 94       	cli
	return ES_OK;
     d04:	80 e0       	ldi	r24, 0x00	; 0
}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <EXTI_enuInit>:

extern 	EXTI_t EXTI_AstrEXTI_Config[EXTI_NUM] ;


ES_t EXTI_enuInit(void)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	2e 97       	sbiw	r28, 0x0e	; 14
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	93 c1       	rjmp	.+806    	; 0x104e <EXTI_enuInit+0x342>
	{
		if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT0 )						/********************************************************************/
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	c9 01       	movw	r24, r18
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	82 0f       	add	r24, r18
     d36:	93 1f       	adc	r25, r19
     d38:	fc 01       	movw	r30, r24
     d3a:	e9 52       	subi	r30, 0x29	; 41
     d3c:	fe 4f       	sbci	r31, 0xFE	; 254
     d3e:	80 81       	ld	r24, Z
     d40:	8d 33       	cpi	r24, 0x3D	; 61
     d42:	09 f0       	breq	.+2      	; 0xd46 <EXTI_enuInit+0x3a>
     d44:	82 c0       	rjmp	.+260    	; 0xe4a <EXTI_enuInit+0x13e>
		{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	TWO_BITS_MASK	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
     d46:	a5 e5       	ldi	r26, 0x55	; 85
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e5       	ldi	r30, 0x55	; 85
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8c 7f       	andi	r24, 0xFC	; 252
     d52:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	c9 01       	movw	r24, r18
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	82 0f       	add	r24, r18
     d62:	93 1f       	adc	r25, r19
     d64:	fc 01       	movw	r30, r24
     d66:	eb 52       	subi	r30, 0x2B	; 43
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	80 81       	ld	r24, Z
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3e 87       	std	Y+14, r19	; 0x0e
     d72:	2d 87       	std	Y+13, r18	; 0x0d
     d74:	8d 85       	ldd	r24, Y+13	; 0x0d
     d76:	9e 85       	ldd	r25, Y+14	; 0x0e
     d78:	88 33       	cpi	r24, 0x38	; 56
     d7a:	91 05       	cpc	r25, r1
     d7c:	b1 f0       	breq	.+44     	; 0xdaa <EXTI_enuInit+0x9e>
     d7e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d80:	3e 85       	ldd	r19, Y+14	; 0x0e
     d82:	29 33       	cpi	r18, 0x39	; 57
     d84:	31 05       	cpc	r19, r1
     d86:	34 f4       	brge	.+12     	; 0xd94 <EXTI_enuInit+0x88>
     d88:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d8c:	87 33       	cpi	r24, 0x37	; 55
     d8e:	91 05       	cpc	r25, r1
     d90:	31 f1       	breq	.+76     	; 0xdde <EXTI_enuInit+0xd2>
     d92:	23 c0       	rjmp	.+70     	; 0xdda <EXTI_enuInit+0xce>
     d94:	2d 85       	ldd	r18, Y+13	; 0x0d
     d96:	3e 85       	ldd	r19, Y+14	; 0x0e
     d98:	29 33       	cpi	r18, 0x39	; 57
     d9a:	31 05       	cpc	r19, r1
     d9c:	71 f0       	breq	.+28     	; 0xdba <EXTI_enuInit+0xae>
     d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     da0:	9e 85       	ldd	r25, Y+14	; 0x0e
     da2:	8a 33       	cpi	r24, 0x3A	; 58
     da4:	91 05       	cpc	r25, r1
     da6:	89 f0       	breq	.+34     	; 0xdca <EXTI_enuInit+0xbe>
     da8:	18 c0       	rjmp	.+48     	; 0xdda <EXTI_enuInit+0xce>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC00_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
     daa:	a5 e5       	ldi	r26, 0x55	; 85
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e5 e5       	ldi	r30, 0x55	; 85
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	81 60       	ori	r24, 0x01	; 1
     db6:	8c 93       	st	X, r24
     db8:	12 c0       	rjmp	.+36     	; 0xdde <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC01_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
     dba:	a5 e5       	ldi	r26, 0x55	; 85
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e5 e5       	ldi	r30, 0x55	; 85
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	8c 93       	st	X, r24
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC00_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
     dca:	a5 e5       	ldi	r26, 0x55	; 85
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e5 e5       	ldi	r30, 0x55	; 85
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	83 60       	ori	r24, 0x03	; 3
     dd6:	8c 93       	st	X, r24
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <EXTI_enuInit+0xd2>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	09 f4       	brne	.+2      	; 0xde6 <EXTI_enuInit+0xda>
     de4:	3a c1       	rjmp	.+628    	; 0x105a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT0	mode		*/
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	c9 01       	movw	r24, r18
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	82 0f       	add	r24, r18
     df4:	93 1f       	adc	r25, r19
     df6:	fc 01       	movw	r30, r24
     df8:	ea 52       	subi	r30, 0x2A	; 42
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	80 81       	ld	r24, Z
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3c 87       	std	Y+12, r19	; 0x0c
     e04:	2b 87       	std	Y+11, r18	; 0x0b
     e06:	8b 85       	ldd	r24, Y+11	; 0x0b
     e08:	9c 85       	ldd	r25, Y+12	; 0x0c
     e0a:	8b 33       	cpi	r24, 0x3B	; 59
     e0c:	91 05       	cpc	r25, r1
     e0e:	31 f0       	breq	.+12     	; 0xe1c <EXTI_enuInit+0x110>
     e10:	2b 85       	ldd	r18, Y+11	; 0x0b
     e12:	3c 85       	ldd	r19, Y+12	; 0x0c
     e14:	2c 33       	cpi	r18, 0x3C	; 60
     e16:	31 05       	cpc	r19, r1
     e18:	49 f0       	breq	.+18     	; 0xe2c <EXTI_enuInit+0x120>
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <EXTI_enuInit+0x130>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE0_BIT	);	/*			ENABLE INTERRUPT		*/
     e1c:	ab e5       	ldi	r26, 0x5B	; 91
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	eb e5       	ldi	r30, 0x5B	; 91
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 64       	ori	r24, 0x40	; 64
     e28:	8c 93       	st	X, r24
     e2a:	0a c0       	rjmp	.+20     	; 0xe40 <EXTI_enuInit+0x134>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE0_BIT	);	/*			DISABLE INTERRUPT		*/
     e2c:	ab e5       	ldi	r26, 0x5B	; 91
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	eb e5       	ldi	r30, 0x5B	; 91
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8f 7b       	andi	r24, 0xBF	; 191
     e38:	8c 93       	st	X, r24
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <EXTI_enuInit+0x134>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	09 f4       	brne	.+2      	; 0xe48 <EXTI_enuInit+0x13c>
     e46:	09 c1       	rjmp	.+530    	; 0x105a <EXTI_enuInit+0x34e>
     e48:	ff c0       	rjmp	.+510    	; 0x1048 <EXTI_enuInit+0x33c>
		}

		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT1 )				/********************************************************************/
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	c9 01       	movw	r24, r18
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	82 0f       	add	r24, r18
     e58:	93 1f       	adc	r25, r19
     e5a:	fc 01       	movw	r30, r24
     e5c:	e9 52       	subi	r30, 0x29	; 41
     e5e:	fe 4f       	sbci	r31, 0xFE	; 254
     e60:	80 81       	ld	r24, Z
     e62:	8e 33       	cpi	r24, 0x3E	; 62
     e64:	09 f0       	breq	.+2      	; 0xe68 <EXTI_enuInit+0x15c>
     e66:	7e c0       	rjmp	.+252    	; 0xf64 <EXTI_enuInit+0x258>
		{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	TWO_BITS_MASK	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
     e68:	a5 e5       	ldi	r26, 0x55	; 85
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e5       	ldi	r30, 0x55	; 85
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	83 7f       	andi	r24, 0xF3	; 243
     e74:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	c9 01       	movw	r24, r18
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	82 0f       	add	r24, r18
     e84:	93 1f       	adc	r25, r19
     e86:	fc 01       	movw	r30, r24
     e88:	eb 52       	subi	r30, 0x2B	; 43
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	80 81       	ld	r24, Z
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3a 87       	std	Y+10, r19	; 0x0a
     e94:	29 87       	std	Y+9, r18	; 0x09
     e96:	89 85       	ldd	r24, Y+9	; 0x09
     e98:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9a:	88 33       	cpi	r24, 0x38	; 56
     e9c:	91 05       	cpc	r25, r1
     e9e:	b1 f0       	breq	.+44     	; 0xecc <EXTI_enuInit+0x1c0>
     ea0:	29 85       	ldd	r18, Y+9	; 0x09
     ea2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ea4:	29 33       	cpi	r18, 0x39	; 57
     ea6:	31 05       	cpc	r19, r1
     ea8:	34 f4       	brge	.+12     	; 0xeb6 <EXTI_enuInit+0x1aa>
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	87 33       	cpi	r24, 0x37	; 55
     eb0:	91 05       	cpc	r25, r1
     eb2:	31 f1       	breq	.+76     	; 0xf00 <EXTI_enuInit+0x1f4>
     eb4:	23 c0       	rjmp	.+70     	; 0xefc <EXTI_enuInit+0x1f0>
     eb6:	29 85       	ldd	r18, Y+9	; 0x09
     eb8:	3a 85       	ldd	r19, Y+10	; 0x0a
     eba:	29 33       	cpi	r18, 0x39	; 57
     ebc:	31 05       	cpc	r19, r1
     ebe:	71 f0       	breq	.+28     	; 0xedc <EXTI_enuInit+0x1d0>
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	8a 33       	cpi	r24, 0x3A	; 58
     ec6:	91 05       	cpc	r25, r1
     ec8:	89 f0       	breq	.+34     	; 0xeec <EXTI_enuInit+0x1e0>
     eca:	18 c0       	rjmp	.+48     	; 0xefc <EXTI_enuInit+0x1f0>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC10_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
     ecc:	a5 e5       	ldi	r26, 0x55	; 85
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e5       	ldi	r30, 0x55	; 85
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	8c 93       	st	X, r24
     eda:	12 c0       	rjmp	.+36     	; 0xf00 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC11_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
     edc:	a5 e5       	ldi	r26, 0x55	; 85
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e5       	ldi	r30, 0x55	; 85
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	88 60       	ori	r24, 0x08	; 8
     ee8:	8c 93       	st	X, r24
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC10_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
     eec:	a5 e5       	ldi	r26, 0x55	; 85
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e5 e5       	ldi	r30, 0x55	; 85
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8c 60       	ori	r24, 0x0C	; 12
     ef8:	8c 93       	st	X, r24
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <EXTI_enuInit+0x1f4>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	09 f4       	brne	.+2      	; 0xf08 <EXTI_enuInit+0x1fc>
     f06:	a9 c0       	rjmp	.+338    	; 0x105a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT1	mode		*/
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	c9 01       	movw	r24, r18
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	fc 01       	movw	r30, r24
     f1a:	ea 52       	subi	r30, 0x2A	; 42
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	80 81       	ld	r24, Z
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	38 87       	std	Y+8, r19	; 0x08
     f26:	2f 83       	std	Y+7, r18	; 0x07
     f28:	8f 81       	ldd	r24, Y+7	; 0x07
     f2a:	98 85       	ldd	r25, Y+8	; 0x08
     f2c:	8b 33       	cpi	r24, 0x3B	; 59
     f2e:	91 05       	cpc	r25, r1
     f30:	31 f0       	breq	.+12     	; 0xf3e <EXTI_enuInit+0x232>
     f32:	2f 81       	ldd	r18, Y+7	; 0x07
     f34:	38 85       	ldd	r19, Y+8	; 0x08
     f36:	2c 33       	cpi	r18, 0x3C	; 60
     f38:	31 05       	cpc	r19, r1
     f3a:	49 f0       	breq	.+18     	; 0xf4e <EXTI_enuInit+0x242>
     f3c:	10 c0       	rjmp	.+32     	; 0xf5e <EXTI_enuInit+0x252>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE1_BIT	);	/*			ENABLE INTERRUPT		*/
     f3e:	ab e5       	ldi	r26, 0x5B	; 91
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	eb e5       	ldi	r30, 0x5B	; 91
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 68       	ori	r24, 0x80	; 128
     f4a:	8c 93       	st	X, r24
     f4c:	7d c0       	rjmp	.+250    	; 0x1048 <EXTI_enuInit+0x33c>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE1_BIT	);	/*			DISABLE INTERRUPT		*/
     f4e:	ab e5       	ldi	r26, 0x5B	; 91
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	eb e5       	ldi	r30, 0x5B	; 91
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	8c 93       	st	X, r24
     f5c:	75 c0       	rjmp	.+234    	; 0x1048 <EXTI_enuInit+0x33c>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	72 c0       	rjmp	.+228    	; 0x1048 <EXTI_enuInit+0x33c>
			}
		}
		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT2 )				/********************************************************************/
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	c9 01       	movw	r24, r18
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	82 0f       	add	r24, r18
     f72:	93 1f       	adc	r25, r19
     f74:	fc 01       	movw	r30, r24
     f76:	e9 52       	subi	r30, 0x29	; 41
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	80 81       	ld	r24, Z
     f7c:	8f 33       	cpi	r24, 0x3F	; 63
     f7e:	09 f0       	breq	.+2      	; 0xf82 <EXTI_enuInit+0x276>
     f80:	61 c0       	rjmp	.+194    	; 0x1044 <EXTI_enuInit+0x338>
		{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/********************************************************************/
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	c9 01       	movw	r24, r18
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	fc 01       	movw	r30, r24
     f94:	eb 52       	subi	r30, 0x2B	; 43
     f96:	fe 4f       	sbci	r31, 0xFE	; 254
     f98:	80 81       	ld	r24, Z
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	3e 83       	std	Y+6, r19	; 0x06
     fa0:	2d 83       	std	Y+5, r18	; 0x05
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	89 33       	cpi	r24, 0x39	; 57
     fa8:	91 05       	cpc	r25, r1
     faa:	31 f0       	breq	.+12     	; 0xfb8 <EXTI_enuInit+0x2ac>
     fac:	2d 81       	ldd	r18, Y+5	; 0x05
     fae:	3e 81       	ldd	r19, Y+6	; 0x06
     fb0:	2a 33       	cpi	r18, 0x3A	; 58
     fb2:	31 05       	cpc	r19, r1
     fb4:	49 f0       	breq	.+18     	; 0xfc8 <EXTI_enuInit+0x2bc>
     fb6:	10 c0       	rjmp	.+32     	; 0xfd8 <EXTI_enuInit+0x2cc>
			{																		/*																	*/
				case	FALLING_EDGE:	MCUCSR &= ~(BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
     fb8:	a4 e5       	ldi	r26, 0x54	; 84
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e4 e5       	ldi	r30, 0x54	; 84
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 7b       	andi	r24, 0xBF	; 191
     fc4:	8c 93       	st	X, r24
     fc6:	0a c0       	rjmp	.+20     	; 0xfdc <EXTI_enuInit+0x2d0>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCSR |=  (BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
     fc8:	a4 e5       	ldi	r26, 0x54	; 84
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e4 e5       	ldi	r30, 0x54	; 84
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	8c 93       	st	X, r24
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <EXTI_enuInit+0x2d0>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	e1 f1       	breq	.+120    	; 0x105a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT2	mode		*/
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	c9 01       	movw	r24, r18
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	fc 01       	movw	r30, r24
     ff4:	ea 52       	subi	r30, 0x2A	; 42
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	80 81       	ld	r24, Z
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3c 83       	std	Y+4, r19	; 0x04
    1000:	2b 83       	std	Y+3, r18	; 0x03
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	8b 33       	cpi	r24, 0x3B	; 59
    1008:	91 05       	cpc	r25, r1
    100a:	31 f0       	breq	.+12     	; 0x1018 <EXTI_enuInit+0x30c>
    100c:	2b 81       	ldd	r18, Y+3	; 0x03
    100e:	3c 81       	ldd	r19, Y+4	; 0x04
    1010:	2c 33       	cpi	r18, 0x3C	; 60
    1012:	31 05       	cpc	r19, r1
    1014:	49 f0       	breq	.+18     	; 0x1028 <EXTI_enuInit+0x31c>
    1016:	10 c0       	rjmp	.+32     	; 0x1038 <EXTI_enuInit+0x32c>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE2_BIT	);	/*			ENABLE INTERRUPT		*/
    1018:	ab e5       	ldi	r26, 0x5B	; 91
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	eb e5       	ldi	r30, 0x5B	; 91
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 62       	ori	r24, 0x20	; 32
    1024:	8c 93       	st	X, r24
    1026:	0a c0       	rjmp	.+20     	; 0x103c <EXTI_enuInit+0x330>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE2_BIT	);	/*			DISABLE INTERRUPT		*/
    1028:	ab e5       	ldi	r26, 0x5B	; 91
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	eb e5       	ldi	r30, 0x5B	; 91
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7d       	andi	r24, 0xDF	; 223
    1034:	8c 93       	st	X, r24
    1036:	02 c0       	rjmp	.+4      	; 0x103c <EXTI_enuInit+0x330>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	61 f0       	breq	.+24     	; 0x105a <EXTI_enuInit+0x34e>
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <EXTI_enuInit+0x33c>
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	8a 83       	std	Y+2, r24	; 0x02

ES_t EXTI_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	90 91 d4 01 	lds	r25, 0x01D4
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	89 17       	cp	r24, r25
    1056:	08 f4       	brcc	.+2      	; 0x105a <EXTI_enuInit+0x34e>
    1058:	67 ce       	rjmp	.-818    	; 0xd28 <EXTI_enuInit+0x1c>
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
		}
		else Local_enuErrorState = ES_OUT_RANGE;
	}
	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	09 f0       	breq	.+2      	; 0x1062 <EXTI_enuInit+0x356>
    1060:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1064:	2e 96       	adiw	r28, 0x0e	; 14
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt( u8 Copy_u8IntNum )
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <EXTI_enuEnableInterrupt+0x6>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	8d 33       	cpi	r24, 0x3D	; 61
    108a:	41 f4       	brne	.+16     	; 0x109c <EXTI_enuEnableInterrupt+0x26>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE0_BIT	);							/*			ENABLE INT0			*/
    108c:	ab e5       	ldi	r26, 0x5B	; 91
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	eb e5       	ldi	r30, 0x5B	; 91
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	80 64       	ori	r24, 0x40	; 64
    1098:	8c 93       	st	X, r24
    109a:	18 c0       	rjmp	.+48     	; 0x10cc <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	8e 33       	cpi	r24, 0x3E	; 62
    10a0:	41 f4       	brne	.+16     	; 0x10b2 <EXTI_enuEnableInterrupt+0x3c>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE1_BIT	);							/*			ENABLE INT1			*/
    10a2:	ab e5       	ldi	r26, 0x5B	; 91
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e5       	ldi	r30, 0x5B	; 91
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 68       	ori	r24, 0x80	; 128
    10ae:	8c 93       	st	X, r24
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	8f 33       	cpi	r24, 0x3F	; 63
    10b6:	41 f4       	brne	.+16     	; 0x10c8 <EXTI_enuEnableInterrupt+0x52>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE2_BIT	);							/*			ENABLE INT2			*/
    10b8:	ab e5       	ldi	r26, 0x5B	; 91
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	eb e5       	ldi	r30, 0x5B	; 91
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	80 62       	ori	r24, 0x20	; 32
    10c4:	8c 93       	st	X, r24
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <EXTI_enuEnableInterrupt+0x5e>
    10d2:	19 82       	std	Y+1, r1	; 0x01


	return Local_enuErrorState ;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <EXTI_enuDisableInterrupt>:

ES_t EXTI_enuDisableInterrupt( u8 Copy_u8IntNum )
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <EXTI_enuDisableInterrupt+0x6>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	8d 33       	cpi	r24, 0x3D	; 61
    10f4:	41 f4       	brne	.+16     	; 0x1106 <EXTI_enuDisableInterrupt+0x26>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE0_BIT	);							/*			DISABLE INT0		*/
    10f6:	ab e5       	ldi	r26, 0x5B	; 91
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	eb e5       	ldi	r30, 0x5B	; 91
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8f 7b       	andi	r24, 0xBF	; 191
    1102:	8c 93       	st	X, r24
    1104:	18 c0       	rjmp	.+48     	; 0x1136 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	8e 33       	cpi	r24, 0x3E	; 62
    110a:	41 f4       	brne	.+16     	; 0x111c <EXTI_enuDisableInterrupt+0x3c>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE1_BIT	);							/*			DISABLE INT1		*/
    110c:	ab e5       	ldi	r26, 0x5B	; 91
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	eb e5       	ldi	r30, 0x5B	; 91
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8f 77       	andi	r24, 0x7F	; 127
    1118:	8c 93       	st	X, r24
    111a:	0d c0       	rjmp	.+26     	; 0x1136 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	8f 33       	cpi	r24, 0x3F	; 63
    1120:	41 f4       	brne	.+16     	; 0x1132 <EXTI_enuDisableInterrupt+0x52>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE2_BIT	);							/*			DISABLE INT2		*/
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7d       	andi	r24, 0xDF	; 223
    112e:	8c 93       	st	X, r24
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	09 f0       	breq	.+2      	; 0x113e <EXTI_enuDisableInterrupt+0x5e>
    113c:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel( u8 Copy_u8IntNum , u8 Copy_u8SenseLevel )
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	29 97       	sbiw	r28, 0x09	; 9
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	8a 83       	std	Y+2, r24	; 0x02
    1160:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01


	if( Copy_u8IntNum == INT0 )													/********************************************************************/
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	8d 33       	cpi	r24, 0x3D	; 61
    116a:	09 f0       	breq	.+2      	; 0x116e <EXTI_enuSetSenseLevel+0x24>
    116c:	43 c0       	rjmp	.+134    	; 0x11f4 <EXTI_enuSetSenseLevel+0xaa>
	{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	TWO_BITS_MASK	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
    116e:	a5 e5       	ldi	r26, 0x55	; 85
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e5       	ldi	r30, 0x55	; 85
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8c 7f       	andi	r24, 0xFC	; 252
    117a:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	39 87       	std	Y+9, r19	; 0x09
    1184:	28 87       	std	Y+8, r18	; 0x08
    1186:	88 85       	ldd	r24, Y+8	; 0x08
    1188:	99 85       	ldd	r25, Y+9	; 0x09
    118a:	88 33       	cpi	r24, 0x38	; 56
    118c:	91 05       	cpc	r25, r1
    118e:	b9 f0       	breq	.+46     	; 0x11be <EXTI_enuSetSenseLevel+0x74>
    1190:	28 85       	ldd	r18, Y+8	; 0x08
    1192:	39 85       	ldd	r19, Y+9	; 0x09
    1194:	29 33       	cpi	r18, 0x39	; 57
    1196:	31 05       	cpc	r19, r1
    1198:	3c f4       	brge	.+14     	; 0x11a8 <EXTI_enuSetSenseLevel+0x5e>
    119a:	88 85       	ldd	r24, Y+8	; 0x08
    119c:	99 85       	ldd	r25, Y+9	; 0x09
    119e:	87 33       	cpi	r24, 0x37	; 55
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <EXTI_enuSetSenseLevel+0x5c>
    11a4:	96 c0       	rjmp	.+300    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
    11a6:	23 c0       	rjmp	.+70     	; 0x11ee <EXTI_enuSetSenseLevel+0xa4>
    11a8:	28 85       	ldd	r18, Y+8	; 0x08
    11aa:	39 85       	ldd	r19, Y+9	; 0x09
    11ac:	29 33       	cpi	r18, 0x39	; 57
    11ae:	31 05       	cpc	r19, r1
    11b0:	71 f0       	breq	.+28     	; 0x11ce <EXTI_enuSetSenseLevel+0x84>
    11b2:	88 85       	ldd	r24, Y+8	; 0x08
    11b4:	99 85       	ldd	r25, Y+9	; 0x09
    11b6:	8a 33       	cpi	r24, 0x3A	; 58
    11b8:	91 05       	cpc	r25, r1
    11ba:	89 f0       	breq	.+34     	; 0x11de <EXTI_enuSetSenseLevel+0x94>
    11bc:	18 c0       	rjmp	.+48     	; 0x11ee <EXTI_enuSetSenseLevel+0xa4>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC00_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    11be:	a5 e5       	ldi	r26, 0x55	; 85
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e5       	ldi	r30, 0x55	; 85
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	81 60       	ori	r24, 0x01	; 1
    11ca:	8c 93       	st	X, r24
    11cc:	82 c0       	rjmp	.+260    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC01_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
    11ce:	a5 e5       	ldi	r26, 0x55	; 85
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e5       	ldi	r30, 0x55	; 85
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	8c 93       	st	X, r24
    11dc:	7a c0       	rjmp	.+244    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC00_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
    11de:	a5 e5       	ldi	r26, 0x55	; 85
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e5       	ldi	r30, 0x55	; 85
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	83 60       	ori	r24, 0x03	; 3
    11ea:	8c 93       	st	X, r24
    11ec:	72 c0       	rjmp	.+228    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	6f c0       	rjmp	.+222    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
		}
	}

	else if( Copy_u8IntNum == INT1 )											/********************************************************************/
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	8e 33       	cpi	r24, 0x3E	; 62
    11f8:	09 f0       	breq	.+2      	; 0x11fc <EXTI_enuSetSenseLevel+0xb2>
    11fa:	43 c0       	rjmp	.+134    	; 0x1282 <EXTI_enuSetSenseLevel+0x138>
	{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	TWO_BITS_MASK	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
    11fc:	a5 e5       	ldi	r26, 0x55	; 85
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e5 e5       	ldi	r30, 0x55	; 85
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	83 7f       	andi	r24, 0xF3	; 243
    1208:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3f 83       	std	Y+7, r19	; 0x07
    1212:	2e 83       	std	Y+6, r18	; 0x06
    1214:	8e 81       	ldd	r24, Y+6	; 0x06
    1216:	9f 81       	ldd	r25, Y+7	; 0x07
    1218:	88 33       	cpi	r24, 0x38	; 56
    121a:	91 05       	cpc	r25, r1
    121c:	b9 f0       	breq	.+46     	; 0x124c <EXTI_enuSetSenseLevel+0x102>
    121e:	2e 81       	ldd	r18, Y+6	; 0x06
    1220:	3f 81       	ldd	r19, Y+7	; 0x07
    1222:	29 33       	cpi	r18, 0x39	; 57
    1224:	31 05       	cpc	r19, r1
    1226:	3c f4       	brge	.+14     	; 0x1236 <EXTI_enuSetSenseLevel+0xec>
    1228:	8e 81       	ldd	r24, Y+6	; 0x06
    122a:	9f 81       	ldd	r25, Y+7	; 0x07
    122c:	87 33       	cpi	r24, 0x37	; 55
    122e:	91 05       	cpc	r25, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <EXTI_enuSetSenseLevel+0xea>
    1232:	4f c0       	rjmp	.+158    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
    1234:	23 c0       	rjmp	.+70     	; 0x127c <EXTI_enuSetSenseLevel+0x132>
    1236:	2e 81       	ldd	r18, Y+6	; 0x06
    1238:	3f 81       	ldd	r19, Y+7	; 0x07
    123a:	29 33       	cpi	r18, 0x39	; 57
    123c:	31 05       	cpc	r19, r1
    123e:	71 f0       	breq	.+28     	; 0x125c <EXTI_enuSetSenseLevel+0x112>
    1240:	8e 81       	ldd	r24, Y+6	; 0x06
    1242:	9f 81       	ldd	r25, Y+7	; 0x07
    1244:	8a 33       	cpi	r24, 0x3A	; 58
    1246:	91 05       	cpc	r25, r1
    1248:	89 f0       	breq	.+34     	; 0x126c <EXTI_enuSetSenseLevel+0x122>
    124a:	18 c0       	rjmp	.+48     	; 0x127c <EXTI_enuSetSenseLevel+0x132>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC10_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    124c:	a5 e5       	ldi	r26, 0x55	; 85
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e5       	ldi	r30, 0x55	; 85
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	84 60       	ori	r24, 0x04	; 4
    1258:	8c 93       	st	X, r24
    125a:	3b c0       	rjmp	.+118    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC11_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
    125c:	a5 e5       	ldi	r26, 0x55	; 85
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e5       	ldi	r30, 0x55	; 85
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	88 60       	ori	r24, 0x08	; 8
    1268:	8c 93       	st	X, r24
    126a:	33 c0       	rjmp	.+102    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC10_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
    126c:	a5 e5       	ldi	r26, 0x55	; 85
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e5       	ldi	r30, 0x55	; 85
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	8c 60       	ori	r24, 0x0C	; 12
    1278:	8c 93       	st	X, r24
    127a:	2b c0       	rjmp	.+86     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	28 c0       	rjmp	.+80     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else if( Copy_u8IntNum == INT2 )											/********************************************************************/
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	8f 33       	cpi	r24, 0x3F	; 63
    1286:	19 f5       	brne	.+70     	; 0x12ce <EXTI_enuSetSenseLevel+0x184>
	{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
		switch( Copy_u8SenseLevel )												/********************************************************************/
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3d 83       	std	Y+5, r19	; 0x05
    1290:	2c 83       	std	Y+4, r18	; 0x04
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	89 33       	cpi	r24, 0x39	; 57
    1298:	91 05       	cpc	r25, r1
    129a:	31 f0       	breq	.+12     	; 0x12a8 <EXTI_enuSetSenseLevel+0x15e>
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	3d 81       	ldd	r19, Y+5	; 0x05
    12a0:	2a 33       	cpi	r18, 0x3A	; 58
    12a2:	31 05       	cpc	r19, r1
    12a4:	49 f0       	breq	.+18     	; 0x12b8 <EXTI_enuSetSenseLevel+0x16e>
    12a6:	10 c0       	rjmp	.+32     	; 0x12c8 <EXTI_enuSetSenseLevel+0x17e>
		{																		/*																	*/
			case	FALLING_EDGE:	MCUCSR &= ~(BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
    12a8:	a4 e5       	ldi	r26, 0x54	; 84
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e4 e5       	ldi	r30, 0x54	; 84
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 7b       	andi	r24, 0xBF	; 191
    12b4:	8c 93       	st	X, r24
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCSR |=  (BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
    12b8:	a4 e5       	ldi	r26, 0x54	; 84
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e4 e5       	ldi	r30, 0x54	; 84
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 64       	ori	r24, 0x40	; 64
    12c4:	8c 93       	st	X, r24
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	09 f0       	breq	.+2      	; 0x12da <EXTI_enuSetSenseLevel+0x190>
    12d8:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    12da:	89 81       	ldd	r24, Y+1	; 0x01
}
    12dc:	29 96       	adiw	r28, 0x09	; 9
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <__vector_1>:
void __vector_1(void)__attribute__((signal));
void __vector_2(void)__attribute__((signal));
void __vector_3(void)__attribute__((signal));

void __vector_1(void)		//ISR	INT0
{
    12ee:	1f 92       	push	r1
    12f0:	0f 92       	push	r0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62

}
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_2>:

void __vector_2(void)		//ISR	INT1
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62

}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <__vector_3>:

void __vector_3(void)		//ISR	INT2
{
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	0f 92       	push	r0
    1336:	11 24       	eor	r1, r1
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62

}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	0f 92       	push	r0
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01

	//

	return Local_enuErrorState ;
    135c:	89 81       	ldd	r24, Y+1	; 0x01
}
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <DIO_enuSetPinDirection+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_enuSetPinDirection+0x8>
    136e:	00 d0       	rcall	.+0      	; 0x1370 <DIO_enuSetPinDirection+0xa>
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	8a 83       	std	Y+2, r24	; 0x02
    1376:	6b 83       	std	Y+3, r22	; 0x03
    1378:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	84 30       	cpi	r24, 0x04	; 4
    1382:	08 f0       	brcs	.+2      	; 0x1386 <DIO_enuSetPinDirection+0x20>
    1384:	d0 c0       	rjmp	.+416    	; 0x1526 <DIO_enuSetPinDirection+0x1c0>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	88 30       	cpi	r24, 0x08	; 8
    138a:	08 f0       	brcs	.+2      	; 0x138e <DIO_enuSetPinDirection+0x28>
    138c:	cc c0       	rjmp	.+408    	; 0x1526 <DIO_enuSetPinDirection+0x1c0>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	08 f0       	brcs	.+2      	; 0x1396 <DIO_enuSetPinDirection+0x30>
    1394:	c8 c0       	rjmp	.+400    	; 0x1526 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT )
	{
		switch (Copy_u8GroupID)
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3e 83       	std	Y+6, r19	; 0x06
    139e:	2d 83       	std	Y+5, r18	; 0x05
    13a0:	6d 81       	ldd	r22, Y+5	; 0x05
    13a2:	7e 81       	ldd	r23, Y+6	; 0x06
    13a4:	61 30       	cpi	r22, 0x01	; 1
    13a6:	71 05       	cpc	r23, r1
    13a8:	09 f4       	brne	.+2      	; 0x13ac <DIO_enuSetPinDirection+0x46>
    13aa:	41 c0       	rjmp	.+130    	; 0x142e <DIO_enuSetPinDirection+0xc8>
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	91 05       	cpc	r25, r1
    13b4:	34 f4       	brge	.+12     	; 0x13c2 <DIO_enuSetPinDirection+0x5c>
    13b6:	2d 81       	ldd	r18, Y+5	; 0x05
    13b8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ba:	21 15       	cp	r18, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	71 f0       	breq	.+28     	; 0x13dc <DIO_enuSetPinDirection+0x76>
    13c0:	b0 c0       	rjmp	.+352    	; 0x1522 <DIO_enuSetPinDirection+0x1bc>
    13c2:	6d 81       	ldd	r22, Y+5	; 0x05
    13c4:	7e 81       	ldd	r23, Y+6	; 0x06
    13c6:	62 30       	cpi	r22, 0x02	; 2
    13c8:	71 05       	cpc	r23, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <DIO_enuSetPinDirection+0x68>
    13cc:	59 c0       	rjmp	.+178    	; 0x1480 <DIO_enuSetPinDirection+0x11a>
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	83 30       	cpi	r24, 0x03	; 3
    13d4:	91 05       	cpc	r25, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <DIO_enuSetPinDirection+0x74>
    13d8:	7c c0       	rjmp	.+248    	; 0x14d2 <DIO_enuSetPinDirection+0x16c>
    13da:	a3 c0       	rjmp	.+326    	; 0x1522 <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    13dc:	aa e3       	ldi	r26, 0x3A	; 58
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	ea e3       	ldi	r30, 0x3A	; 58
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_enuSetPinDirection+0x92>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	2a 95       	dec	r18
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_enuSetPinDirection+0x8e>
    13fc:	80 95       	com	r24
    13fe:	84 23       	and	r24, r20
    1400:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction <<   Copy_u8PinID );
    1402:	aa e3       	ldi	r26, 0x3A	; 58
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	ea e3       	ldi	r30, 0x3A	; 58
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	b9 01       	movw	r22, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_enuSetPinDirection+0xbc>
    141e:	66 0f       	add	r22, r22
    1420:	77 1f       	adc	r23, r23
    1422:	8a 95       	dec	r24
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_enuSetPinDirection+0xb8>
    1426:	cb 01       	movw	r24, r22
    1428:	84 2b       	or	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	7a c0       	rjmp	.+244    	; 0x1522 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    142e:	a7 e3       	ldi	r26, 0x37	; 55
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e7 e3       	ldi	r30, 0x37	; 55
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_enuSetPinDirection+0xe4>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	2a 95       	dec	r18
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_enuSetPinDirection+0xe0>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction <<   Copy_u8PinID );
    1454:	a7 e3       	ldi	r26, 0x37	; 55
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e7 e3       	ldi	r30, 0x37	; 55
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	b9 01       	movw	r22, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_enuSetPinDirection+0x10e>
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	8a 95       	dec	r24
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_enuSetPinDirection+0x10a>
    1478:	cb 01       	movw	r24, r22
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	51 c0       	rjmp	.+162    	; 0x1522 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    1480:	a4 e3       	ldi	r26, 0x34	; 52
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e4 e3       	ldi	r30, 0x34	; 52
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_enuSetPinDirection+0x136>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	2a 95       	dec	r18
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_enuSetPinDirection+0x132>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction <<   Copy_u8PinID );
    14a6:	a4 e3       	ldi	r26, 0x34	; 52
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e4 e3       	ldi	r30, 0x34	; 52
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	b9 01       	movw	r22, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_enuSetPinDirection+0x160>
    14c2:	66 0f       	add	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_enuSetPinDirection+0x15c>
    14ca:	cb 01       	movw	r24, r22
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	28 c0       	rjmp	.+80     	; 0x1522 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    14d2:	a1 e3       	ldi	r26, 0x31	; 49
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e1 e3       	ldi	r30, 0x31	; 49
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <DIO_enuSetPinDirection+0x188>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	2a 95       	dec	r18
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <DIO_enuSetPinDirection+0x184>
    14f2:	80 95       	com	r24
    14f4:	84 23       	and	r24, r20
    14f6:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction <<   Copy_u8PinID );
    14f8:	a1 e3       	ldi	r26, 0x31	; 49
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e1 e3       	ldi	r30, 0x31	; 49
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	b9 01       	movw	r22, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_enuSetPinDirection+0x1b2>
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	8a 95       	dec	r24
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_enuSetPinDirection+0x1ae>
    151c:	cb 01       	movw	r24, r22
    151e:	84 2b       	or	r24, r20
    1520:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1522:	19 82       	std	Y+1, r1	; 0x01
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    1526:	82 e0       	ldi	r24, 0x02	; 2
    1528:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
}
    152c:	26 96       	adiw	r28, 0x06	; 6
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <DIO_enuSetPinValue+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <DIO_enuSetPinValue+0x8>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <DIO_enuSetPinValue+0xa>
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	6b 83       	std	Y+3, r22	; 0x03
    1550:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	84 30       	cpi	r24, 0x04	; 4
    155a:	08 f0       	brcs	.+2      	; 0x155e <DIO_enuSetPinValue+0x20>
    155c:	d3 c0       	rjmp	.+422    	; 0x1704 <DIO_enuSetPinValue+0x1c6>
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	88 30       	cpi	r24, 0x08	; 8
    1562:	08 f0       	brcs	.+2      	; 0x1566 <DIO_enuSetPinValue+0x28>
    1564:	cf c0       	rjmp	.+414    	; 0x1704 <DIO_enuSetPinValue+0x1c6>
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	20 f0       	brcs	.+8      	; 0x1574 <DIO_enuSetPinValue+0x36>
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	82 30       	cpi	r24, 0x02	; 2
    1570:	08 f0       	brcs	.+2      	; 0x1574 <DIO_enuSetPinValue+0x36>
    1572:	c8 c0       	rjmp	.+400    	; 0x1704 <DIO_enuSetPinValue+0x1c6>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ) )
	{
		switch (Copy_u8GroupID)
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3e 83       	std	Y+6, r19	; 0x06
    157c:	2d 83       	std	Y+5, r18	; 0x05
    157e:	6d 81       	ldd	r22, Y+5	; 0x05
    1580:	7e 81       	ldd	r23, Y+6	; 0x06
    1582:	61 30       	cpi	r22, 0x01	; 1
    1584:	71 05       	cpc	r23, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <DIO_enuSetPinValue+0x4c>
    1588:	41 c0       	rjmp	.+130    	; 0x160c <DIO_enuSetPinValue+0xce>
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	82 30       	cpi	r24, 0x02	; 2
    1590:	91 05       	cpc	r25, r1
    1592:	34 f4       	brge	.+12     	; 0x15a0 <DIO_enuSetPinValue+0x62>
    1594:	2d 81       	ldd	r18, Y+5	; 0x05
    1596:	3e 81       	ldd	r19, Y+6	; 0x06
    1598:	21 15       	cp	r18, r1
    159a:	31 05       	cpc	r19, r1
    159c:	71 f0       	breq	.+28     	; 0x15ba <DIO_enuSetPinValue+0x7c>
    159e:	b0 c0       	rjmp	.+352    	; 0x1700 <DIO_enuSetPinValue+0x1c2>
    15a0:	6d 81       	ldd	r22, Y+5	; 0x05
    15a2:	7e 81       	ldd	r23, Y+6	; 0x06
    15a4:	62 30       	cpi	r22, 0x02	; 2
    15a6:	71 05       	cpc	r23, r1
    15a8:	09 f4       	brne	.+2      	; 0x15ac <DIO_enuSetPinValue+0x6e>
    15aa:	59 c0       	rjmp	.+178    	; 0x165e <DIO_enuSetPinValue+0x120>
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	9e 81       	ldd	r25, Y+6	; 0x06
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	91 05       	cpc	r25, r1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <DIO_enuSetPinValue+0x7a>
    15b6:	7c c0       	rjmp	.+248    	; 0x16b0 <DIO_enuSetPinValue+0x172>
    15b8:	a3 c0       	rjmp	.+326    	; 0x1700 <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    15ba:	ab e3       	ldi	r26, 0x3B	; 59
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_enuSetPinValue+0x98>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	2a 95       	dec	r18
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_enuSetPinValue+0x94>
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value <<   Copy_u8PinID );
    15e0:	ab e3       	ldi	r26, 0x3B	; 59
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8c 81       	ldd	r24, Y+4	; 0x04
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	b9 01       	movw	r22, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_enuSetPinValue+0xc2>
    15fc:	66 0f       	add	r22, r22
    15fe:	77 1f       	adc	r23, r23
    1600:	8a 95       	dec	r24
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_enuSetPinValue+0xbe>
    1604:	cb 01       	movw	r24, r22
    1606:	84 2b       	or	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	7a c0       	rjmp	.+244    	; 0x1700 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    160c:	a8 e3       	ldi	r26, 0x38	; 56
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e8 e3       	ldi	r30, 0x38	; 56
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_enuSetPinValue+0xea>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	2a 95       	dec	r18
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_enuSetPinValue+0xe6>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value <<   Copy_u8PinID );
    1632:	a8 e3       	ldi	r26, 0x38	; 56
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e8 e3       	ldi	r30, 0x38	; 56
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8c 81       	ldd	r24, Y+4	; 0x04
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	b9 01       	movw	r22, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_enuSetPinValue+0x114>
    164e:	66 0f       	add	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	8a 95       	dec	r24
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_enuSetPinValue+0x110>
    1656:	cb 01       	movw	r24, r22
    1658:	84 2b       	or	r24, r20
    165a:	8c 93       	st	X, r24
    165c:	51 c0       	rjmp	.+162    	; 0x1700 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    165e:	a5 e3       	ldi	r26, 0x35	; 53
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e5 e3       	ldi	r30, 0x35	; 53
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	48 2f       	mov	r20, r24
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_enuSetPinValue+0x13c>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	2a 95       	dec	r18
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_enuSetPinValue+0x138>
    167e:	80 95       	com	r24
    1680:	84 23       	and	r24, r20
    1682:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value <<   Copy_u8PinID );
    1684:	a5 e3       	ldi	r26, 0x35	; 53
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e5 e3       	ldi	r30, 0x35	; 53
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	b9 01       	movw	r22, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_enuSetPinValue+0x166>
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	8a 95       	dec	r24
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <DIO_enuSetPinValue+0x162>
    16a8:	cb 01       	movw	r24, r22
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	28 c0       	rjmp	.+80     	; 0x1700 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    16b0:	a2 e3       	ldi	r26, 0x32	; 50
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e2 e3       	ldi	r30, 0x32	; 50
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_enuSetPinValue+0x18e>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	2a 95       	dec	r18
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_enuSetPinValue+0x18a>
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value <<   Copy_u8PinID );
    16d6:	a2 e3       	ldi	r26, 0x32	; 50
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e2 e3       	ldi	r30, 0x32	; 50
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	b9 01       	movw	r22, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_enuSetPinValue+0x1b8>
    16f2:	66 0f       	add	r22, r22
    16f4:	77 1f       	adc	r23, r23
    16f6:	8a 95       	dec	r24
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_enuSetPinValue+0x1b4>
    16fa:	cb 01       	movw	r24, r22
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1700:	19 82       	std	Y+1, r1	; 0x01
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    1708:	89 81       	ldd	r24, Y+1	; 0x01
}
    170a:	26 96       	adiw	r28, 0x06	; 6
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <DIO_enuTogglePinValue+0x6>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <DIO_enuTogglePinValue+0x8>
    1724:	0f 92       	push	r0
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	8a 83       	std	Y+2, r24	; 0x02
    172c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	08 f0       	brcs	.+2      	; 0x173a <DIO_enuTogglePinValue+0x1e>
    1738:	74 c0       	rjmp	.+232    	; 0x1822 <DIO_enuTogglePinValue+0x106>
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	88 30       	cpi	r24, 0x08	; 8
    173e:	08 f0       	brcs	.+2      	; 0x1742 <DIO_enuTogglePinValue+0x26>
    1740:	70 c0       	rjmp	.+224    	; 0x1822 <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	3d 83       	std	Y+5, r19	; 0x05
    174a:	2c 83       	std	Y+4, r18	; 0x04
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	91 05       	cpc	r25, r1
    1754:	49 f1       	breq	.+82     	; 0x17a8 <DIO_enuTogglePinValue+0x8c>
    1756:	2c 81       	ldd	r18, Y+4	; 0x04
    1758:	3d 81       	ldd	r19, Y+5	; 0x05
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	2c f4       	brge	.+10     	; 0x176a <DIO_enuTogglePinValue+0x4e>
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	9d 81       	ldd	r25, Y+5	; 0x05
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	61 f0       	breq	.+24     	; 0x1780 <DIO_enuTogglePinValue+0x64>
    1768:	5a c0       	rjmp	.+180    	; 0x181e <DIO_enuTogglePinValue+0x102>
    176a:	2c 81       	ldd	r18, Y+4	; 0x04
    176c:	3d 81       	ldd	r19, Y+5	; 0x05
    176e:	22 30       	cpi	r18, 0x02	; 2
    1770:	31 05       	cpc	r19, r1
    1772:	71 f1       	breq	.+92     	; 0x17d0 <DIO_enuTogglePinValue+0xb4>
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	91 05       	cpc	r25, r1
    177c:	e9 f1       	breq	.+122    	; 0x17f8 <DIO_enuTogglePinValue+0xdc>
    177e:	4f c0       	rjmp	.+158    	; 0x181e <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    1780:	ab e3       	ldi	r26, 0x3B	; 59
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_enuTogglePinValue+0x82>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <DIO_enuTogglePinValue+0x7e>
    17a2:	84 27       	eor	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	3b c0       	rjmp	.+118    	; 0x181e <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    17a8:	a8 e3       	ldi	r26, 0x38	; 56
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e8 e3       	ldi	r30, 0x38	; 56
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <DIO_enuTogglePinValue+0xaa>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <DIO_enuTogglePinValue+0xa6>
    17ca:	84 27       	eor	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	27 c0       	rjmp	.+78     	; 0x181e <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    17d0:	a5 e3       	ldi	r26, 0x35	; 53
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e5 e3       	ldi	r30, 0x35	; 53
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_enuTogglePinValue+0xd2>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_enuTogglePinValue+0xce>
    17f2:	84 27       	eor	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    17f8:	a2 e3       	ldi	r26, 0x32	; 50
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e2 e3       	ldi	r30, 0x32	; 50
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <DIO_enuTogglePinValue+0xfa>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <DIO_enuTogglePinValue+0xf6>
    181a:	84 27       	eor	r24, r20
    181c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    181e:	19 82       	std	Y+1, r1	; 0x01
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    1826:	89 81       	ldd	r24, Y+1	; 0x01
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	27 97       	sbiw	r28, 0x07	; 7
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	8a 83       	std	Y+2, r24	; 0x02
    184e:	6b 83       	std	Y+3, r22	; 0x03
    1850:	5d 83       	std	Y+5, r21	; 0x05
    1852:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	09 f4       	brne	.+2      	; 0x1862 <DIO_enuGetPinValue+0x2a>
    1860:	7d c0       	rjmp	.+250    	; 0x195c <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	84 30       	cpi	r24, 0x04	; 4
    1866:	08 f0       	brcs	.+2      	; 0x186a <DIO_enuGetPinValue+0x32>
    1868:	76 c0       	rjmp	.+236    	; 0x1956 <DIO_enuGetPinValue+0x11e>
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	88 30       	cpi	r24, 0x08	; 8
    186e:	08 f0       	brcs	.+2      	; 0x1872 <DIO_enuGetPinValue+0x3a>
    1870:	72 c0       	rjmp	.+228    	; 0x1956 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	3f 83       	std	Y+7, r19	; 0x07
    187a:	2e 83       	std	Y+6, r18	; 0x06
    187c:	4e 81       	ldd	r20, Y+6	; 0x06
    187e:	5f 81       	ldd	r21, Y+7	; 0x07
    1880:	41 30       	cpi	r20, 0x01	; 1
    1882:	51 05       	cpc	r21, r1
    1884:	59 f1       	breq	.+86     	; 0x18dc <DIO_enuGetPinValue+0xa4>
    1886:	8e 81       	ldd	r24, Y+6	; 0x06
    1888:	9f 81       	ldd	r25, Y+7	; 0x07
    188a:	82 30       	cpi	r24, 0x02	; 2
    188c:	91 05       	cpc	r25, r1
    188e:	34 f4       	brge	.+12     	; 0x189c <DIO_enuGetPinValue+0x64>
    1890:	2e 81       	ldd	r18, Y+6	; 0x06
    1892:	3f 81       	ldd	r19, Y+7	; 0x07
    1894:	21 15       	cp	r18, r1
    1896:	31 05       	cpc	r19, r1
    1898:	69 f0       	breq	.+26     	; 0x18b4 <DIO_enuGetPinValue+0x7c>
    189a:	5b c0       	rjmp	.+182    	; 0x1952 <DIO_enuGetPinValue+0x11a>
    189c:	4e 81       	ldd	r20, Y+6	; 0x06
    189e:	5f 81       	ldd	r21, Y+7	; 0x07
    18a0:	42 30       	cpi	r20, 0x02	; 2
    18a2:	51 05       	cpc	r21, r1
    18a4:	79 f1       	breq	.+94     	; 0x1904 <DIO_enuGetPinValue+0xcc>
    18a6:	8e 81       	ldd	r24, Y+6	; 0x06
    18a8:	9f 81       	ldd	r25, Y+7	; 0x07
    18aa:	83 30       	cpi	r24, 0x03	; 3
    18ac:	91 05       	cpc	r25, r1
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <DIO_enuGetPinValue+0x7a>
    18b0:	3d c0       	rjmp	.+122    	; 0x192c <DIO_enuGetPinValue+0xf4>
    18b2:	4f c0       	rjmp	.+158    	; 0x1952 <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( ( PINA >> Copy_u8PinID ) & DIO_BIT_MASK );
    18b4:	e9 e3       	ldi	r30, 0x39	; 57
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a9 01       	movw	r20, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_enuGetPinValue+0x94>
    18c8:	55 95       	asr	r21
    18ca:	47 95       	ror	r20
    18cc:	8a 95       	dec	r24
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_enuGetPinValue+0x90>
    18d0:	ca 01       	movw	r24, r20
    18d2:	81 70       	andi	r24, 0x01	; 1
    18d4:	ec 81       	ldd	r30, Y+4	; 0x04
    18d6:	fd 81       	ldd	r31, Y+5	; 0x05
    18d8:	80 83       	st	Z, r24
    18da:	3b c0       	rjmp	.+118    	; 0x1952 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( ( PINB >> Copy_u8PinID ) & DIO_BIT_MASK );
    18dc:	e6 e3       	ldi	r30, 0x36	; 54
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a9 01       	movw	r20, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_enuGetPinValue+0xbc>
    18f0:	55 95       	asr	r21
    18f2:	47 95       	ror	r20
    18f4:	8a 95       	dec	r24
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_enuGetPinValue+0xb8>
    18f8:	ca 01       	movw	r24, r20
    18fa:	81 70       	andi	r24, 0x01	; 1
    18fc:	ec 81       	ldd	r30, Y+4	; 0x04
    18fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1900:	80 83       	st	Z, r24
    1902:	27 c0       	rjmp	.+78     	; 0x1952 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( ( PINC >> Copy_u8PinID ) & DIO_BIT_MASK );
    1904:	e3 e3       	ldi	r30, 0x33	; 51
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a9 01       	movw	r20, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <DIO_enuGetPinValue+0xe4>
    1918:	55 95       	asr	r21
    191a:	47 95       	ror	r20
    191c:	8a 95       	dec	r24
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <DIO_enuGetPinValue+0xe0>
    1920:	ca 01       	movw	r24, r20
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	ec 81       	ldd	r30, Y+4	; 0x04
    1926:	fd 81       	ldd	r31, Y+5	; 0x05
    1928:	80 83       	st	Z, r24
    192a:	13 c0       	rjmp	.+38     	; 0x1952 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( ( PIND >> Copy_u8PinID ) & DIO_BIT_MASK );
    192c:	e0 e3       	ldi	r30, 0x30	; 48
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	88 2f       	mov	r24, r24
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a9 01       	movw	r20, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <DIO_enuGetPinValue+0x10c>
    1940:	55 95       	asr	r21
    1942:	47 95       	ror	r20
    1944:	8a 95       	dec	r24
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <DIO_enuGetPinValue+0x108>
    1948:	ca 01       	movw	r24, r20
    194a:	81 70       	andi	r24, 0x01	; 1
    194c:	ec 81       	ldd	r30, Y+4	; 0x04
    194e:	fd 81       	ldd	r31, Y+5	; 0x05
    1950:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1952:	19 82       	std	Y+1, r1	; 0x01
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    1960:	89 81       	ldd	r24, Y+1	; 0x01
}
    1962:	27 96       	adiw	r28, 0x07	; 7
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <Switch_enuInit>:
extern Switch_t Switch[];
extern u8 Switch_u8SwitchZero;


ES_t Switch_enuInit(void)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <Switch_enuInit+0x6>
    197a:	00 d0       	rcall	.+0      	; 0x197c <Switch_enuInit+0x8>
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	8a 83       	std	Y+2, r24	; 0x02
    1984:	4d c0       	rjmp	.+154    	; 0x1a20 <Switch_enuInit+0xac>

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
	{
		Local_enuAerror[0] = DIO_enuSetPinDirection	(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , DIO_u8INPUT);
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	fc 01       	movw	r30, r24
    1996:	e0 52       	subi	r30, 0x20	; 32
    1998:	fe 4f       	sbci	r31, 0xFE	; 254
    199a:	20 81       	ld	r18, Z
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	fc 01       	movw	r30, r24
    19ac:	ef 51       	subi	r30, 0x1F	; 31
    19ae:	fe 4f       	sbci	r31, 0xFE	; 254
    19b0:	90 81       	ld	r25, Z
    19b2:	82 2f       	mov	r24, r18
    19b4:	69 2f       	mov	r22, r25
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
    19bc:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	fc 01       	movw	r30, r24
    19ce:	e0 52       	subi	r30, 0x20	; 32
    19d0:	fe 4f       	sbci	r31, 0xFE	; 254
    19d2:	30 81       	ld	r19, Z
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	88 2f       	mov	r24, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	fc 01       	movw	r30, r24
    19e4:	ef 51       	subi	r30, 0x1F	; 31
    19e6:	fe 4f       	sbci	r31, 0xFE	; 254
    19e8:	20 81       	ld	r18, Z
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	fc 01       	movw	r30, r24
    19fc:	e0 52       	subi	r30, 0x20	; 32
    19fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1a00:	90 81       	ld	r25, Z
    1a02:	83 2f       	mov	r24, r19
    1a04:	62 2f       	mov	r22, r18
    1a06:	49 2f       	mov	r20, r25
    1a08:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    1a0c:	8c 83       	std	Y+4, r24	; 0x04

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	88 23       	and	r24, r24
    1a12:	61 f4       	brne	.+24     	; 0x1a2c <Switch_enuInit+0xb8>
    1a14:	8c 81       	ldd	r24, Y+4	; 0x04
    1a16:	88 23       	and	r24, r24
    1a18:	49 f4       	brne	.+18     	; 0x1a2c <Switch_enuInit+0xb8>

ES_t Switch_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	8f 5f       	subi	r24, 0xFF	; 255
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	90 91 de 01 	lds	r25, 0x01DE
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	89 17       	cp	r24, r25
    1a28:	08 f4       	brcc	.+2      	; 0x1a2c <Switch_enuInit+0xb8>
    1a2a:	ad cf       	rjmp	.-166    	; 0x1986 <Switch_enuInit+0x12>
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
	}

	if (Local_enuAerror[0] == ES_OK && Local_enuAerror[1] == ES_OK)
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	88 23       	and	r24, r24
    1a30:	21 f4       	brne	.+8      	; 0x1a3a <Switch_enuInit+0xc6>
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	88 23       	and	r24, r24
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <Switch_enuInit+0xc6>
		Local_enuErrorState = ES_OK;
    1a38:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <Switch_enuGetPressed>:

ES_t Switch_enuGetPressed (u8 Copy_u8SwitchNum ,u8 * Copy_pu8SwitchValue)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <Switch_enuGetPressed+0x6>
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <Switch_enuGetPressed+0x8>
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	8a 83       	std	Y+2, r24	; 0x02
    1a58:	7c 83       	std	Y+4, r23	; 0x04
    1a5a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8SwitchNum-=Switch_u8SwitchZero) < Switch_u8SwitchesMaxNum )
    1a60:	90 91 df 01 	lds	r25, 0x01DF
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	89 1b       	sub	r24, r25
    1a68:	8a 83       	std	Y+2, r24	; 0x02
    1a6a:	90 91 de 01 	lds	r25, 0x01DE
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	89 17       	cp	r24, r25
    1a72:	f8 f4       	brcc	.+62     	; 0x1ab2 <Switch_enuGetPressed+0x68>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Switch[Copy_u8SwitchNum].sw_Grp , Switch[Copy_u8SwitchNum].sw_Pin , Copy_pu8SwitchValue);
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	fc 01       	movw	r30, r24
    1a84:	e0 52       	subi	r30, 0x20	; 32
    1a86:	fe 4f       	sbci	r31, 0xFE	; 254
    1a88:	40 81       	ld	r20, Z
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	fc 01       	movw	r30, r24
    1a9a:	ef 51       	subi	r30, 0x1F	; 31
    1a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9e:	90 81       	ld	r25, Z
    1aa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa2:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa4:	84 2f       	mov	r24, r20
    1aa6:	69 2f       	mov	r22, r25
    1aa8:	a9 01       	movw	r20, r18
    1aaa:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_enuGetPinValue>
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <Switch_enuGetPressed+0x6c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <SevSeg_enuInit>:
extern u8 ModuleValuePins;
extern u8 ModuleControlPins;
extern SSegModule_t SSegModule[];

ES_t SevSeg_enuInit(void)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <SevSeg_enuInit+0x6>
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <SevSeg_enuInit+0x8>
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    1ad6:	8b e0       	ldi	r24, 0x0B	; 11
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
    1ada:	bc c0       	rjmp	.+376    	; 0x1c54 <SevSeg_enuInit+0x18e>
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	8b 50       	subi	r24, 0x0B	; 11
    1ae0:	8a 83       	std	Y+2, r24	; 0x02
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    1ae2:	19 82       	std	Y+1, r1	; 0x01
    1ae4:	3a c0       	rjmp	.+116    	; 0x1b5a <SevSeg_enuInit+0x94>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	48 2f       	mov	r20, r24
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	c9 01       	movw	r24, r18
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	82 1b       	sub	r24, r18
    1b02:	93 0b       	sbc	r25, r19
    1b04:	84 0f       	add	r24, r20
    1b06:	95 1f       	adc	r25, r21
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	e1 51       	subi	r30, 0x11	; 17
    1b10:	fe 4f       	sbci	r31, 0xFE	; 254
    1b12:	60 81       	ld	r22, Z
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	c9 01       	movw	r24, r18
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	82 1b       	sub	r24, r18
    1b30:	93 0b       	sbc	r25, r19
    1b32:	84 0f       	add	r24, r20
    1b34:	95 1f       	adc	r25, r21
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	e0 51       	subi	r30, 0x10	; 16
    1b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b40:	90 81       	ld	r25, Z
    1b42:	86 2f       	mov	r24, r22
    1b44:	69 2f       	mov	r22, r25
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
    1b4c:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	88 23       	and	r24, r24
    1b52:	41 f4       	brne	.+16     	; 0x1b64 <SevSeg_enuInit+0x9e>
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	90 91 ed 01 	lds	r25, 0x01ED
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	89 17       	cp	r24, r25
    1b62:	08 f2       	brcs	.-126    	; 0x1ae6 <SevSeg_enuInit+0x20>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
		if( Local_enuErrorState == ES_OK)
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	88 23       	and	r24, r24
    1b68:	61 f5       	brne	.+88     	; 0x1bc2 <SevSeg_enuInit+0xfc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9c 01       	movw	r18, r24
    1b72:	22 0f       	add	r18, r18
    1b74:	33 1f       	adc	r19, r19
    1b76:	c9 01       	movw	r24, r18
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	82 1b       	sub	r24, r18
    1b86:	93 0b       	sbc	r25, r19
    1b88:	fc 01       	movw	r30, r24
    1b8a:	e9 50       	subi	r30, 0x09	; 9
    1b8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b8e:	40 81       	ld	r20, Z
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9c 01       	movw	r18, r24
    1b98:	22 0f       	add	r18, r18
    1b9a:	33 1f       	adc	r19, r19
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	82 1b       	sub	r24, r18
    1bac:	93 0b       	sbc	r25, r19
    1bae:	fc 01       	movw	r30, r24
    1bb0:	e8 50       	subi	r30, 0x08	; 8
    1bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb4:	90 81       	ld	r25, Z
    1bb6:	84 2f       	mov	r24, r20
    1bb8:	69 2f       	mov	r22, r25
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
    1bc0:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    1bc2:	19 82       	std	Y+1, r1	; 0x01
    1bc4:	3b c0       	rjmp	.+118    	; 0x1c3c <SevSeg_enuInit+0x176>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	48 2f       	mov	r20, r24
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	c9 01       	movw	r24, r18
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	82 1b       	sub	r24, r18
    1be2:	93 0b       	sbc	r25, r19
    1be4:	84 0f       	add	r24, r20
    1be6:	95 1f       	adc	r25, r21
    1be8:	05 96       	adiw	r24, 0x05	; 5
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e1 51       	subi	r30, 0x11	; 17
    1bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf4:	60 81       	ld	r22, Z
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	48 2f       	mov	r20, r24
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	c9 01       	movw	r24, r18
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	82 1b       	sub	r24, r18
    1c12:	93 0b       	sbc	r25, r19
    1c14:	84 0f       	add	r24, r20
    1c16:	95 1f       	adc	r25, r21
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	e6 50       	subi	r30, 0x06	; 6
    1c20:	fe 4f       	sbci	r31, 0xFE	; 254
    1c22:	90 81       	ld	r25, Z
    1c24:	86 2f       	mov	r24, r22
    1c26:	69 2f       	mov	r22, r25
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
    1c2e:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    1c30:	8c 81       	ldd	r24, Y+4	; 0x04
    1c32:	88 23       	and	r24, r24
    1c34:	61 f4       	brne	.+24     	; 0x1c4e <SevSeg_enuInit+0x188>
		if( Local_enuErrorState == ES_OK)
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	8f 5f       	subi	r24, 0xFF	; 255
    1c3a:	89 83       	std	Y+1, r24	; 0x01
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	88 23       	and	r24, r24
    1c40:	31 f4       	brne	.+12     	; 0x1c4e <SevSeg_enuInit+0x188>
    1c42:	90 91 ee 01 	lds	r25, 0x01EE
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	89 17       	cp	r24, r25
    1c4a:	08 f4       	brcc	.+2      	; 0x1c4e <SevSeg_enuInit+0x188>
    1c4c:	bc cf       	rjmp	.-136    	; 0x1bc6 <SevSeg_enuInit+0x100>
ES_t SevSeg_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	8f 5f       	subi	r24, 0xFF	; 255
    1c52:	8b 83       	std	Y+3, r24	; 0x03
    1c54:	90 91 ec 01 	lds	r25, 0x01EC
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	98 17       	cp	r25, r24
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <SevSeg_enuInit+0x19a>
    1c5e:	3e cf       	rjmp	.-388    	; 0x1adc <SevSeg_enuInit+0x16>
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
	}

	return Local_enuErrorState ;//DONE
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <SevSeg_enuSetDigitValue>:
ES_t SevSeg_enuSetDigitValue(u8 Copy_u8ModuleNum , u8 Copy_u8SevSegDigitValue)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <SevSeg_enuSetDigitValue+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <SevSeg_enuSetDigitValue+0x8>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
    1c7e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK ;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	8b 50       	subi	r24, 0x0B	; 11
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	90 91 ec 01 	lds	r25, 0x01EC
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	89 17       	cp	r24, r25
    1c92:	08 f0       	brcs	.+2      	; 0x1c96 <SevSeg_enuSetDigitValue+0x26>
    1c94:	59 c0       	rjmp	.+178    	; 0x1d48 <SevSeg_enuSetDigitValue+0xd8>
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
    1c96:	8c 81       	ldd	r24, Y+4	; 0x04
    1c98:	8a 30       	cpi	r24, 0x0A	; 10
    1c9a:	08 f0       	brcs	.+2      	; 0x1c9e <SevSeg_enuSetDigitValue+0x2e>
    1c9c:	52 c0       	rjmp	.+164    	; 0x1d42 <SevSeg_enuSetDigitValue+0xd2>
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    1c9e:	19 82       	std	Y+1, r1	; 0x01
    1ca0:	49 c0       	rjmp	.+146    	; 0x1d34 <SevSeg_enuSetDigitValue+0xc4>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputGrp ,
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	48 2f       	mov	r20, r24
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	c9 01       	movw	r24, r18
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	82 1b       	sub	r24, r18
    1cbe:	93 0b       	sbc	r25, r19
    1cc0:	84 0f       	add	r24, r20
    1cc2:	95 1f       	adc	r25, r21
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	fc 01       	movw	r30, r24
    1cca:	e1 51       	subi	r30, 0x11	; 17
    1ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cce:	60 81       	ld	r22, Z
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	48 2f       	mov	r20, r24
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	c9 01       	movw	r24, r18
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	82 1b       	sub	r24, r18
    1cec:	93 0b       	sbc	r25, r19
    1cee:	84 0f       	add	r24, r20
    1cf0:	95 1f       	adc	r25, r21
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	e0 51       	subi	r30, 0x10	; 16
    1cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfc:	40 81       	ld	r20, Z
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	f9 01       	movw	r30, r18
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <SevSeg_enuSetDigitValue+0xa2>
    1d0e:	f5 95       	asr	r31
    1d10:	e7 95       	ror	r30
    1d12:	8a 95       	dec	r24
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <SevSeg_enuSetDigitValue+0x9e>
    1d16:	cf 01       	movw	r24, r30
    1d18:	98 2f       	mov	r25, r24
    1d1a:	91 70       	andi	r25, 0x01	; 1
    1d1c:	86 2f       	mov	r24, r22
    1d1e:	64 2f       	mov	r22, r20
    1d20:	49 2f       	mov	r20, r25
    1d22:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    1d26:	8a 83       	std	Y+2, r24	; 0x02
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	88 23       	and	r24, r24
    1d2c:	79 f4       	brne	.+30     	; 0x1d4c <SevSeg_enuSetDigitValue+0xdc>

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	90 91 ed 01 	lds	r25, 0x01ED
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	89 17       	cp	r24, r25
    1d3c:	08 f4       	brcc	.+2      	; 0x1d40 <SevSeg_enuSetDigitValue+0xd0>
    1d3e:	b1 cf       	rjmp	.-158    	; 0x1ca2 <SevSeg_enuSetDigitValue+0x32>
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <SevSeg_enuSetDigitValue+0xdc>
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <SevSeg_enuSetDigitValue+0xdc>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	8a 83       	std	Y+2, r24	; 0x02


	return Local_enuErrorState ;//DONE
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <SevSeg_enuSetDIPValue>:

ES_t SevSeg_enuSetDIPValue(u8 Copy_u8ModuleNum ,u8 Copy_u8SevSegDIPValue)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <SevSeg_enuSetDIPValue+0x6>
    1d62:	0f 92       	push	r0
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	8a 83       	std	Y+2, r24	; 0x02
    1d6a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	8b 50       	subi	r24, 0x0B	; 11
    1d74:	8a 83       	std	Y+2, r24	; 0x02
    1d76:	90 91 ec 01 	lds	r25, 0x01EC
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	89 17       	cp	r24, r25
    1d7e:	b0 f5       	brcc	.+108    	; 0x1dec <SevSeg_enuSetDIPValue+0x90>
	{
		if( Copy_u8SevSegDIPValue == DIP_ON ||Copy_u8SevSegDIPValue == DIP_OFF )
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	19 f0       	breq	.+6      	; 0x1d8c <SevSeg_enuSetDIPValue+0x30>
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	88 23       	and	r24, r24
    1d8a:	69 f5       	brne	.+90     	; 0x1de6 <SevSeg_enuSetDIPValue+0x8a>
		{
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].DIP_Conf.InputGrp ,
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9c 01       	movw	r18, r24
    1d94:	22 0f       	add	r18, r18
    1d96:	33 1f       	adc	r19, r19
    1d98:	c9 01       	movw	r24, r18
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	82 1b       	sub	r24, r18
    1da8:	93 0b       	sbc	r25, r19
    1daa:	fc 01       	movw	r30, r24
    1dac:	e9 50       	subi	r30, 0x09	; 9
    1dae:	fe 4f       	sbci	r31, 0xFE	; 254
    1db0:	40 81       	ld	r20, Z
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9c 01       	movw	r18, r24
    1dba:	22 0f       	add	r18, r18
    1dbc:	33 1f       	adc	r19, r19
    1dbe:	c9 01       	movw	r24, r18
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	82 1b       	sub	r24, r18
    1dce:	93 0b       	sbc	r25, r19
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	e8 50       	subi	r30, 0x08	; 8
    1dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd6:	90 81       	ld	r25, Z
    1dd8:	84 2f       	mov	r24, r20
    1dda:	69 2f       	mov	r22, r25
    1ddc:	4b 81       	ldd	r20, Y+3	; 0x03
    1dde:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	05 c0       	rjmp	.+10     	; 0x1df0 <SevSeg_enuSetDIPValue+0x94>
														SSegModule[Copy_u8ModuleNum].DIP_Conf.InputPin  , Copy_u8SevSegDIPValue );
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <SevSeg_enuSetDIPValue+0x94>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <SevSeg_enuFrameDelay>:

ES_t SevSeg_enuFrameDelay(u8 Copy_u8SevSegTotalModules, u8 *Copy_pu8SevSegModuleDelay)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <SevSeg_enuFrameDelay+0x6>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <SevSeg_enuFrameDelay+0x8>
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
    1e0c:	7c 83       	std	Y+4, r23	; 0x04
    1e0e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8SevSegTotalModules <= SevSeg_u8MaxModules)
    1e14:	90 91 ec 01 	lds	r25, 0x01EC
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	98 17       	cp	r25, r24
    1e1c:	98 f0       	brcs	.+38     	; 0x1e44 <SevSeg_enuFrameDelay+0x46>
	{

		*Copy_pu8SevSegModuleDelay = SevSeg_u8MODULE_DELAY( Copy_u8SevSegTotalModules );
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	88 2f       	mov	r24, r24
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	ac 01       	movw	r20, r24
    1e26:	4d 5e       	subi	r20, 0xED	; 237
    1e28:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	ca 01       	movw	r24, r20
    1e32:	b9 01       	movw	r22, r18
    1e34:	0e 94 6d 22 	call	0x44da	; 0x44da <__divmodhi4>
    1e38:	cb 01       	movw	r24, r22
    1e3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e3e:	80 83       	st	Z, r24

		Local_enuErrorState=ES_OK;
    1e40:	19 82       	std	Y+1, r1	; 0x01
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <SevSeg_enuFrameDelay+0x4a>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <SevSeg_enuModuleControl>:

ES_t SevSeg_enuModuleControl(u8 Copy_u8SevSegModuleNum , u8 Copy_u8SevSegModuleStatus)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	27 97       	sbiw	r28, 0x07	; 7
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	8c 83       	std	Y+4, r24	; 0x04
    1e6e:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Output;

	if( Copy_u8SevSegModuleStatus == MODULE_DISABLE || Copy_u8SevSegModuleStatus == MODULE_ENABLE )
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	8d 30       	cpi	r24, 0x0D	; 13
    1e78:	21 f0       	breq	.+8      	; 0x1e82 <SevSeg_enuModuleControl+0x2a>
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	8e 30       	cpi	r24, 0x0E	; 14
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <SevSeg_enuModuleControl+0x2a>
    1e80:	64 c0       	rjmp	.+200    	; 0x1f4a <SevSeg_enuModuleControl+0xf2>
	{
		if( (Copy_u8SevSegModuleNum -= MODULE_1)< SevSeg_u8MaxModules )
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	8b 50       	subi	r24, 0x0B	; 11
    1e86:	8c 83       	std	Y+4, r24	; 0x04
    1e88:	90 91 ec 01 	lds	r25, 0x01EC
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	89 17       	cp	r24, r25
    1e90:	08 f0       	brcs	.+2      	; 0x1e94 <SevSeg_enuModuleControl+0x3c>
    1e92:	58 c0       	rjmp	.+176    	; 0x1f44 <SevSeg_enuModuleControl+0xec>
		{
			switch( Copy_u8SevSegModuleStatus )
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	3f 83       	std	Y+7, r19	; 0x07
    1e9c:	2e 83       	std	Y+6, r18	; 0x06
    1e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea2:	8d 30       	cpi	r24, 0x0D	; 13
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	31 f0       	breq	.+12     	; 0x1eb4 <SevSeg_enuModuleControl+0x5c>
    1ea8:	2e 81       	ldd	r18, Y+6	; 0x06
    1eaa:	3f 81       	ldd	r19, Y+7	; 0x07
    1eac:	2e 30       	cpi	r18, 0x0E	; 14
    1eae:	31 05       	cpc	r19, r1
    1eb0:	19 f0       	breq	.+6      	; 0x1eb8 <SevSeg_enuModuleControl+0x60>
    1eb2:	04 c0       	rjmp	.+8      	; 0x1ebc <SevSeg_enuModuleControl+0x64>
			{
				case MODULE_DISABLE : Local_u8Output = DIO_u8LOW;
    1eb4:	1a 82       	std	Y+2, r1	; 0x02
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <SevSeg_enuModuleControl+0x64>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	8a 83       	std	Y+2, r24	; 0x02
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    1ebc:	19 82       	std	Y+1, r1	; 0x01
    1ebe:	3b c0       	rjmp	.+118    	; 0x1f36 <SevSeg_enuModuleControl+0xde>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	48 2f       	mov	r20, r24
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	c9 01       	movw	r24, r18
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	82 1b       	sub	r24, r18
    1edc:	93 0b       	sbc	r25, r19
    1ede:	84 0f       	add	r24, r20
    1ee0:	95 1f       	adc	r25, r21
    1ee2:	05 96       	adiw	r24, 0x05	; 5
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e1 51       	subi	r30, 0x11	; 17
    1eec:	fe 4f       	sbci	r31, 0xFE	; 254
    1eee:	60 81       	ld	r22, Z
    1ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	48 2f       	mov	r20, r24
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	c9 01       	movw	r24, r18
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	82 1b       	sub	r24, r18
    1f0c:	93 0b       	sbc	r25, r19
    1f0e:	84 0f       	add	r24, r20
    1f10:	95 1f       	adc	r25, r21
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	fc 01       	movw	r30, r24
    1f18:	e6 50       	subi	r30, 0x06	; 6
    1f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1c:	90 81       	ld	r25, Z
    1f1e:	86 2f       	mov	r24, r22
    1f20:	69 2f       	mov	r22, r25
    1f22:	4a 81       	ldd	r20, Y+2	; 0x02
    1f24:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    1f28:	8b 83       	std	Y+3, r24	; 0x03
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	88 23       	and	r24, r24
    1f2e:	79 f4       	brne	.+30     	; 0x1f4e <SevSeg_enuModuleControl+0xf6>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	8f 5f       	subi	r24, 0xFF	; 255
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	90 91 ee 01 	lds	r25, 0x01EE
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	89 17       	cp	r24, r25
    1f3e:	08 f4       	brcc	.+2      	; 0x1f42 <SevSeg_enuModuleControl+0xea>
    1f40:	bf cf       	rjmp	.-130    	; 0x1ec0 <SevSeg_enuModuleControl+0x68>
    1f42:	05 c0       	rjmp	.+10     	; 0x1f4e <SevSeg_enuModuleControl+0xf6>
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else	Local_enuErrorState = ES_OUT_RANGE;
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	8b 83       	std	Y+3, r24	; 0x03
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <SevSeg_enuModuleControl+0xf6>
	}
	else	Local_enuErrorState = ES_OUT_RANGE;
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;//DONE
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f50:	27 96       	adiw	r28, 0x07	; 7
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <LD_enuInit>:

extern LD_t LD[];


ES_t LD_enuInit(void)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <LD_enuInit+0x6>
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <LD_enuInit+0x8>
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	8a 83       	std	Y+2, r24	; 0x02

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
    1f72:	80 91 0c 02 	lds	r24, 0x020C
    1f76:	81 34       	cpi	r24, 0x41	; 65
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <LD_enuInit+0x1a>
    1f7a:	41 c0       	rjmp	.+130    	; 0x1ffe <LD_enuInit+0x9c>
    1f7c:	80 91 0c 02 	lds	r24, 0x020C
    1f80:	82 34       	cpi	r24, 0x42	; 66
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <LD_enuInit+0x24>
    1f84:	4a c0       	rjmp	.+148    	; 0x201a <LD_enuInit+0xb8>
    1f86:	3b c0       	rjmp	.+118    	; 0x1ffe <LD_enuInit+0x9c>
	{
		for(u8 Local_u8Iter; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
		{
			Local_AenuStatus[0] = DIO_enuSetPinDirection	( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , DIO_u8OUTPUT);
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	fc 01       	movw	r30, r24
    1f94:	e2 5f       	subi	r30, 0xF2	; 242
    1f96:	fd 4f       	sbci	r31, 0xFD	; 253
    1f98:	20 81       	ld	r18, Z
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	e1 5f       	subi	r30, 0xF1	; 241
    1fa8:	fd 4f       	sbci	r31, 0xFD	; 253
    1faa:	90 81       	ld	r25, Z
    1fac:	82 2f       	mov	r24, r18
    1fae:	69 2f       	mov	r22, r25
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
			Local_AenuStatus[1] = DIO_enuSetPinValue		( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8Off);
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	88 2f       	mov	r24, r24
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e2 5f       	subi	r30, 0xF2	; 242
    1fc6:	fd 4f       	sbci	r31, 0xFD	; 253
    1fc8:	30 81       	ld	r19, Z
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	e1 5f       	subi	r30, 0xF1	; 241
    1fd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fda:	90 81       	ld	r25, Z
    1fdc:	20 91 3e 02 	lds	r18, 0x023E
    1fe0:	83 2f       	mov	r24, r19
    1fe2:	69 2f       	mov	r22, r25
    1fe4:	42 2f       	mov	r20, r18
    1fe6:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    1fea:	8c 83       	std	Y+4, r24	; 0x04

			if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	88 23       	and	r24, r24
    1ff0:	61 f4       	brne	.+24     	; 0x200a <LD_enuInit+0xa8>
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	88 23       	and	r24, r24
    1ff6:	49 f4       	brne	.+18     	; 0x200a <LD_enuInit+0xa8>
{
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
	{
		for(u8 Local_u8Iter; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	8f 5f       	subi	r24, 0xFF	; 255
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	90 91 0b 02 	lds	r25, 0x020B
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	89 17       	cp	r24, r25
    2006:	08 f4       	brcc	.+2      	; 0x200a <LD_enuInit+0xa8>
    2008:	bf cf       	rjmp	.-130    	; 0x1f88 <LD_enuInit+0x26>
			Local_AenuStatus[1] = DIO_enuSetPinValue		( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8Off);

			if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
		}

		if(Local_AenuStatus[0] == ES_OK && Local_AenuStatus[1] == ES_OK)
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	88 23       	and	r24, r24
    200e:	39 f4       	brne	.+14     	; 0x201e <LD_enuInit+0xbc>
    2010:	8c 81       	ldd	r24, Y+4	; 0x04
    2012:	88 23       	and	r24, r24
    2014:	21 f4       	brne	.+8      	; 0x201e <LD_enuInit+0xbc>
			Local_enuErrorStatus = ES_OK;
    2016:	1a 82       	std	Y+2, r1	; 0x02
    2018:	02 c0       	rjmp	.+4      	; 0x201e <LD_enuInit+0xbc>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorStatus;
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <LD_enuSetState>:

ES_t LD_enuSetState(u8 Copy_u8LD_Num ,u8 Copy_u8LDSetValue)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <LD_enuSetState+0x6>
    2034:	0f 92       	push	r0
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	8a 83       	std	Y+2, r24	; 0x02
    203c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK ;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	89 83       	std	Y+1, r24	; 0x01

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
    2042:	80 91 0c 02 	lds	r24, 0x020C
    2046:	81 34       	cpi	r24, 0x41	; 65
    2048:	21 f0       	breq	.+8      	; 0x2052 <LD_enuSetState+0x24>
    204a:	80 91 0c 02 	lds	r24, 0x020C
    204e:	82 34       	cpi	r24, 0x42	; 66
    2050:	71 f5       	brne	.+92     	; 0x20ae <LD_enuSetState+0x80>
	{
		if( Copy_u8LD_Num < LD_u8LD_MaxNum)
    2052:	90 91 0b 02 	lds	r25, 0x020B
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	89 17       	cp	r24, r25
    205a:	30 f5       	brcc	.+76     	; 0x20a8 <LD_enuSetState+0x7a>
		{
			if( Copy_u8LDSetValue == LD_u8On || Copy_u8LDSetValue == LD_u8Off )
    205c:	90 91 0d 02 	lds	r25, 0x020D
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	89 17       	cp	r24, r25
    2064:	29 f0       	breq	.+10     	; 0x2070 <LD_enuSetState+0x42>
    2066:	90 91 3e 02 	lds	r25, 0x023E
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	89 17       	cp	r24, r25
    206e:	c9 f4       	brne	.+50     	; 0x20a2 <LD_enuSetState+0x74>
			{
				Local_enuErrorStatus = DIO_enuSetPinValue(LD[Copy_u8LD_Num].LD_Grp , LD[Copy_u8LD_Num].LD_Pin , Copy_u8LDSetValue);
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	fc 01       	movw	r30, r24
    207c:	e2 5f       	subi	r30, 0xF2	; 242
    207e:	fd 4f       	sbci	r31, 0xFD	; 253
    2080:	20 81       	ld	r18, Z
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	fc 01       	movw	r30, r24
    208e:	e1 5f       	subi	r30, 0xF1	; 241
    2090:	fd 4f       	sbci	r31, 0xFD	; 253
    2092:	90 81       	ld	r25, Z
    2094:	82 2f       	mov	r24, r18
    2096:	69 2f       	mov	r22, r25
    2098:	4b 81       	ldd	r20, Y+3	; 0x03
    209a:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	08 c0       	rjmp	.+16     	; 0x20b2 <LD_enuSetState+0x84>
			}
			else Local_enuErrorStatus = ES_OUT_RANGE;
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	05 c0       	rjmp	.+10     	; 0x20b2 <LD_enuSetState+0x84>
		}
		else Local_enuErrorStatus = ES_OUT_RANGE;
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <LD_enuSetState+0x84>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <LCD_enuInit>:
#include "LCD_priv.h"

#include <util/delay.h>

ES_t LCD_enuInit(void)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	ab 97       	sbiw	r28, 0x2b	; 43
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	8b a7       	std	Y+43, r24	; 0x2b
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a0 ef       	ldi	r26, 0xF0	; 240
    20de:	b1 e4       	ldi	r27, 0x41	; 65
    20e0:	8f a3       	std	Y+39, r24	; 0x27
    20e2:	98 a7       	std	Y+40, r25	; 0x28
    20e4:	a9 a7       	std	Y+41, r26	; 0x29
    20e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ea:	78 a5       	ldd	r23, Y+40	; 0x28
    20ec:	89 a5       	ldd	r24, Y+41	; 0x29
    20ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	4a e7       	ldi	r20, 0x7A	; 122
    20f6:	55 e4       	ldi	r21, 0x45	; 69
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8b a3       	std	Y+35, r24	; 0x23
    2102:	9c a3       	std	Y+36, r25	; 0x24
    2104:	ad a3       	std	Y+37, r26	; 0x25
    2106:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2108:	6b a1       	ldd	r22, Y+35	; 0x23
    210a:	7c a1       	ldd	r23, Y+36	; 0x24
    210c:	8d a1       	ldd	r24, Y+37	; 0x25
    210e:	9e a1       	ldd	r25, Y+38	; 0x26
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	2c f4       	brge	.+10     	; 0x212a <LCD_enuInit+0x6a>
		__ticks = 1;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9a a3       	std	Y+34, r25	; 0x22
    2126:	89 a3       	std	Y+33, r24	; 0x21
    2128:	3f c0       	rjmp	.+126    	; 0x21a8 <LCD_enuInit+0xe8>
	else if (__tmp > 65535)
    212a:	6b a1       	ldd	r22, Y+35	; 0x23
    212c:	7c a1       	ldd	r23, Y+36	; 0x24
    212e:	8d a1       	ldd	r24, Y+37	; 0x25
    2130:	9e a1       	ldd	r25, Y+38	; 0x26
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	4c f5       	brge	.+82     	; 0x2194 <LCD_enuInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2142:	6f a1       	ldd	r22, Y+39	; 0x27
    2144:	78 a5       	ldd	r23, Y+40	; 0x28
    2146:	89 a5       	ldd	r24, Y+41	; 0x29
    2148:	9a a5       	ldd	r25, Y+42	; 0x2a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e2       	ldi	r20, 0x20	; 32
    2150:	51 e4       	ldi	r21, 0x41	; 65
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9a a3       	std	Y+34, r25	; 0x22
    2168:	89 a3       	std	Y+33, r24	; 0x21
    216a:	0f c0       	rjmp	.+30     	; 0x218a <LCD_enuInit+0xca>
    216c:	80 e9       	ldi	r24, 0x90	; 144
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	98 a3       	std	Y+32, r25	; 0x20
    2172:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2174:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2176:	98 a1       	ldd	r25, Y+32	; 0x20
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_enuInit+0xb8>
    217c:	98 a3       	std	Y+32, r25	; 0x20
    217e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	89 a1       	ldd	r24, Y+33	; 0x21
    2182:	9a a1       	ldd	r25, Y+34	; 0x22
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	9a a3       	std	Y+34, r25	; 0x22
    2188:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218a:	89 a1       	ldd	r24, Y+33	; 0x21
    218c:	9a a1       	ldd	r25, Y+34	; 0x22
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	69 f7       	brne	.-38     	; 0x216c <LCD_enuInit+0xac>
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <LCD_enuInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2194:	6b a1       	ldd	r22, Y+35	; 0x23
    2196:	7c a1       	ldd	r23, Y+36	; 0x24
    2198:	8d a1       	ldd	r24, Y+37	; 0x25
    219a:	9e a1       	ldd	r25, Y+38	; 0x26
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9a a3       	std	Y+34, r25	; 0x22
    21a6:	89 a3       	std	Y+33, r24	; 0x21
    21a8:	89 a1       	ldd	r24, Y+33	; 0x21
    21aa:	9a a1       	ldd	r25, Y+34	; 0x22
    21ac:	9e 8f       	std	Y+30, r25	; 0x1e
    21ae:	8d 8f       	std	Y+29, r24	; 0x1d
    21b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_enuInit+0xf4>
    21b8:	9e 8f       	std	Y+30, r25	; 0x1e
    21ba:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);

	DIO_enuSetPinDirection(RS_GRP , RS_PIN , DIO_u8OUTPUT);
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	61 e0       	ldi	r22, 0x01	; 1
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
#if RW_GRP != NC && RW_PIN != NC
	DIO_enuSetPinDirection(RW_GRP , RW_PIN , DIO_u8OUTPUT);
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	62 e0       	ldi	r22, 0x02	; 2
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
#endif
	DIO_enuSetPinDirection(EN_GRP , EN_PIN , DIO_u8OUTPUT);
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	63 e0       	ldi	r22, 0x03	; 3
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP , D7_PIN , DIO_u8OUTPUT);
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	67 e0       	ldi	r22, 0x07	; 7
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP , D6_PIN , DIO_u8OUTPUT);
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	66 e0       	ldi	r22, 0x06	; 6
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP , D5_PIN , DIO_u8OUTPUT);
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	65 e0       	ldi	r22, 0x05	; 5
    21f2:	41 e0       	ldi	r20, 0x01	; 1
    21f4:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP , D4_PIN , DIO_u8OUTPUT);
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	64 e0       	ldi	r22, 0x04	; 4
    21fc:	41 e0       	ldi	r20, 0x01	; 1
    21fe:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch( 0x38 );

#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(D7_GRP , D7_PIN , 0);
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	67 e0       	ldi	r22, 0x07	; 7
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , 0);
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	66 e0       	ldi	r22, 0x06	; 6
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , 1);
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	65 e0       	ldi	r22, 0x05	; 5
    221a:	41 e0       	ldi	r20, 0x01	; 1
    221c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , 0);
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	64 e0       	ldi	r22, 0x04	; 4
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	63 e0       	ldi	r22, 0x03	; 3
    222e:	41 e0       	ldi	r20, 0x01	; 1
    2230:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 e8       	ldi	r26, 0x80	; 128
    223a:	bf e3       	ldi	r27, 0x3F	; 63
    223c:	89 8f       	std	Y+25, r24	; 0x19
    223e:	9a 8f       	std	Y+26, r25	; 0x1a
    2240:	ab 8f       	std	Y+27, r26	; 0x1b
    2242:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	69 8d       	ldd	r22, Y+25	; 0x19
    2246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4a e7       	ldi	r20, 0x7A	; 122
    2252:	55 e4       	ldi	r21, 0x45	; 69
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8d 8b       	std	Y+21, r24	; 0x15
    225e:	9e 8b       	std	Y+22, r25	; 0x16
    2260:	af 8b       	std	Y+23, r26	; 0x17
    2262:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2264:	6d 89       	ldd	r22, Y+21	; 0x15
    2266:	7e 89       	ldd	r23, Y+22	; 0x16
    2268:	8f 89       	ldd	r24, Y+23	; 0x17
    226a:	98 8d       	ldd	r25, Y+24	; 0x18
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	2c f4       	brge	.+10     	; 0x2286 <LCD_enuInit+0x1c6>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9c 8b       	std	Y+20, r25	; 0x14
    2282:	8b 8b       	std	Y+19, r24	; 0x13
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <LCD_enuInit+0x244>
	else if (__tmp > 65535)
    2286:	6d 89       	ldd	r22, Y+21	; 0x15
    2288:	7e 89       	ldd	r23, Y+22	; 0x16
    228a:	8f 89       	ldd	r24, Y+23	; 0x17
    228c:	98 8d       	ldd	r25, Y+24	; 0x18
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	4c f5       	brge	.+82     	; 0x22f0 <LCD_enuInit+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229e:	69 8d       	ldd	r22, Y+25	; 0x19
    22a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9c 8b       	std	Y+20, r25	; 0x14
    22c4:	8b 8b       	std	Y+19, r24	; 0x13
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <LCD_enuInit+0x226>
    22c8:	80 e9       	ldi	r24, 0x90	; 144
    22ca:	91 e0       	ldi	r25, 0x01	; 1
    22cc:	9a 8b       	std	Y+18, r25	; 0x12
    22ce:	89 8b       	std	Y+17, r24	; 0x11
    22d0:	89 89       	ldd	r24, Y+17	; 0x11
    22d2:	9a 89       	ldd	r25, Y+18	; 0x12
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_enuInit+0x214>
    22d8:	9a 8b       	std	Y+18, r25	; 0x12
    22da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22dc:	8b 89       	ldd	r24, Y+19	; 0x13
    22de:	9c 89       	ldd	r25, Y+20	; 0x14
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	9c 8b       	std	Y+20, r25	; 0x14
    22e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e6:	8b 89       	ldd	r24, Y+19	; 0x13
    22e8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	69 f7       	brne	.-38     	; 0x22c8 <LCD_enuInit+0x208>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <LCD_enuInit+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	6d 89       	ldd	r22, Y+21	; 0x15
    22f2:	7e 89       	ldd	r23, Y+22	; 0x16
    22f4:	8f 89       	ldd	r24, Y+23	; 0x17
    22f6:	98 8d       	ldd	r25, Y+24	; 0x18
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9c 8b       	std	Y+20, r25	; 0x14
    2302:	8b 8b       	std	Y+19, r24	; 0x13
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	98 8b       	std	Y+16, r25	; 0x10
    230a:	8f 87       	std	Y+15, r24	; 0x0f
    230c:	8f 85       	ldd	r24, Y+15	; 0x0f
    230e:	98 89       	ldd	r25, Y+16	; 0x10
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_enuInit+0x250>
    2314:	98 8b       	std	Y+16, r25	; 0x10
    2316:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	63 e0       	ldi	r22, 0x03	; 3
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a0 e8       	ldi	r26, 0x80	; 128
    2328:	b0 e4       	ldi	r27, 0x40	; 64
    232a:	8b 87       	std	Y+11, r24	; 0x0b
    232c:	9c 87       	std	Y+12, r25	; 0x0c
    232e:	ad 87       	std	Y+13, r26	; 0x0d
    2330:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2332:	6b 85       	ldd	r22, Y+11	; 0x0b
    2334:	7c 85       	ldd	r23, Y+12	; 0x0c
    2336:	8d 85       	ldd	r24, Y+13	; 0x0d
    2338:	9e 85       	ldd	r25, Y+14	; 0x0e
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	4a e7       	ldi	r20, 0x7A	; 122
    2340:	55 e4       	ldi	r21, 0x45	; 69
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	8f 83       	std	Y+7, r24	; 0x07
    234c:	98 87       	std	Y+8, r25	; 0x08
    234e:	a9 87       	std	Y+9, r26	; 0x09
    2350:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e8       	ldi	r20, 0x80	; 128
    2360:	5f e3       	ldi	r21, 0x3F	; 63
    2362:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2366:	88 23       	and	r24, r24
    2368:	2c f4       	brge	.+10     	; 0x2374 <LCD_enuInit+0x2b4>
		__ticks = 1;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9e 83       	std	Y+6, r25	; 0x06
    2370:	8d 83       	std	Y+5, r24	; 0x05
    2372:	3f c0       	rjmp	.+126    	; 0x23f2 <LCD_enuInit+0x332>
	else if (__tmp > 65535)
    2374:	6f 81       	ldd	r22, Y+7	; 0x07
    2376:	78 85       	ldd	r23, Y+8	; 0x08
    2378:	89 85       	ldd	r24, Y+9	; 0x09
    237a:	9a 85       	ldd	r25, Y+10	; 0x0a
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	3f ef       	ldi	r19, 0xFF	; 255
    2380:	4f e7       	ldi	r20, 0x7F	; 127
    2382:	57 e4       	ldi	r21, 0x47	; 71
    2384:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2388:	18 16       	cp	r1, r24
    238a:	4c f5       	brge	.+82     	; 0x23de <LCD_enuInit+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238c:	6b 85       	ldd	r22, Y+11	; 0x0b
    238e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2390:	8d 85       	ldd	r24, Y+13	; 0x0d
    2392:	9e 85       	ldd	r25, Y+14	; 0x0e
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e2       	ldi	r20, 0x20	; 32
    239a:	51 e4       	ldi	r21, 0x41	; 65
    239c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	0f c0       	rjmp	.+30     	; 0x23d4 <LCD_enuInit+0x314>
    23b6:	80 e9       	ldi	r24, 0x90	; 144
    23b8:	91 e0       	ldi	r25, 0x01	; 1
    23ba:	9c 83       	std	Y+4, r25	; 0x04
    23bc:	8b 83       	std	Y+3, r24	; 0x03
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <LCD_enuInit+0x302>
    23c6:	9c 83       	std	Y+4, r25	; 0x04
    23c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ca:	8d 81       	ldd	r24, Y+5	; 0x05
    23cc:	9e 81       	ldd	r25, Y+6	; 0x06
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d4:	8d 81       	ldd	r24, Y+5	; 0x05
    23d6:	9e 81       	ldd	r25, Y+6	; 0x06
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	69 f7       	brne	.-38     	; 0x23b6 <LCD_enuInit+0x2f6>
    23dc:	14 c0       	rjmp	.+40     	; 0x2406 <LCD_enuInit+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	9a 83       	std	Y+2, r25	; 0x02
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	9a 81       	ldd	r25, Y+2	; 0x02
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <LCD_enuInit+0x33e>
    2402:	9a 83       	std	Y+2, r25	; 0x02
    2404:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	61 e0       	ldi	r22, 0x01	; 1
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x28 );
    2410:	88 e2       	ldi	r24, 0x28	; 40
    2412:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>

#endif

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	61 e0       	ldi	r22, 0x01	; 1
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0xF );
    2420:	8f e0       	ldi	r24, 0x0F	; 15
    2422:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x1 );
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x6 );
    2440:	86 e0       	ldi	r24, 0x06	; 6
    2442:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>



	return Local_enuErrorState;
    2446:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    2448:	ab 96       	adiw	r28, 0x2b	; 43
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	00 d0       	rcall	.+0      	; 0x2460 <LCD_enuWriteData+0x6>
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( Copy_u8Data );
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    247a:	89 81       	ldd	r24, Y+1	; 0x01
}
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Cmnd)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <LCD_enuWriteCommand+0x6>
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( Copy_u8Cmnd );
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>


	return Local_enuErrorState;
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <LCD_enuWriteString+0x6>
    24b8:	0f 92       	push	r0
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	9b 83       	std	Y+3, r25	; 0x03
    24c0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	10 c0       	rjmp	.+32     	; 0x24e8 <LCD_enuWriteString+0x36>

	while (*Copy_pcString)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	61 e0       	ldi	r22, 0x01	; 1
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
		LCD_enuWriteNLatch( *Copy_pcString++ );
    24d2:	ea 81       	ldd	r30, Y+2	; 0x02
    24d4:	fb 81       	ldd	r31, Y+3	; 0x03
    24d6:	20 81       	ld	r18, Z
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	9b 81       	ldd	r25, Y+3	; 0x03
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	9b 83       	std	Y+3, r25	; 0x03
    24e0:	8a 83       	std	Y+2, r24	; 0x02
    24e2:	82 2f       	mov	r24, r18
    24e4:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
	ES_t Local_enuErrorState = ES_NOK;

	while (*Copy_pcString)
    24e8:	ea 81       	ldd	r30, Y+2	; 0x02
    24ea:	fb 81       	ldd	r31, Y+3	; 0x03
    24ec:	80 81       	ld	r24, Z
    24ee:	88 23       	and	r24, r24
    24f0:	59 f7       	brne	.-42     	; 0x24c8 <LCD_enuWriteString+0x16>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch( *Copy_pcString++ );
	}

	return Local_enuErrorState;
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <LCD_enuGoToPosition>:


ES_t LCD_enuGoToPosition(u8 Copy_u8Row , u8 Copy_u8Column)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	00 d0       	rcall	.+0      	; 0x2506 <LCD_enuGoToPosition+0x6>
    2506:	0f 92       	push	r0
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	8a 83       	std	Y+2, r24	; 0x02
    250e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Row >= 1 && Copy_u8Row <=2 &&
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	88 23       	and	r24, r24
    2518:	09 f1       	breq	.+66     	; 0x255c <LCD_enuGoToPosition+0x5c>
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	83 30       	cpi	r24, 0x03	; 3
    251e:	f0 f4       	brcc	.+60     	; 0x255c <LCD_enuGoToPosition+0x5c>
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	88 23       	and	r24, r24
    2524:	d9 f0       	breq	.+54     	; 0x255c <LCD_enuGoToPosition+0x5c>
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	81 31       	cpi	r24, 0x11	; 17
    252a:	c0 f4       	brcc	.+48     	; 0x255c <LCD_enuGoToPosition+0x5c>
			Copy_u8Column >=1 && Copy_u8Column <=16)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	61 e0       	ldi	r22, 0x01	; 1
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
		LCD_enuWriteNLatch( 0x80 + ( Copy_u8Row - 1 )*0x40 + ( Copy_u8Column - 1 ) );
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	88 2f       	mov	r24, r24
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	00 24       	eor	r0, r0
    2540:	96 95       	lsr	r25
    2542:	87 95       	ror	r24
    2544:	07 94       	ror	r0
    2546:	96 95       	lsr	r25
    2548:	87 95       	ror	r24
    254a:	07 94       	ror	r0
    254c:	98 2f       	mov	r25, r24
    254e:	80 2d       	mov	r24, r0
    2550:	98 2f       	mov	r25, r24
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	89 0f       	add	r24, r25
    2556:	81 50       	subi	r24, 0x01	; 1
    2558:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
	}
	return Local_enuErrorState;
    255c:	89 81       	ldd	r24, Y+1	; 0x01
}
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch(u8 Copy_u8Byte)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	e9 97       	sbiw	r28, 0x39	; 57
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	89 af       	std	Y+57, r24	; 0x39
#if RW_GRP != NC  && RW_PIN != NC
	DIO_enuSetPinValue(RW_GRP , RW_PIN , DIO_u8LOW);
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	62 e0       	ldi	r22, 0x02	; 2
    2584:	40 e0       	ldi	r20, 0x00	; 0
    2586:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
#endif
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	63 e0       	ldi	r22, 0x03	; 3
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
	_delay_ms(4);


#elif LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 7 )&1 ));
    2594:	89 ad       	ldd	r24, Y+57	; 0x39
    2596:	98 2f       	mov	r25, r24
    2598:	99 1f       	adc	r25, r25
    259a:	99 27       	eor	r25, r25
    259c:	99 1f       	adc	r25, r25
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	67 e0       	ldi	r22, 0x07	; 7
    25a2:	49 2f       	mov	r20, r25
    25a4:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 6 )&1 ));
    25a8:	89 ad       	ldd	r24, Y+57	; 0x39
    25aa:	82 95       	swap	r24
    25ac:	86 95       	lsr	r24
    25ae:	86 95       	lsr	r24
    25b0:	83 70       	andi	r24, 0x03	; 3
    25b2:	98 2f       	mov	r25, r24
    25b4:	91 70       	andi	r25, 0x01	; 1
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	66 e0       	ldi	r22, 0x06	; 6
    25ba:	49 2f       	mov	r20, r25
    25bc:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 5 )&1 ));
    25c0:	89 ad       	ldd	r24, Y+57	; 0x39
    25c2:	82 95       	swap	r24
    25c4:	86 95       	lsr	r24
    25c6:	87 70       	andi	r24, 0x07	; 7
    25c8:	98 2f       	mov	r25, r24
    25ca:	91 70       	andi	r25, 0x01	; 1
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	65 e0       	ldi	r22, 0x05	; 5
    25d0:	49 2f       	mov	r20, r25
    25d2:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 4 )&1 ));
    25d6:	89 ad       	ldd	r24, Y+57	; 0x39
    25d8:	82 95       	swap	r24
    25da:	8f 70       	andi	r24, 0x0F	; 15
    25dc:	98 2f       	mov	r25, r24
    25de:	91 70       	andi	r25, 0x01	; 1
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	64 e0       	ldi	r22, 0x04	; 4
    25e4:	49 2f       	mov	r20, r25
    25e6:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	63 e0       	ldi	r22, 0x03	; 3
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	a0 e8       	ldi	r26, 0x80	; 128
    25fa:	bf e3       	ldi	r27, 0x3F	; 63
    25fc:	8d ab       	std	Y+53, r24	; 0x35
    25fe:	9e ab       	std	Y+54, r25	; 0x36
    2600:	af ab       	std	Y+55, r26	; 0x37
    2602:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2604:	6d a9       	ldd	r22, Y+53	; 0x35
    2606:	7e a9       	ldd	r23, Y+54	; 0x36
    2608:	8f a9       	ldd	r24, Y+55	; 0x37
    260a:	98 ad       	ldd	r25, Y+56	; 0x38
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	4a e7       	ldi	r20, 0x7A	; 122
    2612:	55 e4       	ldi	r21, 0x45	; 69
    2614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	89 ab       	std	Y+49, r24	; 0x31
    261e:	9a ab       	std	Y+50, r25	; 0x32
    2620:	ab ab       	std	Y+51, r26	; 0x33
    2622:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2624:	69 a9       	ldd	r22, Y+49	; 0x31
    2626:	7a a9       	ldd	r23, Y+50	; 0x32
    2628:	8b a9       	ldd	r24, Y+51	; 0x33
    262a:	9c a9       	ldd	r25, Y+52	; 0x34
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	5f e3       	ldi	r21, 0x3F	; 63
    2634:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2638:	88 23       	and	r24, r24
    263a:	2c f4       	brge	.+10     	; 0x2646 <LCD_enuWriteNLatch+0xdc>
		__ticks = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	98 ab       	std	Y+48, r25	; 0x30
    2642:	8f a7       	std	Y+47, r24	; 0x2f
    2644:	3f c0       	rjmp	.+126    	; 0x26c4 <LCD_enuWriteNLatch+0x15a>
	else if (__tmp > 65535)
    2646:	69 a9       	ldd	r22, Y+49	; 0x31
    2648:	7a a9       	ldd	r23, Y+50	; 0x32
    264a:	8b a9       	ldd	r24, Y+51	; 0x33
    264c:	9c a9       	ldd	r25, Y+52	; 0x34
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	3f ef       	ldi	r19, 0xFF	; 255
    2652:	4f e7       	ldi	r20, 0x7F	; 127
    2654:	57 e4       	ldi	r21, 0x47	; 71
    2656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265a:	18 16       	cp	r1, r24
    265c:	4c f5       	brge	.+82     	; 0x26b0 <LCD_enuWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265e:	6d a9       	ldd	r22, Y+53	; 0x35
    2660:	7e a9       	ldd	r23, Y+54	; 0x36
    2662:	8f a9       	ldd	r24, Y+55	; 0x37
    2664:	98 ad       	ldd	r25, Y+56	; 0x38
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e2       	ldi	r20, 0x20	; 32
    266c:	51 e4       	ldi	r21, 0x41	; 65
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	98 ab       	std	Y+48, r25	; 0x30
    2684:	8f a7       	std	Y+47, r24	; 0x2f
    2686:	0f c0       	rjmp	.+30     	; 0x26a6 <LCD_enuWriteNLatch+0x13c>
    2688:	80 e9       	ldi	r24, 0x90	; 144
    268a:	91 e0       	ldi	r25, 0x01	; 1
    268c:	9e a7       	std	Y+46, r25	; 0x2e
    268e:	8d a7       	std	Y+45, r24	; 0x2d
    2690:	8d a5       	ldd	r24, Y+45	; 0x2d
    2692:	9e a5       	ldd	r25, Y+46	; 0x2e
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_enuWriteNLatch+0x12a>
    2698:	9e a7       	std	Y+46, r25	; 0x2e
    269a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269c:	8f a5       	ldd	r24, Y+47	; 0x2f
    269e:	98 a9       	ldd	r25, Y+48	; 0x30
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	98 ab       	std	Y+48, r25	; 0x30
    26a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a8:	98 a9       	ldd	r25, Y+48	; 0x30
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	69 f7       	brne	.-38     	; 0x2688 <LCD_enuWriteNLatch+0x11e>
    26ae:	14 c0       	rjmp	.+40     	; 0x26d8 <LCD_enuWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b0:	69 a9       	ldd	r22, Y+49	; 0x31
    26b2:	7a a9       	ldd	r23, Y+50	; 0x32
    26b4:	8b a9       	ldd	r24, Y+51	; 0x33
    26b6:	9c a9       	ldd	r25, Y+52	; 0x34
    26b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	98 ab       	std	Y+48, r25	; 0x30
    26c2:	8f a7       	std	Y+47, r24	; 0x2f
    26c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c6:	98 a9       	ldd	r25, Y+48	; 0x30
    26c8:	9c a7       	std	Y+44, r25	; 0x2c
    26ca:	8b a7       	std	Y+43, r24	; 0x2b
    26cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <LCD_enuWriteNLatch+0x166>
    26d4:	9c a7       	std	Y+44, r25	; 0x2c
    26d6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	63 e0       	ldi	r22, 0x03	; 3
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a0 e8       	ldi	r26, 0x80	; 128
    26e8:	b0 e4       	ldi	r27, 0x40	; 64
    26ea:	8f a3       	std	Y+39, r24	; 0x27
    26ec:	98 a7       	std	Y+40, r25	; 0x28
    26ee:	a9 a7       	std	Y+41, r26	; 0x29
    26f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	6f a1       	ldd	r22, Y+39	; 0x27
    26f4:	78 a5       	ldd	r23, Y+40	; 0x28
    26f6:	89 a5       	ldd	r24, Y+41	; 0x29
    26f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a e7       	ldi	r20, 0x7A	; 122
    2700:	55 e4       	ldi	r21, 0x45	; 69
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8b a3       	std	Y+35, r24	; 0x23
    270c:	9c a3       	std	Y+36, r25	; 0x24
    270e:	ad a3       	std	Y+37, r26	; 0x25
    2710:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2712:	6b a1       	ldd	r22, Y+35	; 0x23
    2714:	7c a1       	ldd	r23, Y+36	; 0x24
    2716:	8d a1       	ldd	r24, Y+37	; 0x25
    2718:	9e a1       	ldd	r25, Y+38	; 0x26
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <LCD_enuWriteNLatch+0x1ca>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9a a3       	std	Y+34, r25	; 0x22
    2730:	89 a3       	std	Y+33, r24	; 0x21
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <LCD_enuWriteNLatch+0x248>
	else if (__tmp > 65535)
    2734:	6b a1       	ldd	r22, Y+35	; 0x23
    2736:	7c a1       	ldd	r23, Y+36	; 0x24
    2738:	8d a1       	ldd	r24, Y+37	; 0x25
    273a:	9e a1       	ldd	r25, Y+38	; 0x26
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <LCD_enuWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	6f a1       	ldd	r22, Y+39	; 0x27
    274e:	78 a5       	ldd	r23, Y+40	; 0x28
    2750:	89 a5       	ldd	r24, Y+41	; 0x29
    2752:	9a a5       	ldd	r25, Y+42	; 0x2a
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9a a3       	std	Y+34, r25	; 0x22
    2772:	89 a3       	std	Y+33, r24	; 0x21
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <LCD_enuWriteNLatch+0x22a>
    2776:	80 e9       	ldi	r24, 0x90	; 144
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	98 a3       	std	Y+32, r25	; 0x20
    277c:	8f 8f       	std	Y+31, r24	; 0x1f
    277e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2780:	98 a1       	ldd	r25, Y+32	; 0x20
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <LCD_enuWriteNLatch+0x218>
    2786:	98 a3       	std	Y+32, r25	; 0x20
    2788:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	89 a1       	ldd	r24, Y+33	; 0x21
    278c:	9a a1       	ldd	r25, Y+34	; 0x22
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9a a3       	std	Y+34, r25	; 0x22
    2792:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	89 a1       	ldd	r24, Y+33	; 0x21
    2796:	9a a1       	ldd	r25, Y+34	; 0x22
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <LCD_enuWriteNLatch+0x20c>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <LCD_enuWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6b a1       	ldd	r22, Y+35	; 0x23
    27a0:	7c a1       	ldd	r23, Y+36	; 0x24
    27a2:	8d a1       	ldd	r24, Y+37	; 0x25
    27a4:	9e a1       	ldd	r25, Y+38	; 0x26
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9a a3       	std	Y+34, r25	; 0x22
    27b0:	89 a3       	std	Y+33, r24	; 0x21
    27b2:	89 a1       	ldd	r24, Y+33	; 0x21
    27b4:	9a a1       	ldd	r25, Y+34	; 0x22
    27b6:	9e 8f       	std	Y+30, r25	; 0x1e
    27b8:	8d 8f       	std	Y+29, r24	; 0x1d
    27ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <LCD_enuWriteNLatch+0x254>
    27c2:	9e 8f       	std	Y+30, r25	; 0x1e
    27c4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4);

	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 3 )&1 ));
    27c6:	89 ad       	ldd	r24, Y+57	; 0x39
    27c8:	86 95       	lsr	r24
    27ca:	86 95       	lsr	r24
    27cc:	86 95       	lsr	r24
    27ce:	98 2f       	mov	r25, r24
    27d0:	91 70       	andi	r25, 0x01	; 1
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	67 e0       	ldi	r22, 0x07	; 7
    27d6:	49 2f       	mov	r20, r25
    27d8:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 2 )&1 ));
    27dc:	89 ad       	ldd	r24, Y+57	; 0x39
    27de:	86 95       	lsr	r24
    27e0:	86 95       	lsr	r24
    27e2:	98 2f       	mov	r25, r24
    27e4:	91 70       	andi	r25, 0x01	; 1
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	66 e0       	ldi	r22, 0x06	; 6
    27ea:	49 2f       	mov	r20, r25
    27ec:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 1 )&1 ));
    27f0:	89 ad       	ldd	r24, Y+57	; 0x39
    27f2:	86 95       	lsr	r24
    27f4:	98 2f       	mov	r25, r24
    27f6:	91 70       	andi	r25, 0x01	; 1
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	65 e0       	ldi	r22, 0x05	; 5
    27fc:	49 2f       	mov	r20, r25
    27fe:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 0 )&1 ));
    2802:	89 ad       	ldd	r24, Y+57	; 0x39
    2804:	98 2f       	mov	r25, r24
    2806:	91 70       	andi	r25, 0x01	; 1
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	64 e0       	ldi	r22, 0x04	; 4
    280c:	49 2f       	mov	r20, r25
    280e:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	63 e0       	ldi	r22, 0x03	; 3
    2816:	41 e0       	ldi	r20, 0x01	; 1
    2818:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a0 e8       	ldi	r26, 0x80	; 128
    2822:	bf e3       	ldi	r27, 0x3F	; 63
    2824:	89 8f       	std	Y+25, r24	; 0x19
    2826:	9a 8f       	std	Y+26, r25	; 0x1a
    2828:	ab 8f       	std	Y+27, r26	; 0x1b
    282a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282c:	69 8d       	ldd	r22, Y+25	; 0x19
    282e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2830:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2832:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a e7       	ldi	r20, 0x7A	; 122
    283a:	55 e4       	ldi	r21, 0x45	; 69
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8d 8b       	std	Y+21, r24	; 0x15
    2846:	9e 8b       	std	Y+22, r25	; 0x16
    2848:	af 8b       	std	Y+23, r26	; 0x17
    284a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    284c:	6d 89       	ldd	r22, Y+21	; 0x15
    284e:	7e 89       	ldd	r23, Y+22	; 0x16
    2850:	8f 89       	ldd	r24, Y+23	; 0x17
    2852:	98 8d       	ldd	r25, Y+24	; 0x18
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e8       	ldi	r20, 0x80	; 128
    285a:	5f e3       	ldi	r21, 0x3F	; 63
    285c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2860:	88 23       	and	r24, r24
    2862:	2c f4       	brge	.+10     	; 0x286e <LCD_enuWriteNLatch+0x304>
		__ticks = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9c 8b       	std	Y+20, r25	; 0x14
    286a:	8b 8b       	std	Y+19, r24	; 0x13
    286c:	3f c0       	rjmp	.+126    	; 0x28ec <LCD_enuWriteNLatch+0x382>
	else if (__tmp > 65535)
    286e:	6d 89       	ldd	r22, Y+21	; 0x15
    2870:	7e 89       	ldd	r23, Y+22	; 0x16
    2872:	8f 89       	ldd	r24, Y+23	; 0x17
    2874:	98 8d       	ldd	r25, Y+24	; 0x18
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	4c f5       	brge	.+82     	; 0x28d8 <LCD_enuWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	69 8d       	ldd	r22, Y+25	; 0x19
    2888:	7a 8d       	ldd	r23, Y+26	; 0x1a
    288a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    288c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9c 8b       	std	Y+20, r25	; 0x14
    28ac:	8b 8b       	std	Y+19, r24	; 0x13
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <LCD_enuWriteNLatch+0x364>
    28b0:	80 e9       	ldi	r24, 0x90	; 144
    28b2:	91 e0       	ldi	r25, 0x01	; 1
    28b4:	9a 8b       	std	Y+18, r25	; 0x12
    28b6:	89 8b       	std	Y+17, r24	; 0x11
    28b8:	89 89       	ldd	r24, Y+17	; 0x11
    28ba:	9a 89       	ldd	r25, Y+18	; 0x12
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <LCD_enuWriteNLatch+0x352>
    28c0:	9a 8b       	std	Y+18, r25	; 0x12
    28c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	8b 89       	ldd	r24, Y+19	; 0x13
    28c6:	9c 89       	ldd	r25, Y+20	; 0x14
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9c 8b       	std	Y+20, r25	; 0x14
    28cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	8b 89       	ldd	r24, Y+19	; 0x13
    28d0:	9c 89       	ldd	r25, Y+20	; 0x14
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	69 f7       	brne	.-38     	; 0x28b0 <LCD_enuWriteNLatch+0x346>
    28d6:	14 c0       	rjmp	.+40     	; 0x2900 <LCD_enuWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	6d 89       	ldd	r22, Y+21	; 0x15
    28da:	7e 89       	ldd	r23, Y+22	; 0x16
    28dc:	8f 89       	ldd	r24, Y+23	; 0x17
    28de:	98 8d       	ldd	r25, Y+24	; 0x18
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	8b 8b       	std	Y+19, r24	; 0x13
    28ec:	8b 89       	ldd	r24, Y+19	; 0x13
    28ee:	9c 89       	ldd	r25, Y+20	; 0x14
    28f0:	98 8b       	std	Y+16, r25	; 0x10
    28f2:	8f 87       	std	Y+15, r24	; 0x0f
    28f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f6:	98 89       	ldd	r25, Y+16	; 0x10
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_enuWriteNLatch+0x38e>
    28fc:	98 8b       	std	Y+16, r25	; 0x10
    28fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	63 e0       	ldi	r22, 0x03	; 3
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e8       	ldi	r26, 0x80	; 128
    2910:	b0 e4       	ldi	r27, 0x40	; 64
    2912:	8b 87       	std	Y+11, r24	; 0x0b
    2914:	9c 87       	std	Y+12, r25	; 0x0c
    2916:	ad 87       	std	Y+13, r26	; 0x0d
    2918:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291a:	6b 85       	ldd	r22, Y+11	; 0x0b
    291c:	7c 85       	ldd	r23, Y+12	; 0x0c
    291e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	4a e7       	ldi	r20, 0x7A	; 122
    2928:	55 e4       	ldi	r21, 0x45	; 69
    292a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8f 83       	std	Y+7, r24	; 0x07
    2934:	98 87       	std	Y+8, r25	; 0x08
    2936:	a9 87       	std	Y+9, r26	; 0x09
    2938:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293a:	6f 81       	ldd	r22, Y+7	; 0x07
    293c:	78 85       	ldd	r23, Y+8	; 0x08
    293e:	89 85       	ldd	r24, Y+9	; 0x09
    2940:	9a 85       	ldd	r25, Y+10	; 0x0a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e8       	ldi	r20, 0x80	; 128
    2948:	5f e3       	ldi	r21, 0x3F	; 63
    294a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    294e:	88 23       	and	r24, r24
    2950:	2c f4       	brge	.+10     	; 0x295c <LCD_enuWriteNLatch+0x3f2>
		__ticks = 1;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
    295a:	3f c0       	rjmp	.+126    	; 0x29da <LCD_enuWriteNLatch+0x470>
	else if (__tmp > 65535)
    295c:	6f 81       	ldd	r22, Y+7	; 0x07
    295e:	78 85       	ldd	r23, Y+8	; 0x08
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	9a 85       	ldd	r25, Y+10	; 0x0a
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	3f ef       	ldi	r19, 0xFF	; 255
    2968:	4f e7       	ldi	r20, 0x7F	; 127
    296a:	57 e4       	ldi	r21, 0x47	; 71
    296c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2970:	18 16       	cp	r1, r24
    2972:	4c f5       	brge	.+82     	; 0x29c6 <LCD_enuWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	40 e2       	ldi	r20, 0x20	; 32
    2982:	51 e4       	ldi	r21, 0x41	; 65
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
    299c:	0f c0       	rjmp	.+30     	; 0x29bc <LCD_enuWriteNLatch+0x452>
    299e:	80 e9       	ldi	r24, 0x90	; 144
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	8b 83       	std	Y+3, r24	; 0x03
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <LCD_enuWriteNLatch+0x440>
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b2:	8d 81       	ldd	r24, Y+5	; 0x05
    29b4:	9e 81       	ldd	r25, Y+6	; 0x06
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	9e 81       	ldd	r25, Y+6	; 0x06
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	69 f7       	brne	.-38     	; 0x299e <LCD_enuWriteNLatch+0x434>
    29c4:	14 c0       	rjmp	.+40     	; 0x29ee <LCD_enuWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	9a 81       	ldd	r25, Y+2	; 0x02
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <LCD_enuWriteNLatch+0x47c>
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);
#else
#error "LCD mode is wrong ya 7aywan"
#endif
	return ES_OK;
    29ee:	80 e0       	ldi	r24, 0x00	; 0
}
    29f0:	e9 96       	adiw	r28, 0x39	; 57
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <LCD_enuWriteIntegerNum>:

/*		ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)		*/
ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	2d 97       	sbiw	r28, 0x0d	; 13
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	69 87       	std	Y+9, r22	; 0x09
    2a18:	7a 87       	std	Y+10, r23	; 0x0a
    2a1a:	8b 87       	std	Y+11, r24	; 0x0b
    2a1c:	9c 87       	std	Y+12, r25	; 0x0c
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8DigitCounter = 1 ;
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	8d 83       	std	Y+5, r24	; 0x05

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	61 e0       	ldi	r22, 0x01	; 1
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2a30:	8f 83       	std	Y+7, r24	; 0x07
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2a32:	86 e0       	ldi	r24, 0x06	; 6
    2a34:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2a38:	88 87       	std	Y+8, r24	; 0x08

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2a3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a3c:	88 23       	and	r24, r24
    2a3e:	09 f0       	breq	.+2      	; 0x2a42 <LCD_enuWriteIntegerNum+0x40>
    2a40:	eb c0       	rjmp	.+470    	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
    2a42:	88 85       	ldd	r24, Y+8	; 0x08
    2a44:	88 23       	and	r24, r24
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <LCD_enuWriteIntegerNum+0x48>
    2a48:	e7 c0       	rjmp	.+462    	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
	{
		if( Copy_s32Num < 0 )
    2a4a:	89 85       	ldd	r24, Y+9	; 0x09
    2a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a50:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a52:	bb 23       	and	r27, r27
    2a54:	cc f4       	brge	.+50     	; 0x2a88 <LCD_enuWriteIntegerNum+0x86>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	61 e0       	ldi	r22, 0x01	; 1
    2a5a:	41 e0       	ldi	r20, 0x01	; 1
    2a5c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2a60:	8f 83       	std	Y+7, r24	; 0x07
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    2a62:	8d e2       	ldi	r24, 0x2D	; 45
    2a64:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2a68:	88 87       	std	Y+8, r24	; 0x08
			Copy_s32Num = - Copy_s32Num;
    2a6a:	89 85       	ldd	r24, Y+9	; 0x09
    2a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a70:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a72:	b0 95       	com	r27
    2a74:	a0 95       	com	r26
    2a76:	90 95       	com	r25
    2a78:	81 95       	neg	r24
    2a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7c:	af 4f       	sbci	r26, 0xFF	; 255
    2a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a80:	89 87       	std	Y+9, r24	; 0x09
    2a82:	9a 87       	std	Y+10, r25	; 0x0a
    2a84:	ab 87       	std	Y+11, r26	; 0x0b
    2a86:	bc 87       	std	Y+12, r27	; 0x0c
		}

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2a88:	8f 81       	ldd	r24, Y+7	; 0x07
    2a8a:	88 23       	and	r24, r24
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <LCD_enuWriteIntegerNum+0x8e>
    2a8e:	c4 c0       	rjmp	.+392    	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
    2a90:	88 85       	ldd	r24, Y+8	; 0x08
    2a92:	88 23       	and	r24, r24
    2a94:	09 f0       	breq	.+2      	; 0x2a98 <LCD_enuWriteIntegerNum+0x96>
    2a96:	c0 c0       	rjmp	.+384    	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
		{
			u32 Local_u32Number = Copy_s32Num;
    2a98:	89 85       	ldd	r24, Y+9	; 0x09
    2a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a9e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	ab 83       	std	Y+3, r26	; 0x03
    2aa6:	bc 83       	std	Y+4, r27	; 0x04
    2aa8:	1c c0       	rjmp	.+56     	; 0x2ae2 <LCD_enuWriteIntegerNum+0xe0>

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	61 e0       	ldi	r22, 0x01	; 1
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2ab4:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    2ab6:	84 e1       	ldi	r24, 0x14	; 20
    2ab8:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2abc:	88 87       	std	Y+8, r24	; 0x08
				Local_u32Number /=10;
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ac4:	bc 81       	ldd	r27, Y+4	; 0x04
    2ac6:	2a e0       	ldi	r18, 0x0A	; 10
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	50 e0       	ldi	r21, 0x00	; 0
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 80 22 	call	0x4500	; 0x4500 <__udivmodsi4>
    2ad6:	da 01       	movw	r26, r20
    2ad8:	c9 01       	movw	r24, r18
    2ada:	89 83       	std	Y+1, r24	; 0x01
    2adc:	9a 83       	std	Y+2, r25	; 0x02
    2ade:	ab 83       	std	Y+3, r26	; 0x03
    2ae0:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			u32 Local_u32Number = Copy_s32Num;

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae6:	ab 81       	ldd	r26, Y+3	; 0x03
    2ae8:	bc 81       	ldd	r27, Y+4	; 0x04
    2aea:	8b 30       	cpi	r24, 0x0B	; 11
    2aec:	91 05       	cpc	r25, r1
    2aee:	a1 05       	cpc	r26, r1
    2af0:	b1 05       	cpc	r27, r1
    2af2:	30 f0       	brcs	.+12     	; 0x2b00 <LCD_enuWriteIntegerNum+0xfe>
    2af4:	8f 81       	ldd	r24, Y+7	; 0x07
    2af6:	88 23       	and	r24, r24
    2af8:	19 f4       	brne	.+6      	; 0x2b00 <LCD_enuWriteIntegerNum+0xfe>
    2afa:	88 85       	ldd	r24, Y+8	; 0x08
    2afc:	88 23       	and	r24, r24
    2afe:	a9 f2       	breq	.-86     	; 0x2aaa <LCD_enuWriteIntegerNum+0xa8>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2b00:	8f 81       	ldd	r24, Y+7	; 0x07
    2b02:	88 23       	and	r24, r24
    2b04:	09 f0       	breq	.+2      	; 0x2b08 <LCD_enuWriteIntegerNum+0x106>
    2b06:	88 c0       	rjmp	.+272    	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
    2b08:	88 85       	ldd	r24, Y+8	; 0x08
    2b0a:	88 23       	and	r24, r24
    2b0c:	09 f0       	breq	.+2      	; 0x2b10 <LCD_enuWriteIntegerNum+0x10e>
    2b0e:	84 c0       	rjmp	.+264    	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	61 e0       	ldi	r22, 0x01	; 1
    2b14:	40 e0       	ldi	r20, 0x00	; 0
    2b16:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2b1a:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    2b1c:	84 e0       	ldi	r24, 0x04	; 4
    2b1e:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2b22:	88 87       	std	Y+8, r24	; 0x08

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2b24:	8f 81       	ldd	r24, Y+7	; 0x07
    2b26:	88 23       	and	r24, r24
    2b28:	09 f0       	breq	.+2      	; 0x2b2c <LCD_enuWriteIntegerNum+0x12a>
    2b2a:	76 c0       	rjmp	.+236    	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
    2b2c:	88 85       	ldd	r24, Y+8	; 0x08
    2b2e:	88 23       	and	r24, r24
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <LCD_enuWriteIntegerNum+0x132>
    2b32:	72 c0       	rjmp	.+228    	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
    2b34:	2d c0       	rjmp	.+90     	; 0x2b90 <LCD_enuWriteIntegerNum+0x18e>
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
					{
						Local_u8DigitCounter++;
    2b36:	8d 81       	ldd	r24, Y+5	; 0x05
    2b38:	8f 5f       	subi	r24, 0xFF	; 255
    2b3a:	8d 83       	std	Y+5, r24	; 0x05
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	61 e0       	ldi	r22, 0x01	; 1
    2b40:	41 e0       	ldi	r20, 0x01	; 1
    2b42:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2b46:	8f 83       	std	Y+7, r24	; 0x07
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
    2b48:	89 85       	ldd	r24, Y+9	; 0x09
    2b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b4e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b50:	2a e0       	ldi	r18, 0x0A	; 10
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	0e 94 a2 22 	call	0x4544	; 0x4544 <__divmodsi4>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	80 5d       	subi	r24, 0xD0	; 208
    2b66:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2b6a:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
    2b6c:	89 85       	ldd	r24, Y+9	; 0x09
    2b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b70:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b72:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b74:	2a e0       	ldi	r18, 0x0A	; 10
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e0       	ldi	r20, 0x00	; 0
    2b7a:	50 e0       	ldi	r21, 0x00	; 0
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	0e 94 a2 22 	call	0x4544	; 0x4544 <__divmodsi4>
    2b84:	da 01       	movw	r26, r20
    2b86:	c9 01       	movw	r24, r18
    2b88:	89 87       	std	Y+9, r24	; 0x09
    2b8a:	9a 87       	std	Y+10, r25	; 0x0a
    2b8c:	ab 87       	std	Y+11, r26	; 0x0b
    2b8e:	bc 87       	std	Y+12, r27	; 0x0c
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2b90:	89 85       	ldd	r24, Y+9	; 0x09
    2b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b94:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b96:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	a1 05       	cpc	r26, r1
    2b9c:	b1 05       	cpc	r27, r1
    2b9e:	31 f0       	breq	.+12     	; 0x2bac <LCD_enuWriteIntegerNum+0x1aa>
    2ba0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ba2:	88 23       	and	r24, r24
    2ba4:	19 f4       	brne	.+6      	; 0x2bac <LCD_enuWriteIntegerNum+0x1aa>
    2ba6:	88 85       	ldd	r24, Y+8	; 0x08
    2ba8:	88 23       	and	r24, r24
    2baa:	29 f2       	breq	.-118    	; 0x2b36 <LCD_enuWriteIntegerNum+0x134>
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2bac:	8f 81       	ldd	r24, Y+7	; 0x07
    2bae:	88 23       	and	r24, r24
    2bb0:	99 f5       	brne	.+102    	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
    2bb2:	88 85       	ldd	r24, Y+8	; 0x08
    2bb4:	88 23       	and	r24, r24
    2bb6:	81 f5       	brne	.+96     	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
    2bb8:	0a c0       	rjmp	.+20     	; 0x2bce <LCD_enuWriteIntegerNum+0x1cc>
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2bc4:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    2bc6:	84 e1       	ldi	r24, 0x14	; 20
    2bc8:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2bcc:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	8d 87       	std	Y+13, r24	; 0x0d
    2bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd4:	88 23       	and	r24, r24
    2bd6:	11 f0       	breq	.+4      	; 0x2bdc <LCD_enuWriteIntegerNum+0x1da>
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	8d 87       	std	Y+13, r24	; 0x0d
    2bdc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bde:	8d 81       	ldd	r24, Y+5	; 0x05
    2be0:	81 50       	subi	r24, 0x01	; 1
    2be2:	8d 83       	std	Y+5, r24	; 0x05
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	89 27       	eor	r24, r25
    2be8:	88 23       	and	r24, r24
    2bea:	31 f4       	brne	.+12     	; 0x2bf8 <LCD_enuWriteIntegerNum+0x1f6>
    2bec:	8f 81       	ldd	r24, Y+7	; 0x07
    2bee:	88 23       	and	r24, r24
    2bf0:	19 f4       	brne	.+6      	; 0x2bf8 <LCD_enuWriteIntegerNum+0x1f6>
    2bf2:	88 85       	ldd	r24, Y+8	; 0x08
    2bf4:	88 23       	and	r24, r24
    2bf6:	09 f3       	breq	.-62     	; 0x2bba <LCD_enuWriteIntegerNum+0x1b8>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
						}

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2bf8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bfa:	88 23       	and	r24, r24
    2bfc:	69 f4       	brne	.+26     	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
    2bfe:	88 85       	ldd	r24, Y+8	; 0x08
    2c00:	88 23       	and	r24, r24
    2c02:	51 f4       	brne	.+20     	; 0x2c18 <LCD_enuWriteIntegerNum+0x216>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2c0e:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2c10:	86 e0       	ldi	r24, 0x06	; 6
    2c12:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2c16:	88 87       	std	Y+8, r24	; 0x08

			}

		}
	}
	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2c18:	8f 81       	ldd	r24, Y+7	; 0x07
    2c1a:	88 23       	and	r24, r24
    2c1c:	21 f4       	brne	.+8      	; 0x2c26 <LCD_enuWriteIntegerNum+0x224>
    2c1e:	88 85       	ldd	r24, Y+8	; 0x08
    2c20:	88 23       	and	r24, r24
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <LCD_enuWriteIntegerNum+0x224>
			 	 Local_enuErrorState = ES_OK;
    2c24:	1e 82       	std	Y+6, r1	; 0x06

	return (Local_enuErrorState = ES_OK);
    2c26:	1e 82       	std	Y+6, r1	; 0x06
    2c28:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2c2a:	2d 96       	adiw	r28, 0x0d	; 13
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	08 95       	ret

00002c3c <LCD_enuWriteFloatNum>:

/*		ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)		*/
ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)
{
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	66 97       	sbiw	r28, 0x16	; 22
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	69 8b       	std	Y+17, r22	; 0x11
    2c52:	7a 8b       	std	Y+18, r23	; 0x12
    2c54:	8b 8b       	std	Y+19, r24	; 0x13
    2c56:	9c 8b       	std	Y+20, r25	; 0x14
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	8e 87       	std	Y+14, r24	; 0x0e

	u8 Local_u8DigitCounter = 0 ;
    2c5c:	1d 86       	std	Y+13, r1	; 0x0d
	u32 Local_u32Integer = 0 , Local_u32Number = 0;
    2c5e:	19 86       	std	Y+9, r1	; 0x09
    2c60:	1a 86       	std	Y+10, r1	; 0x0a
    2c62:	1b 86       	std	Y+11, r1	; 0x0b
    2c64:	1c 86       	std	Y+12, r1	; 0x0c
    2c66:	1d 82       	std	Y+5, r1	; 0x05
    2c68:	1e 82       	std	Y+6, r1	; 0x06
    2c6a:	1f 82       	std	Y+7, r1	; 0x07
    2c6c:	18 86       	std	Y+8, r1	; 0x08
	f32 Local_f32_Fraction = 0.0 ;
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	a0 e0       	ldi	r26, 0x00	; 0
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	9a 83       	std	Y+2, r25	; 0x02
    2c7a:	ab 83       	std	Y+3, r26	; 0x03
    2c7c:	bc 83       	std	Y+4, r27	; 0x04

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	61 e0       	ldi	r22, 0x01	; 1
    2c82:	40 e0       	ldi	r20, 0x00	; 0
    2c84:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2c88:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2c8a:	86 e0       	ldi	r24, 0x06	; 6
    2c8c:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2c90:	88 8b       	std	Y+16, r24	; 0x10

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2c92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c94:	88 23       	and	r24, r24
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <LCD_enuWriteFloatNum+0x5e>
    2c98:	8f c1       	rjmp	.+798    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2c9a:	88 89       	ldd	r24, Y+16	; 0x10
    2c9c:	88 23       	and	r24, r24
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <LCD_enuWriteFloatNum+0x66>
    2ca0:	8b c1       	rjmp	.+790    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
	{
		if( Copy_f32Num < 0 )
    2ca2:	69 89       	ldd	r22, Y+17	; 0x11
    2ca4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e0       	ldi	r20, 0x00	; 0
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb6:	88 23       	and	r24, r24
    2cb8:	9c f4       	brge	.+38     	; 0x2ce0 <LCD_enuWriteFloatNum+0xa4>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	61 e0       	ldi	r22, 0x01	; 1
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2cc4:	8f 87       	std	Y+15, r24	; 0x0f
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    2cc6:	8d e2       	ldi	r24, 0x2D	; 45
    2cc8:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2ccc:	88 8b       	std	Y+16, r24	; 0x10
			Copy_f32Num = - Copy_f32Num;
    2cce:	89 89       	ldd	r24, Y+17	; 0x11
    2cd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2cd2:	ab 89       	ldd	r26, Y+19	; 0x13
    2cd4:	bc 89       	ldd	r27, Y+20	; 0x14
    2cd6:	b0 58       	subi	r27, 0x80	; 128
    2cd8:	89 8b       	std	Y+17, r24	; 0x11
    2cda:	9a 8b       	std	Y+18, r25	; 0x12
    2cdc:	ab 8b       	std	Y+19, r26	; 0x13
    2cde:	bc 8b       	std	Y+20, r27	; 0x14
		}

		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
    2ce0:	69 89       	ldd	r22, Y+17	; 0x11
    2ce2:	7a 89       	ldd	r23, Y+18	; 0x12
    2ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
    2cf2:	9e 83       	std	Y+6, r25	; 0x06
    2cf4:	af 83       	std	Y+7, r26	; 0x07
    2cf6:	b8 87       	std	Y+8, r27	; 0x08
    2cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfc:	af 81       	ldd	r26, Y+7	; 0x07
    2cfe:	b8 85       	ldd	r27, Y+8	; 0x08
    2d00:	89 87       	std	Y+9, r24	; 0x09
    2d02:	9a 87       	std	Y+10, r25	; 0x0a
    2d04:	ab 87       	std	Y+11, r26	; 0x0b
    2d06:	bc 87       	std	Y+12, r27	; 0x0c
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;
    2d08:	69 85       	ldd	r22, Y+9	; 0x09
    2d0a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d10:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2d14:	9b 01       	movw	r18, r22
    2d16:	ac 01       	movw	r20, r24
    2d18:	69 89       	ldd	r22, Y+17	; 0x11
    2d1a:	7a 89       	ldd	r23, Y+18	; 0x12
    2d1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d20:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	89 83       	std	Y+1, r24	; 0x01
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	ab 83       	std	Y+3, r26	; 0x03
    2d2e:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2d30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d32:	88 23       	and	r24, r24
    2d34:	09 f0       	breq	.+2      	; 0x2d38 <LCD_enuWriteFloatNum+0xfc>
    2d36:	40 c1       	rjmp	.+640    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2d38:	88 89       	ldd	r24, Y+16	; 0x10
    2d3a:	88 23       	and	r24, r24
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <LCD_enuWriteFloatNum+0x104>
    2d3e:	3c c1       	rjmp	.+632    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2d40:	1c c0       	rjmp	.+56     	; 0x2d7a <LCD_enuWriteFloatNum+0x13e>
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	61 e0       	ldi	r22, 0x01	; 1
    2d46:	40 e0       	ldi	r20, 0x00	; 0
    2d48:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2d4c:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
    2d4e:	84 e1       	ldi	r24, 0x14	; 20
    2d50:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2d54:	8f 87       	std	Y+15, r24	; 0x0f
				Local_u32Number /=10;
    2d56:	8d 81       	ldd	r24, Y+5	; 0x05
    2d58:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5a:	af 81       	ldd	r26, Y+7	; 0x07
    2d5c:	b8 85       	ldd	r27, Y+8	; 0x08
    2d5e:	2a e0       	ldi	r18, 0x0A	; 10
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e0       	ldi	r20, 0x00	; 0
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 80 22 	call	0x4500	; 0x4500 <__udivmodsi4>
    2d6e:	da 01       	movw	r26, r20
    2d70:	c9 01       	movw	r24, r18
    2d72:	8d 83       	std	Y+5, r24	; 0x05
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	af 83       	std	Y+7, r26	; 0x07
    2d78:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	af 81       	ldd	r26, Y+7	; 0x07
    2d80:	b8 85       	ldd	r27, Y+8	; 0x08
    2d82:	8b 30       	cpi	r24, 0x0B	; 11
    2d84:	91 05       	cpc	r25, r1
    2d86:	a1 05       	cpc	r26, r1
    2d88:	b1 05       	cpc	r27, r1
    2d8a:	30 f0       	brcs	.+12     	; 0x2d98 <LCD_enuWriteFloatNum+0x15c>
    2d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d8e:	88 23       	and	r24, r24
    2d90:	19 f4       	brne	.+6      	; 0x2d98 <LCD_enuWriteFloatNum+0x15c>
    2d92:	88 89       	ldd	r24, Y+16	; 0x10
    2d94:	88 23       	and	r24, r24
    2d96:	a9 f2       	breq	.-86     	; 0x2d42 <LCD_enuWriteFloatNum+0x106>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2d98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d9a:	88 23       	and	r24, r24
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <LCD_enuWriteFloatNum+0x164>
    2d9e:	0c c1       	rjmp	.+536    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2da0:	88 89       	ldd	r24, Y+16	; 0x10
    2da2:	88 23       	and	r24, r24
    2da4:	09 f0       	breq	.+2      	; 0x2da8 <LCD_enuWriteFloatNum+0x16c>
    2da6:	08 c1       	rjmp	.+528    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	61 e0       	ldi	r22, 0x01	; 1
    2dac:	40 e0       	ldi	r20, 0x00	; 0
    2dae:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2db2:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    2db4:	84 e0       	ldi	r24, 0x04	; 4
    2db6:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2dba:	88 8b       	std	Y+16, r24	; 0x10

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dbe:	88 23       	and	r24, r24
    2dc0:	09 f0       	breq	.+2      	; 0x2dc4 <LCD_enuWriteFloatNum+0x188>
    2dc2:	fa c0       	rjmp	.+500    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2dc4:	88 89       	ldd	r24, Y+16	; 0x10
    2dc6:	88 23       	and	r24, r24
    2dc8:	09 f0       	breq	.+2      	; 0x2dcc <LCD_enuWriteFloatNum+0x190>
    2dca:	f6 c0       	rjmp	.+492    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
				{
					do
					{
						Local_u8DigitCounter++;
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	8d 87       	std	Y+13, r24	; 0x0d
						DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	61 e0       	ldi	r22, 0x01	; 1
    2dd6:	41 e0       	ldi	r20, 0x01	; 1
    2dd8:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
						LCD_enuWriteNLatch(ZERO_ASCII + (Local_u32Integer % 10));
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de0:	ab 85       	ldd	r26, Y+11	; 0x0b
    2de2:	bc 85       	ldd	r27, Y+12	; 0x0c
    2de4:	2a e0       	ldi	r18, 0x0A	; 10
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	50 e0       	ldi	r21, 0x00	; 0
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	0e 94 80 22 	call	0x4500	; 0x4500 <__udivmodsi4>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	80 5d       	subi	r24, 0xD0	; 208
    2dfa:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
						Local_u32Integer /= 10;
    2dfe:	89 85       	ldd	r24, Y+9	; 0x09
    2e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e02:	ab 85       	ldd	r26, Y+11	; 0x0b
    2e04:	bc 85       	ldd	r27, Y+12	; 0x0c
    2e06:	2a e0       	ldi	r18, 0x0A	; 10
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e0       	ldi	r20, 0x00	; 0
    2e0c:	50 e0       	ldi	r21, 0x00	; 0
    2e0e:	bc 01       	movw	r22, r24
    2e10:	cd 01       	movw	r24, r26
    2e12:	0e 94 80 22 	call	0x4500	; 0x4500 <__udivmodsi4>
    2e16:	da 01       	movw	r26, r20
    2e18:	c9 01       	movw	r24, r18
    2e1a:	89 87       	std	Y+9, r24	; 0x09
    2e1c:	9a 87       	std	Y+10, r25	; 0x0a
    2e1e:	ab 87       	std	Y+11, r26	; 0x0b
    2e20:	bc 87       	std	Y+12, r27	; 0x0c
					}while(Local_u32Integer && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK);
    2e22:	89 85       	ldd	r24, Y+9	; 0x09
    2e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e26:	ab 85       	ldd	r26, Y+11	; 0x0b
    2e28:	bc 85       	ldd	r27, Y+12	; 0x0c
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	a1 05       	cpc	r26, r1
    2e2e:	b1 05       	cpc	r27, r1
    2e30:	31 f0       	breq	.+12     	; 0x2e3e <LCD_enuWriteFloatNum+0x202>
    2e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e34:	88 23       	and	r24, r24
    2e36:	19 f4       	brne	.+6      	; 0x2e3e <LCD_enuWriteFloatNum+0x202>
    2e38:	88 89       	ldd	r24, Y+16	; 0x10
    2e3a:	88 23       	and	r24, r24
    2e3c:	39 f2       	breq	.-114    	; 0x2dcc <LCD_enuWriteFloatNum+0x190>

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e40:	88 23       	and	r24, r24
    2e42:	09 f0       	breq	.+2      	; 0x2e46 <LCD_enuWriteFloatNum+0x20a>
    2e44:	b9 c0       	rjmp	.+370    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2e46:	88 89       	ldd	r24, Y+16	; 0x10
    2e48:	88 23       	and	r24, r24
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <LCD_enuWriteFloatNum+0x212>
    2e4c:	b5 c0       	rjmp	.+362    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
					{
						do
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	61 e0       	ldi	r22, 0x01	; 1
    2e52:	40 e0       	ldi	r20, 0x00	; 0
    2e54:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2e58:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    2e5a:	84 e1       	ldi	r24, 0x14	; 20
    2e5c:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2e60:	88 8b       	std	Y+16, r24	; 0x10
						}while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK );
    2e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e64:	8e 8b       	std	Y+22, r24	; 0x16
    2e66:	9e 89       	ldd	r25, Y+22	; 0x16
    2e68:	99 23       	and	r25, r25
    2e6a:	11 f0       	breq	.+4      	; 0x2e70 <LCD_enuWriteFloatNum+0x234>
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	8e 8b       	std	Y+22, r24	; 0x16
    2e70:	9e 89       	ldd	r25, Y+22	; 0x16
    2e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e74:	81 50       	subi	r24, 0x01	; 1
    2e76:	8d 87       	std	Y+13, r24	; 0x0d
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	89 27       	eor	r24, r25
    2e7c:	88 23       	and	r24, r24
    2e7e:	31 f4       	brne	.+12     	; 0x2e8c <LCD_enuWriteFloatNum+0x250>
    2e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e82:	88 23       	and	r24, r24
    2e84:	19 f4       	brne	.+6      	; 0x2e8c <LCD_enuWriteFloatNum+0x250>
    2e86:	88 89       	ldd	r24, Y+16	; 0x10
    2e88:	88 23       	and	r24, r24
    2e8a:	09 f3       	breq	.-62     	; 0x2e4e <LCD_enuWriteFloatNum+0x212>

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e8e:	88 23       	and	r24, r24
    2e90:	09 f0       	breq	.+2      	; 0x2e94 <LCD_enuWriteFloatNum+0x258>
    2e92:	92 c0       	rjmp	.+292    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2e94:	88 89       	ldd	r24, Y+16	; 0x10
    2e96:	88 23       	and	r24, r24
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <LCD_enuWriteFloatNum+0x260>
    2e9a:	8e c0       	rjmp	.+284    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	61 e0       	ldi	r22, 0x01	; 1
    2ea0:	40 e0       	ldi	r20, 0x00	; 0
    2ea2:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2ea6:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2ea8:	86 e0       	ldi	r24, 0x06	; 6
    2eaa:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2eae:	88 8b       	std	Y+16, r24	; 0x10

							if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eb2:	88 23       	and	r24, r24
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <LCD_enuWriteFloatNum+0x27c>
    2eb6:	80 c0       	rjmp	.+256    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2eb8:	88 89       	ldd	r24, Y+16	; 0x10
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <LCD_enuWriteFloatNum+0x284>
    2ebe:	7c c0       	rjmp	.+248    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
							{
								if(Local_f32_Fraction > 0.0f)
    2ec0:	69 81       	ldd	r22, Y+1	; 0x01
    2ec2:	7a 81       	ldd	r23, Y+2	; 0x02
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	50 e0       	ldi	r21, 0x00	; 0
    2ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed4:	18 16       	cp	r1, r24
    2ed6:	54 f4       	brge	.+20     	; 0x2eec <LCD_enuWriteFloatNum+0x2b0>
								{
									Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	61 e0       	ldi	r22, 0x01	; 1
    2edc:	41 e0       	ldi	r20, 0x01	; 1
    2ede:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2ee2:	8f 87       	std	Y+15, r24	; 0x0f
									Local_enuStatus[1] = LCD_enuWriteNLatch(DOT);
    2ee4:	8e e2       	ldi	r24, 0x2E	; 46
    2ee6:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2eea:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2eec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eee:	88 23       	and	r24, r24
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <LCD_enuWriteFloatNum+0x2b8>
    2ef2:	62 c0       	rjmp	.+196    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2ef4:	88 89       	ldd	r24, Y+16	; 0x10
    2ef6:	88 23       	and	r24, r24
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <LCD_enuWriteFloatNum+0x2c0>
    2efa:	5e c0       	rjmp	.+188    	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
								{
									Local_u8DigitCounter =0;
    2efc:	1d 86       	std	Y+13, r1	; 0x0d
    2efe:	3e c0       	rjmp	.+124    	; 0x2f7c <LCD_enuWriteFloatNum+0x340>
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
									{
										Local_u8DigitCounter++;
    2f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f02:	8f 5f       	subi	r24, 0xFF	; 255
    2f04:	8d 87       	std	Y+13, r24	; 0x0d
										Local_f32_Fraction *= 10.0;
    2f06:	69 81       	ldd	r22, Y+1	; 0x01
    2f08:	7a 81       	ldd	r23, Y+2	; 0x02
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	40 e2       	ldi	r20, 0x20	; 32
    2f14:	51 e4       	ldi	r21, 0x41	; 65
    2f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	9a 83       	std	Y+2, r25	; 0x02
    2f22:	ab 83       	std	Y+3, r26	; 0x03
    2f24:	bc 83       	std	Y+4, r27	; 0x04
										Local_u32Integer = (u32) Local_f32_Fraction;
    2f26:	69 81       	ldd	r22, Y+1	; 0x01
    2f28:	7a 81       	ldd	r23, Y+2	; 0x02
    2f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	89 87       	std	Y+9, r24	; 0x09
    2f38:	9a 87       	std	Y+10, r25	; 0x0a
    2f3a:	ab 87       	std	Y+11, r26	; 0x0b
    2f3c:	bc 87       	std	Y+12, r27	; 0x0c
										Local_f32_Fraction -= Local_u32Integer;
    2f3e:	69 85       	ldd	r22, Y+9	; 0x09
    2f40:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f42:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f44:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f46:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2f4a:	9b 01       	movw	r18, r22
    2f4c:	ac 01       	movw	r20, r24
    2f4e:	69 81       	ldd	r22, Y+1	; 0x01
    2f50:	7a 81       	ldd	r23, Y+2	; 0x02
    2f52:	8b 81       	ldd	r24, Y+3	; 0x03
    2f54:	9c 81       	ldd	r25, Y+4	; 0x04
    2f56:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    2f60:	9a 83       	std	Y+2, r25	; 0x02
    2f62:	ab 83       	std	Y+3, r26	; 0x03
    2f64:	bc 83       	std	Y+4, r27	; 0x04
										Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	61 e0       	ldi	r22, 0x01	; 1
    2f6a:	41 e0       	ldi	r20, 0x01	; 1
    2f6c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    2f70:	8f 87       	std	Y+15, r24	; 0x0f
										Local_enuStatus[1] = LCD_enuWriteNLatch((ZERO_ASCII + Local_u32Integer));
    2f72:	89 85       	ldd	r24, Y+9	; 0x09
    2f74:	80 5d       	subi	r24, 0xD0	; 208
    2f76:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    2f7a:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
								{
									Local_u8DigitCounter =0;
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2f7c:	1d 8a       	std	Y+21, r1	; 0x15
    2f7e:	69 81       	ldd	r22, Y+1	; 0x01
    2f80:	7a 81       	ldd	r23, Y+2	; 0x02
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	9c 81       	ldd	r25, Y+4	; 0x04
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f92:	18 16       	cp	r1, r24
    2f94:	14 f4       	brge	.+4      	; 0x2f9a <LCD_enuWriteFloatNum+0x35e>
    2f96:	91 e0       	ldi	r25, 0x01	; 1
    2f98:	9d 8b       	std	Y+21, r25	; 0x15
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	9d 89       	ldd	r25, Y+21	; 0x15
    2f9e:	89 27       	eor	r24, r25
    2fa0:	88 23       	and	r24, r24
    2fa2:	51 f4       	brne	.+20     	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa6:	86 30       	cpi	r24, 0x06	; 6
    2fa8:	38 f4       	brcc	.+14     	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fac:	88 23       	and	r24, r24
    2fae:	21 f4       	brne	.+8      	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2fb0:	88 89       	ldd	r24, Y+16	; 0x10
    2fb2:	88 23       	and	r24, r24
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <LCD_enuWriteFloatNum+0x37c>
    2fb6:	a4 cf       	rjmp	.-184    	; 0x2f00 <LCD_enuWriteFloatNum+0x2c4>
				}
			}
		}
	}

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2fb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fba:	88 23       	and	r24, r24
    2fbc:	21 f4       	brne	.+8      	; 0x2fc6 <LCD_enuWriteFloatNum+0x38a>
    2fbe:	88 89       	ldd	r24, Y+16	; 0x10
    2fc0:	88 23       	and	r24, r24
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <LCD_enuWriteFloatNum+0x38a>
		 	 Local_enuErrorState = ES_OK;
    2fc4:	1e 86       	std	Y+14, r1	; 0x0e

	return Local_enuErrorState ;
    2fc6:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    2fc8:	66 96       	adiw	r28, 0x16	; 22
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	f8 94       	cli
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	cd bf       	out	0x3d, r28	; 61
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <LCD_enuWriteExtraPattern>:

/*		ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)		*/
ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	2b 97       	sbiw	r28, 0x0b	; 11
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	6f 83       	std	Y+7, r22	; 0x07
    2ff4:	48 87       	std	Y+8, r20	; 0x08
    2ff6:	29 87       	std	Y+9, r18	; 0x09

	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
    2ffc:	88 85       	ldd	r24, Y+8	; 0x08
    2ffe:	85 36       	cpi	r24, 0x65	; 101
    3000:	08 f4       	brcc	.+2      	; 0x3004 <LCD_enuWriteExtraPattern+0x2a>
    3002:	52 c0       	rjmp	.+164    	; 0x30a8 <LCD_enuWriteExtraPattern+0xce>
    3004:	88 85       	ldd	r24, Y+8	; 0x08
    3006:	8d 36       	cpi	r24, 0x6D	; 109
    3008:	08 f0       	brcs	.+2      	; 0x300c <LCD_enuWriteExtraPattern+0x32>
    300a:	4e c0       	rjmp	.+156    	; 0x30a8 <LCD_enuWriteExtraPattern+0xce>
    300c:	88 85       	ldd	r24, Y+8	; 0x08
    300e:	28 2f       	mov	r18, r24
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	8f 81       	ldd	r24, Y+7	; 0x07
    3014:	88 2f       	mov	r24, r24
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	82 0f       	add	r24, r18
    301a:	93 1f       	adc	r25, r19
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	8d 36       	cpi	r24, 0x6D	; 109
    3020:	91 05       	cpc	r25, r1
    3022:	0c f0       	brlt	.+2      	; 0x3026 <LCD_enuWriteExtraPattern+0x4c>
    3024:	41 c0       	rjmp	.+130    	; 0x30a8 <LCD_enuWriteExtraPattern+0xce>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	61 e0       	ldi	r22, 0x01	; 1
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    3030:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));
    3032:	88 85       	ldd	r24, Y+8	; 0x08
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	8d 55       	subi	r24, 0x5D	; 93
    303a:	90 40       	sbci	r25, 0x00	; 0
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	88 0f       	add	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    304c:	8c 83       	std	Y+4, r24	; 0x04

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    304e:	19 82       	std	Y+1, r1	; 0x01
    3050:	15 c0       	rjmp	.+42     	; 0x307c <LCD_enuWriteExtraPattern+0xa2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	61 e0       	ldi	r22, 0x01	; 1
    3056:	41 e0       	ldi	r20, 0x01	; 1
    3058:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    305c:	8b 83       	std	Y+3, r24	; 0x03
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	8d 81       	ldd	r24, Y+5	; 0x05
    3066:	9e 81       	ldd	r25, Y+6	; 0x06
    3068:	fc 01       	movw	r30, r24
    306a:	e2 0f       	add	r30, r18
    306c:	f3 1f       	adc	r31, r19
    306e:	80 81       	ld	r24, Z
    3070:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    3074:	8c 83       	std	Y+4, r24	; 0x04
	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	8f 5f       	subi	r24, 0xFF	; 255
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	28 2f       	mov	r18, r24
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	8f 81       	ldd	r24, Y+7	; 0x07
    3084:	88 2f       	mov	r24, r24
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	88 0f       	add	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	28 17       	cp	r18, r24
    3096:	39 07       	cpc	r19, r25
    3098:	4c f4       	brge	.+18     	; 0x30ac <LCD_enuWriteExtraPattern+0xd2>
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	88 23       	and	r24, r24
    309e:	31 f4       	brne	.+12     	; 0x30ac <LCD_enuWriteExtraPattern+0xd2>
    30a0:	8c 81       	ldd	r24, Y+4	; 0x04
    30a2:	88 23       	and	r24, r24
    30a4:	b1 f2       	breq	.-84     	; 0x3052 <LCD_enuWriteExtraPattern+0x78>
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <LCD_enuWriteExtraPattern+0xd2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    30a8:	82 e0       	ldi	r24, 0x02	; 2
    30aa:	8a 83       	std	Y+2, r24	; 0x02

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	82 30       	cpi	r24, 0x02	; 2
    30b0:	71 f1       	breq	.+92     	; 0x310e <LCD_enuWriteExtraPattern+0x134>
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	88 23       	and	r24, r24
    30b6:	59 f5       	brne	.+86     	; 0x310e <LCD_enuWriteExtraPattern+0x134>
    30b8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ba:	88 23       	and	r24, r24
    30bc:	41 f5       	brne	.+80     	; 0x310e <LCD_enuWriteExtraPattern+0x134>
	{
		if(Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT || Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT )
    30be:	89 85       	ldd	r24, Y+9	; 0x09
    30c0:	8e 36       	cpi	r24, 0x6E	; 110
    30c2:	19 f0       	breq	.+6      	; 0x30ca <LCD_enuWriteExtraPattern+0xf0>
    30c4:	89 85       	ldd	r24, Y+9	; 0x09
    30c6:	8e 36       	cpi	r24, 0x6E	; 110
    30c8:	01 f5       	brne	.+64     	; 0x310a <LCD_enuWriteExtraPattern+0x130>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	61 e0       	ldi	r22, 0x01	; 1
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    30d4:	8b 83       	std	Y+3, r24	; 0x03

			switch(Copy_u8DisplayDirection)
    30d6:	89 85       	ldd	r24, Y+9	; 0x09
    30d8:	28 2f       	mov	r18, r24
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	3b 87       	std	Y+11, r19	; 0x0b
    30de:	2a 87       	std	Y+10, r18	; 0x0a
    30e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    30e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    30e4:	8e 36       	cpi	r24, 0x6E	; 110
    30e6:	91 05       	cpc	r25, r1
    30e8:	31 f0       	breq	.+12     	; 0x30f6 <LCD_enuWriteExtraPattern+0x11c>
    30ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    30ec:	3b 85       	ldd	r19, Y+11	; 0x0b
    30ee:	2f 36       	cpi	r18, 0x6F	; 111
    30f0:	31 05       	cpc	r19, r1
    30f2:	31 f0       	breq	.+12     	; 0x3100 <LCD_enuWriteExtraPattern+0x126>
    30f4:	0c c0       	rjmp	.+24     	; 0x310e <LCD_enuWriteExtraPattern+0x134>
			{
				case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    30f6:	86 e0       	ldi	r24, 0x06	; 6
    30f8:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    30fc:	8c 83       	std	Y+4, r24	; 0x04
    30fe:	07 c0       	rjmp	.+14     	; 0x310e <LCD_enuWriteExtraPattern+0x134>
												break;
				case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    3100:	84 e0       	ldi	r24, 0x04	; 4
    3102:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    3106:	8c 83       	std	Y+4, r24	; 0x04
    3108:	02 c0       	rjmp	.+4      	; 0x310e <LCD_enuWriteExtraPattern+0x134>
												break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	8a 83       	std	Y+2, r24	; 0x02
	}

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    310e:	8a 81       	ldd	r24, Y+2	; 0x02
    3110:	82 30       	cpi	r24, 0x02	; 2
    3112:	39 f0       	breq	.+14     	; 0x3122 <LCD_enuWriteExtraPattern+0x148>
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	88 23       	and	r24, r24
    3118:	21 f4       	brne	.+8      	; 0x3122 <LCD_enuWriteExtraPattern+0x148>
    311a:	8c 81       	ldd	r24, Y+4	; 0x04
    311c:	88 23       	and	r24, r24
    311e:	09 f4       	brne	.+2      	; 0x3122 <LCD_enuWriteExtraPattern+0x148>
	 	 Local_enuErrorState = ES_OK;
    3120:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState;
    3122:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3124:	2b 96       	adiw	r28, 0x0b	; 11
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	cf 91       	pop	r28
    3132:	df 91       	pop	r29
    3134:	08 95       	ret

00003136 <LCD_enuSetTextDirection>:

ES_t LCD_enuSetTextDirection(u8 Copy_u8Direction)
{
    3136:	df 93       	push	r29
    3138:	cf 93       	push	r28
    313a:	00 d0       	rcall	.+0      	; 0x313c <LCD_enuSetTextDirection+0x6>
    313c:	00 d0       	rcall	.+0      	; 0x313e <LCD_enuSetTextDirection+0x8>
    313e:	00 d0       	rcall	.+0      	; 0x3140 <LCD_enuSetTextDirection+0xa>
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Direction == DISPLAY_DIR_RIGHT || Copy_u8Direction == DISPLAY_DIR_RIGHT )
    314a:	8c 81       	ldd	r24, Y+4	; 0x04
    314c:	8e 36       	cpi	r24, 0x6E	; 110
    314e:	19 f0       	breq	.+6      	; 0x3156 <LCD_enuSetTextDirection+0x20>
    3150:	8c 81       	ldd	r24, Y+4	; 0x04
    3152:	8e 36       	cpi	r24, 0x6E	; 110
    3154:	01 f5       	brne	.+64     	; 0x3196 <LCD_enuSetTextDirection+0x60>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	61 e0       	ldi	r22, 0x01	; 1
    315a:	40 e0       	ldi	r20, 0x00	; 0
    315c:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    3160:	8a 83       	std	Y+2, r24	; 0x02

		switch(Copy_u8Direction)
    3162:	8c 81       	ldd	r24, Y+4	; 0x04
    3164:	28 2f       	mov	r18, r24
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	3e 83       	std	Y+6, r19	; 0x06
    316a:	2d 83       	std	Y+5, r18	; 0x05
    316c:	8d 81       	ldd	r24, Y+5	; 0x05
    316e:	9e 81       	ldd	r25, Y+6	; 0x06
    3170:	8e 36       	cpi	r24, 0x6E	; 110
    3172:	91 05       	cpc	r25, r1
    3174:	31 f0       	breq	.+12     	; 0x3182 <LCD_enuSetTextDirection+0x4c>
    3176:	2d 81       	ldd	r18, Y+5	; 0x05
    3178:	3e 81       	ldd	r19, Y+6	; 0x06
    317a:	2f 36       	cpi	r18, 0x6F	; 111
    317c:	31 05       	cpc	r19, r1
    317e:	31 f0       	breq	.+12     	; 0x318c <LCD_enuSetTextDirection+0x56>
    3180:	0c c0       	rjmp	.+24     	; 0x319a <LCD_enuSetTextDirection+0x64>
		{
			case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    3182:	86 e0       	ldi	r24, 0x06	; 6
    3184:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    3188:	8b 83       	std	Y+3, r24	; 0x03
    318a:	07 c0       	rjmp	.+14     	; 0x319a <LCD_enuSetTextDirection+0x64>
											break;
			case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    318c:	84 e0       	ldi	r24, 0x04	; 4
    318e:	0e 94 b5 12 	call	0x256a	; 0x256a <LCD_enuWriteNLatch>
    3192:	8b 83       	std	Y+3, r24	; 0x03
    3194:	02 c0       	rjmp	.+4      	; 0x319a <LCD_enuSetTextDirection+0x64>
											break;
		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3196:	82 e0       	ldi	r24, 0x02	; 2
    3198:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	82 30       	cpi	r24, 0x02	; 2
    319e:	39 f0       	breq	.+14     	; 0x31ae <LCD_enuSetTextDirection+0x78>
    31a0:	8a 81       	ldd	r24, Y+2	; 0x02
    31a2:	88 23       	and	r24, r24
    31a4:	21 f4       	brne	.+8      	; 0x31ae <LCD_enuSetTextDirection+0x78>
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	88 23       	and	r24, r24
    31aa:	09 f4       	brne	.+2      	; 0x31ae <LCD_enuSetTextDirection+0x78>
		 	 Local_enuErrorState = ES_OK;
    31ac:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    31b0:	26 96       	adiw	r28, 0x06	; 6
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <Keypad_enuInit>:
extern u8 Kpad_u8KeyValues[];
extern KP_Output_t KeyPadCols[];
extern KP_Input_t KeyPadRows[];

ES_t Keypad_enuInit(void)
{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	00 d0       	rcall	.+0      	; 0x31c8 <Keypad_enuInit+0x6>
    31c8:	00 d0       	rcall	.+0      	; 0x31ca <Keypad_enuInit+0x8>
    31ca:	0f 92       	push	r0
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Iter=0 , Local_u8Flag = 0;
    31d4:	1a 82       	std	Y+2, r1	; 0x02
    31d6:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    31d8:	90 91 15 02 	lds	r25, 0x0215
    31dc:	80 91 14 02 	lds	r24, 0x0214
    31e0:	89 17       	cp	r24, r25
    31e2:	08 f4       	brcc	.+2      	; 0x31e6 <Keypad_enuInit+0x24>
    31e4:	af c0       	rjmp	.+350    	; 0x3344 <Keypad_enuInit+0x182>
    31e6:	90 91 16 02 	lds	r25, 0x0216
    31ea:	80 91 14 02 	lds	r24, 0x0214
    31ee:	89 17       	cp	r24, r25
    31f0:	08 f4       	brcc	.+2      	; 0x31f4 <Keypad_enuInit+0x32>
    31f2:	a8 c0       	rjmp	.+336    	; 0x3344 <Keypad_enuInit+0x182>
    31f4:	54 c0       	rjmp	.+168    	; 0x329e <Keypad_enuInit+0xdc>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8INPUT	);
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	c9 01       	movw	r24, r18
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	82 0f       	add	r24, r18
    3204:	93 1f       	adc	r25, r19
    3206:	fc 01       	movw	r30, r24
    3208:	e1 5d       	subi	r30, 0xD1	; 209
    320a:	fd 4f       	sbci	r31, 0xFD	; 253
    320c:	40 81       	ld	r20, Z
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	c9 01       	movw	r24, r18
    3216:	88 0f       	add	r24, r24
    3218:	99 1f       	adc	r25, r25
    321a:	82 0f       	add	r24, r18
    321c:	93 1f       	adc	r25, r19
    321e:	fc 01       	movw	r30, r24
    3220:	e0 5d       	subi	r30, 0xD0	; 208
    3222:	fd 4f       	sbci	r31, 0xFD	; 253
    3224:	90 81       	ld	r25, Z
    3226:	84 2f       	mov	r24, r20
    3228:	69 2f       	mov	r22, r25
    322a:	40 e0       	ldi	r20, 0x00	; 0
    322c:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
    3230:	8c 83       	std	Y+4, r24	; 0x04
			Local_enuError[1] = DIO_enuSetPinValue		( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState	);
    3232:	8a 81       	ldd	r24, Y+2	; 0x02
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	c9 01       	movw	r24, r18
    323a:	88 0f       	add	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	82 0f       	add	r24, r18
    3240:	93 1f       	adc	r25, r19
    3242:	fc 01       	movw	r30, r24
    3244:	e1 5d       	subi	r30, 0xD1	; 209
    3246:	fd 4f       	sbci	r31, 0xFD	; 253
    3248:	50 81       	ld	r21, Z
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	c9 01       	movw	r24, r18
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	82 0f       	add	r24, r18
    3258:	93 1f       	adc	r25, r19
    325a:	fc 01       	movw	r30, r24
    325c:	e0 5d       	subi	r30, 0xD0	; 208
    325e:	fd 4f       	sbci	r31, 0xFD	; 253
    3260:	40 81       	ld	r20, Z
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	28 2f       	mov	r18, r24
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	c9 01       	movw	r24, r18
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	82 0f       	add	r24, r18
    3270:	93 1f       	adc	r25, r19
    3272:	fc 01       	movw	r30, r24
    3274:	ef 5c       	subi	r30, 0xCF	; 207
    3276:	fd 4f       	sbci	r31, 0xFD	; 253
    3278:	90 81       	ld	r25, Z
    327a:	85 2f       	mov	r24, r21
    327c:	64 2f       	mov	r22, r20
    327e:	49 2f       	mov	r20, r25
    3280:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    3284:	8d 83       	std	Y+5, r24	; 0x05

			if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    3286:	8c 81       	ldd	r24, Y+4	; 0x04
    3288:	88 23       	and	r24, r24
    328a:	19 f4       	brne	.+6      	; 0x3292 <Keypad_enuInit+0xd0>
    328c:	8d 81       	ldd	r24, Y+5	; 0x05
    328e:	88 23       	and	r24, r24
    3290:	19 f0       	breq	.+6      	; 0x3298 <Keypad_enuInit+0xd6>
			{
				Local_u8Flag = 1;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	89 83       	std	Y+1, r24	; 0x01
    3296:	09 c0       	rjmp	.+18     	; 0x32aa <Keypad_enuInit+0xe8>
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
	u8 Local_u8Iter=0 , Local_u8Flag = 0;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    3298:	8a 81       	ldd	r24, Y+2	; 0x02
    329a:	8f 5f       	subi	r24, 0xFF	; 255
    329c:	8a 83       	std	Y+2, r24	; 0x02
    329e:	90 91 15 02 	lds	r25, 0x0215
    32a2:	8a 81       	ldd	r24, Y+2	; 0x02
    32a4:	89 17       	cp	r24, r25
    32a6:	08 f4       	brcc	.+2      	; 0x32aa <Keypad_enuInit+0xe8>
    32a8:	a6 cf       	rjmp	.-180    	; 0x31f6 <Keypad_enuInit+0x34>
			{
				Local_u8Flag = 1;
				break;
			}
		}
		if(!Local_u8Flag)
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	88 23       	and	r24, r24
    32ae:	09 f0       	breq	.+2      	; 0x32b2 <Keypad_enuInit+0xf0>
    32b0:	44 c0       	rjmp	.+136    	; 0x333a <Keypad_enuInit+0x178>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    32b2:	1a 82       	std	Y+2, r1	; 0x02
    32b4:	3c c0       	rjmp	.+120    	; 0x332e <Keypad_enuInit+0x16c>
			{
				Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8OUTPUT );
    32b6:	8a 81       	ldd	r24, Y+2	; 0x02
    32b8:	88 2f       	mov	r24, r24
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	fc 01       	movw	r30, r24
    32c2:	e9 5d       	subi	r30, 0xD9	; 217
    32c4:	fd 4f       	sbci	r31, 0xFD	; 253
    32c6:	20 81       	ld	r18, Z
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	88 2f       	mov	r24, r24
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	88 0f       	add	r24, r24
    32d0:	99 1f       	adc	r25, r25
    32d2:	fc 01       	movw	r30, r24
    32d4:	e8 5d       	subi	r30, 0xD8	; 216
    32d6:	fd 4f       	sbci	r31, 0xFD	; 253
    32d8:	90 81       	ld	r25, Z
    32da:	82 2f       	mov	r24, r18
    32dc:	69 2f       	mov	r22, r25
    32de:	41 e0       	ldi	r20, 0x01	; 1
    32e0:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
    32e4:	8c 83       	std	Y+4, r24	; 0x04
				Local_enuError[1] = DIO_enuSetPinValue		( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8HIGH	 );
    32e6:	8a 81       	ldd	r24, Y+2	; 0x02
    32e8:	88 2f       	mov	r24, r24
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	88 0f       	add	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	fc 01       	movw	r30, r24
    32f2:	e9 5d       	subi	r30, 0xD9	; 217
    32f4:	fd 4f       	sbci	r31, 0xFD	; 253
    32f6:	20 81       	ld	r18, Z
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	88 2f       	mov	r24, r24
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	88 0f       	add	r24, r24
    3300:	99 1f       	adc	r25, r25
    3302:	fc 01       	movw	r30, r24
    3304:	e8 5d       	subi	r30, 0xD8	; 216
    3306:	fd 4f       	sbci	r31, 0xFD	; 253
    3308:	90 81       	ld	r25, Z
    330a:	82 2f       	mov	r24, r18
    330c:	69 2f       	mov	r22, r25
    330e:	41 e0       	ldi	r20, 0x01	; 1
    3310:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    3314:	8d 83       	std	Y+5, r24	; 0x05

				if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    3316:	8c 81       	ldd	r24, Y+4	; 0x04
    3318:	88 23       	and	r24, r24
    331a:	19 f4       	brne	.+6      	; 0x3322 <Keypad_enuInit+0x160>
    331c:	8d 81       	ldd	r24, Y+5	; 0x05
    331e:	88 23       	and	r24, r24
    3320:	19 f0       	breq	.+6      	; 0x3328 <Keypad_enuInit+0x166>
				{
					Local_u8Flag = 1;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	89 83       	std	Y+1, r24	; 0x01
    3326:	09 c0       	rjmp	.+18     	; 0x333a <Keypad_enuInit+0x178>
				break;
			}
		}
		if(!Local_u8Flag)
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	8f 5f       	subi	r24, 0xFF	; 255
    332c:	8a 83       	std	Y+2, r24	; 0x02
    332e:	90 91 16 02 	lds	r25, 0x0216
    3332:	8a 81       	ldd	r24, Y+2	; 0x02
    3334:	89 17       	cp	r24, r25
    3336:	08 f4       	brcc	.+2      	; 0x333a <Keypad_enuInit+0x178>
    3338:	be cf       	rjmp	.-132    	; 0x32b6 <Keypad_enuInit+0xf4>
					Local_u8Flag = 1;
					break;
				}
			}
		}
		if( !Local_u8Flag )
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	88 23       	and	r24, r24
    333e:	21 f4       	brne	.+8      	; 0x3348 <Keypad_enuInit+0x186>
			Local_enuErrorState = ES_OK;
    3340:	1b 82       	std	Y+3, r1	; 0x03
    3342:	02 c0       	rjmp	.+4      	; 0x3348 <Keypad_enuInit+0x186>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3344:	82 e0       	ldi	r24, 0x02	; 2
    3346:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState;//DONE
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
}
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	0f 90       	pop	r0
    3354:	cf 91       	pop	r28
    3356:	df 91       	pop	r29
    3358:	08 95       	ret

0000335a <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)

{
    335a:	df 93       	push	r29
    335c:	cf 93       	push	r28
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	65 97       	sbiw	r28, 0x15	; 21
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	9d 8b       	std	Y+21, r25	; 0x15
    3370:	8c 8b       	std	Y+20, r24	; 0x14
	ES_t Local_enuErrorState = ES_NOK;
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	8a 8b       	std	Y+18, r24	; 0x12

	if (Copy_pu8KeyValue != NULL)
    3376:	8c 89       	ldd	r24, Y+20	; 0x14
    3378:	9d 89       	ldd	r25, Y+21	; 0x15
    337a:	00 97       	sbiw	r24, 0x00	; 0
    337c:	09 f4       	brne	.+2      	; 0x3380 <Keypad_enuGetPressedKey+0x26>
    337e:	61 c1       	rjmp	.+706    	; 0x3642 <Keypad_enuGetPressedKey+0x2e8>
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	8b 8b       	std	Y+19, r24	; 0x13
    3384:	19 8a       	std	Y+17, r1	; 0x11

		*Copy_pu8KeyValue = 0xff;
    3386:	ec 89       	ldd	r30, Y+20	; 0x14
    3388:	fd 89       	ldd	r31, Y+21	; 0x15
    338a:	8f ef       	ldi	r24, 0xFF	; 255
    338c:	80 83       	st	Z, r24

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    338e:	18 8a       	std	Y+16, r1	; 0x10
    3390:	51 c1       	rjmp	.+674    	; 0x3634 <Keypad_enuGetPressedKey+0x2da>
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );
    3392:	88 89       	ldd	r24, Y+16	; 0x10
    3394:	88 2f       	mov	r24, r24
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	88 0f       	add	r24, r24
    339a:	99 1f       	adc	r25, r25
    339c:	fc 01       	movw	r30, r24
    339e:	e9 5d       	subi	r30, 0xD9	; 217
    33a0:	fd 4f       	sbci	r31, 0xFD	; 253
    33a2:	20 81       	ld	r18, Z
    33a4:	88 89       	ldd	r24, Y+16	; 0x10
    33a6:	88 2f       	mov	r24, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	fc 01       	movw	r30, r24
    33b0:	e8 5d       	subi	r30, 0xD8	; 216
    33b2:	fd 4f       	sbci	r31, 0xFD	; 253
    33b4:	90 81       	ld	r25, Z
    33b6:	82 2f       	mov	r24, r18
    33b8:	69 2f       	mov	r22, r25
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    33c0:	8a 8b       	std	Y+18, r24	; 0x12

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    33c2:	1f 86       	std	Y+15, r1	; 0x0f
    33c4:	0d c1       	rjmp	.+538    	; 0x35e0 <Keypad_enuGetPressedKey+0x286>
			{
				Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    33c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c8:	28 2f       	mov	r18, r24
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	c9 01       	movw	r24, r18
    33ce:	88 0f       	add	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	82 0f       	add	r24, r18
    33d4:	93 1f       	adc	r25, r19
    33d6:	fc 01       	movw	r30, r24
    33d8:	e1 5d       	subi	r30, 0xD1	; 209
    33da:	fd 4f       	sbci	r31, 0xFD	; 253
    33dc:	40 81       	ld	r20, Z
    33de:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e0:	28 2f       	mov	r18, r24
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	c9 01       	movw	r24, r18
    33e6:	88 0f       	add	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	82 0f       	add	r24, r18
    33ec:	93 1f       	adc	r25, r19
    33ee:	fc 01       	movw	r30, r24
    33f0:	e0 5d       	subi	r30, 0xD0	; 208
    33f2:	fd 4f       	sbci	r31, 0xFD	; 253
    33f4:	90 81       	ld	r25, Z
    33f6:	9e 01       	movw	r18, r28
    33f8:	2d 5e       	subi	r18, 0xED	; 237
    33fa:	3f 4f       	sbci	r19, 0xFF	; 255
    33fc:	84 2f       	mov	r24, r20
    33fe:	69 2f       	mov	r22, r25
    3400:	a9 01       	movw	r20, r18
    3402:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_enuGetPinValue>
    3406:	8a 8b       	std	Y+18, r24	; 0x12

				if( (Local_u8RowValue == DIO_u8LOW) && ( Local_enuErrorState == ES_OK) )
    3408:	8b 89       	ldd	r24, Y+19	; 0x13
    340a:	88 23       	and	r24, r24
    340c:	09 f0       	breq	.+2      	; 0x3410 <Keypad_enuGetPressedKey+0xb6>
    340e:	e5 c0       	rjmp	.+458    	; 0x35da <Keypad_enuGetPressedKey+0x280>
    3410:	8a 89       	ldd	r24, Y+18	; 0x12
    3412:	88 23       	and	r24, r24
    3414:	09 f0       	breq	.+2      	; 0x3418 <Keypad_enuGetPressedKey+0xbe>
    3416:	e1 c0       	rjmp	.+450    	; 0x35da <Keypad_enuGetPressedKey+0x280>
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	a0 e4       	ldi	r26, 0x40	; 64
    341e:	b0 e4       	ldi	r27, 0x40	; 64
    3420:	8b 87       	std	Y+11, r24	; 0x0b
    3422:	9c 87       	std	Y+12, r25	; 0x0c
    3424:	ad 87       	std	Y+13, r26	; 0x0d
    3426:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3428:	6b 85       	ldd	r22, Y+11	; 0x0b
    342a:	7c 85       	ldd	r23, Y+12	; 0x0c
    342c:	8d 85       	ldd	r24, Y+13	; 0x0d
    342e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	4a e7       	ldi	r20, 0x7A	; 122
    3436:	55 e4       	ldi	r21, 0x45	; 69
    3438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	8f 83       	std	Y+7, r24	; 0x07
    3442:	98 87       	std	Y+8, r25	; 0x08
    3444:	a9 87       	std	Y+9, r26	; 0x09
    3446:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3448:	6f 81       	ldd	r22, Y+7	; 0x07
    344a:	78 85       	ldd	r23, Y+8	; 0x08
    344c:	89 85       	ldd	r24, Y+9	; 0x09
    344e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	40 e8       	ldi	r20, 0x80	; 128
    3456:	5f e3       	ldi	r21, 0x3F	; 63
    3458:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    345c:	88 23       	and	r24, r24
    345e:	2c f4       	brge	.+10     	; 0x346a <Keypad_enuGetPressedKey+0x110>
		__ticks = 1;
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	9e 83       	std	Y+6, r25	; 0x06
    3466:	8d 83       	std	Y+5, r24	; 0x05
    3468:	3f c0       	rjmp	.+126    	; 0x34e8 <Keypad_enuGetPressedKey+0x18e>
	else if (__tmp > 65535)
    346a:	6f 81       	ldd	r22, Y+7	; 0x07
    346c:	78 85       	ldd	r23, Y+8	; 0x08
    346e:	89 85       	ldd	r24, Y+9	; 0x09
    3470:	9a 85       	ldd	r25, Y+10	; 0x0a
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	3f ef       	ldi	r19, 0xFF	; 255
    3476:	4f e7       	ldi	r20, 0x7F	; 127
    3478:	57 e4       	ldi	r21, 0x47	; 71
    347a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    347e:	18 16       	cp	r1, r24
    3480:	4c f5       	brge	.+82     	; 0x34d4 <Keypad_enuGetPressedKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3482:	6b 85       	ldd	r22, Y+11	; 0x0b
    3484:	7c 85       	ldd	r23, Y+12	; 0x0c
    3486:	8d 85       	ldd	r24, Y+13	; 0x0d
    3488:	9e 85       	ldd	r25, Y+14	; 0x0e
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	40 e2       	ldi	r20, 0x20	; 32
    3490:	51 e4       	ldi	r21, 0x41	; 65
    3492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	bc 01       	movw	r22, r24
    349c:	cd 01       	movw	r24, r26
    349e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	9e 83       	std	Y+6, r25	; 0x06
    34a8:	8d 83       	std	Y+5, r24	; 0x05
    34aa:	0f c0       	rjmp	.+30     	; 0x34ca <Keypad_enuGetPressedKey+0x170>
    34ac:	80 e9       	ldi	r24, 0x90	; 144
    34ae:	91 e0       	ldi	r25, 0x01	; 1
    34b0:	9c 83       	std	Y+4, r25	; 0x04
    34b2:	8b 83       	std	Y+3, r24	; 0x03
    34b4:	8b 81       	ldd	r24, Y+3	; 0x03
    34b6:	9c 81       	ldd	r25, Y+4	; 0x04
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	f1 f7       	brne	.-4      	; 0x34b8 <Keypad_enuGetPressedKey+0x15e>
    34bc:	9c 83       	std	Y+4, r25	; 0x04
    34be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c0:	8d 81       	ldd	r24, Y+5	; 0x05
    34c2:	9e 81       	ldd	r25, Y+6	; 0x06
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	9e 83       	std	Y+6, r25	; 0x06
    34c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ca:	8d 81       	ldd	r24, Y+5	; 0x05
    34cc:	9e 81       	ldd	r25, Y+6	; 0x06
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	69 f7       	brne	.-38     	; 0x34ac <Keypad_enuGetPressedKey+0x152>
    34d2:	14 c0       	rjmp	.+40     	; 0x34fc <Keypad_enuGetPressedKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d4:	6f 81       	ldd	r22, Y+7	; 0x07
    34d6:	78 85       	ldd	r23, Y+8	; 0x08
    34d8:	89 85       	ldd	r24, Y+9	; 0x09
    34da:	9a 85       	ldd	r25, Y+10	; 0x0a
    34dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	9e 83       	std	Y+6, r25	; 0x06
    34e6:	8d 83       	std	Y+5, r24	; 0x05
    34e8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ea:	9e 81       	ldd	r25, Y+6	; 0x06
    34ec:	9a 83       	std	Y+2, r25	; 0x02
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	9a 81       	ldd	r25, Y+2	; 0x02
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <Keypad_enuGetPressedKey+0x19a>
    34f8:	9a 83       	std	Y+2, r25	; 0x02
    34fa:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(KEYPAD_BOUNCE_DELAY);
					Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    34fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    34fe:	28 2f       	mov	r18, r24
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	c9 01       	movw	r24, r18
    3504:	88 0f       	add	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	82 0f       	add	r24, r18
    350a:	93 1f       	adc	r25, r19
    350c:	fc 01       	movw	r30, r24
    350e:	e1 5d       	subi	r30, 0xD1	; 209
    3510:	fd 4f       	sbci	r31, 0xFD	; 253
    3512:	40 81       	ld	r20, Z
    3514:	8f 85       	ldd	r24, Y+15	; 0x0f
    3516:	28 2f       	mov	r18, r24
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	c9 01       	movw	r24, r18
    351c:	88 0f       	add	r24, r24
    351e:	99 1f       	adc	r25, r25
    3520:	82 0f       	add	r24, r18
    3522:	93 1f       	adc	r25, r19
    3524:	fc 01       	movw	r30, r24
    3526:	e0 5d       	subi	r30, 0xD0	; 208
    3528:	fd 4f       	sbci	r31, 0xFD	; 253
    352a:	90 81       	ld	r25, Z
    352c:	9e 01       	movw	r18, r28
    352e:	2d 5e       	subi	r18, 0xED	; 237
    3530:	3f 4f       	sbci	r19, 0xFF	; 255
    3532:	84 2f       	mov	r24, r20
    3534:	69 2f       	mov	r22, r25
    3536:	a9 01       	movw	r20, r18
    3538:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_enuGetPinValue>
    353c:	8a 8b       	std	Y+18, r24	; 0x12

					if( Local_enuErrorState == ES_OK  && Local_u8RowValue == DIO_u8LOW )
    353e:	8a 89       	ldd	r24, Y+18	; 0x12
    3540:	88 23       	and	r24, r24
    3542:	09 f0       	breq	.+2      	; 0x3546 <Keypad_enuGetPressedKey+0x1ec>
    3544:	4a c0       	rjmp	.+148    	; 0x35da <Keypad_enuGetPressedKey+0x280>
    3546:	8b 89       	ldd	r24, Y+19	; 0x13
    3548:	88 23       	and	r24, r24
    354a:	09 f0       	breq	.+2      	; 0x354e <Keypad_enuGetPressedKey+0x1f4>
    354c:	46 c0       	rjmp	.+140    	; 0x35da <Keypad_enuGetPressedKey+0x280>
					{
						Local_u8Pressed = 1 ;
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	89 8b       	std	Y+17, r24	; 0x11
						*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];
    3552:	8f 85       	ldd	r24, Y+15	; 0x0f
    3554:	28 2f       	mov	r18, r24
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	80 91 16 02 	lds	r24, 0x0216
    355c:	88 2f       	mov	r24, r24
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	a9 01       	movw	r20, r18
    3562:	48 9f       	mul	r20, r24
    3564:	90 01       	movw	r18, r0
    3566:	49 9f       	mul	r20, r25
    3568:	30 0d       	add	r19, r0
    356a:	58 9f       	mul	r21, r24
    356c:	30 0d       	add	r19, r0
    356e:	11 24       	eor	r1, r1
    3570:	88 89       	ldd	r24, Y+16	; 0x10
    3572:	88 2f       	mov	r24, r24
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	82 0f       	add	r24, r18
    3578:	93 1f       	adc	r25, r19
    357a:	fc 01       	movw	r30, r24
    357c:	e9 5e       	subi	r30, 0xE9	; 233
    357e:	fd 4f       	sbci	r31, 0xFD	; 253
    3580:	80 81       	ld	r24, Z
    3582:	ec 89       	ldd	r30, Y+20	; 0x14
    3584:	fd 89       	ldd	r31, Y+21	; 0x15
    3586:	80 83       	st	Z, r24
    3588:	21 c0       	rjmp	.+66     	; 0x35cc <Keypad_enuGetPressedKey+0x272>

						while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
						{
							Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    358a:	8f 85       	ldd	r24, Y+15	; 0x0f
    358c:	28 2f       	mov	r18, r24
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	c9 01       	movw	r24, r18
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	82 0f       	add	r24, r18
    3598:	93 1f       	adc	r25, r19
    359a:	fc 01       	movw	r30, r24
    359c:	e1 5d       	subi	r30, 0xD1	; 209
    359e:	fd 4f       	sbci	r31, 0xFD	; 253
    35a0:	40 81       	ld	r20, Z
    35a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35a4:	28 2f       	mov	r18, r24
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	c9 01       	movw	r24, r18
    35aa:	88 0f       	add	r24, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	82 0f       	add	r24, r18
    35b0:	93 1f       	adc	r25, r19
    35b2:	fc 01       	movw	r30, r24
    35b4:	e0 5d       	subi	r30, 0xD0	; 208
    35b6:	fd 4f       	sbci	r31, 0xFD	; 253
    35b8:	90 81       	ld	r25, Z
    35ba:	9e 01       	movw	r18, r28
    35bc:	2d 5e       	subi	r18, 0xED	; 237
    35be:	3f 4f       	sbci	r19, 0xFF	; 255
    35c0:	84 2f       	mov	r24, r20
    35c2:	69 2f       	mov	r22, r25
    35c4:	a9 01       	movw	r20, r18
    35c6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <DIO_enuGetPinValue>
    35ca:	8a 8b       	std	Y+18, r24	; 0x12
					if( Local_enuErrorState == ES_OK  && Local_u8RowValue == DIO_u8LOW )
					{
						Local_u8Pressed = 1 ;
						*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];

						while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
    35cc:	8b 89       	ldd	r24, Y+19	; 0x13
    35ce:	88 23       	and	r24, r24
    35d0:	81 f4       	brne	.+32     	; 0x35f2 <Keypad_enuGetPressedKey+0x298>
    35d2:	8a 89       	ldd	r24, Y+18	; 0x12
    35d4:	88 23       	and	r24, r24
    35d6:	c9 f2       	breq	.-78     	; 0x358a <Keypad_enuGetPressedKey+0x230>
    35d8:	0c c0       	rjmp	.+24     	; 0x35f2 <Keypad_enuGetPressedKey+0x298>

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    35da:	8f 85       	ldd	r24, Y+15	; 0x0f
    35dc:	8f 5f       	subi	r24, 0xFF	; 255
    35de:	8f 87       	std	Y+15, r24	; 0x0f
    35e0:	8a 89       	ldd	r24, Y+18	; 0x12
    35e2:	88 23       	and	r24, r24
    35e4:	31 f4       	brne	.+12     	; 0x35f2 <Keypad_enuGetPressedKey+0x298>
    35e6:	90 91 15 02 	lds	r25, 0x0215
    35ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ec:	89 17       	cp	r24, r25
    35ee:	08 f4       	brcc	.+2      	; 0x35f2 <Keypad_enuGetPressedKey+0x298>
    35f0:	ea ce       	rjmp	.-556    	; 0x33c6 <Keypad_enuGetPressedKey+0x6c>
						break;
					}
				}
			}

			if( (Local_u8Pressed == 1) || (Local_enuErrorState != ES_OK) )
    35f2:	89 89       	ldd	r24, Y+17	; 0x11
    35f4:	81 30       	cpi	r24, 0x01	; 1
    35f6:	39 f1       	breq	.+78     	; 0x3646 <Keypad_enuGetPressedKey+0x2ec>
    35f8:	8a 89       	ldd	r24, Y+18	; 0x12
    35fa:	88 23       	and	r24, r24
    35fc:	21 f5       	brne	.+72     	; 0x3646 <Keypad_enuGetPressedKey+0x2ec>
				break;
			else
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
    35fe:	88 89       	ldd	r24, Y+16	; 0x10
    3600:	88 2f       	mov	r24, r24
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	88 0f       	add	r24, r24
    3606:	99 1f       	adc	r25, r25
    3608:	fc 01       	movw	r30, r24
    360a:	e9 5d       	subi	r30, 0xD9	; 217
    360c:	fd 4f       	sbci	r31, 0xFD	; 253
    360e:	20 81       	ld	r18, Z
    3610:	88 89       	ldd	r24, Y+16	; 0x10
    3612:	88 2f       	mov	r24, r24
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	88 0f       	add	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	fc 01       	movw	r30, r24
    361c:	e8 5d       	subi	r30, 0xD8	; 216
    361e:	fd 4f       	sbci	r31, 0xFD	; 253
    3620:	90 81       	ld	r25, Z
    3622:	82 2f       	mov	r24, r18
    3624:	69 2f       	mov	r22, r25
    3626:	41 e0       	ldi	r20, 0x01	; 1
    3628:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    362c:	8a 8b       	std	Y+18, r24	; 0x12
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;

		*Copy_pu8KeyValue = 0xff;

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    362e:	88 89       	ldd	r24, Y+16	; 0x10
    3630:	8f 5f       	subi	r24, 0xFF	; 255
    3632:	88 8b       	std	Y+16, r24	; 0x10
    3634:	90 91 16 02 	lds	r25, 0x0216
    3638:	88 89       	ldd	r24, Y+16	; 0x10
    363a:	89 17       	cp	r24, r25
    363c:	08 f4       	brcc	.+2      	; 0x3640 <Keypad_enuGetPressedKey+0x2e6>
    363e:	a9 ce       	rjmp	.-686    	; 0x3392 <Keypad_enuGetPressedKey+0x38>
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <Keypad_enuGetPressedKey+0x2ec>
				break;
			else
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
		}
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    3642:	83 e0       	ldi	r24, 0x03	; 3
    3644:	8a 8b       	std	Y+18, r24	; 0x12

	return Local_enuErrorState;//DONE
    3646:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3648:	65 96       	adiw	r28, 0x15	; 21
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <Keypad_Sleep>:

ES_t Keypad_Sleep(void)
{
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	00 d0       	rcall	.+0      	; 0x3660 <Keypad_Sleep+0x6>
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter=0 ;
    3668:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    366a:	90 91 15 02 	lds	r25, 0x0215
    366e:	80 91 14 02 	lds	r24, 0x0214
    3672:	89 17       	cp	r24, r25
    3674:	08 f4       	brcc	.+2      	; 0x3678 <Keypad_Sleep+0x1e>
    3676:	5a c0       	rjmp	.+180    	; 0x372c <Keypad_Sleep+0xd2>
    3678:	90 91 16 02 	lds	r25, 0x0216
    367c:	80 91 14 02 	lds	r24, 0x0214
    3680:	89 17       	cp	r24, r25
    3682:	08 f4       	brcc	.+2      	; 0x3686 <Keypad_Sleep+0x2c>
    3684:	53 c0       	rjmp	.+166    	; 0x372c <Keypad_Sleep+0xd2>
    3686:	24 c0       	rjmp	.+72     	; 0x36d0 <Keypad_Sleep+0x76>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8FLOAT	);
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	28 2f       	mov	r18, r24
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	c9 01       	movw	r24, r18
    3690:	88 0f       	add	r24, r24
    3692:	99 1f       	adc	r25, r25
    3694:	82 0f       	add	r24, r18
    3696:	93 1f       	adc	r25, r19
    3698:	fc 01       	movw	r30, r24
    369a:	e1 5d       	subi	r30, 0xD1	; 209
    369c:	fd 4f       	sbci	r31, 0xFD	; 253
    369e:	40 81       	ld	r20, Z
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	28 2f       	mov	r18, r24
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	c9 01       	movw	r24, r18
    36a8:	88 0f       	add	r24, r24
    36aa:	99 1f       	adc	r25, r25
    36ac:	82 0f       	add	r24, r18
    36ae:	93 1f       	adc	r25, r19
    36b0:	fc 01       	movw	r30, r24
    36b2:	e0 5d       	subi	r30, 0xD0	; 208
    36b4:	fd 4f       	sbci	r31, 0xFD	; 253
    36b6:	90 81       	ld	r25, Z
    36b8:	84 2f       	mov	r24, r20
    36ba:	69 2f       	mov	r22, r25
    36bc:	40 e0       	ldi	r20, 0x00	; 0
    36be:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    36c2:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_enuErrorState != ES_OK  )	break;
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	88 23       	and	r24, r24
    36c8:	41 f4       	brne	.+16     	; 0x36da <Keypad_Sleep+0x80>
	ES_t Local_enuErrorState = ES_NOK ;
	u8 Local_u8Iter=0 ;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    36ca:	89 81       	ldd	r24, Y+1	; 0x01
    36cc:	8f 5f       	subi	r24, 0xFF	; 255
    36ce:	89 83       	std	Y+1, r24	; 0x01
    36d0:	90 91 15 02 	lds	r25, 0x0215
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	89 17       	cp	r24, r25
    36d8:	b8 f2       	brcs	.-82     	; 0x3688 <Keypad_Sleep+0x2e>
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8FLOAT	);

			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
    36da:	8a 81       	ldd	r24, Y+2	; 0x02
    36dc:	88 23       	and	r24, r24
    36de:	41 f5       	brne	.+80     	; 0x3730 <Keypad_Sleep+0xd6>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    36e0:	19 82       	std	Y+1, r1	; 0x01
    36e2:	1e c0       	rjmp	.+60     	; 0x3720 <Keypad_Sleep+0xc6>
			{
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8LOW );
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	88 2f       	mov	r24, r24
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	fc 01       	movw	r30, r24
    36f0:	e9 5d       	subi	r30, 0xD9	; 217
    36f2:	fd 4f       	sbci	r31, 0xFD	; 253
    36f4:	20 81       	ld	r18, Z
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	88 2f       	mov	r24, r24
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	88 0f       	add	r24, r24
    36fe:	99 1f       	adc	r25, r25
    3700:	fc 01       	movw	r30, r24
    3702:	e8 5d       	subi	r30, 0xD8	; 216
    3704:	fd 4f       	sbci	r31, 0xFD	; 253
    3706:	90 81       	ld	r25, Z
    3708:	82 2f       	mov	r24, r18
    370a:	69 2f       	mov	r22, r25
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    3712:	8a 83       	std	Y+2, r24	; 0x02

				if(Local_enuErrorState != ES_OK  )	break;
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	88 23       	and	r24, r24
    3718:	59 f4       	brne	.+22     	; 0x3730 <Keypad_Sleep+0xd6>
			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	8f 5f       	subi	r24, 0xFF	; 255
    371e:	89 83       	std	Y+1, r24	; 0x01
    3720:	90 91 16 02 	lds	r25, 0x0216
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	89 17       	cp	r24, r25
    3728:	e8 f2       	brcs	.-70     	; 0x36e4 <Keypad_Sleep+0x8a>
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <Keypad_Sleep+0xd6>

				if(Local_enuErrorState != ES_OK  )	break;
			}
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    372c:	82 e0       	ldi	r24, 0x02	; 2
    372e:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;//DONE
    3730:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	cf 91       	pop	r28
    3738:	df 91       	pop	r29
    373a:	08 95       	ret

0000373c <Keypad_Awake>:

ES_t Keypad_Awake(void)
{
    373c:	df 93       	push	r29
    373e:	cf 93       	push	r28
    3740:	00 d0       	rcall	.+0      	; 0x3742 <Keypad_Awake+0x6>
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter=0 ;
    374a:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    374c:	90 91 15 02 	lds	r25, 0x0215
    3750:	80 91 14 02 	lds	r24, 0x0214
    3754:	89 17       	cp	r24, r25
    3756:	08 f4       	brcc	.+2      	; 0x375a <Keypad_Awake+0x1e>
    3758:	66 c0       	rjmp	.+204    	; 0x3826 <Keypad_Awake+0xea>
    375a:	90 91 16 02 	lds	r25, 0x0216
    375e:	80 91 14 02 	lds	r24, 0x0214
    3762:	89 17       	cp	r24, r25
    3764:	08 f4       	brcc	.+2      	; 0x3768 <Keypad_Awake+0x2c>
    3766:	5f c0       	rjmp	.+190    	; 0x3826 <Keypad_Awake+0xea>
    3768:	30 c0       	rjmp	.+96     	; 0x37ca <Keypad_Awake+0x8e>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState );
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	28 2f       	mov	r18, r24
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	c9 01       	movw	r24, r18
    3772:	88 0f       	add	r24, r24
    3774:	99 1f       	adc	r25, r25
    3776:	82 0f       	add	r24, r18
    3778:	93 1f       	adc	r25, r19
    377a:	fc 01       	movw	r30, r24
    377c:	e1 5d       	subi	r30, 0xD1	; 209
    377e:	fd 4f       	sbci	r31, 0xFD	; 253
    3780:	50 81       	ld	r21, Z
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	28 2f       	mov	r18, r24
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	c9 01       	movw	r24, r18
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	82 0f       	add	r24, r18
    3790:	93 1f       	adc	r25, r19
    3792:	fc 01       	movw	r30, r24
    3794:	e0 5d       	subi	r30, 0xD0	; 208
    3796:	fd 4f       	sbci	r31, 0xFD	; 253
    3798:	40 81       	ld	r20, Z
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	28 2f       	mov	r18, r24
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	c9 01       	movw	r24, r18
    37a2:	88 0f       	add	r24, r24
    37a4:	99 1f       	adc	r25, r25
    37a6:	82 0f       	add	r24, r18
    37a8:	93 1f       	adc	r25, r19
    37aa:	fc 01       	movw	r30, r24
    37ac:	ef 5c       	subi	r30, 0xCF	; 207
    37ae:	fd 4f       	sbci	r31, 0xFD	; 253
    37b0:	90 81       	ld	r25, Z
    37b2:	85 2f       	mov	r24, r21
    37b4:	64 2f       	mov	r22, r20
    37b6:	49 2f       	mov	r20, r25
    37b8:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    37bc:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_enuErrorState != ES_OK  )	break;
    37be:	8a 81       	ldd	r24, Y+2	; 0x02
    37c0:	88 23       	and	r24, r24
    37c2:	41 f4       	brne	.+16     	; 0x37d4 <Keypad_Awake+0x98>
	ES_t Local_enuErrorState = ES_NOK ;
	u8 Local_u8Iter=0 ;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	8f 5f       	subi	r24, 0xFF	; 255
    37c8:	89 83       	std	Y+1, r24	; 0x01
    37ca:	90 91 15 02 	lds	r25, 0x0215
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	89 17       	cp	r24, r25
    37d2:	58 f2       	brcs	.-106    	; 0x376a <Keypad_Awake+0x2e>
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState );

			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	88 23       	and	r24, r24
    37d8:	41 f5       	brne	.+80     	; 0x382a <Keypad_Awake+0xee>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    37da:	19 82       	std	Y+1, r1	; 0x01
    37dc:	1e c0       	rjmp	.+60     	; 0x381a <Keypad_Awake+0xde>
			{
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8HIGH );
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	88 2f       	mov	r24, r24
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	fc 01       	movw	r30, r24
    37ea:	e9 5d       	subi	r30, 0xD9	; 217
    37ec:	fd 4f       	sbci	r31, 0xFD	; 253
    37ee:	20 81       	ld	r18, Z
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	88 2f       	mov	r24, r24
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	fc 01       	movw	r30, r24
    37fc:	e8 5d       	subi	r30, 0xD8	; 216
    37fe:	fd 4f       	sbci	r31, 0xFD	; 253
    3800:	90 81       	ld	r25, Z
    3802:	82 2f       	mov	r24, r18
    3804:	69 2f       	mov	r22, r25
    3806:	41 e0       	ldi	r20, 0x01	; 1
    3808:	0e 94 9f 0a 	call	0x153e	; 0x153e <DIO_enuSetPinValue>
    380c:	8a 83       	std	Y+2, r24	; 0x02

				if(Local_enuErrorState != ES_OK  )
    380e:	8a 81       	ldd	r24, Y+2	; 0x02
    3810:	88 23       	and	r24, r24
    3812:	59 f4       	brne	.+22     	; 0x382a <Keypad_Awake+0xee>
			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	8f 5f       	subi	r24, 0xFF	; 255
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	90 91 16 02 	lds	r25, 0x0216
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	89 17       	cp	r24, r25
    3822:	e8 f2       	brcs	.-70     	; 0x37de <Keypad_Awake+0xa2>
    3824:	02 c0       	rjmp	.+4      	; 0x382a <Keypad_Awake+0xee>
			}

		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3826:	82 e0       	ldi	r24, 0x02	; 2
    3828:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;//DONE
    382a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	08 95       	ret

00003836 <main>:
ES_t CheckCounterStatus(void);
ES_t ReadInputDigit(u8 *Copy_u8Digit);

int
main(void)
{
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	cd b7       	in	r28, 0x3d	; 61
    383c:	de b7       	in	r29, 0x3e	; 62
    383e:	c0 54       	subi	r28, 0x40	; 64
    3840:	d0 40       	sbci	r29, 0x00	; 0
    3842:	0f b6       	in	r0, 0x3f	; 63
    3844:	f8 94       	cli
    3846:	de bf       	out	0x3e, r29	; 62
    3848:	0f be       	out	0x3f, r0	; 63
    384a:	cd bf       	out	0x3d, r28	; 61
	ES_t  Local_enuErrorState ;
	u8 Local_u8Key = KEYPAD_NOT_PRESSED ;
    384c:	8f ef       	ldi	r24, 0xFF	; 255
    384e:	8e af       	std	Y+62, r24	; 0x3e
	s32 Local_s32Num = 0 ;
    3850:	19 ae       	std	Y+57, r1	; 0x39
    3852:	1a ae       	std	Y+58, r1	; 0x3a
    3854:	1b ae       	std	Y+59, r1	; 0x3b
    3856:	1c ae       	std	Y+60, r1	; 0x3c


	LCD_enuInit();
    3858:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_enuInit>
	Keypad_enuInit();
    385c:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <Keypad_enuInit>
	LD_enuInit();
    3860:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <LD_enuInit>
	Switch_enuInit();
    3864:	0e 94 ba 0c 	call	0x1974	; 0x1974 <Switch_enuInit>



	LCD_enuWriteCommand(0x08); //Turn Display OFF
    3868:	88 e0       	ldi	r24, 0x08	; 8
    386a:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>

	do
	{
		Local_enuErrorState = DetectPowerStatus();
    386e:	0e 94 0a 21 	call	0x4214	; 0x4214 <DetectPowerStatus>
    3872:	8d af       	std	Y+61, r24	; 0x3d
	}while( (Global_u8Power == POWER_OFF) && Local_enuErrorState ==ES_OK);
    3874:	80 91 3b 02 	lds	r24, 0x023B
    3878:	8a 30       	cpi	r24, 0x0A	; 10
    387a:	19 f4       	brne	.+6      	; 0x3882 <main+0x4c>
    387c:	8d ad       	ldd	r24, Y+61	; 0x3d
    387e:	88 23       	and	r24, r24
    3880:	b1 f3       	breq	.-20     	; 0x386e <main+0x38>

	if(Global_u8Power == POWER_ON )
    3882:	80 91 3b 02 	lds	r24, 0x023B
    3886:	8b 30       	cpi	r24, 0x0B	; 11
    3888:	09 f0       	breq	.+2      	; 0x388c <main+0x56>
    388a:	ef c2       	rjmp	.+1502   	; 0x3e6a <main+0x634>
	{
		for(;;)
		{
			if(Global_u8Power == SHUTDOWN)
    388c:	80 91 3b 02 	lds	r24, 0x023B
    3890:	89 30       	cpi	r24, 0x09	; 9
    3892:	09 f0       	breq	.+2      	; 0x3896 <main+0x60>
    3894:	7f c0       	rjmp	.+254    	; 0x3994 <main+0x15e>
			{
				do
				{
					Local_enuErrorState = DetectPowerStatus();
    3896:	0e 94 0a 21 	call	0x4214	; 0x4214 <DetectPowerStatus>
    389a:	8d af       	std	Y+61, r24	; 0x3d
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	a8 ec       	ldi	r26, 0xC8	; 200
    38a2:	b2 e4       	ldi	r27, 0x42	; 66
    38a4:	8d ab       	std	Y+53, r24	; 0x35
    38a6:	9e ab       	std	Y+54, r25	; 0x36
    38a8:	af ab       	std	Y+55, r26	; 0x37
    38aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ac:	6d a9       	ldd	r22, Y+53	; 0x35
    38ae:	7e a9       	ldd	r23, Y+54	; 0x36
    38b0:	8f a9       	ldd	r24, Y+55	; 0x37
    38b2:	98 ad       	ldd	r25, Y+56	; 0x38
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	4a e7       	ldi	r20, 0x7A	; 122
    38ba:	55 e4       	ldi	r21, 0x45	; 69
    38bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	89 ab       	std	Y+49, r24	; 0x31
    38c6:	9a ab       	std	Y+50, r25	; 0x32
    38c8:	ab ab       	std	Y+51, r26	; 0x33
    38ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38cc:	69 a9       	ldd	r22, Y+49	; 0x31
    38ce:	7a a9       	ldd	r23, Y+50	; 0x32
    38d0:	8b a9       	ldd	r24, Y+51	; 0x33
    38d2:	9c a9       	ldd	r25, Y+52	; 0x34
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	40 e8       	ldi	r20, 0x80	; 128
    38da:	5f e3       	ldi	r21, 0x3F	; 63
    38dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38e0:	88 23       	and	r24, r24
    38e2:	2c f4       	brge	.+10     	; 0x38ee <main+0xb8>
		__ticks = 1;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	98 ab       	std	Y+48, r25	; 0x30
    38ea:	8f a7       	std	Y+47, r24	; 0x2f
    38ec:	3f c0       	rjmp	.+126    	; 0x396c <main+0x136>
	else if (__tmp > 65535)
    38ee:	69 a9       	ldd	r22, Y+49	; 0x31
    38f0:	7a a9       	ldd	r23, Y+50	; 0x32
    38f2:	8b a9       	ldd	r24, Y+51	; 0x33
    38f4:	9c a9       	ldd	r25, Y+52	; 0x34
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	3f ef       	ldi	r19, 0xFF	; 255
    38fa:	4f e7       	ldi	r20, 0x7F	; 127
    38fc:	57 e4       	ldi	r21, 0x47	; 71
    38fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3902:	18 16       	cp	r1, r24
    3904:	4c f5       	brge	.+82     	; 0x3958 <main+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3906:	6d a9       	ldd	r22, Y+53	; 0x35
    3908:	7e a9       	ldd	r23, Y+54	; 0x36
    390a:	8f a9       	ldd	r24, Y+55	; 0x37
    390c:	98 ad       	ldd	r25, Y+56	; 0x38
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e2       	ldi	r20, 0x20	; 32
    3914:	51 e4       	ldi	r21, 0x41	; 65
    3916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	98 ab       	std	Y+48, r25	; 0x30
    392c:	8f a7       	std	Y+47, r24	; 0x2f
    392e:	0f c0       	rjmp	.+30     	; 0x394e <main+0x118>
    3930:	80 e9       	ldi	r24, 0x90	; 144
    3932:	91 e0       	ldi	r25, 0x01	; 1
    3934:	9e a7       	std	Y+46, r25	; 0x2e
    3936:	8d a7       	std	Y+45, r24	; 0x2d
    3938:	8d a5       	ldd	r24, Y+45	; 0x2d
    393a:	9e a5       	ldd	r25, Y+46	; 0x2e
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <main+0x106>
    3940:	9e a7       	std	Y+46, r25	; 0x2e
    3942:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3944:	8f a5       	ldd	r24, Y+47	; 0x2f
    3946:	98 a9       	ldd	r25, Y+48	; 0x30
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	98 ab       	std	Y+48, r25	; 0x30
    394c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3950:	98 a9       	ldd	r25, Y+48	; 0x30
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	69 f7       	brne	.-38     	; 0x3930 <main+0xfa>
    3956:	14 c0       	rjmp	.+40     	; 0x3980 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3958:	69 a9       	ldd	r22, Y+49	; 0x31
    395a:	7a a9       	ldd	r23, Y+50	; 0x32
    395c:	8b a9       	ldd	r24, Y+51	; 0x33
    395e:	9c a9       	ldd	r25, Y+52	; 0x34
    3960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	98 ab       	std	Y+48, r25	; 0x30
    396a:	8f a7       	std	Y+47, r24	; 0x2f
    396c:	8f a5       	ldd	r24, Y+47	; 0x2f
    396e:	98 a9       	ldd	r25, Y+48	; 0x30
    3970:	9c a7       	std	Y+44, r25	; 0x2c
    3972:	8b a7       	std	Y+43, r24	; 0x2b
    3974:	8b a5       	ldd	r24, Y+43	; 0x2b
    3976:	9c a5       	ldd	r25, Y+44	; 0x2c
    3978:	01 97       	sbiw	r24, 0x01	; 1
    397a:	f1 f7       	brne	.-4      	; 0x3978 <main+0x142>
    397c:	9c a7       	std	Y+44, r25	; 0x2c
    397e:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(100);
				}while( (Global_u8Power == SHUTDOWN) && Local_enuErrorState ==ES_OK);
    3980:	80 91 3b 02 	lds	r24, 0x023B
    3984:	89 30       	cpi	r24, 0x09	; 9
    3986:	21 f4       	brne	.+8      	; 0x3990 <main+0x15a>
    3988:	8d ad       	ldd	r24, Y+61	; 0x3d
    398a:	88 23       	and	r24, r24
    398c:	09 f4       	brne	.+2      	; 0x3990 <main+0x15a>
    398e:	83 cf       	rjmp	.-250    	; 0x3896 <main+0x60>
				Keypad_Awake();
    3990:	0e 94 9e 1b 	call	0x373c	; 0x373c <Keypad_Awake>
			}
			if(Global_u8Power == POWER_ON)
    3994:	80 91 3b 02 	lds	r24, 0x023B
    3998:	8b 30       	cpi	r24, 0x0B	; 11
    399a:	09 f0       	breq	.+2      	; 0x399e <main+0x168>
    399c:	a7 c1       	rjmp	.+846    	; 0x3cec <main+0x4b6>
			{
				DISPLAY_WELCOME_MESSAGE;
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
    39a4:	8c e0       	ldi	r24, 0x0C	; 12
    39a6:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
    39aa:	82 e0       	ldi	r24, 0x02	; 2
    39ac:	64 e0       	ldi	r22, 0x04	; 4
    39ae:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
    39b2:	80 e6       	ldi	r24, 0x60	; 96
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_enuWriteString>
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	90 e4       	ldi	r25, 0x40	; 64
    39be:	ac e9       	ldi	r26, 0x9C	; 156
    39c0:	b5 e4       	ldi	r27, 0x45	; 69
    39c2:	8f a3       	std	Y+39, r24	; 0x27
    39c4:	98 a7       	std	Y+40, r25	; 0x28
    39c6:	a9 a7       	std	Y+41, r26	; 0x29
    39c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ca:	6f a1       	ldd	r22, Y+39	; 0x27
    39cc:	78 a5       	ldd	r23, Y+40	; 0x28
    39ce:	89 a5       	ldd	r24, Y+41	; 0x29
    39d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	4a e7       	ldi	r20, 0x7A	; 122
    39d8:	55 e4       	ldi	r21, 0x45	; 69
    39da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	8b a3       	std	Y+35, r24	; 0x23
    39e4:	9c a3       	std	Y+36, r25	; 0x24
    39e6:	ad a3       	std	Y+37, r26	; 0x25
    39e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39ea:	6b a1       	ldd	r22, Y+35	; 0x23
    39ec:	7c a1       	ldd	r23, Y+36	; 0x24
    39ee:	8d a1       	ldd	r24, Y+37	; 0x25
    39f0:	9e a1       	ldd	r25, Y+38	; 0x26
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 e8       	ldi	r20, 0x80	; 128
    39f8:	5f e3       	ldi	r21, 0x3F	; 63
    39fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39fe:	88 23       	and	r24, r24
    3a00:	2c f4       	brge	.+10     	; 0x3a0c <main+0x1d6>
		__ticks = 1;
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	9a a3       	std	Y+34, r25	; 0x22
    3a08:	89 a3       	std	Y+33, r24	; 0x21
    3a0a:	3f c0       	rjmp	.+126    	; 0x3a8a <main+0x254>
	else if (__tmp > 65535)
    3a0c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a0e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a10:	8d a1       	ldd	r24, Y+37	; 0x25
    3a12:	9e a1       	ldd	r25, Y+38	; 0x26
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	3f ef       	ldi	r19, 0xFF	; 255
    3a18:	4f e7       	ldi	r20, 0x7F	; 127
    3a1a:	57 e4       	ldi	r21, 0x47	; 71
    3a1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a20:	18 16       	cp	r1, r24
    3a22:	4c f5       	brge	.+82     	; 0x3a76 <main+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a24:	6f a1       	ldd	r22, Y+39	; 0x27
    3a26:	78 a5       	ldd	r23, Y+40	; 0x28
    3a28:	89 a5       	ldd	r24, Y+41	; 0x29
    3a2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e2       	ldi	r20, 0x20	; 32
    3a32:	51 e4       	ldi	r21, 0x41	; 65
    3a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	bc 01       	movw	r22, r24
    3a3e:	cd 01       	movw	r24, r26
    3a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	9a a3       	std	Y+34, r25	; 0x22
    3a4a:	89 a3       	std	Y+33, r24	; 0x21
    3a4c:	0f c0       	rjmp	.+30     	; 0x3a6c <main+0x236>
    3a4e:	80 e9       	ldi	r24, 0x90	; 144
    3a50:	91 e0       	ldi	r25, 0x01	; 1
    3a52:	98 a3       	std	Y+32, r25	; 0x20
    3a54:	8f 8f       	std	Y+31, r24	; 0x1f
    3a56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a58:	98 a1       	ldd	r25, Y+32	; 0x20
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	f1 f7       	brne	.-4      	; 0x3a5a <main+0x224>
    3a5e:	98 a3       	std	Y+32, r25	; 0x20
    3a60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a62:	89 a1       	ldd	r24, Y+33	; 0x21
    3a64:	9a a1       	ldd	r25, Y+34	; 0x22
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	9a a3       	std	Y+34, r25	; 0x22
    3a6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a6c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a6e:	9a a1       	ldd	r25, Y+34	; 0x22
    3a70:	00 97       	sbiw	r24, 0x00	; 0
    3a72:	69 f7       	brne	.-38     	; 0x3a4e <main+0x218>
    3a74:	14 c0       	rjmp	.+40     	; 0x3a9e <main+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a76:	6b a1       	ldd	r22, Y+35	; 0x23
    3a78:	7c a1       	ldd	r23, Y+36	; 0x24
    3a7a:	8d a1       	ldd	r24, Y+37	; 0x25
    3a7c:	9e a1       	ldd	r25, Y+38	; 0x26
    3a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	9a a3       	std	Y+34, r25	; 0x22
    3a88:	89 a3       	std	Y+33, r24	; 0x21
    3a8a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a8c:	9a a1       	ldd	r25, Y+34	; 0x22
    3a8e:	9e 8f       	std	Y+30, r25	; 0x1e
    3a90:	8d 8f       	std	Y+29, r24	; 0x1d
    3a92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	f1 f7       	brne	.-4      	; 0x3a96 <main+0x260>
    3a9a:	9e 8f       	std	Y+30, r25	; 0x1e
    3a9c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(5000);
				DISPLAY_NUMBER_MESSAGE;
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	63 e0       	ldi	r22, 0x03	; 3
    3aa8:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
    3aac:	8b e6       	ldi	r24, 0x6B	; 107
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_enuWriteString>
    3ab4:	8f e0       	ldi	r24, 0x0F	; 15
    3ab6:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
    3aba:	82 e0       	ldi	r24, 0x02	; 2
    3abc:	63 e0       	ldi	r22, 0x03	; 3
    3abe:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
    3ac2:	26 c0       	rjmp	.+76     	; 0x3b10 <main+0x2da>

				while(  (Local_enuErrorState = ReadInputDigit(&Local_u8Key) ) == ES_OK  )
				{
					if( Local_u8Key != 'C' )
    3ac4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ac6:	83 34       	cpi	r24, 0x43	; 67
    3ac8:	59 f1       	breq	.+86     	; 0x3b20 <main+0x2ea>
					{
						LCD_enuWriteData(Local_u8Key);
    3aca:	8e ad       	ldd	r24, Y+62	; 0x3e
    3acc:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_enuWriteData>
						Local_s32Num = (Local_s32Num*10) + (Local_u8Key - '0');
    3ad0:	89 ad       	ldd	r24, Y+57	; 0x39
    3ad2:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ad4:	ab ad       	ldd	r26, Y+59	; 0x3b
    3ad6:	bc ad       	ldd	r27, Y+60	; 0x3c
    3ad8:	2a e0       	ldi	r18, 0x0A	; 10
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	40 e0       	ldi	r20, 0x00	; 0
    3ade:	50 e0       	ldi	r21, 0x00	; 0
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	0e 94 4e 22 	call	0x449c	; 0x449c <__mulsi3>
    3ae8:	9b 01       	movw	r18, r22
    3aea:	ac 01       	movw	r20, r24
    3aec:	8e ad       	ldd	r24, Y+62	; 0x3e
    3aee:	88 2f       	mov	r24, r24
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	c0 97       	sbiw	r24, 0x30	; 48
    3af4:	aa 27       	eor	r26, r26
    3af6:	97 fd       	sbrc	r25, 7
    3af8:	a0 95       	com	r26
    3afa:	ba 2f       	mov	r27, r26
    3afc:	82 0f       	add	r24, r18
    3afe:	93 1f       	adc	r25, r19
    3b00:	a4 1f       	adc	r26, r20
    3b02:	b5 1f       	adc	r27, r21
    3b04:	89 af       	std	Y+57, r24	; 0x39
    3b06:	9a af       	std	Y+58, r25	; 0x3a
    3b08:	ab af       	std	Y+59, r26	; 0x3b
    3b0a:	bc af       	std	Y+60, r27	; 0x3c
						Local_u8Key = KEYPAD_NOT_PRESSED;
    3b0c:	8f ef       	ldi	r24, 0xFF	; 255
    3b0e:	8e af       	std	Y+62, r24	; 0x3e
			{
				DISPLAY_WELCOME_MESSAGE;
				_delay_ms(5000);
				DISPLAY_NUMBER_MESSAGE;

				while(  (Local_enuErrorState = ReadInputDigit(&Local_u8Key) ) == ES_OK  )
    3b10:	ce 01       	movw	r24, r28
    3b12:	ce 96       	adiw	r24, 0x3e	; 62
    3b14:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <ReadInputDigit>
    3b18:	8d af       	std	Y+61, r24	; 0x3d
    3b1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b1c:	88 23       	and	r24, r24
    3b1e:	91 f2       	breq	.-92     	; 0x3ac4 <main+0x28e>
						Local_s32Num = (Local_s32Num*10) + (Local_u8Key - '0');
						Local_u8Key = KEYPAD_NOT_PRESSED;
					}
					else break;
				}
				if( Global_u8Restart == RESTART)
    3b20:	80 91 3c 02 	lds	r24, 0x023C
    3b24:	8d 30       	cpi	r24, 0x0D	; 13
    3b26:	21 f4       	brne	.+8      	; 0x3b30 <main+0x2fa>
				{
					Global_u8Restart = CONTINUE;
    3b28:	8c e0       	ldi	r24, 0x0C	; 12
    3b2a:	80 93 3c 02 	sts	0x023C, r24
    3b2e:	ae ce       	rjmp	.-676    	; 0x388c <main+0x56>
					continue;
				}
				if(Local_enuErrorState == ES_OK)
    3b30:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b32:	88 23       	and	r24, r24
    3b34:	09 f0       	breq	.+2      	; 0x3b38 <main+0x302>
    3b36:	8d c1       	rjmp	.+794    	; 0x3e52 <main+0x61c>
				{
					DISPLAY_COUNTER_MESSAGE;
    3b38:	8c e0       	ldi	r24, 0x0C	; 12
    3b3a:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
    3b44:	88 e7       	ldi	r24, 0x78	; 120
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_enuWriteString>
    3b4c:	82 e0       	ldi	r24, 0x02	; 2
    3b4e:	65 e0       	ldi	r22, 0x05	; 5
    3b50:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
    3b54:	89 ad       	ldd	r24, Y+57	; 0x39
    3b56:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b58:	ab ad       	ldd	r26, Y+59	; 0x3b
    3b5a:	bc ad       	ldd	r27, Y+60	; 0x3c
    3b5c:	bc 01       	movw	r22, r24
    3b5e:	cd 01       	movw	r24, r26
    3b60:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_enuWriteIntegerNum>

					for(;;)
					{
						if( Global_u8Counter != NO_COUNT)
    3b64:	80 91 3d 02 	lds	r24, 0x023D
    3b68:	8e 30       	cpi	r24, 0x0E	; 14
    3b6a:	61 f0       	breq	.+24     	; 0x3b84 <main+0x34e>
						{
							LCD_enuGoToPosition(2,5);
    3b6c:	82 e0       	ldi	r24, 0x02	; 2
    3b6e:	65 e0       	ldi	r22, 0x05	; 5
    3b70:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
							LCD_enuWriteIntegerNum(Local_s32Num);
    3b74:	89 ad       	ldd	r24, Y+57	; 0x39
    3b76:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b78:	ab ad       	ldd	r26, Y+59	; 0x3b
    3b7a:	bc ad       	ldd	r27, Y+60	; 0x3c
    3b7c:	bc 01       	movw	r22, r24
    3b7e:	cd 01       	movw	r24, r26
    3b80:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_enuWriteIntegerNum>
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	a5 e7       	ldi	r26, 0x75	; 117
    3b8a:	b4 e4       	ldi	r27, 0x44	; 68
    3b8c:	89 8f       	std	Y+25, r24	; 0x19
    3b8e:	9a 8f       	std	Y+26, r25	; 0x1a
    3b90:	ab 8f       	std	Y+27, r26	; 0x1b
    3b92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b94:	69 8d       	ldd	r22, Y+25	; 0x19
    3b96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	4a e7       	ldi	r20, 0x7A	; 122
    3ba2:	55 e4       	ldi	r21, 0x45	; 69
    3ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	8d 8b       	std	Y+21, r24	; 0x15
    3bae:	9e 8b       	std	Y+22, r25	; 0x16
    3bb0:	af 8b       	std	Y+23, r26	; 0x17
    3bb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    3bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bba:	98 8d       	ldd	r25, Y+24	; 0x18
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	40 e8       	ldi	r20, 0x80	; 128
    3bc2:	5f e3       	ldi	r21, 0x3F	; 63
    3bc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bc8:	88 23       	and	r24, r24
    3bca:	2c f4       	brge	.+10     	; 0x3bd6 <main+0x3a0>
		__ticks = 1;
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	9c 8b       	std	Y+20, r25	; 0x14
    3bd2:	8b 8b       	std	Y+19, r24	; 0x13
    3bd4:	3f c0       	rjmp	.+126    	; 0x3c54 <main+0x41e>
	else if (__tmp > 65535)
    3bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bda:	8f 89       	ldd	r24, Y+23	; 0x17
    3bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	3f ef       	ldi	r19, 0xFF	; 255
    3be2:	4f e7       	ldi	r20, 0x7F	; 127
    3be4:	57 e4       	ldi	r21, 0x47	; 71
    3be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bea:	18 16       	cp	r1, r24
    3bec:	4c f5       	brge	.+82     	; 0x3c40 <main+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bee:	69 8d       	ldd	r22, Y+25	; 0x19
    3bf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	40 e2       	ldi	r20, 0x20	; 32
    3bfc:	51 e4       	ldi	r21, 0x41	; 65
    3bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	bc 01       	movw	r22, r24
    3c08:	cd 01       	movw	r24, r26
    3c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	9c 8b       	std	Y+20, r25	; 0x14
    3c14:	8b 8b       	std	Y+19, r24	; 0x13
    3c16:	0f c0       	rjmp	.+30     	; 0x3c36 <main+0x400>
    3c18:	80 e9       	ldi	r24, 0x90	; 144
    3c1a:	91 e0       	ldi	r25, 0x01	; 1
    3c1c:	9a 8b       	std	Y+18, r25	; 0x12
    3c1e:	89 8b       	std	Y+17, r24	; 0x11
    3c20:	89 89       	ldd	r24, Y+17	; 0x11
    3c22:	9a 89       	ldd	r25, Y+18	; 0x12
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	f1 f7       	brne	.-4      	; 0x3c24 <main+0x3ee>
    3c28:	9a 8b       	std	Y+18, r25	; 0x12
    3c2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c30:	01 97       	sbiw	r24, 0x01	; 1
    3c32:	9c 8b       	std	Y+20, r25	; 0x14
    3c34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c36:	8b 89       	ldd	r24, Y+19	; 0x13
    3c38:	9c 89       	ldd	r25, Y+20	; 0x14
    3c3a:	00 97       	sbiw	r24, 0x00	; 0
    3c3c:	69 f7       	brne	.-38     	; 0x3c18 <main+0x3e2>
    3c3e:	14 c0       	rjmp	.+40     	; 0x3c68 <main+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c40:	6d 89       	ldd	r22, Y+21	; 0x15
    3c42:	7e 89       	ldd	r23, Y+22	; 0x16
    3c44:	8f 89       	ldd	r24, Y+23	; 0x17
    3c46:	98 8d       	ldd	r25, Y+24	; 0x18
    3c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	cb 01       	movw	r24, r22
    3c50:	9c 8b       	std	Y+20, r25	; 0x14
    3c52:	8b 8b       	std	Y+19, r24	; 0x13
    3c54:	8b 89       	ldd	r24, Y+19	; 0x13
    3c56:	9c 89       	ldd	r25, Y+20	; 0x14
    3c58:	98 8b       	std	Y+16, r25	; 0x10
    3c5a:	8f 87       	std	Y+15, r24	; 0x0f
    3c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c5e:	98 89       	ldd	r25, Y+16	; 0x10
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	f1 f7       	brne	.-4      	; 0x3c60 <main+0x42a>
    3c64:	98 8b       	std	Y+16, r25	; 0x10
    3c66:	8f 87       	std	Y+15, r24	; 0x0f
						}
						_delay_ms(980);

						if( (Local_enuErrorState = DetectPowerStatus() ) ==ES_OK )
    3c68:	0e 94 0a 21 	call	0x4214	; 0x4214 <DetectPowerStatus>
    3c6c:	8d af       	std	Y+61, r24	; 0x3d
    3c6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c70:	88 23       	and	r24, r24
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <main+0x440>
    3c74:	0b ce       	rjmp	.-1002   	; 0x388c <main+0x56>
						{
							if( Global_u8Power == POWER_OFF)	break;
    3c76:	80 91 3b 02 	lds	r24, 0x023B
    3c7a:	8a 30       	cpi	r24, 0x0A	; 10
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <main+0x44a>
    3c7e:	06 ce       	rjmp	.-1012   	; 0x388c <main+0x56>
						}
						else break;
						if( (Local_enuErrorState = CheckCounterStatus() ) ==ES_OK )
    3c80:	0e 94 0c 22 	call	0x4418	; 0x4418 <CheckCounterStatus>
    3c84:	8d af       	std	Y+61, r24	; 0x3d
    3c86:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c88:	88 23       	and	r24, r24
    3c8a:	09 f0       	breq	.+2      	; 0x3c8e <main+0x458>
    3c8c:	ff cd       	rjmp	.-1026   	; 0x388c <main+0x56>
						{
							switch(Global_u8Counter)
    3c8e:	80 91 3d 02 	lds	r24, 0x023D
    3c92:	28 2f       	mov	r18, r24
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	21 96       	adiw	r28, 0x01	; 1
    3c98:	3f af       	std	Y+63, r19	; 0x3f
    3c9a:	2e af       	std	Y+62, r18	; 0x3e
    3c9c:	21 97       	sbiw	r28, 0x01	; 1
    3c9e:	21 96       	adiw	r28, 0x01	; 1
    3ca0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ca2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ca4:	21 97       	sbiw	r28, 0x01	; 1
    3ca6:	8f 30       	cpi	r24, 0x0F	; 15
    3ca8:	91 05       	cpc	r25, r1
    3caa:	41 f0       	breq	.+16     	; 0x3cbc <main+0x486>
    3cac:	21 96       	adiw	r28, 0x01	; 1
    3cae:	2e ad       	ldd	r18, Y+62	; 0x3e
    3cb0:	3f ad       	ldd	r19, Y+63	; 0x3f
    3cb2:	21 97       	sbiw	r28, 0x01	; 1
    3cb4:	20 31       	cpi	r18, 0x10	; 16
    3cb6:	31 05       	cpc	r19, r1
    3cb8:	69 f0       	breq	.+26     	; 0x3cd4 <main+0x49e>
    3cba:	54 cf       	rjmp	.-344    	; 0x3b64 <main+0x32e>
							{
							case COUNT_UP	: Local_s32Num++;
    3cbc:	89 ad       	ldd	r24, Y+57	; 0x39
    3cbe:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cc0:	ab ad       	ldd	r26, Y+59	; 0x3b
    3cc2:	bc ad       	ldd	r27, Y+60	; 0x3c
    3cc4:	01 96       	adiw	r24, 0x01	; 1
    3cc6:	a1 1d       	adc	r26, r1
    3cc8:	b1 1d       	adc	r27, r1
    3cca:	89 af       	std	Y+57, r24	; 0x39
    3ccc:	9a af       	std	Y+58, r25	; 0x3a
    3cce:	ab af       	std	Y+59, r26	; 0x3b
    3cd0:	bc af       	std	Y+60, r27	; 0x3c
    3cd2:	48 cf       	rjmp	.-368    	; 0x3b64 <main+0x32e>
												break;
							case COUNT_DOWN	: Local_s32Num--;
    3cd4:	89 ad       	ldd	r24, Y+57	; 0x39
    3cd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cd8:	ab ad       	ldd	r26, Y+59	; 0x3b
    3cda:	bc ad       	ldd	r27, Y+60	; 0x3c
    3cdc:	01 97       	sbiw	r24, 0x01	; 1
    3cde:	a1 09       	sbc	r26, r1
    3ce0:	b1 09       	sbc	r27, r1
    3ce2:	89 af       	std	Y+57, r24	; 0x39
    3ce4:	9a af       	std	Y+58, r25	; 0x3a
    3ce6:	ab af       	std	Y+59, r26	; 0x3b
    3ce8:	bc af       	std	Y+60, r27	; 0x3c
    3cea:	3c cf       	rjmp	.-392    	; 0x3b64 <main+0x32e>
				}
				else break;
			}
			else
			{
				LCD_enuWriteCommand(0x01);
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
				if( Local_enuErrorState == ES_OK && Global_u8Power == POWER_OFF )
    3cf2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cf4:	88 23       	and	r24, r24
    3cf6:	09 f0       	breq	.+2      	; 0x3cfa <main+0x4c4>
    3cf8:	8b c0       	rjmp	.+278    	; 0x3e10 <main+0x5da>
    3cfa:	80 91 3b 02 	lds	r24, 0x023B
    3cfe:	8a 30       	cpi	r24, 0x0A	; 10
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <main+0x4ce>
    3d02:	86 c0       	rjmp	.+268    	; 0x3e10 <main+0x5da>
				{
					Keypad_Sleep();
    3d04:	0e 94 2d 1b 	call	0x365a	; 0x365a <Keypad_Sleep>
					LCD_enuGoToPosition(2,3);
    3d08:	82 e0       	ldi	r24, 0x02	; 2
    3d0a:	63 e0       	ldi	r22, 0x03	; 3
    3d0c:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
					LCD_enuWriteString("Bye..Bye..!");
    3d10:	81 e8       	ldi	r24, 0x81	; 129
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_enuWriteString>
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	90 e8       	ldi	r25, 0x80	; 128
    3d1c:	ab e3       	ldi	r26, 0x3B	; 59
    3d1e:	b5 e4       	ldi	r27, 0x45	; 69
    3d20:	8b 87       	std	Y+11, r24	; 0x0b
    3d22:	9c 87       	std	Y+12, r25	; 0x0c
    3d24:	ad 87       	std	Y+13, r26	; 0x0d
    3d26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	4a e7       	ldi	r20, 0x7A	; 122
    3d36:	55 e4       	ldi	r21, 0x45	; 69
    3d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	8f 83       	std	Y+7, r24	; 0x07
    3d42:	98 87       	std	Y+8, r25	; 0x08
    3d44:	a9 87       	std	Y+9, r26	; 0x09
    3d46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d48:	6f 81       	ldd	r22, Y+7	; 0x07
    3d4a:	78 85       	ldd	r23, Y+8	; 0x08
    3d4c:	89 85       	ldd	r24, Y+9	; 0x09
    3d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e8       	ldi	r20, 0x80	; 128
    3d56:	5f e3       	ldi	r21, 0x3F	; 63
    3d58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d5c:	88 23       	and	r24, r24
    3d5e:	2c f4       	brge	.+10     	; 0x3d6a <main+0x534>
		__ticks = 1;
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	9e 83       	std	Y+6, r25	; 0x06
    3d66:	8d 83       	std	Y+5, r24	; 0x05
    3d68:	3f c0       	rjmp	.+126    	; 0x3de8 <main+0x5b2>
	else if (__tmp > 65535)
    3d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6c:	78 85       	ldd	r23, Y+8	; 0x08
    3d6e:	89 85       	ldd	r24, Y+9	; 0x09
    3d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	3f ef       	ldi	r19, 0xFF	; 255
    3d76:	4f e7       	ldi	r20, 0x7F	; 127
    3d78:	57 e4       	ldi	r21, 0x47	; 71
    3d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d7e:	18 16       	cp	r1, r24
    3d80:	4c f5       	brge	.+82     	; 0x3dd4 <main+0x59e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	40 e2       	ldi	r20, 0x20	; 32
    3d90:	51 e4       	ldi	r21, 0x41	; 65
    3d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	bc 01       	movw	r22, r24
    3d9c:	cd 01       	movw	r24, r26
    3d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	9e 83       	std	Y+6, r25	; 0x06
    3da8:	8d 83       	std	Y+5, r24	; 0x05
    3daa:	0f c0       	rjmp	.+30     	; 0x3dca <main+0x594>
    3dac:	80 e9       	ldi	r24, 0x90	; 144
    3dae:	91 e0       	ldi	r25, 0x01	; 1
    3db0:	9c 83       	std	Y+4, r25	; 0x04
    3db2:	8b 83       	std	Y+3, r24	; 0x03
    3db4:	8b 81       	ldd	r24, Y+3	; 0x03
    3db6:	9c 81       	ldd	r25, Y+4	; 0x04
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	f1 f7       	brne	.-4      	; 0x3db8 <main+0x582>
    3dbc:	9c 83       	std	Y+4, r25	; 0x04
    3dbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	9e 83       	std	Y+6, r25	; 0x06
    3dc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dca:	8d 81       	ldd	r24, Y+5	; 0x05
    3dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dce:	00 97       	sbiw	r24, 0x00	; 0
    3dd0:	69 f7       	brne	.-38     	; 0x3dac <main+0x576>
    3dd2:	14 c0       	rjmp	.+40     	; 0x3dfc <main+0x5c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd6:	78 85       	ldd	r23, Y+8	; 0x08
    3dd8:	89 85       	ldd	r24, Y+9	; 0x09
    3dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	9e 83       	std	Y+6, r25	; 0x06
    3de6:	8d 83       	std	Y+5, r24	; 0x05
    3de8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dea:	9e 81       	ldd	r25, Y+6	; 0x06
    3dec:	9a 83       	std	Y+2, r25	; 0x02
    3dee:	89 83       	std	Y+1, r24	; 0x01
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	9a 81       	ldd	r25, Y+2	; 0x02
    3df4:	01 97       	sbiw	r24, 0x01	; 1
    3df6:	f1 f7       	brne	.-4      	; 0x3df4 <main+0x5be>
    3df8:	9a 83       	std	Y+2, r25	; 0x02
    3dfa:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(3000);
					LCD_enuWriteCommand(0x01);
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
					LCD_enuWriteCommand(0x08);
    3e02:	88 e0       	ldi	r24, 0x08	; 8
    3e04:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
					Global_u8Power = SHUTDOWN;
    3e08:	89 e0       	ldi	r24, 0x09	; 9
    3e0a:	80 93 3b 02 	sts	0x023B, r24
    3e0e:	3e cd       	rjmp	.-1412   	; 0x388c <main+0x56>
				}
				else
				{
					LCD_enuGoToPosition(1,3);
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	63 e0       	ldi	r22, 0x03	; 3
    3e14:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
					LCD_enuWriteString("***ERROR***");
    3e18:	8d e8       	ldi	r24, 0x8D	; 141
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_enuWriteString>
					LCD_enuGoToPosition(2,6);
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	66 e0       	ldi	r22, 0x06	; 6
    3e24:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
					LCD_enuWriteString("Shutdown?");
    3e28:	89 e9       	ldi	r24, 0x99	; 153
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_enuWriteString>
					do
					{
						Local_enuErrorState = DetectPowerStatus();
    3e30:	0e 94 0a 21 	call	0x4214	; 0x4214 <DetectPowerStatus>
    3e34:	8d af       	std	Y+61, r24	; 0x3d
					}while( (Global_u8Power != POWER_OFF) && Local_enuErrorState ==ES_OK);
    3e36:	80 91 3b 02 	lds	r24, 0x023B
    3e3a:	8a 30       	cpi	r24, 0x0A	; 10
    3e3c:	19 f0       	breq	.+6      	; 0x3e44 <main+0x60e>
    3e3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e40:	88 23       	and	r24, r24
    3e42:	b1 f3       	breq	.-20     	; 0x3e30 <main+0x5fa>
					LCD_enuWriteCommand(0x01);
    3e44:	81 e0       	ldi	r24, 0x01	; 1
    3e46:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
					LCD_enuWriteCommand(0x08);
    3e4a:	88 e0       	ldi	r24, 0x08	; 8
    3e4c:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
    3e50:	1d cd       	rjmp	.-1478   	; 0x388c <main+0x56>
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	90 e0       	ldi	r25, 0x00	; 0
		LCD_enuWriteString("Power Switch");
		LCD_enuGoToPosition(2,1);
		LCD_enuWriteString("ERROR...!!!");
		while(1);
	}
}
    3e56:	c0 5c       	subi	r28, 0xC0	; 192
    3e58:	df 4f       	sbci	r29, 0xFF	; 255
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	cf 91       	pop	r28
    3e66:	df 91       	pop	r29
    3e68:	08 95       	ret
			}
		}
	}
	else
	{
		LCD_enuWriteCommand(0x01);
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
		LCD_enuWriteCommand(0x0C);
    3e70:	8c e0       	ldi	r24, 0x0C	; 12
    3e72:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
		LCD_enuGoToPosition(1,1);
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	61 e0       	ldi	r22, 0x01	; 1
    3e7a:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
		LCD_enuWriteString("Power Switch");
    3e7e:	83 ea       	ldi	r24, 0xA3	; 163
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_enuWriteString>
		LCD_enuGoToPosition(2,1);
    3e86:	82 e0       	ldi	r24, 0x02	; 2
    3e88:	61 e0       	ldi	r22, 0x01	; 1
    3e8a:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
		LCD_enuWriteString("ERROR...!!!");
    3e8e:	80 eb       	ldi	r24, 0xB0	; 176
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_enuWriteString>
    3e96:	ff cf       	rjmp	.-2      	; 0x3e96 <main+0x660>

00003e98 <ReadInputDigit>:
		while(1);
	}
}

ES_t ReadInputDigit(u8 *Copy_u8Digit)
{
    3e98:	df 93       	push	r29
    3e9a:	cf 93       	push	r28
    3e9c:	cd b7       	in	r28, 0x3d	; 61
    3e9e:	de b7       	in	r29, 0x3e	; 62
    3ea0:	ae 97       	sbiw	r28, 0x2e	; 46
    3ea2:	0f b6       	in	r0, 0x3f	; 63
    3ea4:	f8 94       	cli
    3ea6:	de bf       	out	0x3e, r29	; 62
    3ea8:	0f be       	out	0x3f, r0	; 63
    3eaa:	cd bf       	out	0x3d, r28	; 61
    3eac:	9e a7       	std	Y+46, r25	; 0x2e
    3eae:	8d a7       	std	Y+45, r24	; 0x2d
	ES_t Local_enuErrorState = ES_NOK;
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	8c a7       	std	Y+44, r24	; 0x2c

	if(Copy_u8Digit != NULL)
    3eb4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3eb6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <ReadInputDigit+0x26>
    3ebc:	9f c1       	rjmp	.+830    	; 0x41fc <ReadInputDigit+0x364>
    3ebe:	05 c0       	rjmp	.+10     	; 0x3eca <ReadInputDigit+0x32>
	{
		while( (Local_enuErrorState = Keypad_enuGetPressedKey(Copy_u8Digit)) == ES_OK  &&  *Copy_u8Digit == KEYPAD_NOT_PRESSED )
		{
			Local_enuErrorState = Keypad_enuGetPressedKey(Copy_u8Digit);
    3ec0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ec2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ec4:	0e 94 ad 19 	call	0x335a	; 0x335a <Keypad_enuGetPressedKey>
    3ec8:	8c a7       	std	Y+44, r24	; 0x2c
{
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_u8Digit != NULL)
	{
		while( (Local_enuErrorState = Keypad_enuGetPressedKey(Copy_u8Digit)) == ES_OK  &&  *Copy_u8Digit == KEYPAD_NOT_PRESSED )
    3eca:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ecc:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ece:	0e 94 ad 19 	call	0x335a	; 0x335a <Keypad_enuGetPressedKey>
    3ed2:	8c a7       	std	Y+44, r24	; 0x2c
    3ed4:	8c a5       	ldd	r24, Y+44	; 0x2c
    3ed6:	88 23       	and	r24, r24
    3ed8:	29 f4       	brne	.+10     	; 0x3ee4 <ReadInputDigit+0x4c>
    3eda:	ed a5       	ldd	r30, Y+45	; 0x2d
    3edc:	fe a5       	ldd	r31, Y+46	; 0x2e
    3ede:	80 81       	ld	r24, Z
    3ee0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ee2:	71 f3       	breq	.-36     	; 0x3ec0 <ReadInputDigit+0x28>
		{
			Local_enuErrorState = Keypad_enuGetPressedKey(Copy_u8Digit);
		}

		if( (*Copy_u8Digit<'0' || *Copy_u8Digit>'9') && *Copy_u8Digit != 'C' )
    3ee4:	ed a5       	ldd	r30, Y+45	; 0x2d
    3ee6:	fe a5       	ldd	r31, Y+46	; 0x2e
    3ee8:	80 81       	ld	r24, Z
    3eea:	80 33       	cpi	r24, 0x30	; 48
    3eec:	30 f0       	brcs	.+12     	; 0x3efa <ReadInputDigit+0x62>
    3eee:	ed a5       	ldd	r30, Y+45	; 0x2d
    3ef0:	fe a5       	ldd	r31, Y+46	; 0x2e
    3ef2:	80 81       	ld	r24, Z
    3ef4:	8a 33       	cpi	r24, 0x3A	; 58
    3ef6:	08 f4       	brcc	.+2      	; 0x3efa <ReadInputDigit+0x62>
    3ef8:	83 c1       	rjmp	.+774    	; 0x4200 <ReadInputDigit+0x368>
    3efa:	ed a5       	ldd	r30, Y+45	; 0x2d
    3efc:	fe a5       	ldd	r31, Y+46	; 0x2e
    3efe:	80 81       	ld	r24, Z
    3f00:	83 34       	cpi	r24, 0x43	; 67
    3f02:	09 f4       	brne	.+2      	; 0x3f06 <ReadInputDigit+0x6e>
    3f04:	7d c1       	rjmp	.+762    	; 0x4200 <ReadInputDigit+0x368>
		{
			Local_enuErrorState = ES_OUT_RANGE;
    3f06:	82 e0       	ldi	r24, 0x02	; 2
    3f08:	8c a7       	std	Y+44, r24	; 0x2c
			Global_u8Restart = RESTART ;
    3f0a:	8d e0       	ldi	r24, 0x0D	; 13
    3f0c:	80 93 3c 02 	sts	0x023C, r24
			LCD_enuGoToPosition(1,5);
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	65 e0       	ldi	r22, 0x05	; 5
    3f14:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
			LCD_enuWriteString("NUMBERS");
    3f18:	8c eb       	ldi	r24, 0xBC	; 188
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_enuWriteString>
			LCD_enuGoToPosition(2,5);
    3f20:	82 e0       	ldi	r24, 0x02	; 2
    3f22:	65 e0       	ldi	r22, 0x05	; 5
    3f24:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_enuGoToPosition>
			LCD_enuWriteString("ONLY!!!");
    3f28:	84 ec       	ldi	r24, 0xC4	; 196
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <LCD_enuWriteString>
			for(u8 Local_u8Iter = 0; Local_u8Iter<5 ; Local_u8Iter++)
    3f30:	1b a6       	std	Y+43, r1	; 0x2b
    3f32:	ed c0       	rjmp	.+474    	; 0x410e <ReadInputDigit+0x276>
			{
				LCD_enuWriteCommand(0x08);
    3f34:	88 e0       	ldi	r24, 0x08	; 8
    3f36:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	a0 e2       	ldi	r26, 0x20	; 32
    3f40:	b1 e4       	ldi	r27, 0x41	; 65
    3f42:	8f a3       	std	Y+39, r24	; 0x27
    3f44:	98 a7       	std	Y+40, r25	; 0x28
    3f46:	a9 a7       	std	Y+41, r26	; 0x29
    3f48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f4a:	6f a1       	ldd	r22, Y+39	; 0x27
    3f4c:	78 a5       	ldd	r23, Y+40	; 0x28
    3f4e:	89 a5       	ldd	r24, Y+41	; 0x29
    3f50:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	4a e7       	ldi	r20, 0x7A	; 122
    3f58:	55 e4       	ldi	r21, 0x45	; 69
    3f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	8b a3       	std	Y+35, r24	; 0x23
    3f64:	9c a3       	std	Y+36, r25	; 0x24
    3f66:	ad a3       	std	Y+37, r26	; 0x25
    3f68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f6a:	6b a1       	ldd	r22, Y+35	; 0x23
    3f6c:	7c a1       	ldd	r23, Y+36	; 0x24
    3f6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3f70:	9e a1       	ldd	r25, Y+38	; 0x26
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	40 e8       	ldi	r20, 0x80	; 128
    3f78:	5f e3       	ldi	r21, 0x3F	; 63
    3f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f7e:	88 23       	and	r24, r24
    3f80:	2c f4       	brge	.+10     	; 0x3f8c <ReadInputDigit+0xf4>
		__ticks = 1;
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	9a a3       	std	Y+34, r25	; 0x22
    3f88:	89 a3       	std	Y+33, r24	; 0x21
    3f8a:	3f c0       	rjmp	.+126    	; 0x400a <ReadInputDigit+0x172>
	else if (__tmp > 65535)
    3f8c:	6b a1       	ldd	r22, Y+35	; 0x23
    3f8e:	7c a1       	ldd	r23, Y+36	; 0x24
    3f90:	8d a1       	ldd	r24, Y+37	; 0x25
    3f92:	9e a1       	ldd	r25, Y+38	; 0x26
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	3f ef       	ldi	r19, 0xFF	; 255
    3f98:	4f e7       	ldi	r20, 0x7F	; 127
    3f9a:	57 e4       	ldi	r21, 0x47	; 71
    3f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fa0:	18 16       	cp	r1, r24
    3fa2:	4c f5       	brge	.+82     	; 0x3ff6 <ReadInputDigit+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa4:	6f a1       	ldd	r22, Y+39	; 0x27
    3fa6:	78 a5       	ldd	r23, Y+40	; 0x28
    3fa8:	89 a5       	ldd	r24, Y+41	; 0x29
    3faa:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	40 e2       	ldi	r20, 0x20	; 32
    3fb2:	51 e4       	ldi	r21, 0x41	; 65
    3fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	cd 01       	movw	r24, r26
    3fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	9a a3       	std	Y+34, r25	; 0x22
    3fca:	89 a3       	std	Y+33, r24	; 0x21
    3fcc:	0f c0       	rjmp	.+30     	; 0x3fec <ReadInputDigit+0x154>
    3fce:	80 e9       	ldi	r24, 0x90	; 144
    3fd0:	91 e0       	ldi	r25, 0x01	; 1
    3fd2:	98 a3       	std	Y+32, r25	; 0x20
    3fd4:	8f 8f       	std	Y+31, r24	; 0x1f
    3fd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fd8:	98 a1       	ldd	r25, Y+32	; 0x20
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	f1 f7       	brne	.-4      	; 0x3fda <ReadInputDigit+0x142>
    3fde:	98 a3       	std	Y+32, r25	; 0x20
    3fe0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe2:	89 a1       	ldd	r24, Y+33	; 0x21
    3fe4:	9a a1       	ldd	r25, Y+34	; 0x22
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	9a a3       	std	Y+34, r25	; 0x22
    3fea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fec:	89 a1       	ldd	r24, Y+33	; 0x21
    3fee:	9a a1       	ldd	r25, Y+34	; 0x22
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	69 f7       	brne	.-38     	; 0x3fce <ReadInputDigit+0x136>
    3ff4:	14 c0       	rjmp	.+40     	; 0x401e <ReadInputDigit+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ff8:	7c a1       	ldd	r23, Y+36	; 0x24
    3ffa:	8d a1       	ldd	r24, Y+37	; 0x25
    3ffc:	9e a1       	ldd	r25, Y+38	; 0x26
    3ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	9a a3       	std	Y+34, r25	; 0x22
    4008:	89 a3       	std	Y+33, r24	; 0x21
    400a:	89 a1       	ldd	r24, Y+33	; 0x21
    400c:	9a a1       	ldd	r25, Y+34	; 0x22
    400e:	9e 8f       	std	Y+30, r25	; 0x1e
    4010:	8d 8f       	std	Y+29, r24	; 0x1d
    4012:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4014:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4016:	01 97       	sbiw	r24, 0x01	; 1
    4018:	f1 f7       	brne	.-4      	; 0x4016 <ReadInputDigit+0x17e>
    401a:	9e 8f       	std	Y+30, r25	; 0x1e
    401c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);
				LCD_enuWriteCommand(0xC);
    401e:	8c e0       	ldi	r24, 0x0C	; 12
    4020:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_enuWriteCommand>
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	a6 e9       	ldi	r26, 0x96	; 150
    402a:	b3 e4       	ldi	r27, 0x43	; 67
    402c:	89 8f       	std	Y+25, r24	; 0x19
    402e:	9a 8f       	std	Y+26, r25	; 0x1a
    4030:	ab 8f       	std	Y+27, r26	; 0x1b
    4032:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4034:	69 8d       	ldd	r22, Y+25	; 0x19
    4036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    403a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	4a e7       	ldi	r20, 0x7A	; 122
    4042:	55 e4       	ldi	r21, 0x45	; 69
    4044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	8d 8b       	std	Y+21, r24	; 0x15
    404e:	9e 8b       	std	Y+22, r25	; 0x16
    4050:	af 8b       	std	Y+23, r26	; 0x17
    4052:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4054:	6d 89       	ldd	r22, Y+21	; 0x15
    4056:	7e 89       	ldd	r23, Y+22	; 0x16
    4058:	8f 89       	ldd	r24, Y+23	; 0x17
    405a:	98 8d       	ldd	r25, Y+24	; 0x18
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	40 e8       	ldi	r20, 0x80	; 128
    4062:	5f e3       	ldi	r21, 0x3F	; 63
    4064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4068:	88 23       	and	r24, r24
    406a:	2c f4       	brge	.+10     	; 0x4076 <ReadInputDigit+0x1de>
		__ticks = 1;
    406c:	81 e0       	ldi	r24, 0x01	; 1
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	9c 8b       	std	Y+20, r25	; 0x14
    4072:	8b 8b       	std	Y+19, r24	; 0x13
    4074:	3f c0       	rjmp	.+126    	; 0x40f4 <ReadInputDigit+0x25c>
	else if (__tmp > 65535)
    4076:	6d 89       	ldd	r22, Y+21	; 0x15
    4078:	7e 89       	ldd	r23, Y+22	; 0x16
    407a:	8f 89       	ldd	r24, Y+23	; 0x17
    407c:	98 8d       	ldd	r25, Y+24	; 0x18
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	3f ef       	ldi	r19, 0xFF	; 255
    4082:	4f e7       	ldi	r20, 0x7F	; 127
    4084:	57 e4       	ldi	r21, 0x47	; 71
    4086:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    408a:	18 16       	cp	r1, r24
    408c:	4c f5       	brge	.+82     	; 0x40e0 <ReadInputDigit+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408e:	69 8d       	ldd	r22, Y+25	; 0x19
    4090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4096:	20 e0       	ldi	r18, 0x00	; 0
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	40 e2       	ldi	r20, 0x20	; 32
    409c:	51 e4       	ldi	r21, 0x41	; 65
    409e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	bc 01       	movw	r22, r24
    40a8:	cd 01       	movw	r24, r26
    40aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ae:	dc 01       	movw	r26, r24
    40b0:	cb 01       	movw	r24, r22
    40b2:	9c 8b       	std	Y+20, r25	; 0x14
    40b4:	8b 8b       	std	Y+19, r24	; 0x13
    40b6:	0f c0       	rjmp	.+30     	; 0x40d6 <ReadInputDigit+0x23e>
    40b8:	80 e9       	ldi	r24, 0x90	; 144
    40ba:	91 e0       	ldi	r25, 0x01	; 1
    40bc:	9a 8b       	std	Y+18, r25	; 0x12
    40be:	89 8b       	std	Y+17, r24	; 0x11
    40c0:	89 89       	ldd	r24, Y+17	; 0x11
    40c2:	9a 89       	ldd	r25, Y+18	; 0x12
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	f1 f7       	brne	.-4      	; 0x40c4 <ReadInputDigit+0x22c>
    40c8:	9a 8b       	std	Y+18, r25	; 0x12
    40ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40cc:	8b 89       	ldd	r24, Y+19	; 0x13
    40ce:	9c 89       	ldd	r25, Y+20	; 0x14
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	9c 8b       	std	Y+20, r25	; 0x14
    40d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d6:	8b 89       	ldd	r24, Y+19	; 0x13
    40d8:	9c 89       	ldd	r25, Y+20	; 0x14
    40da:	00 97       	sbiw	r24, 0x00	; 0
    40dc:	69 f7       	brne	.-38     	; 0x40b8 <ReadInputDigit+0x220>
    40de:	14 c0       	rjmp	.+40     	; 0x4108 <ReadInputDigit+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e0:	6d 89       	ldd	r22, Y+21	; 0x15
    40e2:	7e 89       	ldd	r23, Y+22	; 0x16
    40e4:	8f 89       	ldd	r24, Y+23	; 0x17
    40e6:	98 8d       	ldd	r25, Y+24	; 0x18
    40e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	9c 8b       	std	Y+20, r25	; 0x14
    40f2:	8b 8b       	std	Y+19, r24	; 0x13
    40f4:	8b 89       	ldd	r24, Y+19	; 0x13
    40f6:	9c 89       	ldd	r25, Y+20	; 0x14
    40f8:	98 8b       	std	Y+16, r25	; 0x10
    40fa:	8f 87       	std	Y+15, r24	; 0x0f
    40fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    40fe:	98 89       	ldd	r25, Y+16	; 0x10
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	f1 f7       	brne	.-4      	; 0x4100 <ReadInputDigit+0x268>
    4104:	98 8b       	std	Y+16, r25	; 0x10
    4106:	8f 87       	std	Y+15, r24	; 0x0f
			Global_u8Restart = RESTART ;
			LCD_enuGoToPosition(1,5);
			LCD_enuWriteString("NUMBERS");
			LCD_enuGoToPosition(2,5);
			LCD_enuWriteString("ONLY!!!");
			for(u8 Local_u8Iter = 0; Local_u8Iter<5 ; Local_u8Iter++)
    4108:	8b a5       	ldd	r24, Y+43	; 0x2b
    410a:	8f 5f       	subi	r24, 0xFF	; 255
    410c:	8b a7       	std	Y+43, r24	; 0x2b
    410e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4110:	85 30       	cpi	r24, 0x05	; 5
    4112:	08 f4       	brcc	.+2      	; 0x4116 <ReadInputDigit+0x27e>
    4114:	0f cf       	rjmp	.-482    	; 0x3f34 <ReadInputDigit+0x9c>
    4116:	80 e0       	ldi	r24, 0x00	; 0
    4118:	90 e8       	ldi	r25, 0x80	; 128
    411a:	ab e3       	ldi	r26, 0x3B	; 59
    411c:	b5 e4       	ldi	r27, 0x45	; 69
    411e:	8b 87       	std	Y+11, r24	; 0x0b
    4120:	9c 87       	std	Y+12, r25	; 0x0c
    4122:	ad 87       	std	Y+13, r26	; 0x0d
    4124:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4126:	6b 85       	ldd	r22, Y+11	; 0x0b
    4128:	7c 85       	ldd	r23, Y+12	; 0x0c
    412a:	8d 85       	ldd	r24, Y+13	; 0x0d
    412c:	9e 85       	ldd	r25, Y+14	; 0x0e
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	4a e7       	ldi	r20, 0x7A	; 122
    4134:	55 e4       	ldi	r21, 0x45	; 69
    4136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	8f 83       	std	Y+7, r24	; 0x07
    4140:	98 87       	std	Y+8, r25	; 0x08
    4142:	a9 87       	std	Y+9, r26	; 0x09
    4144:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4146:	6f 81       	ldd	r22, Y+7	; 0x07
    4148:	78 85       	ldd	r23, Y+8	; 0x08
    414a:	89 85       	ldd	r24, Y+9	; 0x09
    414c:	9a 85       	ldd	r25, Y+10	; 0x0a
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	40 e8       	ldi	r20, 0x80	; 128
    4154:	5f e3       	ldi	r21, 0x3F	; 63
    4156:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    415a:	88 23       	and	r24, r24
    415c:	2c f4       	brge	.+10     	; 0x4168 <ReadInputDigit+0x2d0>
		__ticks = 1;
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	9e 83       	std	Y+6, r25	; 0x06
    4164:	8d 83       	std	Y+5, r24	; 0x05
    4166:	3f c0       	rjmp	.+126    	; 0x41e6 <ReadInputDigit+0x34e>
	else if (__tmp > 65535)
    4168:	6f 81       	ldd	r22, Y+7	; 0x07
    416a:	78 85       	ldd	r23, Y+8	; 0x08
    416c:	89 85       	ldd	r24, Y+9	; 0x09
    416e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	3f ef       	ldi	r19, 0xFF	; 255
    4174:	4f e7       	ldi	r20, 0x7F	; 127
    4176:	57 e4       	ldi	r21, 0x47	; 71
    4178:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    417c:	18 16       	cp	r1, r24
    417e:	4c f5       	brge	.+82     	; 0x41d2 <ReadInputDigit+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4180:	6b 85       	ldd	r22, Y+11	; 0x0b
    4182:	7c 85       	ldd	r23, Y+12	; 0x0c
    4184:	8d 85       	ldd	r24, Y+13	; 0x0d
    4186:	9e 85       	ldd	r25, Y+14	; 0x0e
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	40 e2       	ldi	r20, 0x20	; 32
    418e:	51 e4       	ldi	r21, 0x41	; 65
    4190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	bc 01       	movw	r22, r24
    419a:	cd 01       	movw	r24, r26
    419c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a0:	dc 01       	movw	r26, r24
    41a2:	cb 01       	movw	r24, r22
    41a4:	9e 83       	std	Y+6, r25	; 0x06
    41a6:	8d 83       	std	Y+5, r24	; 0x05
    41a8:	0f c0       	rjmp	.+30     	; 0x41c8 <ReadInputDigit+0x330>
    41aa:	80 e9       	ldi	r24, 0x90	; 144
    41ac:	91 e0       	ldi	r25, 0x01	; 1
    41ae:	9c 83       	std	Y+4, r25	; 0x04
    41b0:	8b 83       	std	Y+3, r24	; 0x03
    41b2:	8b 81       	ldd	r24, Y+3	; 0x03
    41b4:	9c 81       	ldd	r25, Y+4	; 0x04
    41b6:	01 97       	sbiw	r24, 0x01	; 1
    41b8:	f1 f7       	brne	.-4      	; 0x41b6 <ReadInputDigit+0x31e>
    41ba:	9c 83       	std	Y+4, r25	; 0x04
    41bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41be:	8d 81       	ldd	r24, Y+5	; 0x05
    41c0:	9e 81       	ldd	r25, Y+6	; 0x06
    41c2:	01 97       	sbiw	r24, 0x01	; 1
    41c4:	9e 83       	std	Y+6, r25	; 0x06
    41c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ca:	9e 81       	ldd	r25, Y+6	; 0x06
    41cc:	00 97       	sbiw	r24, 0x00	; 0
    41ce:	69 f7       	brne	.-38     	; 0x41aa <ReadInputDigit+0x312>
    41d0:	17 c0       	rjmp	.+46     	; 0x4200 <ReadInputDigit+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d2:	6f 81       	ldd	r22, Y+7	; 0x07
    41d4:	78 85       	ldd	r23, Y+8	; 0x08
    41d6:	89 85       	ldd	r24, Y+9	; 0x09
    41d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	9e 83       	std	Y+6, r25	; 0x06
    41e4:	8d 83       	std	Y+5, r24	; 0x05
    41e6:	8d 81       	ldd	r24, Y+5	; 0x05
    41e8:	9e 81       	ldd	r25, Y+6	; 0x06
    41ea:	9a 83       	std	Y+2, r25	; 0x02
    41ec:	89 83       	std	Y+1, r24	; 0x01
    41ee:	89 81       	ldd	r24, Y+1	; 0x01
    41f0:	9a 81       	ldd	r25, Y+2	; 0x02
    41f2:	01 97       	sbiw	r24, 0x01	; 1
    41f4:	f1 f7       	brne	.-4      	; 0x41f2 <ReadInputDigit+0x35a>
    41f6:	9a 83       	std	Y+2, r25	; 0x02
    41f8:	89 83       	std	Y+1, r24	; 0x01
    41fa:	02 c0       	rjmp	.+4      	; 0x4200 <ReadInputDigit+0x368>
			}
			_delay_ms(3000);
		}

	}
	else Local_enuErrorState = ES_NULL_POINTER;
    41fc:	83 e0       	ldi	r24, 0x03	; 3
    41fe:	8c a7       	std	Y+44, r24	; 0x2c



	return Local_enuErrorState;
    4200:	8c a5       	ldd	r24, Y+44	; 0x2c

}
    4202:	ae 96       	adiw	r28, 0x2e	; 46
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	de bf       	out	0x3e, r29	; 62
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	cd bf       	out	0x3d, r28	; 61
    420e:	cf 91       	pop	r28
    4210:	df 91       	pop	r29
    4212:	08 95       	ret

00004214 <DetectPowerStatus>:

ES_t DetectPowerStatus(void)
{
    4214:	df 93       	push	r29
    4216:	cf 93       	push	r28
    4218:	00 d0       	rcall	.+0      	; 0x421a <DetectPowerStatus+0x6>
    421a:	00 d0       	rcall	.+0      	; 0x421c <DetectPowerStatus+0x8>
    421c:	cd b7       	in	r28, 0x3d	; 61
    421e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8SwitchValue;


	if( (Local_enuErrorState = SwitchIsPressed( POWER_SWITCH , POWER_SWITCH_PRESSED ,&Local_u8SwitchValue) ) == ES_OK )
    4224:	9e 01       	movw	r18, r28
    4226:	2e 5f       	subi	r18, 0xFE	; 254
    4228:	3f 4f       	sbci	r19, 0xFF	; 255
    422a:	8a ec       	ldi	r24, 0xCA	; 202
    422c:	61 e0       	ldi	r22, 0x01	; 1
    422e:	a9 01       	movw	r20, r18
    4230:	0e 94 49 21 	call	0x4292	; 0x4292 <SwitchIsPressed>
    4234:	89 83       	std	Y+1, r24	; 0x01
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	88 23       	and	r24, r24
    423a:	19 f5       	brne	.+70     	; 0x4282 <DetectPowerStatus+0x6e>
	{
		if( Local_u8SwitchValue != SWITCH_UNPRESSED && Local_u8SwitchValue == POWER_SWITCH_PRESSED  )
    423c:	8a 81       	ldd	r24, Y+2	; 0x02
    423e:	8f 36       	cpi	r24, 0x6F	; 111
    4240:	01 f1       	breq	.+64     	; 0x4282 <DetectPowerStatus+0x6e>
    4242:	8a 81       	ldd	r24, Y+2	; 0x02
    4244:	81 30       	cpi	r24, 0x01	; 1
    4246:	e9 f4       	brne	.+58     	; 0x4282 <DetectPowerStatus+0x6e>
		{
			switch(Global_u8Power)
    4248:	80 91 3b 02 	lds	r24, 0x023B
    424c:	28 2f       	mov	r18, r24
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	3c 83       	std	Y+4, r19	; 0x04
    4252:	2b 83       	std	Y+3, r18	; 0x03
    4254:	8b 81       	ldd	r24, Y+3	; 0x03
    4256:	9c 81       	ldd	r25, Y+4	; 0x04
    4258:	89 30       	cpi	r24, 0x09	; 9
    425a:	91 05       	cpc	r25, r1
    425c:	94 f0       	brlt	.+36     	; 0x4282 <DetectPowerStatus+0x6e>
    425e:	2b 81       	ldd	r18, Y+3	; 0x03
    4260:	3c 81       	ldd	r19, Y+4	; 0x04
    4262:	2b 30       	cpi	r18, 0x0B	; 11
    4264:	31 05       	cpc	r19, r1
    4266:	34 f0       	brlt	.+12     	; 0x4274 <DetectPowerStatus+0x60>
    4268:	8b 81       	ldd	r24, Y+3	; 0x03
    426a:	9c 81       	ldd	r25, Y+4	; 0x04
    426c:	8b 30       	cpi	r24, 0x0B	; 11
    426e:	91 05       	cpc	r25, r1
    4270:	29 f0       	breq	.+10     	; 0x427c <DetectPowerStatus+0x68>
    4272:	07 c0       	rjmp	.+14     	; 0x4282 <DetectPowerStatus+0x6e>
			{
				case SHUTDOWN	:
				case POWER_OFF	: Global_u8Power = POWER_ON;
    4274:	8b e0       	ldi	r24, 0x0B	; 11
    4276:	80 93 3b 02 	sts	0x023B, r24
    427a:	03 c0       	rjmp	.+6      	; 0x4282 <DetectPowerStatus+0x6e>
									break;
				case POWER_ON	: Global_u8Power = POWER_OFF;
    427c:	8a e0       	ldi	r24, 0x0A	; 10
    427e:	80 93 3b 02 	sts	0x023B, r24
									break;
			}
		}
	}

	return Local_enuErrorState;
    4282:	89 81       	ldd	r24, Y+1	; 0x01
}
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	0f 90       	pop	r0
    428c:	cf 91       	pop	r28
    428e:	df 91       	pop	r29
    4290:	08 95       	ret

00004292 <SwitchIsPressed>:


ES_t SwitchIsPressed(u8 Copy_u8SwitchNum , u8 Copy_u8PressedValue , u8 *Copy_pu8SwitchStatus)
{
    4292:	df 93       	push	r29
    4294:	cf 93       	push	r28
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
    429a:	64 97       	sbiw	r28, 0x14	; 20
    429c:	0f b6       	in	r0, 0x3f	; 63
    429e:	f8 94       	cli
    42a0:	de bf       	out	0x3e, r29	; 62
    42a2:	0f be       	out	0x3f, r0	; 63
    42a4:	cd bf       	out	0x3d, r28	; 61
    42a6:	89 8b       	std	Y+17, r24	; 0x11
    42a8:	6a 8b       	std	Y+18, r22	; 0x12
    42aa:	5c 8b       	std	Y+20, r21	; 0x14
    42ac:	4b 8b       	std	Y+19, r20	; 0x13
	ES_t Local_enuErrorState = ES_NOK;
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	8f 87       	std	Y+15, r24	; 0x0f

	u8 Local_u8SwitchValue ;

	if(Copy_pu8SwitchStatus != NULL)
    42b2:	8b 89       	ldd	r24, Y+19	; 0x13
    42b4:	9c 89       	ldd	r25, Y+20	; 0x14
    42b6:	00 97       	sbiw	r24, 0x00	; 0
    42b8:	09 f4       	brne	.+2      	; 0x42bc <SwitchIsPressed+0x2a>
    42ba:	a2 c0       	rjmp	.+324    	; 0x4400 <SwitchIsPressed+0x16e>
	{
		*Copy_pu8SwitchStatus = SWITCH_UNPRESSED;
    42bc:	eb 89       	ldd	r30, Y+19	; 0x13
    42be:	fc 89       	ldd	r31, Y+20	; 0x14
    42c0:	8f e6       	ldi	r24, 0x6F	; 111
    42c2:	80 83       	st	Z, r24

		if( Copy_u8SwitchNum == POWER_SWITCH	|| Copy_u8SwitchNum == COUNTER_SWITCH )
    42c4:	89 89       	ldd	r24, Y+17	; 0x11
    42c6:	8a 3c       	cpi	r24, 0xCA	; 202
    42c8:	21 f0       	breq	.+8      	; 0x42d2 <SwitchIsPressed+0x40>
    42ca:	89 89       	ldd	r24, Y+17	; 0x11
    42cc:	8b 3c       	cpi	r24, 0xCB	; 203
    42ce:	09 f0       	breq	.+2      	; 0x42d2 <SwitchIsPressed+0x40>
    42d0:	94 c0       	rjmp	.+296    	; 0x43fa <SwitchIsPressed+0x168>
		{
			if( ( Local_enuErrorState = Switch_enuGetPressed(Copy_u8SwitchNum , &Local_u8SwitchValue) ) == ES_OK )
    42d2:	9e 01       	movw	r18, r28
    42d4:	20 5f       	subi	r18, 0xF0	; 240
    42d6:	3f 4f       	sbci	r19, 0xFF	; 255
    42d8:	89 89       	ldd	r24, Y+17	; 0x11
    42da:	b9 01       	movw	r22, r18
    42dc:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <Switch_enuGetPressed>
    42e0:	8f 87       	std	Y+15, r24	; 0x0f
    42e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    42e4:	88 23       	and	r24, r24
    42e6:	09 f0       	breq	.+2      	; 0x42ea <SwitchIsPressed+0x58>
    42e8:	8d c0       	rjmp	.+282    	; 0x4404 <SwitchIsPressed+0x172>
			{
				if( Local_u8SwitchValue == Copy_u8PressedValue)
    42ea:	98 89       	ldd	r25, Y+16	; 0x10
    42ec:	8a 89       	ldd	r24, Y+18	; 0x12
    42ee:	98 17       	cp	r25, r24
    42f0:	09 f0       	breq	.+2      	; 0x42f4 <SwitchIsPressed+0x62>
    42f2:	88 c0       	rjmp	.+272    	; 0x4404 <SwitchIsPressed+0x172>
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	a0 e4       	ldi	r26, 0x40	; 64
    42fa:	b0 e4       	ldi	r27, 0x40	; 64
    42fc:	8b 87       	std	Y+11, r24	; 0x0b
    42fe:	9c 87       	std	Y+12, r25	; 0x0c
    4300:	ad 87       	std	Y+13, r26	; 0x0d
    4302:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4304:	6b 85       	ldd	r22, Y+11	; 0x0b
    4306:	7c 85       	ldd	r23, Y+12	; 0x0c
    4308:	8d 85       	ldd	r24, Y+13	; 0x0d
    430a:	9e 85       	ldd	r25, Y+14	; 0x0e
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	4a e7       	ldi	r20, 0x7A	; 122
    4312:	55 e4       	ldi	r21, 0x45	; 69
    4314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	8f 83       	std	Y+7, r24	; 0x07
    431e:	98 87       	std	Y+8, r25	; 0x08
    4320:	a9 87       	std	Y+9, r26	; 0x09
    4322:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4324:	6f 81       	ldd	r22, Y+7	; 0x07
    4326:	78 85       	ldd	r23, Y+8	; 0x08
    4328:	89 85       	ldd	r24, Y+9	; 0x09
    432a:	9a 85       	ldd	r25, Y+10	; 0x0a
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	40 e8       	ldi	r20, 0x80	; 128
    4332:	5f e3       	ldi	r21, 0x3F	; 63
    4334:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4338:	88 23       	and	r24, r24
    433a:	2c f4       	brge	.+10     	; 0x4346 <SwitchIsPressed+0xb4>
		__ticks = 1;
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	9e 83       	std	Y+6, r25	; 0x06
    4342:	8d 83       	std	Y+5, r24	; 0x05
    4344:	3f c0       	rjmp	.+126    	; 0x43c4 <SwitchIsPressed+0x132>
	else if (__tmp > 65535)
    4346:	6f 81       	ldd	r22, Y+7	; 0x07
    4348:	78 85       	ldd	r23, Y+8	; 0x08
    434a:	89 85       	ldd	r24, Y+9	; 0x09
    434c:	9a 85       	ldd	r25, Y+10	; 0x0a
    434e:	20 e0       	ldi	r18, 0x00	; 0
    4350:	3f ef       	ldi	r19, 0xFF	; 255
    4352:	4f e7       	ldi	r20, 0x7F	; 127
    4354:	57 e4       	ldi	r21, 0x47	; 71
    4356:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    435a:	18 16       	cp	r1, r24
    435c:	4c f5       	brge	.+82     	; 0x43b0 <SwitchIsPressed+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    435e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4360:	7c 85       	ldd	r23, Y+12	; 0x0c
    4362:	8d 85       	ldd	r24, Y+13	; 0x0d
    4364:	9e 85       	ldd	r25, Y+14	; 0x0e
    4366:	20 e0       	ldi	r18, 0x00	; 0
    4368:	30 e0       	ldi	r19, 0x00	; 0
    436a:	40 e2       	ldi	r20, 0x20	; 32
    436c:	51 e4       	ldi	r21, 0x41	; 65
    436e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4372:	dc 01       	movw	r26, r24
    4374:	cb 01       	movw	r24, r22
    4376:	bc 01       	movw	r22, r24
    4378:	cd 01       	movw	r24, r26
    437a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437e:	dc 01       	movw	r26, r24
    4380:	cb 01       	movw	r24, r22
    4382:	9e 83       	std	Y+6, r25	; 0x06
    4384:	8d 83       	std	Y+5, r24	; 0x05
    4386:	0f c0       	rjmp	.+30     	; 0x43a6 <SwitchIsPressed+0x114>
    4388:	80 e9       	ldi	r24, 0x90	; 144
    438a:	91 e0       	ldi	r25, 0x01	; 1
    438c:	9c 83       	std	Y+4, r25	; 0x04
    438e:	8b 83       	std	Y+3, r24	; 0x03
    4390:	8b 81       	ldd	r24, Y+3	; 0x03
    4392:	9c 81       	ldd	r25, Y+4	; 0x04
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	f1 f7       	brne	.-4      	; 0x4394 <SwitchIsPressed+0x102>
    4398:	9c 83       	std	Y+4, r25	; 0x04
    439a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    439c:	8d 81       	ldd	r24, Y+5	; 0x05
    439e:	9e 81       	ldd	r25, Y+6	; 0x06
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	9e 83       	std	Y+6, r25	; 0x06
    43a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a6:	8d 81       	ldd	r24, Y+5	; 0x05
    43a8:	9e 81       	ldd	r25, Y+6	; 0x06
    43aa:	00 97       	sbiw	r24, 0x00	; 0
    43ac:	69 f7       	brne	.-38     	; 0x4388 <SwitchIsPressed+0xf6>
    43ae:	14 c0       	rjmp	.+40     	; 0x43d8 <SwitchIsPressed+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43b0:	6f 81       	ldd	r22, Y+7	; 0x07
    43b2:	78 85       	ldd	r23, Y+8	; 0x08
    43b4:	89 85       	ldd	r24, Y+9	; 0x09
    43b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	9e 83       	std	Y+6, r25	; 0x06
    43c2:	8d 83       	std	Y+5, r24	; 0x05
    43c4:	8d 81       	ldd	r24, Y+5	; 0x05
    43c6:	9e 81       	ldd	r25, Y+6	; 0x06
    43c8:	9a 83       	std	Y+2, r25	; 0x02
    43ca:	89 83       	std	Y+1, r24	; 0x01
    43cc:	89 81       	ldd	r24, Y+1	; 0x01
    43ce:	9a 81       	ldd	r25, Y+2	; 0x02
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	f1 f7       	brne	.-4      	; 0x43d0 <SwitchIsPressed+0x13e>
    43d4:	9a 83       	std	Y+2, r25	; 0x02
    43d6:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(SWITCH_BOUNCE_DELAY);
					Local_enuErrorState = Switch_enuGetPressed(Copy_u8SwitchNum , &Local_u8SwitchValue);
    43d8:	9e 01       	movw	r18, r28
    43da:	20 5f       	subi	r18, 0xF0	; 240
    43dc:	3f 4f       	sbci	r19, 0xFF	; 255
    43de:	89 89       	ldd	r24, Y+17	; 0x11
    43e0:	b9 01       	movw	r22, r18
    43e2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <Switch_enuGetPressed>
    43e6:	8f 87       	std	Y+15, r24	; 0x0f
					if( Local_u8SwitchValue == Copy_u8PressedValue)
    43e8:	98 89       	ldd	r25, Y+16	; 0x10
    43ea:	8a 89       	ldd	r24, Y+18	; 0x12
    43ec:	98 17       	cp	r25, r24
    43ee:	51 f4       	brne	.+20     	; 0x4404 <SwitchIsPressed+0x172>
					{
						*Copy_pu8SwitchStatus = Copy_u8PressedValue;
    43f0:	eb 89       	ldd	r30, Y+19	; 0x13
    43f2:	fc 89       	ldd	r31, Y+20	; 0x14
    43f4:	8a 89       	ldd	r24, Y+18	; 0x12
    43f6:	80 83       	st	Z, r24
    43f8:	05 c0       	rjmp	.+10     	; 0x4404 <SwitchIsPressed+0x172>
					}
				}
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    43fa:	82 e0       	ldi	r24, 0x02	; 2
    43fc:	8f 87       	std	Y+15, r24	; 0x0f
    43fe:	02 c0       	rjmp	.+4      	; 0x4404 <SwitchIsPressed+0x172>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    4400:	83 e0       	ldi	r24, 0x03	; 3
    4402:	8f 87       	std	Y+15, r24	; 0x0f

	return Local_enuErrorState;
    4404:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4406:	64 96       	adiw	r28, 0x14	; 20
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	cf 91       	pop	r28
    4414:	df 91       	pop	r29
    4416:	08 95       	ret

00004418 <CheckCounterStatus>:

ES_t CheckCounterStatus(void)
{
    4418:	df 93       	push	r29
    441a:	cf 93       	push	r28
    441c:	00 d0       	rcall	.+0      	; 0x441e <CheckCounterStatus+0x6>
    441e:	00 d0       	rcall	.+0      	; 0x4420 <CheckCounterStatus+0x8>
    4420:	cd b7       	in	r28, 0x3d	; 61
    4422:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8SwitchValue;


	if( (Local_enuErrorState = SwitchIsPressed( COUNTER_SWITCH , COUNTER_SWITCH_PRESSED ,&Local_u8SwitchValue) ) == ES_OK )
    4428:	9e 01       	movw	r18, r28
    442a:	2e 5f       	subi	r18, 0xFE	; 254
    442c:	3f 4f       	sbci	r19, 0xFF	; 255
    442e:	8b ec       	ldi	r24, 0xCB	; 203
    4430:	61 e0       	ldi	r22, 0x01	; 1
    4432:	a9 01       	movw	r20, r18
    4434:	0e 94 49 21 	call	0x4292	; 0x4292 <SwitchIsPressed>
    4438:	89 83       	std	Y+1, r24	; 0x01
    443a:	89 81       	ldd	r24, Y+1	; 0x01
    443c:	88 23       	and	r24, r24
    443e:	31 f5       	brne	.+76     	; 0x448c <CheckCounterStatus+0x74>
	{
		if( Local_u8SwitchValue != SWITCH_UNPRESSED && Local_u8SwitchValue == COUNTER_SWITCH_PRESSED)
    4440:	8a 81       	ldd	r24, Y+2	; 0x02
    4442:	8f 36       	cpi	r24, 0x6F	; 111
    4444:	19 f1       	breq	.+70     	; 0x448c <CheckCounterStatus+0x74>
    4446:	8a 81       	ldd	r24, Y+2	; 0x02
    4448:	81 30       	cpi	r24, 0x01	; 1
    444a:	01 f5       	brne	.+64     	; 0x448c <CheckCounterStatus+0x74>
		{
			switch(Global_u8Counter)
    444c:	80 91 3d 02 	lds	r24, 0x023D
    4450:	28 2f       	mov	r18, r24
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	3c 83       	std	Y+4, r19	; 0x04
    4456:	2b 83       	std	Y+3, r18	; 0x03
    4458:	8b 81       	ldd	r24, Y+3	; 0x03
    445a:	9c 81       	ldd	r25, Y+4	; 0x04
    445c:	8f 30       	cpi	r24, 0x0F	; 15
    445e:	91 05       	cpc	r25, r1
    4460:	71 f0       	breq	.+28     	; 0x447e <CheckCounterStatus+0x66>
    4462:	2b 81       	ldd	r18, Y+3	; 0x03
    4464:	3c 81       	ldd	r19, Y+4	; 0x04
    4466:	20 31       	cpi	r18, 0x10	; 16
    4468:	31 05       	cpc	r19, r1
    446a:	69 f0       	breq	.+26     	; 0x4486 <CheckCounterStatus+0x6e>
    446c:	8b 81       	ldd	r24, Y+3	; 0x03
    446e:	9c 81       	ldd	r25, Y+4	; 0x04
    4470:	8e 30       	cpi	r24, 0x0E	; 14
    4472:	91 05       	cpc	r25, r1
    4474:	59 f4       	brne	.+22     	; 0x448c <CheckCounterStatus+0x74>
			{
				case NO_COUNT	: Global_u8Counter = COUNT_UP;
    4476:	8f e0       	ldi	r24, 0x0F	; 15
    4478:	80 93 3d 02 	sts	0x023D, r24
    447c:	07 c0       	rjmp	.+14     	; 0x448c <CheckCounterStatus+0x74>
									break;
				case COUNT_UP	: Global_u8Counter = COUNT_DOWN;
    447e:	80 e1       	ldi	r24, 0x10	; 16
    4480:	80 93 3d 02 	sts	0x023D, r24
    4484:	03 c0       	rjmp	.+6      	; 0x448c <CheckCounterStatus+0x74>
									break;
				case COUNT_DOWN	: Global_u8Counter = NO_COUNT;
    4486:	8e e0       	ldi	r24, 0x0E	; 14
    4488:	80 93 3d 02 	sts	0x023D, r24
									break;
			}
		}
	}

	return Local_enuErrorState;
    448c:	89 81       	ldd	r24, Y+1	; 0x01
}
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	cf 91       	pop	r28
    4498:	df 91       	pop	r29
    449a:	08 95       	ret

0000449c <__mulsi3>:
    449c:	62 9f       	mul	r22, r18
    449e:	d0 01       	movw	r26, r0
    44a0:	73 9f       	mul	r23, r19
    44a2:	f0 01       	movw	r30, r0
    44a4:	82 9f       	mul	r24, r18
    44a6:	e0 0d       	add	r30, r0
    44a8:	f1 1d       	adc	r31, r1
    44aa:	64 9f       	mul	r22, r20
    44ac:	e0 0d       	add	r30, r0
    44ae:	f1 1d       	adc	r31, r1
    44b0:	92 9f       	mul	r25, r18
    44b2:	f0 0d       	add	r31, r0
    44b4:	83 9f       	mul	r24, r19
    44b6:	f0 0d       	add	r31, r0
    44b8:	74 9f       	mul	r23, r20
    44ba:	f0 0d       	add	r31, r0
    44bc:	65 9f       	mul	r22, r21
    44be:	f0 0d       	add	r31, r0
    44c0:	99 27       	eor	r25, r25
    44c2:	72 9f       	mul	r23, r18
    44c4:	b0 0d       	add	r27, r0
    44c6:	e1 1d       	adc	r30, r1
    44c8:	f9 1f       	adc	r31, r25
    44ca:	63 9f       	mul	r22, r19
    44cc:	b0 0d       	add	r27, r0
    44ce:	e1 1d       	adc	r30, r1
    44d0:	f9 1f       	adc	r31, r25
    44d2:	bd 01       	movw	r22, r26
    44d4:	cf 01       	movw	r24, r30
    44d6:	11 24       	eor	r1, r1
    44d8:	08 95       	ret

000044da <__divmodhi4>:
    44da:	97 fb       	bst	r25, 7
    44dc:	09 2e       	mov	r0, r25
    44de:	07 26       	eor	r0, r23
    44e0:	0a d0       	rcall	.+20     	; 0x44f6 <__divmodhi4_neg1>
    44e2:	77 fd       	sbrc	r23, 7
    44e4:	04 d0       	rcall	.+8      	; 0x44ee <__divmodhi4_neg2>
    44e6:	49 d0       	rcall	.+146    	; 0x457a <__udivmodhi4>
    44e8:	06 d0       	rcall	.+12     	; 0x44f6 <__divmodhi4_neg1>
    44ea:	00 20       	and	r0, r0
    44ec:	1a f4       	brpl	.+6      	; 0x44f4 <__divmodhi4_exit>

000044ee <__divmodhi4_neg2>:
    44ee:	70 95       	com	r23
    44f0:	61 95       	neg	r22
    44f2:	7f 4f       	sbci	r23, 0xFF	; 255

000044f4 <__divmodhi4_exit>:
    44f4:	08 95       	ret

000044f6 <__divmodhi4_neg1>:
    44f6:	f6 f7       	brtc	.-4      	; 0x44f4 <__divmodhi4_exit>
    44f8:	90 95       	com	r25
    44fa:	81 95       	neg	r24
    44fc:	9f 4f       	sbci	r25, 0xFF	; 255
    44fe:	08 95       	ret

00004500 <__udivmodsi4>:
    4500:	a1 e2       	ldi	r26, 0x21	; 33
    4502:	1a 2e       	mov	r1, r26
    4504:	aa 1b       	sub	r26, r26
    4506:	bb 1b       	sub	r27, r27
    4508:	fd 01       	movw	r30, r26
    450a:	0d c0       	rjmp	.+26     	; 0x4526 <__udivmodsi4_ep>

0000450c <__udivmodsi4_loop>:
    450c:	aa 1f       	adc	r26, r26
    450e:	bb 1f       	adc	r27, r27
    4510:	ee 1f       	adc	r30, r30
    4512:	ff 1f       	adc	r31, r31
    4514:	a2 17       	cp	r26, r18
    4516:	b3 07       	cpc	r27, r19
    4518:	e4 07       	cpc	r30, r20
    451a:	f5 07       	cpc	r31, r21
    451c:	20 f0       	brcs	.+8      	; 0x4526 <__udivmodsi4_ep>
    451e:	a2 1b       	sub	r26, r18
    4520:	b3 0b       	sbc	r27, r19
    4522:	e4 0b       	sbc	r30, r20
    4524:	f5 0b       	sbc	r31, r21

00004526 <__udivmodsi4_ep>:
    4526:	66 1f       	adc	r22, r22
    4528:	77 1f       	adc	r23, r23
    452a:	88 1f       	adc	r24, r24
    452c:	99 1f       	adc	r25, r25
    452e:	1a 94       	dec	r1
    4530:	69 f7       	brne	.-38     	; 0x450c <__udivmodsi4_loop>
    4532:	60 95       	com	r22
    4534:	70 95       	com	r23
    4536:	80 95       	com	r24
    4538:	90 95       	com	r25
    453a:	9b 01       	movw	r18, r22
    453c:	ac 01       	movw	r20, r24
    453e:	bd 01       	movw	r22, r26
    4540:	cf 01       	movw	r24, r30
    4542:	08 95       	ret

00004544 <__divmodsi4>:
    4544:	97 fb       	bst	r25, 7
    4546:	09 2e       	mov	r0, r25
    4548:	05 26       	eor	r0, r21
    454a:	0e d0       	rcall	.+28     	; 0x4568 <__divmodsi4_neg1>
    454c:	57 fd       	sbrc	r21, 7
    454e:	04 d0       	rcall	.+8      	; 0x4558 <__divmodsi4_neg2>
    4550:	d7 df       	rcall	.-82     	; 0x4500 <__udivmodsi4>
    4552:	0a d0       	rcall	.+20     	; 0x4568 <__divmodsi4_neg1>
    4554:	00 1c       	adc	r0, r0
    4556:	38 f4       	brcc	.+14     	; 0x4566 <__divmodsi4_exit>

00004558 <__divmodsi4_neg2>:
    4558:	50 95       	com	r21
    455a:	40 95       	com	r20
    455c:	30 95       	com	r19
    455e:	21 95       	neg	r18
    4560:	3f 4f       	sbci	r19, 0xFF	; 255
    4562:	4f 4f       	sbci	r20, 0xFF	; 255
    4564:	5f 4f       	sbci	r21, 0xFF	; 255

00004566 <__divmodsi4_exit>:
    4566:	08 95       	ret

00004568 <__divmodsi4_neg1>:
    4568:	f6 f7       	brtc	.-4      	; 0x4566 <__divmodsi4_exit>
    456a:	90 95       	com	r25
    456c:	80 95       	com	r24
    456e:	70 95       	com	r23
    4570:	61 95       	neg	r22
    4572:	7f 4f       	sbci	r23, 0xFF	; 255
    4574:	8f 4f       	sbci	r24, 0xFF	; 255
    4576:	9f 4f       	sbci	r25, 0xFF	; 255
    4578:	08 95       	ret

0000457a <__udivmodhi4>:
    457a:	aa 1b       	sub	r26, r26
    457c:	bb 1b       	sub	r27, r27
    457e:	51 e1       	ldi	r21, 0x11	; 17
    4580:	07 c0       	rjmp	.+14     	; 0x4590 <__udivmodhi4_ep>

00004582 <__udivmodhi4_loop>:
    4582:	aa 1f       	adc	r26, r26
    4584:	bb 1f       	adc	r27, r27
    4586:	a6 17       	cp	r26, r22
    4588:	b7 07       	cpc	r27, r23
    458a:	10 f0       	brcs	.+4      	; 0x4590 <__udivmodhi4_ep>
    458c:	a6 1b       	sub	r26, r22
    458e:	b7 0b       	sbc	r27, r23

00004590 <__udivmodhi4_ep>:
    4590:	88 1f       	adc	r24, r24
    4592:	99 1f       	adc	r25, r25
    4594:	5a 95       	dec	r21
    4596:	a9 f7       	brne	.-22     	; 0x4582 <__udivmodhi4_loop>
    4598:	80 95       	com	r24
    459a:	90 95       	com	r25
    459c:	bc 01       	movw	r22, r24
    459e:	cd 01       	movw	r24, r26
    45a0:	08 95       	ret

000045a2 <__prologue_saves__>:
    45a2:	2f 92       	push	r2
    45a4:	3f 92       	push	r3
    45a6:	4f 92       	push	r4
    45a8:	5f 92       	push	r5
    45aa:	6f 92       	push	r6
    45ac:	7f 92       	push	r7
    45ae:	8f 92       	push	r8
    45b0:	9f 92       	push	r9
    45b2:	af 92       	push	r10
    45b4:	bf 92       	push	r11
    45b6:	cf 92       	push	r12
    45b8:	df 92       	push	r13
    45ba:	ef 92       	push	r14
    45bc:	ff 92       	push	r15
    45be:	0f 93       	push	r16
    45c0:	1f 93       	push	r17
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
    45ca:	ca 1b       	sub	r28, r26
    45cc:	db 0b       	sbc	r29, r27
    45ce:	0f b6       	in	r0, 0x3f	; 63
    45d0:	f8 94       	cli
    45d2:	de bf       	out	0x3e, r29	; 62
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	cd bf       	out	0x3d, r28	; 61
    45d8:	09 94       	ijmp

000045da <__epilogue_restores__>:
    45da:	2a 88       	ldd	r2, Y+18	; 0x12
    45dc:	39 88       	ldd	r3, Y+17	; 0x11
    45de:	48 88       	ldd	r4, Y+16	; 0x10
    45e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    45e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    45e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    45e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    45e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    45ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    45ec:	b9 84       	ldd	r11, Y+9	; 0x09
    45ee:	c8 84       	ldd	r12, Y+8	; 0x08
    45f0:	df 80       	ldd	r13, Y+7	; 0x07
    45f2:	ee 80       	ldd	r14, Y+6	; 0x06
    45f4:	fd 80       	ldd	r15, Y+5	; 0x05
    45f6:	0c 81       	ldd	r16, Y+4	; 0x04
    45f8:	1b 81       	ldd	r17, Y+3	; 0x03
    45fa:	aa 81       	ldd	r26, Y+2	; 0x02
    45fc:	b9 81       	ldd	r27, Y+1	; 0x01
    45fe:	ce 0f       	add	r28, r30
    4600:	d1 1d       	adc	r29, r1
    4602:	0f b6       	in	r0, 0x3f	; 63
    4604:	f8 94       	cli
    4606:	de bf       	out	0x3e, r29	; 62
    4608:	0f be       	out	0x3f, r0	; 63
    460a:	cd bf       	out	0x3d, r28	; 61
    460c:	ed 01       	movw	r28, r26
    460e:	08 95       	ret

00004610 <_exit>:
    4610:	f8 94       	cli

00004612 <__stop_program>:
    4612:	ff cf       	rjmp	.-2      	; 0x4612 <__stop_program>

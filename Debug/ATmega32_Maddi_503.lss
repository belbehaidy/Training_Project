
ATmega32_Maddi_503.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000493c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  00800060  0000493c  000049d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800204  00800204  00004b74  2**0
                  ALLOC
  3 .stab         00006000  00000000  00000000  00004b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000289d  00000000  00000000  0000ab74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000d411  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000d591  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000d764  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000f773  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  000108e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000118e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00011a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00011d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000125f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__vector_1>
       8:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__vector_2>
       c:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 31       	cpi	r26, 0x12	; 18
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <main>
      8a:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 24 	jmp	0x48ca	; 0x48ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e8       	ldi	r26, 0x8E	; 142
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 24 	jmp	0x4902	; 0x4902 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 24 	jmp	0x48ca	; 0x48ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e8       	ldi	r24, 0x8E	; 142
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 24 	jmp	0x4902	; 0x4902 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 24 	jmp	0x48ea	; 0x48ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 24 	jmp	0x4922	; 0x4922 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 6d 24 	jmp	0x48da	; 0x48da <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 89 24 	jmp	0x4912	; 0x4912 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ea 56       	subi	r30, 0x6A	; 106
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GIE_enuInit>:

#include "..\..\Libraries\stdTypes.h"
#include "..\..\Libraries\errorState.h"

ES_t GIE_enuInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
     cde:	f8 94       	cli

	return ES_OK;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <GIE_enuEnable>:

ES_t GIE_enuEnable(void)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62

	asm("SEI");
     cf0:	78 94       	sei
	return ES_OK;
     cf2:	80 e0       	ldi	r24, 0x00	; 0
}
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
     d02:	f8 94       	cli
	return ES_OK;
     d04:	80 e0       	ldi	r24, 0x00	; 0
}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <EXTI_enuInit>:

extern 	EXTI_t EXTI_AstrEXTI_Config[EXTI_NUM] ;


ES_t EXTI_enuInit(void)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	2e 97       	sbiw	r28, 0x0e	; 14
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	93 c1       	rjmp	.+806    	; 0x104e <EXTI_enuInit+0x342>
	{
		if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT0 )						/********************************************************************/
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	c9 01       	movw	r24, r18
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	82 0f       	add	r24, r18
     d36:	93 1f       	adc	r25, r19
     d38:	fc 01       	movw	r30, r24
     d3a:	e7 56       	subi	r30, 0x67	; 103
     d3c:	fe 4f       	sbci	r31, 0xFE	; 254
     d3e:	80 81       	ld	r24, Z
     d40:	8d 33       	cpi	r24, 0x3D	; 61
     d42:	09 f0       	breq	.+2      	; 0xd46 <EXTI_enuInit+0x3a>
     d44:	82 c0       	rjmp	.+260    	; 0xe4a <EXTI_enuInit+0x13e>
		{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	TWO_BITS_MASK	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
     d46:	a5 e5       	ldi	r26, 0x55	; 85
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e5       	ldi	r30, 0x55	; 85
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8c 7f       	andi	r24, 0xFC	; 252
     d52:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	c9 01       	movw	r24, r18
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	82 0f       	add	r24, r18
     d62:	93 1f       	adc	r25, r19
     d64:	fc 01       	movw	r30, r24
     d66:	e9 56       	subi	r30, 0x69	; 105
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	80 81       	ld	r24, Z
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3e 87       	std	Y+14, r19	; 0x0e
     d72:	2d 87       	std	Y+13, r18	; 0x0d
     d74:	8d 85       	ldd	r24, Y+13	; 0x0d
     d76:	9e 85       	ldd	r25, Y+14	; 0x0e
     d78:	88 33       	cpi	r24, 0x38	; 56
     d7a:	91 05       	cpc	r25, r1
     d7c:	b1 f0       	breq	.+44     	; 0xdaa <EXTI_enuInit+0x9e>
     d7e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d80:	3e 85       	ldd	r19, Y+14	; 0x0e
     d82:	29 33       	cpi	r18, 0x39	; 57
     d84:	31 05       	cpc	r19, r1
     d86:	34 f4       	brge	.+12     	; 0xd94 <EXTI_enuInit+0x88>
     d88:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d8c:	87 33       	cpi	r24, 0x37	; 55
     d8e:	91 05       	cpc	r25, r1
     d90:	31 f1       	breq	.+76     	; 0xdde <EXTI_enuInit+0xd2>
     d92:	23 c0       	rjmp	.+70     	; 0xdda <EXTI_enuInit+0xce>
     d94:	2d 85       	ldd	r18, Y+13	; 0x0d
     d96:	3e 85       	ldd	r19, Y+14	; 0x0e
     d98:	29 33       	cpi	r18, 0x39	; 57
     d9a:	31 05       	cpc	r19, r1
     d9c:	71 f0       	breq	.+28     	; 0xdba <EXTI_enuInit+0xae>
     d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     da0:	9e 85       	ldd	r25, Y+14	; 0x0e
     da2:	8a 33       	cpi	r24, 0x3A	; 58
     da4:	91 05       	cpc	r25, r1
     da6:	89 f0       	breq	.+34     	; 0xdca <EXTI_enuInit+0xbe>
     da8:	18 c0       	rjmp	.+48     	; 0xdda <EXTI_enuInit+0xce>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC00_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
     daa:	a5 e5       	ldi	r26, 0x55	; 85
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e5 e5       	ldi	r30, 0x55	; 85
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	81 60       	ori	r24, 0x01	; 1
     db6:	8c 93       	st	X, r24
     db8:	12 c0       	rjmp	.+36     	; 0xdde <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC01_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
     dba:	a5 e5       	ldi	r26, 0x55	; 85
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e5 e5       	ldi	r30, 0x55	; 85
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	8c 93       	st	X, r24
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC00_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
     dca:	a5 e5       	ldi	r26, 0x55	; 85
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e5 e5       	ldi	r30, 0x55	; 85
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	83 60       	ori	r24, 0x03	; 3
     dd6:	8c 93       	st	X, r24
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <EXTI_enuInit+0xd2>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	09 f4       	brne	.+2      	; 0xde6 <EXTI_enuInit+0xda>
     de4:	3a c1       	rjmp	.+628    	; 0x105a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT0	mode		*/
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	c9 01       	movw	r24, r18
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	82 0f       	add	r24, r18
     df4:	93 1f       	adc	r25, r19
     df6:	fc 01       	movw	r30, r24
     df8:	e8 56       	subi	r30, 0x68	; 104
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	80 81       	ld	r24, Z
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3c 87       	std	Y+12, r19	; 0x0c
     e04:	2b 87       	std	Y+11, r18	; 0x0b
     e06:	8b 85       	ldd	r24, Y+11	; 0x0b
     e08:	9c 85       	ldd	r25, Y+12	; 0x0c
     e0a:	8b 33       	cpi	r24, 0x3B	; 59
     e0c:	91 05       	cpc	r25, r1
     e0e:	31 f0       	breq	.+12     	; 0xe1c <EXTI_enuInit+0x110>
     e10:	2b 85       	ldd	r18, Y+11	; 0x0b
     e12:	3c 85       	ldd	r19, Y+12	; 0x0c
     e14:	2c 33       	cpi	r18, 0x3C	; 60
     e16:	31 05       	cpc	r19, r1
     e18:	49 f0       	breq	.+18     	; 0xe2c <EXTI_enuInit+0x120>
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <EXTI_enuInit+0x130>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE0_BIT	);	/*			ENABLE INTERRUPT		*/
     e1c:	ab e5       	ldi	r26, 0x5B	; 91
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	eb e5       	ldi	r30, 0x5B	; 91
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 64       	ori	r24, 0x40	; 64
     e28:	8c 93       	st	X, r24
     e2a:	0a c0       	rjmp	.+20     	; 0xe40 <EXTI_enuInit+0x134>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE0_BIT	);	/*			DISABLE INTERRUPT		*/
     e2c:	ab e5       	ldi	r26, 0x5B	; 91
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	eb e5       	ldi	r30, 0x5B	; 91
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8f 7b       	andi	r24, 0xBF	; 191
     e38:	8c 93       	st	X, r24
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <EXTI_enuInit+0x134>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	09 f4       	brne	.+2      	; 0xe48 <EXTI_enuInit+0x13c>
     e46:	09 c1       	rjmp	.+530    	; 0x105a <EXTI_enuInit+0x34e>
     e48:	ff c0       	rjmp	.+510    	; 0x1048 <EXTI_enuInit+0x33c>
		}

		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT1 )				/********************************************************************/
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	c9 01       	movw	r24, r18
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	82 0f       	add	r24, r18
     e58:	93 1f       	adc	r25, r19
     e5a:	fc 01       	movw	r30, r24
     e5c:	e7 56       	subi	r30, 0x67	; 103
     e5e:	fe 4f       	sbci	r31, 0xFE	; 254
     e60:	80 81       	ld	r24, Z
     e62:	8e 33       	cpi	r24, 0x3E	; 62
     e64:	09 f0       	breq	.+2      	; 0xe68 <EXTI_enuInit+0x15c>
     e66:	7e c0       	rjmp	.+252    	; 0xf64 <EXTI_enuInit+0x258>
		{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	TWO_BITS_MASK	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
     e68:	a5 e5       	ldi	r26, 0x55	; 85
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e5       	ldi	r30, 0x55	; 85
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	83 7f       	andi	r24, 0xF3	; 243
     e74:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	c9 01       	movw	r24, r18
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	82 0f       	add	r24, r18
     e84:	93 1f       	adc	r25, r19
     e86:	fc 01       	movw	r30, r24
     e88:	e9 56       	subi	r30, 0x69	; 105
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	80 81       	ld	r24, Z
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3a 87       	std	Y+10, r19	; 0x0a
     e94:	29 87       	std	Y+9, r18	; 0x09
     e96:	89 85       	ldd	r24, Y+9	; 0x09
     e98:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9a:	88 33       	cpi	r24, 0x38	; 56
     e9c:	91 05       	cpc	r25, r1
     e9e:	b1 f0       	breq	.+44     	; 0xecc <EXTI_enuInit+0x1c0>
     ea0:	29 85       	ldd	r18, Y+9	; 0x09
     ea2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ea4:	29 33       	cpi	r18, 0x39	; 57
     ea6:	31 05       	cpc	r19, r1
     ea8:	34 f4       	brge	.+12     	; 0xeb6 <EXTI_enuInit+0x1aa>
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	87 33       	cpi	r24, 0x37	; 55
     eb0:	91 05       	cpc	r25, r1
     eb2:	31 f1       	breq	.+76     	; 0xf00 <EXTI_enuInit+0x1f4>
     eb4:	23 c0       	rjmp	.+70     	; 0xefc <EXTI_enuInit+0x1f0>
     eb6:	29 85       	ldd	r18, Y+9	; 0x09
     eb8:	3a 85       	ldd	r19, Y+10	; 0x0a
     eba:	29 33       	cpi	r18, 0x39	; 57
     ebc:	31 05       	cpc	r19, r1
     ebe:	71 f0       	breq	.+28     	; 0xedc <EXTI_enuInit+0x1d0>
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	8a 33       	cpi	r24, 0x3A	; 58
     ec6:	91 05       	cpc	r25, r1
     ec8:	89 f0       	breq	.+34     	; 0xeec <EXTI_enuInit+0x1e0>
     eca:	18 c0       	rjmp	.+48     	; 0xefc <EXTI_enuInit+0x1f0>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC10_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
     ecc:	a5 e5       	ldi	r26, 0x55	; 85
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e5       	ldi	r30, 0x55	; 85
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	8c 93       	st	X, r24
     eda:	12 c0       	rjmp	.+36     	; 0xf00 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC11_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
     edc:	a5 e5       	ldi	r26, 0x55	; 85
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e5       	ldi	r30, 0x55	; 85
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	88 60       	ori	r24, 0x08	; 8
     ee8:	8c 93       	st	X, r24
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC10_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
     eec:	a5 e5       	ldi	r26, 0x55	; 85
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e5 e5       	ldi	r30, 0x55	; 85
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8c 60       	ori	r24, 0x0C	; 12
     ef8:	8c 93       	st	X, r24
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <EXTI_enuInit+0x1f4>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	09 f4       	brne	.+2      	; 0xf08 <EXTI_enuInit+0x1fc>
     f06:	a9 c0       	rjmp	.+338    	; 0x105a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT1	mode		*/
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	c9 01       	movw	r24, r18
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	fc 01       	movw	r30, r24
     f1a:	e8 56       	subi	r30, 0x68	; 104
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	80 81       	ld	r24, Z
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	38 87       	std	Y+8, r19	; 0x08
     f26:	2f 83       	std	Y+7, r18	; 0x07
     f28:	8f 81       	ldd	r24, Y+7	; 0x07
     f2a:	98 85       	ldd	r25, Y+8	; 0x08
     f2c:	8b 33       	cpi	r24, 0x3B	; 59
     f2e:	91 05       	cpc	r25, r1
     f30:	31 f0       	breq	.+12     	; 0xf3e <EXTI_enuInit+0x232>
     f32:	2f 81       	ldd	r18, Y+7	; 0x07
     f34:	38 85       	ldd	r19, Y+8	; 0x08
     f36:	2c 33       	cpi	r18, 0x3C	; 60
     f38:	31 05       	cpc	r19, r1
     f3a:	49 f0       	breq	.+18     	; 0xf4e <EXTI_enuInit+0x242>
     f3c:	10 c0       	rjmp	.+32     	; 0xf5e <EXTI_enuInit+0x252>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE1_BIT	);	/*			ENABLE INTERRUPT		*/
     f3e:	ab e5       	ldi	r26, 0x5B	; 91
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	eb e5       	ldi	r30, 0x5B	; 91
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 68       	ori	r24, 0x80	; 128
     f4a:	8c 93       	st	X, r24
     f4c:	7d c0       	rjmp	.+250    	; 0x1048 <EXTI_enuInit+0x33c>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE1_BIT	);	/*			DISABLE INTERRUPT		*/
     f4e:	ab e5       	ldi	r26, 0x5B	; 91
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	eb e5       	ldi	r30, 0x5B	; 91
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	8c 93       	st	X, r24
     f5c:	75 c0       	rjmp	.+234    	; 0x1048 <EXTI_enuInit+0x33c>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	72 c0       	rjmp	.+228    	; 0x1048 <EXTI_enuInit+0x33c>
			}
		}
		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT2 )				/********************************************************************/
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	c9 01       	movw	r24, r18
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	82 0f       	add	r24, r18
     f72:	93 1f       	adc	r25, r19
     f74:	fc 01       	movw	r30, r24
     f76:	e7 56       	subi	r30, 0x67	; 103
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	80 81       	ld	r24, Z
     f7c:	8f 33       	cpi	r24, 0x3F	; 63
     f7e:	09 f0       	breq	.+2      	; 0xf82 <EXTI_enuInit+0x276>
     f80:	61 c0       	rjmp	.+194    	; 0x1044 <EXTI_enuInit+0x338>
		{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/********************************************************************/
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	c9 01       	movw	r24, r18
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	fc 01       	movw	r30, r24
     f94:	e9 56       	subi	r30, 0x69	; 105
     f96:	fe 4f       	sbci	r31, 0xFE	; 254
     f98:	80 81       	ld	r24, Z
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	3e 83       	std	Y+6, r19	; 0x06
     fa0:	2d 83       	std	Y+5, r18	; 0x05
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	89 33       	cpi	r24, 0x39	; 57
     fa8:	91 05       	cpc	r25, r1
     faa:	31 f0       	breq	.+12     	; 0xfb8 <EXTI_enuInit+0x2ac>
     fac:	2d 81       	ldd	r18, Y+5	; 0x05
     fae:	3e 81       	ldd	r19, Y+6	; 0x06
     fb0:	2a 33       	cpi	r18, 0x3A	; 58
     fb2:	31 05       	cpc	r19, r1
     fb4:	49 f0       	breq	.+18     	; 0xfc8 <EXTI_enuInit+0x2bc>
     fb6:	10 c0       	rjmp	.+32     	; 0xfd8 <EXTI_enuInit+0x2cc>
			{																		/*																	*/
				case	FALLING_EDGE:	MCUCSR &= ~(BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
     fb8:	a4 e5       	ldi	r26, 0x54	; 84
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e4 e5       	ldi	r30, 0x54	; 84
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 7b       	andi	r24, 0xBF	; 191
     fc4:	8c 93       	st	X, r24
     fc6:	0a c0       	rjmp	.+20     	; 0xfdc <EXTI_enuInit+0x2d0>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCSR |=  (BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
     fc8:	a4 e5       	ldi	r26, 0x54	; 84
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e4 e5       	ldi	r30, 0x54	; 84
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	8c 93       	st	X, r24
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <EXTI_enuInit+0x2d0>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	e1 f1       	breq	.+120    	; 0x105a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT2	mode		*/
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	c9 01       	movw	r24, r18
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	fc 01       	movw	r30, r24
     ff4:	e8 56       	subi	r30, 0x68	; 104
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	80 81       	ld	r24, Z
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3c 83       	std	Y+4, r19	; 0x04
    1000:	2b 83       	std	Y+3, r18	; 0x03
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	8b 33       	cpi	r24, 0x3B	; 59
    1008:	91 05       	cpc	r25, r1
    100a:	31 f0       	breq	.+12     	; 0x1018 <EXTI_enuInit+0x30c>
    100c:	2b 81       	ldd	r18, Y+3	; 0x03
    100e:	3c 81       	ldd	r19, Y+4	; 0x04
    1010:	2c 33       	cpi	r18, 0x3C	; 60
    1012:	31 05       	cpc	r19, r1
    1014:	49 f0       	breq	.+18     	; 0x1028 <EXTI_enuInit+0x31c>
    1016:	10 c0       	rjmp	.+32     	; 0x1038 <EXTI_enuInit+0x32c>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE2_BIT	);	/*			ENABLE INTERRUPT		*/
    1018:	ab e5       	ldi	r26, 0x5B	; 91
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	eb e5       	ldi	r30, 0x5B	; 91
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 62       	ori	r24, 0x20	; 32
    1024:	8c 93       	st	X, r24
    1026:	0a c0       	rjmp	.+20     	; 0x103c <EXTI_enuInit+0x330>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE2_BIT	);	/*			DISABLE INTERRUPT		*/
    1028:	ab e5       	ldi	r26, 0x5B	; 91
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	eb e5       	ldi	r30, 0x5B	; 91
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7d       	andi	r24, 0xDF	; 223
    1034:	8c 93       	st	X, r24
    1036:	02 c0       	rjmp	.+4      	; 0x103c <EXTI_enuInit+0x330>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	61 f0       	breq	.+24     	; 0x105a <EXTI_enuInit+0x34e>
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <EXTI_enuInit+0x33c>
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	8a 83       	std	Y+2, r24	; 0x02

ES_t EXTI_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	90 91 96 01 	lds	r25, 0x0196
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	89 17       	cp	r24, r25
    1056:	08 f4       	brcc	.+2      	; 0x105a <EXTI_enuInit+0x34e>
    1058:	67 ce       	rjmp	.-818    	; 0xd28 <EXTI_enuInit+0x1c>
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
		}
		else Local_enuErrorState = ES_OUT_RANGE;
	}
	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	09 f0       	breq	.+2      	; 0x1062 <EXTI_enuInit+0x356>
    1060:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1064:	2e 96       	adiw	r28, 0x0e	; 14
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt( u8 Copy_u8IntNum )
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <EXTI_enuEnableInterrupt+0x6>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	8d 33       	cpi	r24, 0x3D	; 61
    108a:	41 f4       	brne	.+16     	; 0x109c <EXTI_enuEnableInterrupt+0x26>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE0_BIT	);							/*			ENABLE INT0			*/
    108c:	ab e5       	ldi	r26, 0x5B	; 91
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	eb e5       	ldi	r30, 0x5B	; 91
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	80 64       	ori	r24, 0x40	; 64
    1098:	8c 93       	st	X, r24
    109a:	18 c0       	rjmp	.+48     	; 0x10cc <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	8e 33       	cpi	r24, 0x3E	; 62
    10a0:	41 f4       	brne	.+16     	; 0x10b2 <EXTI_enuEnableInterrupt+0x3c>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE1_BIT	);							/*			ENABLE INT1			*/
    10a2:	ab e5       	ldi	r26, 0x5B	; 91
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e5       	ldi	r30, 0x5B	; 91
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 68       	ori	r24, 0x80	; 128
    10ae:	8c 93       	st	X, r24
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	8f 33       	cpi	r24, 0x3F	; 63
    10b6:	41 f4       	brne	.+16     	; 0x10c8 <EXTI_enuEnableInterrupt+0x52>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE2_BIT	);							/*			ENABLE INT2			*/
    10b8:	ab e5       	ldi	r26, 0x5B	; 91
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	eb e5       	ldi	r30, 0x5B	; 91
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	80 62       	ori	r24, 0x20	; 32
    10c4:	8c 93       	st	X, r24
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <EXTI_enuEnableInterrupt+0x5e>
    10d2:	19 82       	std	Y+1, r1	; 0x01


	return Local_enuErrorState ;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <EXTI_enuDisableInterrupt>:

ES_t EXTI_enuDisableInterrupt( u8 Copy_u8IntNum )
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <EXTI_enuDisableInterrupt+0x6>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	8d 33       	cpi	r24, 0x3D	; 61
    10f4:	41 f4       	brne	.+16     	; 0x1106 <EXTI_enuDisableInterrupt+0x26>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE0_BIT	);							/*			DISABLE INT0		*/
    10f6:	ab e5       	ldi	r26, 0x5B	; 91
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	eb e5       	ldi	r30, 0x5B	; 91
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8f 7b       	andi	r24, 0xBF	; 191
    1102:	8c 93       	st	X, r24
    1104:	18 c0       	rjmp	.+48     	; 0x1136 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	8e 33       	cpi	r24, 0x3E	; 62
    110a:	41 f4       	brne	.+16     	; 0x111c <EXTI_enuDisableInterrupt+0x3c>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE1_BIT	);							/*			DISABLE INT1		*/
    110c:	ab e5       	ldi	r26, 0x5B	; 91
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	eb e5       	ldi	r30, 0x5B	; 91
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8f 77       	andi	r24, 0x7F	; 127
    1118:	8c 93       	st	X, r24
    111a:	0d c0       	rjmp	.+26     	; 0x1136 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	8f 33       	cpi	r24, 0x3F	; 63
    1120:	41 f4       	brne	.+16     	; 0x1132 <EXTI_enuDisableInterrupt+0x52>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE2_BIT	);							/*			DISABLE INT2		*/
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7d       	andi	r24, 0xDF	; 223
    112e:	8c 93       	st	X, r24
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	09 f0       	breq	.+2      	; 0x113e <EXTI_enuDisableInterrupt+0x5e>
    113c:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel( u8 Copy_u8IntNum , u8 Copy_u8SenseLevel )
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	29 97       	sbiw	r28, 0x09	; 9
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	8a 83       	std	Y+2, r24	; 0x02
    1160:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01


	if( Copy_u8IntNum == INT0 )													/********************************************************************/
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	8d 33       	cpi	r24, 0x3D	; 61
    116a:	09 f0       	breq	.+2      	; 0x116e <EXTI_enuSetSenseLevel+0x24>
    116c:	43 c0       	rjmp	.+134    	; 0x11f4 <EXTI_enuSetSenseLevel+0xaa>
	{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	TWO_BITS_MASK	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
    116e:	a5 e5       	ldi	r26, 0x55	; 85
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e5       	ldi	r30, 0x55	; 85
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8c 7f       	andi	r24, 0xFC	; 252
    117a:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	39 87       	std	Y+9, r19	; 0x09
    1184:	28 87       	std	Y+8, r18	; 0x08
    1186:	88 85       	ldd	r24, Y+8	; 0x08
    1188:	99 85       	ldd	r25, Y+9	; 0x09
    118a:	88 33       	cpi	r24, 0x38	; 56
    118c:	91 05       	cpc	r25, r1
    118e:	b9 f0       	breq	.+46     	; 0x11be <EXTI_enuSetSenseLevel+0x74>
    1190:	28 85       	ldd	r18, Y+8	; 0x08
    1192:	39 85       	ldd	r19, Y+9	; 0x09
    1194:	29 33       	cpi	r18, 0x39	; 57
    1196:	31 05       	cpc	r19, r1
    1198:	3c f4       	brge	.+14     	; 0x11a8 <EXTI_enuSetSenseLevel+0x5e>
    119a:	88 85       	ldd	r24, Y+8	; 0x08
    119c:	99 85       	ldd	r25, Y+9	; 0x09
    119e:	87 33       	cpi	r24, 0x37	; 55
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <EXTI_enuSetSenseLevel+0x5c>
    11a4:	96 c0       	rjmp	.+300    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
    11a6:	23 c0       	rjmp	.+70     	; 0x11ee <EXTI_enuSetSenseLevel+0xa4>
    11a8:	28 85       	ldd	r18, Y+8	; 0x08
    11aa:	39 85       	ldd	r19, Y+9	; 0x09
    11ac:	29 33       	cpi	r18, 0x39	; 57
    11ae:	31 05       	cpc	r19, r1
    11b0:	71 f0       	breq	.+28     	; 0x11ce <EXTI_enuSetSenseLevel+0x84>
    11b2:	88 85       	ldd	r24, Y+8	; 0x08
    11b4:	99 85       	ldd	r25, Y+9	; 0x09
    11b6:	8a 33       	cpi	r24, 0x3A	; 58
    11b8:	91 05       	cpc	r25, r1
    11ba:	89 f0       	breq	.+34     	; 0x11de <EXTI_enuSetSenseLevel+0x94>
    11bc:	18 c0       	rjmp	.+48     	; 0x11ee <EXTI_enuSetSenseLevel+0xa4>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC00_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    11be:	a5 e5       	ldi	r26, 0x55	; 85
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e5       	ldi	r30, 0x55	; 85
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	81 60       	ori	r24, 0x01	; 1
    11ca:	8c 93       	st	X, r24
    11cc:	82 c0       	rjmp	.+260    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC01_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
    11ce:	a5 e5       	ldi	r26, 0x55	; 85
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e5       	ldi	r30, 0x55	; 85
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	8c 93       	st	X, r24
    11dc:	7a c0       	rjmp	.+244    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC00_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
    11de:	a5 e5       	ldi	r26, 0x55	; 85
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e5       	ldi	r30, 0x55	; 85
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	83 60       	ori	r24, 0x03	; 3
    11ea:	8c 93       	st	X, r24
    11ec:	72 c0       	rjmp	.+228    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	6f c0       	rjmp	.+222    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
		}
	}

	else if( Copy_u8IntNum == INT1 )											/********************************************************************/
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	8e 33       	cpi	r24, 0x3E	; 62
    11f8:	09 f0       	breq	.+2      	; 0x11fc <EXTI_enuSetSenseLevel+0xb2>
    11fa:	43 c0       	rjmp	.+134    	; 0x1282 <EXTI_enuSetSenseLevel+0x138>
	{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	TWO_BITS_MASK	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
    11fc:	a5 e5       	ldi	r26, 0x55	; 85
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e5 e5       	ldi	r30, 0x55	; 85
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	83 7f       	andi	r24, 0xF3	; 243
    1208:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3f 83       	std	Y+7, r19	; 0x07
    1212:	2e 83       	std	Y+6, r18	; 0x06
    1214:	8e 81       	ldd	r24, Y+6	; 0x06
    1216:	9f 81       	ldd	r25, Y+7	; 0x07
    1218:	88 33       	cpi	r24, 0x38	; 56
    121a:	91 05       	cpc	r25, r1
    121c:	b9 f0       	breq	.+46     	; 0x124c <EXTI_enuSetSenseLevel+0x102>
    121e:	2e 81       	ldd	r18, Y+6	; 0x06
    1220:	3f 81       	ldd	r19, Y+7	; 0x07
    1222:	29 33       	cpi	r18, 0x39	; 57
    1224:	31 05       	cpc	r19, r1
    1226:	3c f4       	brge	.+14     	; 0x1236 <EXTI_enuSetSenseLevel+0xec>
    1228:	8e 81       	ldd	r24, Y+6	; 0x06
    122a:	9f 81       	ldd	r25, Y+7	; 0x07
    122c:	87 33       	cpi	r24, 0x37	; 55
    122e:	91 05       	cpc	r25, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <EXTI_enuSetSenseLevel+0xea>
    1232:	4f c0       	rjmp	.+158    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
    1234:	23 c0       	rjmp	.+70     	; 0x127c <EXTI_enuSetSenseLevel+0x132>
    1236:	2e 81       	ldd	r18, Y+6	; 0x06
    1238:	3f 81       	ldd	r19, Y+7	; 0x07
    123a:	29 33       	cpi	r18, 0x39	; 57
    123c:	31 05       	cpc	r19, r1
    123e:	71 f0       	breq	.+28     	; 0x125c <EXTI_enuSetSenseLevel+0x112>
    1240:	8e 81       	ldd	r24, Y+6	; 0x06
    1242:	9f 81       	ldd	r25, Y+7	; 0x07
    1244:	8a 33       	cpi	r24, 0x3A	; 58
    1246:	91 05       	cpc	r25, r1
    1248:	89 f0       	breq	.+34     	; 0x126c <EXTI_enuSetSenseLevel+0x122>
    124a:	18 c0       	rjmp	.+48     	; 0x127c <EXTI_enuSetSenseLevel+0x132>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC10_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    124c:	a5 e5       	ldi	r26, 0x55	; 85
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e5       	ldi	r30, 0x55	; 85
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	84 60       	ori	r24, 0x04	; 4
    1258:	8c 93       	st	X, r24
    125a:	3b c0       	rjmp	.+118    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC11_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
    125c:	a5 e5       	ldi	r26, 0x55	; 85
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e5       	ldi	r30, 0x55	; 85
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	88 60       	ori	r24, 0x08	; 8
    1268:	8c 93       	st	X, r24
    126a:	33 c0       	rjmp	.+102    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC10_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
    126c:	a5 e5       	ldi	r26, 0x55	; 85
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e5       	ldi	r30, 0x55	; 85
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	8c 60       	ori	r24, 0x0C	; 12
    1278:	8c 93       	st	X, r24
    127a:	2b c0       	rjmp	.+86     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	28 c0       	rjmp	.+80     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else if( Copy_u8IntNum == INT2 )											/********************************************************************/
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	8f 33       	cpi	r24, 0x3F	; 63
    1286:	19 f5       	brne	.+70     	; 0x12ce <EXTI_enuSetSenseLevel+0x184>
	{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
		switch( Copy_u8SenseLevel )												/********************************************************************/
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3d 83       	std	Y+5, r19	; 0x05
    1290:	2c 83       	std	Y+4, r18	; 0x04
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	89 33       	cpi	r24, 0x39	; 57
    1298:	91 05       	cpc	r25, r1
    129a:	31 f0       	breq	.+12     	; 0x12a8 <EXTI_enuSetSenseLevel+0x15e>
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	3d 81       	ldd	r19, Y+5	; 0x05
    12a0:	2a 33       	cpi	r18, 0x3A	; 58
    12a2:	31 05       	cpc	r19, r1
    12a4:	49 f0       	breq	.+18     	; 0x12b8 <EXTI_enuSetSenseLevel+0x16e>
    12a6:	10 c0       	rjmp	.+32     	; 0x12c8 <EXTI_enuSetSenseLevel+0x17e>
		{																		/*																	*/
			case	FALLING_EDGE:	MCUCSR &= ~(BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
    12a8:	a4 e5       	ldi	r26, 0x54	; 84
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e4 e5       	ldi	r30, 0x54	; 84
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 7b       	andi	r24, 0xBF	; 191
    12b4:	8c 93       	st	X, r24
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCSR |=  (BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
    12b8:	a4 e5       	ldi	r26, 0x54	; 84
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e4 e5       	ldi	r30, 0x54	; 84
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 64       	ori	r24, 0x40	; 64
    12c4:	8c 93       	st	X, r24
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	09 f0       	breq	.+2      	; 0x12da <EXTI_enuSetSenseLevel+0x190>
    12d8:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    12da:	89 81       	ldd	r24, Y+1	; 0x01
}
    12dc:	29 96       	adiw	r28, 0x09	; 9
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <__vector_1>:
void __vector_2(void)__attribute__((signal));	//ISR	INT1
void __vector_3(void)__attribute__((signal));	//ISR	INT2


void __vector_1(void)
{
    12ee:	1f 92       	push	r1
    12f0:	0f 92       	push	r0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	2f 93       	push	r18
    12fa:	3f 93       	push	r19
    12fc:	4f 93       	push	r20
    12fe:	5f 93       	push	r21
    1300:	6f 93       	push	r22
    1302:	7f 93       	push	r23
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
    1308:	af 93       	push	r26
    130a:	bf 93       	push	r27
    130c:	ef 93       	push	r30
    130e:	ff 93       	push	r31
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[0] != NULL)
    1318:	80 91 04 02 	lds	r24, 0x0204
    131c:	90 91 05 02 	lds	r25, 0x0205
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	29 f0       	breq	.+10     	; 0x132e <__vector_1+0x40>
	{
		EXTI_ApFunction_AppFun[0]();
    1324:	e0 91 04 02 	lds	r30, 0x0204
    1328:	f0 91 05 02 	lds	r31, 0x0205
    132c:	09 95       	icall
	}
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <__vector_2>:
void __vector_2(void)
{
    1354:	1f 92       	push	r1
    1356:	0f 92       	push	r0
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	0f 92       	push	r0
    135c:	11 24       	eor	r1, r1
    135e:	2f 93       	push	r18
    1360:	3f 93       	push	r19
    1362:	4f 93       	push	r20
    1364:	5f 93       	push	r21
    1366:	6f 93       	push	r22
    1368:	7f 93       	push	r23
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
    136e:	af 93       	push	r26
    1370:	bf 93       	push	r27
    1372:	ef 93       	push	r30
    1374:	ff 93       	push	r31
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[1] != NULL)
    137e:	80 91 06 02 	lds	r24, 0x0206
    1382:	90 91 07 02 	lds	r25, 0x0207
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	29 f0       	breq	.+10     	; 0x1394 <__vector_2+0x40>
	{
		EXTI_ApFunction_AppFun[1]();
    138a:	e0 91 06 02 	lds	r30, 0x0206
    138e:	f0 91 07 02 	lds	r31, 0x0207
    1392:	09 95       	icall
	}
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	1f 90       	pop	r1
    13b8:	18 95       	reti

000013ba <__vector_3>:
void __vector_3(void)
{
    13ba:	1f 92       	push	r1
    13bc:	0f 92       	push	r0
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	0f 92       	push	r0
    13c2:	11 24       	eor	r1, r1
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[2] != NULL)
    13e4:	80 91 08 02 	lds	r24, 0x0208
    13e8:	90 91 09 02 	lds	r25, 0x0209
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	29 f0       	breq	.+10     	; 0x13fa <__vector_3+0x40>
	{
		EXTI_ApFunction_AppFun[2]();
    13f0:	e0 91 08 02 	lds	r30, 0x0208
    13f4:	f0 91 09 02 	lds	r31, 0x0209
    13f8:	09 95       	icall
	}
}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	ff 91       	pop	r31
    1400:	ef 91       	pop	r30
    1402:	bf 91       	pop	r27
    1404:	af 91       	pop	r26
    1406:	9f 91       	pop	r25
    1408:	8f 91       	pop	r24
    140a:	7f 91       	pop	r23
    140c:	6f 91       	pop	r22
    140e:	5f 91       	pop	r21
    1410:	4f 91       	pop	r20
    1412:	3f 91       	pop	r19
    1414:	2f 91       	pop	r18
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	0f 90       	pop	r0
    141c:	1f 90       	pop	r1
    141e:	18 95       	reti

00001420 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack( void (*Copy_pAppFunction)() , u8 Copy_u8IntNum)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <EXTI_enuCallBack+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <EXTI_enuCallBack+0x8>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	9b 83       	std	Y+3, r25	; 0x03
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pAppFunction != NULL)
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	9b 81       	ldd	r25, Y+3	; 0x03
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	89 f0       	breq	.+34     	; 0x1460 <EXTI_enuCallBack+0x40>
	{
		EXTI_ApFunction_AppFun[(Copy_u8IntNum -= INT0)] =  Copy_pAppFunction ;
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	8d 53       	subi	r24, 0x3D	; 61
    1442:	8c 83       	std	Y+4, r24	; 0x04
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	2a 81       	ldd	r18, Y+2	; 0x02
    144c:	3b 81       	ldd	r19, Y+3	; 0x03
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	fc 01       	movw	r30, r24
    1454:	ec 5f       	subi	r30, 0xFC	; 252
    1456:	fd 4f       	sbci	r31, 0xFD	; 253
    1458:	31 83       	std	Z+1, r19	; 0x01
    145a:	20 83       	st	Z, r18
		Local_enuErrorState = ES_OK;
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <EXTI_enuCallBack+0x44>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01

	//

	return Local_enuErrorState ;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
}
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_enuSetPinDirection+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <DIO_enuSetPinDirection+0x8>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <DIO_enuSetPinDirection+0xa>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	8a 83       	std	Y+2, r24	; 0x02
    149c:	6b 83       	std	Y+3, r22	; 0x03
    149e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	84 30       	cpi	r24, 0x04	; 4
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <DIO_enuSetPinDirection+0x20>
    14aa:	d0 c0       	rjmp	.+416    	; 0x164c <DIO_enuSetPinDirection+0x1c0>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	88 30       	cpi	r24, 0x08	; 8
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <DIO_enuSetPinDirection+0x28>
    14b2:	cc c0       	rjmp	.+408    	; 0x164c <DIO_enuSetPinDirection+0x1c0>
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <DIO_enuSetPinDirection+0x30>
    14ba:	c8 c0       	rjmp	.+400    	; 0x164c <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT )
	{
		switch (Copy_u8GroupID)
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	3e 83       	std	Y+6, r19	; 0x06
    14c4:	2d 83       	std	Y+5, r18	; 0x05
    14c6:	6d 81       	ldd	r22, Y+5	; 0x05
    14c8:	7e 81       	ldd	r23, Y+6	; 0x06
    14ca:	61 30       	cpi	r22, 0x01	; 1
    14cc:	71 05       	cpc	r23, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <DIO_enuSetPinDirection+0x46>
    14d0:	41 c0       	rjmp	.+130    	; 0x1554 <DIO_enuSetPinDirection+0xc8>
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	82 30       	cpi	r24, 0x02	; 2
    14d8:	91 05       	cpc	r25, r1
    14da:	34 f4       	brge	.+12     	; 0x14e8 <DIO_enuSetPinDirection+0x5c>
    14dc:	2d 81       	ldd	r18, Y+5	; 0x05
    14de:	3e 81       	ldd	r19, Y+6	; 0x06
    14e0:	21 15       	cp	r18, r1
    14e2:	31 05       	cpc	r19, r1
    14e4:	71 f0       	breq	.+28     	; 0x1502 <DIO_enuSetPinDirection+0x76>
    14e6:	b0 c0       	rjmp	.+352    	; 0x1648 <DIO_enuSetPinDirection+0x1bc>
    14e8:	6d 81       	ldd	r22, Y+5	; 0x05
    14ea:	7e 81       	ldd	r23, Y+6	; 0x06
    14ec:	62 30       	cpi	r22, 0x02	; 2
    14ee:	71 05       	cpc	r23, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <DIO_enuSetPinDirection+0x68>
    14f2:	59 c0       	rjmp	.+178    	; 0x15a6 <DIO_enuSetPinDirection+0x11a>
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <DIO_enuSetPinDirection+0x74>
    14fe:	7c c0       	rjmp	.+248    	; 0x15f8 <DIO_enuSetPinDirection+0x16c>
    1500:	a3 c0       	rjmp	.+326    	; 0x1648 <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    1502:	aa e3       	ldi	r26, 0x3A	; 58
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ea e3       	ldi	r30, 0x3A	; 58
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_enuSetPinDirection+0x92>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	2a 95       	dec	r18
    1520:	e2 f7       	brpl	.-8      	; 0x151a <DIO_enuSetPinDirection+0x8e>
    1522:	80 95       	com	r24
    1524:	84 23       	and	r24, r20
    1526:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction <<   Copy_u8PinID );
    1528:	aa e3       	ldi	r26, 0x3A	; 58
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ea e3       	ldi	r30, 0x3A	; 58
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	b9 01       	movw	r22, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_enuSetPinDirection+0xbc>
    1544:	66 0f       	add	r22, r22
    1546:	77 1f       	adc	r23, r23
    1548:	8a 95       	dec	r24
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_enuSetPinDirection+0xb8>
    154c:	cb 01       	movw	r24, r22
    154e:	84 2b       	or	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	7a c0       	rjmp	.+244    	; 0x1648 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    1554:	a7 e3       	ldi	r26, 0x37	; 55
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e7 e3       	ldi	r30, 0x37	; 55
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_enuSetPinDirection+0xe4>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	2a 95       	dec	r18
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_enuSetPinDirection+0xe0>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction <<   Copy_u8PinID );
    157a:	a7 e3       	ldi	r26, 0x37	; 55
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e7 e3       	ldi	r30, 0x37	; 55
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	b9 01       	movw	r22, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_enuSetPinDirection+0x10e>
    1596:	66 0f       	add	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	8a 95       	dec	r24
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_enuSetPinDirection+0x10a>
    159e:	cb 01       	movw	r24, r22
    15a0:	84 2b       	or	r24, r20
    15a2:	8c 93       	st	X, r24
    15a4:	51 c0       	rjmp	.+162    	; 0x1648 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    15a6:	a4 e3       	ldi	r26, 0x34	; 52
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e4 e3       	ldi	r30, 0x34	; 52
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_enuSetPinDirection+0x136>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	2a 95       	dec	r18
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO_enuSetPinDirection+0x132>
    15c6:	80 95       	com	r24
    15c8:	84 23       	and	r24, r20
    15ca:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction <<   Copy_u8PinID );
    15cc:	a4 e3       	ldi	r26, 0x34	; 52
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e4 e3       	ldi	r30, 0x34	; 52
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	b9 01       	movw	r22, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_enuSetPinDirection+0x160>
    15e8:	66 0f       	add	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_enuSetPinDirection+0x15c>
    15f0:	cb 01       	movw	r24, r22
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	28 c0       	rjmp	.+80     	; 0x1648 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    15f8:	a1 e3       	ldi	r26, 0x31	; 49
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e1 e3       	ldi	r30, 0x31	; 49
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_enuSetPinDirection+0x188>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	2a 95       	dec	r18
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_enuSetPinDirection+0x184>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction <<   Copy_u8PinID );
    161e:	a1 e3       	ldi	r26, 0x31	; 49
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e1 e3       	ldi	r30, 0x31	; 49
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	b9 01       	movw	r22, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_enuSetPinDirection+0x1b2>
    163a:	66 0f       	add	r22, r22
    163c:	77 1f       	adc	r23, r23
    163e:	8a 95       	dec	r24
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_enuSetPinDirection+0x1ae>
    1642:	cb 01       	movw	r24, r22
    1644:	84 2b       	or	r24, r20
    1646:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1648:	19 82       	std	Y+1, r1	; 0x01
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    1650:	89 81       	ldd	r24, Y+1	; 0x01
}
    1652:	26 96       	adiw	r28, 0x06	; 6
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <DIO_enuSetPinValue+0x6>
    166a:	00 d0       	rcall	.+0      	; 0x166c <DIO_enuSetPinValue+0x8>
    166c:	00 d0       	rcall	.+0      	; 0x166e <DIO_enuSetPinValue+0xa>
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	8a 83       	std	Y+2, r24	; 0x02
    1674:	6b 83       	std	Y+3, r22	; 0x03
    1676:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	84 30       	cpi	r24, 0x04	; 4
    1680:	08 f0       	brcs	.+2      	; 0x1684 <DIO_enuSetPinValue+0x20>
    1682:	d3 c0       	rjmp	.+422    	; 0x182a <DIO_enuSetPinValue+0x1c6>
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	88 30       	cpi	r24, 0x08	; 8
    1688:	08 f0       	brcs	.+2      	; 0x168c <DIO_enuSetPinValue+0x28>
    168a:	cf c0       	rjmp	.+414    	; 0x182a <DIO_enuSetPinValue+0x1c6>
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	20 f0       	brcs	.+8      	; 0x169a <DIO_enuSetPinValue+0x36>
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	08 f0       	brcs	.+2      	; 0x169a <DIO_enuSetPinValue+0x36>
    1698:	c8 c0       	rjmp	.+400    	; 0x182a <DIO_enuSetPinValue+0x1c6>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ) )
	{
		switch (Copy_u8GroupID)
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	3e 83       	std	Y+6, r19	; 0x06
    16a2:	2d 83       	std	Y+5, r18	; 0x05
    16a4:	6d 81       	ldd	r22, Y+5	; 0x05
    16a6:	7e 81       	ldd	r23, Y+6	; 0x06
    16a8:	61 30       	cpi	r22, 0x01	; 1
    16aa:	71 05       	cpc	r23, r1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <DIO_enuSetPinValue+0x4c>
    16ae:	41 c0       	rjmp	.+130    	; 0x1732 <DIO_enuSetPinValue+0xce>
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	91 05       	cpc	r25, r1
    16b8:	34 f4       	brge	.+12     	; 0x16c6 <DIO_enuSetPinValue+0x62>
    16ba:	2d 81       	ldd	r18, Y+5	; 0x05
    16bc:	3e 81       	ldd	r19, Y+6	; 0x06
    16be:	21 15       	cp	r18, r1
    16c0:	31 05       	cpc	r19, r1
    16c2:	71 f0       	breq	.+28     	; 0x16e0 <DIO_enuSetPinValue+0x7c>
    16c4:	b0 c0       	rjmp	.+352    	; 0x1826 <DIO_enuSetPinValue+0x1c2>
    16c6:	6d 81       	ldd	r22, Y+5	; 0x05
    16c8:	7e 81       	ldd	r23, Y+6	; 0x06
    16ca:	62 30       	cpi	r22, 0x02	; 2
    16cc:	71 05       	cpc	r23, r1
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <DIO_enuSetPinValue+0x6e>
    16d0:	59 c0       	rjmp	.+178    	; 0x1784 <DIO_enuSetPinValue+0x120>
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	83 30       	cpi	r24, 0x03	; 3
    16d8:	91 05       	cpc	r25, r1
    16da:	09 f4       	brne	.+2      	; 0x16de <DIO_enuSetPinValue+0x7a>
    16dc:	7c c0       	rjmp	.+248    	; 0x17d6 <DIO_enuSetPinValue+0x172>
    16de:	a3 c0       	rjmp	.+326    	; 0x1826 <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    16e0:	ab e3       	ldi	r26, 0x3B	; 59
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	eb e3       	ldi	r30, 0x3B	; 59
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <DIO_enuSetPinValue+0x98>
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	2a 95       	dec	r18
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <DIO_enuSetPinValue+0x94>
    1700:	80 95       	com	r24
    1702:	84 23       	and	r24, r20
    1704:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value <<   Copy_u8PinID );
    1706:	ab e3       	ldi	r26, 0x3B	; 59
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	eb e3       	ldi	r30, 0x3B	; 59
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	b9 01       	movw	r22, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <DIO_enuSetPinValue+0xc2>
    1722:	66 0f       	add	r22, r22
    1724:	77 1f       	adc	r23, r23
    1726:	8a 95       	dec	r24
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <DIO_enuSetPinValue+0xbe>
    172a:	cb 01       	movw	r24, r22
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	7a c0       	rjmp	.+244    	; 0x1826 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    1732:	a8 e3       	ldi	r26, 0x38	; 56
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e8 e3       	ldi	r30, 0x38	; 56
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DIO_enuSetPinValue+0xea>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	2a 95       	dec	r18
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DIO_enuSetPinValue+0xe6>
    1752:	80 95       	com	r24
    1754:	84 23       	and	r24, r20
    1756:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value <<   Copy_u8PinID );
    1758:	a8 e3       	ldi	r26, 0x38	; 56
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e8 e3       	ldi	r30, 0x38	; 56
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	b9 01       	movw	r22, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_enuSetPinValue+0x114>
    1774:	66 0f       	add	r22, r22
    1776:	77 1f       	adc	r23, r23
    1778:	8a 95       	dec	r24
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_enuSetPinValue+0x110>
    177c:	cb 01       	movw	r24, r22
    177e:	84 2b       	or	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	51 c0       	rjmp	.+162    	; 0x1826 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    1784:	a5 e3       	ldi	r26, 0x35	; 53
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e3       	ldi	r30, 0x35	; 53
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_enuSetPinValue+0x13c>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	2a 95       	dec	r18
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_enuSetPinValue+0x138>
    17a4:	80 95       	com	r24
    17a6:	84 23       	and	r24, r20
    17a8:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value <<   Copy_u8PinID );
    17aa:	a5 e3       	ldi	r26, 0x35	; 53
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e5 e3       	ldi	r30, 0x35	; 53
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	b9 01       	movw	r22, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <DIO_enuSetPinValue+0x166>
    17c6:	66 0f       	add	r22, r22
    17c8:	77 1f       	adc	r23, r23
    17ca:	8a 95       	dec	r24
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <DIO_enuSetPinValue+0x162>
    17ce:	cb 01       	movw	r24, r22
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	28 c0       	rjmp	.+80     	; 0x1826 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    17d6:	a2 e3       	ldi	r26, 0x32	; 50
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e2 e3       	ldi	r30, 0x32	; 50
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_enuSetPinValue+0x18e>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	2a 95       	dec	r18
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_enuSetPinValue+0x18a>
    17f6:	80 95       	com	r24
    17f8:	84 23       	and	r24, r20
    17fa:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value <<   Copy_u8PinID );
    17fc:	a2 e3       	ldi	r26, 0x32	; 50
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e2 e3       	ldi	r30, 0x32	; 50
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8c 81       	ldd	r24, Y+4	; 0x04
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	b9 01       	movw	r22, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_enuSetPinValue+0x1b8>
    1818:	66 0f       	add	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	8a 95       	dec	r24
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_enuSetPinValue+0x1b4>
    1820:	cb 01       	movw	r24, r22
    1822:	84 2b       	or	r24, r20
    1824:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1826:	19 82       	std	Y+1, r1	; 0x01
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1830:	26 96       	adiw	r28, 0x06	; 6
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	00 d0       	rcall	.+0      	; 0x1848 <DIO_enuTogglePinValue+0x6>
    1848:	00 d0       	rcall	.+0      	; 0x184a <DIO_enuTogglePinValue+0x8>
    184a:	0f 92       	push	r0
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	8a 83       	std	Y+2, r24	; 0x02
    1852:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	84 30       	cpi	r24, 0x04	; 4
    185c:	08 f0       	brcs	.+2      	; 0x1860 <DIO_enuTogglePinValue+0x1e>
    185e:	74 c0       	rjmp	.+232    	; 0x1948 <DIO_enuTogglePinValue+0x106>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	88 30       	cpi	r24, 0x08	; 8
    1864:	08 f0       	brcs	.+2      	; 0x1868 <DIO_enuTogglePinValue+0x26>
    1866:	70 c0       	rjmp	.+224    	; 0x1948 <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	3d 83       	std	Y+5, r19	; 0x05
    1870:	2c 83       	std	Y+4, r18	; 0x04
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	91 05       	cpc	r25, r1
    187a:	49 f1       	breq	.+82     	; 0x18ce <DIO_enuTogglePinValue+0x8c>
    187c:	2c 81       	ldd	r18, Y+4	; 0x04
    187e:	3d 81       	ldd	r19, Y+5	; 0x05
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	2c f4       	brge	.+10     	; 0x1890 <DIO_enuTogglePinValue+0x4e>
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	9d 81       	ldd	r25, Y+5	; 0x05
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	61 f0       	breq	.+24     	; 0x18a6 <DIO_enuTogglePinValue+0x64>
    188e:	5a c0       	rjmp	.+180    	; 0x1944 <DIO_enuTogglePinValue+0x102>
    1890:	2c 81       	ldd	r18, Y+4	; 0x04
    1892:	3d 81       	ldd	r19, Y+5	; 0x05
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	71 f1       	breq	.+92     	; 0x18f6 <DIO_enuTogglePinValue+0xb4>
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	9d 81       	ldd	r25, Y+5	; 0x05
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	91 05       	cpc	r25, r1
    18a2:	e9 f1       	breq	.+122    	; 0x191e <DIO_enuTogglePinValue+0xdc>
    18a4:	4f c0       	rjmp	.+158    	; 0x1944 <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    18a6:	ab e3       	ldi	r26, 0x3B	; 59
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	eb e3       	ldi	r30, 0x3B	; 59
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	48 2f       	mov	r20, r24
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 2e       	mov	r0, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <DIO_enuTogglePinValue+0x82>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <DIO_enuTogglePinValue+0x7e>
    18c8:	84 27       	eor	r24, r20
    18ca:	8c 93       	st	X, r24
    18cc:	3b c0       	rjmp	.+118    	; 0x1944 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    18ce:	a8 e3       	ldi	r26, 0x38	; 56
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e8 e3       	ldi	r30, 0x38	; 56
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <DIO_enuTogglePinValue+0xaa>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <DIO_enuTogglePinValue+0xa6>
    18f0:	84 27       	eor	r24, r20
    18f2:	8c 93       	st	X, r24
    18f4:	27 c0       	rjmp	.+78     	; 0x1944 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    18f6:	a5 e3       	ldi	r26, 0x35	; 53
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e5 e3       	ldi	r30, 0x35	; 53
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	02 2e       	mov	r0, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <DIO_enuTogglePinValue+0xd2>
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	0a 94       	dec	r0
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <DIO_enuTogglePinValue+0xce>
    1918:	84 27       	eor	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	13 c0       	rjmp	.+38     	; 0x1944 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    191e:	a2 e3       	ldi	r26, 0x32	; 50
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e2 e3       	ldi	r30, 0x32	; 50
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_enuTogglePinValue+0xfa>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_enuTogglePinValue+0xf6>
    1940:	84 27       	eor	r24, r20
    1942:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1944:	19 82       	std	Y+1, r1	; 0x01
    1946:	02 c0       	rjmp	.+4      	; 0x194c <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
}
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	27 97       	sbiw	r28, 0x07	; 7
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	8a 83       	std	Y+2, r24	; 0x02
    1974:	6b 83       	std	Y+3, r22	; 0x03
    1976:	5d 83       	std	Y+5, r21	; 0x05
    1978:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	9d 81       	ldd	r25, Y+5	; 0x05
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	09 f4       	brne	.+2      	; 0x1988 <DIO_enuGetPinValue+0x2a>
    1986:	7d c0       	rjmp	.+250    	; 0x1a82 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	84 30       	cpi	r24, 0x04	; 4
    198c:	08 f0       	brcs	.+2      	; 0x1990 <DIO_enuGetPinValue+0x32>
    198e:	76 c0       	rjmp	.+236    	; 0x1a7c <DIO_enuGetPinValue+0x11e>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	88 30       	cpi	r24, 0x08	; 8
    1994:	08 f0       	brcs	.+2      	; 0x1998 <DIO_enuGetPinValue+0x3a>
    1996:	72 c0       	rjmp	.+228    	; 0x1a7c <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	3f 83       	std	Y+7, r19	; 0x07
    19a0:	2e 83       	std	Y+6, r18	; 0x06
    19a2:	4e 81       	ldd	r20, Y+6	; 0x06
    19a4:	5f 81       	ldd	r21, Y+7	; 0x07
    19a6:	41 30       	cpi	r20, 0x01	; 1
    19a8:	51 05       	cpc	r21, r1
    19aa:	59 f1       	breq	.+86     	; 0x1a02 <DIO_enuGetPinValue+0xa4>
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	9f 81       	ldd	r25, Y+7	; 0x07
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	91 05       	cpc	r25, r1
    19b4:	34 f4       	brge	.+12     	; 0x19c2 <DIO_enuGetPinValue+0x64>
    19b6:	2e 81       	ldd	r18, Y+6	; 0x06
    19b8:	3f 81       	ldd	r19, Y+7	; 0x07
    19ba:	21 15       	cp	r18, r1
    19bc:	31 05       	cpc	r19, r1
    19be:	69 f0       	breq	.+26     	; 0x19da <DIO_enuGetPinValue+0x7c>
    19c0:	5b c0       	rjmp	.+182    	; 0x1a78 <DIO_enuGetPinValue+0x11a>
    19c2:	4e 81       	ldd	r20, Y+6	; 0x06
    19c4:	5f 81       	ldd	r21, Y+7	; 0x07
    19c6:	42 30       	cpi	r20, 0x02	; 2
    19c8:	51 05       	cpc	r21, r1
    19ca:	79 f1       	breq	.+94     	; 0x1a2a <DIO_enuGetPinValue+0xcc>
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	9f 81       	ldd	r25, Y+7	; 0x07
    19d0:	83 30       	cpi	r24, 0x03	; 3
    19d2:	91 05       	cpc	r25, r1
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <DIO_enuGetPinValue+0x7a>
    19d6:	3d c0       	rjmp	.+122    	; 0x1a52 <DIO_enuGetPinValue+0xf4>
    19d8:	4f c0       	rjmp	.+158    	; 0x1a78 <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( ( PINA >> Copy_u8PinID ) & DIO_BIT_MASK );
    19da:	e9 e3       	ldi	r30, 0x39	; 57
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a9 01       	movw	r20, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <DIO_enuGetPinValue+0x94>
    19ee:	55 95       	asr	r21
    19f0:	47 95       	ror	r20
    19f2:	8a 95       	dec	r24
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <DIO_enuGetPinValue+0x90>
    19f6:	ca 01       	movw	r24, r20
    19f8:	81 70       	andi	r24, 0x01	; 1
    19fa:	ec 81       	ldd	r30, Y+4	; 0x04
    19fc:	fd 81       	ldd	r31, Y+5	; 0x05
    19fe:	80 83       	st	Z, r24
    1a00:	3b c0       	rjmp	.+118    	; 0x1a78 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( ( PINB >> Copy_u8PinID ) & DIO_BIT_MASK );
    1a02:	e6 e3       	ldi	r30, 0x36	; 54
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a9 01       	movw	r20, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <DIO_enuGetPinValue+0xbc>
    1a16:	55 95       	asr	r21
    1a18:	47 95       	ror	r20
    1a1a:	8a 95       	dec	r24
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <DIO_enuGetPinValue+0xb8>
    1a1e:	ca 01       	movw	r24, r20
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	ec 81       	ldd	r30, Y+4	; 0x04
    1a24:	fd 81       	ldd	r31, Y+5	; 0x05
    1a26:	80 83       	st	Z, r24
    1a28:	27 c0       	rjmp	.+78     	; 0x1a78 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( ( PINC >> Copy_u8PinID ) & DIO_BIT_MASK );
    1a2a:	e3 e3       	ldi	r30, 0x33	; 51
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_enuGetPinValue+0xe4>
    1a3e:	55 95       	asr	r21
    1a40:	47 95       	ror	r20
    1a42:	8a 95       	dec	r24
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <DIO_enuGetPinValue+0xe0>
    1a46:	ca 01       	movw	r24, r20
    1a48:	81 70       	andi	r24, 0x01	; 1
    1a4a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a4c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a4e:	80 83       	st	Z, r24
    1a50:	13 c0       	rjmp	.+38     	; 0x1a78 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( ( PIND >> Copy_u8PinID ) & DIO_BIT_MASK );
    1a52:	e0 e3       	ldi	r30, 0x30	; 48
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a9 01       	movw	r20, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <DIO_enuGetPinValue+0x10c>
    1a66:	55 95       	asr	r21
    1a68:	47 95       	ror	r20
    1a6a:	8a 95       	dec	r24
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <DIO_enuGetPinValue+0x108>
    1a6e:	ca 01       	movw	r24, r20
    1a70:	81 70       	andi	r24, 0x01	; 1
    1a72:	ec 81       	ldd	r30, Y+4	; 0x04
    1a74:	fd 81       	ldd	r31, Y+5	; 0x05
    1a76:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1a78:	19 82       	std	Y+1, r1	; 0x01
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1a82:	83 e0       	ldi	r24, 0x03	; 3
    1a84:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a88:	27 96       	adiw	r28, 0x07	; 7
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <ADC_enuInit>:

static void(*ADC_pFunISRFun)(void) =NULL;


ES_t ADC_enuInit(void)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	0f 92       	push	r0
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	89 83       	std	Y+1, r24	; 0x01

	//////////////////////////////////
	// 	Setting Prescalar Factor	//
	//////////////////////////////////
	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    1aa8:	a6 e2       	ldi	r26, 0x26	; 38
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e6 e2       	ldi	r30, 0x26	; 38
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 7f       	andi	r24, 0xF8	; 248
    1ab4:	8c 93       	st	X, r24
#if ( ADC_PRES >= PRES_2 && ADC_PRES <= PRES_128 )
	ADCSRA |= ( (ADC_PRES - PRES_0 ) << ADC_PRE_SCALAR_BITS );
    1ab6:	a6 e2       	ldi	r26, 0x26	; 38
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e6 e2       	ldi	r30, 0x26	; 38
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	86 60       	ori	r24, 0x06	; 6
    1ac2:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	// Setting Reference Voltage	//
	//////////////////////////////////
	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    1ac4:	a7 e2       	ldi	r26, 0x27	; 39
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e7 e2       	ldi	r30, 0x27	; 39
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	8f 73       	andi	r24, 0x3F	; 63
    1ad0:	8c 93       	st	X, r24
#if ( ADC_VREF >= AREF_REF && ADC_VREF <= INTERNAL_REF )
	ADMUX |= ( (ADC_VREF - AREF_REF) << ADC_REF_SEL_BITS);
    1ad2:	a7 e2       	ldi	r26, 0x27	; 39
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e7 e2       	ldi	r30, 0x27	; 39
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	80 64       	ori	r24, 0x40	; 64
    1ade:	8c 93       	st	X, r24
	// Setting Output Adjust Direction	//
	//////////////////////////////////////
#if ( ADC_ADJUST == RIGHT_ADJUST )
	ADMUX &= ~(BIT_MASK << ADLAR_BIT);
#elif ( ADC_ADJUST == LEFT_ADJUST )
	ADMUX |= ( BIT_MASK << ADLAR_BIT);
    1ae0:	a7 e2       	ldi	r26, 0x27	; 39
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e7 e2       	ldi	r30, 0x27	; 39
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 62       	ori	r24, 0x20	; 32
    1aec:	8c 93       	st	X, r24
#endif

	//////////////////////////////////////
	//	 Selecting Initial Channel		//
	//////////////////////////////////////
	ADMUX &= ~(ADC_CH_SEL_BITS_MASK);
    1aee:	a7 e2       	ldi	r26, 0x27	; 39
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e7 e2       	ldi	r30, 0x27	; 39
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	80 7e       	andi	r24, 0xE0	; 224
    1afa:	8c 93       	st	X, r24
#if ( ADC_INIT_CHANNEL >= CH_00 && ADC_INIT_CHANNEL <= CH_31 )
	ADMUX |= ( (ADC_INIT_CHANNEL - CH_00) << ADC_CH_SEL_BITS );
    1afc:	a7 e2       	ldi	r26, 0x27	; 39
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e7 e2       	ldi	r30, 0x27	; 39
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8c 93       	st	X, r24
	//	 Setting ADC Interrupt Mode		//
	//////////////////////////////////////
#if ( ADC_INTERRUPT_MODE == POLLING )
	ADCSRA &= ~(BIT_MASK << ADC_INT_ENABLE_BIT);
#elif ( ADC_INTERRUPT_MODE == INTERRUPT )
	ADCSRA |= ( BIT_MASK << ADC_INT_ENABLE_BIT);
    1b08:	a6 e2       	ldi	r26, 0x26	; 38
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e6 e2       	ldi	r30, 0x26	; 38
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	88 60       	ori	r24, 0x08	; 8
    1b14:	8c 93       	st	X, r24
	///////////////////////////////////
	// Selecting ADC Trigger  Source //
	///////////////////////////////////
#if ( ADC_TRIGGER_SOURCE >= FREE_RUNNING && ADC_TRIGGER_SOURCE <= TIMER1_CAPT_EVENT )

	SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    1b16:	a0 e5       	ldi	r26, 0x50	; 80
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e0 e5       	ldi	r30, 0x50	; 80
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 7f       	andi	r24, 0xF8	; 248
    1b22:	8c 93       	st	X, r24

	SFIOR |= ( (ADC_INIT_CHANNEL - FREE_RUNNING) << ADC_TRIGGER_SEL_BITS );
    1b24:	a0 e5       	ldi	r26, 0x50	; 80
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e0 e5       	ldi	r30, 0x50	; 80
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8e 6d       	ori	r24, 0xDE	; 222
    1b30:	8c 93       	st	X, r24
	//////////////////////////////////
	// Selecting ADC Trigger Mode	//
	//////////////////////////////////
#if ( ADC_TRIGGER_MODE == AUTO_TRIGGER || ADC_TRIGGER_MODE == SINGLE_TRIGGER )

	ADCSRA &= ~(BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT);
    1b32:	a6 e2       	ldi	r26, 0x26	; 38
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e6 e2       	ldi	r30, 0x26	; 38
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8f 7d       	andi	r24, 0xDF	; 223
    1b3e:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	//	 ENABLE ADC Peripheral		//
	//////////////////////////////////
	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
    1b40:	a6 e2       	ldi	r26, 0x26	; 38
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e6 e2       	ldi	r30, 0x26	; 38
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 68       	ori	r24, 0x80	; 128
    1b4c:	8c 93       	st	X, r24

	if( Local_enuErrorState != ES_OUT_RANGE)
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <ADC_enuInit+0xbc>
		Local_enuErrorState = ES_OK ;
    1b54:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <ADC_enuSelectChannel+0x6>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ChannelID >= CH_00 && Copy_u8ChannelID <= CH_31 )
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	85 38       	cpi	r24, 0x85	; 133
    1b74:	a0 f0       	brcs	.+40     	; 0x1b9e <ADC_enuSelectChannel+0x3e>
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	85 3a       	cpi	r24, 0xA5	; 165
    1b7a:	88 f4       	brcc	.+34     	; 0x1b9e <ADC_enuSelectChannel+0x3e>
	{
		ADMUX &= ~( ADC_CH_SEL_BITS_MASK);
    1b7c:	a7 e2       	ldi	r26, 0x27	; 39
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e7 e2       	ldi	r30, 0x27	; 39
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 7e       	andi	r24, 0xE0	; 224
    1b88:	8c 93       	st	X, r24
		ADMUX |= (Copy_u8ChannelID << ADC_CH_SEL_BITS);
    1b8a:	a7 e2       	ldi	r26, 0x27	; 39
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e7 e2       	ldi	r30, 0x27	; 39
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	90 81       	ld	r25, Z
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	89 2b       	or	r24, r25
    1b98:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK ;
    1b9a:	19 82       	std	Y+1, r1	; 0x01
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <ADC_enuSelectChannel+0x42>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62

	ADCSRA |= (BIT_MASK << ADC_START_CONVERSION_BIT );
    1bb6:	a6 e2       	ldi	r26, 0x26	; 38
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e6 e2       	ldi	r30, 0x26	; 38
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 64       	ori	r24, 0x40	; 64
    1bc2:	8c 93       	st	X, r24

	return ES_OK;
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
}
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <ADC_enuEnableAutoTrigger>:

ES_t ADC_enuEnableAutoTrigger(u8 Copy_u8TriggerSource)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <ADC_enuEnableAutoTrigger+0x6>
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8TriggerSource >= FREE_RUNNING && Copy_u8TriggerSource <= TIMER1_CAPT_EVENT )
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	87 3a       	cpi	r24, 0xA7	; 167
    1be0:	00 f1       	brcs	.+64     	; 0x1c22 <ADC_enuEnableAutoTrigger+0x56>
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	8f 3a       	cpi	r24, 0xAF	; 175
    1be6:	e8 f4       	brcc	.+58     	; 0x1c22 <ADC_enuEnableAutoTrigger+0x56>
	{
		ADCSRA &= (BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );
    1be8:	a6 e2       	ldi	r26, 0x26	; 38
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e6 e2       	ldi	r30, 0x26	; 38
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	80 72       	andi	r24, 0x20	; 32
    1bf4:	8c 93       	st	X, r24

		SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    1bf6:	a0 e5       	ldi	r26, 0x50	; 80
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e0 e5       	ldi	r30, 0x50	; 80
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	88 7f       	andi	r24, 0xF8	; 248
    1c02:	8c 93       	st	X, r24
		SFIOR |= ( (ADC_INIT_CHANNEL - FREE_RUNNING ) << ADC_TRIGGER_SEL_BITS );
    1c04:	a0 e5       	ldi	r26, 0x50	; 80
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e0 e5       	ldi	r30, 0x50	; 80
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8e 6d       	ori	r24, 0xDE	; 222
    1c10:	8c 93       	st	X, r24

		ADCSRA |= (BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );
    1c12:	a6 e2       	ldi	r26, 0x26	; 38
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e6 e2       	ldi	r30, 0x26	; 38
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	80 62       	ori	r24, 0x20	; 32
    1c1e:	8c 93       	st	X, r24
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <ADC_enuEnableAutoTrigger+0x5a>

	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <ADC_enuDisableAutoTrigger>:

ES_t ADC_enuDisableAutoTrigger(void)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~(BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );
    1c3a:	a6 e2       	ldi	r26, 0x26	; 38
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e6 e2       	ldi	r30, 0x26	; 38
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 7d       	andi	r24, 0xDF	; 223
    1c46:	8c 93       	st	X, r24

	return ES_OK;
    1c48:	80 e0       	ldi	r24, 0x00	; 0
}
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <ADC_enuRead>:


ES_t ADC_enuRead(u16 *Copy_u16ADC_Value)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <ADC_enuRead+0x6>
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	9b 83       	std	Y+3, r25	; 0x03
    1c5e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u16ADC_Value != NULL)
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	9b 81       	ldd	r25, Y+3	; 0x03
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	09 f1       	breq	.+66     	; 0x1cae <ADC_enuRead+0x5e>
			*Copy_u16ADC_Value  = ADCL;
			*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );

		#elif ( ADC_ADJUST == LEFT_ADJUST)

			*Copy_u16ADC_Value  = ( ADCL >> 6 );
    1c6c:	e4 e2       	ldi	r30, 0x24	; 36
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	82 95       	swap	r24
    1c74:	86 95       	lsr	r24
    1c76:	86 95       	lsr	r24
    1c78:	83 70       	andi	r24, 0x03	; 3
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c80:	fb 81       	ldd	r31, Y+3	; 0x03
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24
			*Copy_u16ADC_Value |= ( (u16)ADCH << 2 );
    1c86:	ea 81       	ldd	r30, Y+2	; 0x02
    1c88:	fb 81       	ldd	r31, Y+3	; 0x03
    1c8a:	20 81       	ld	r18, Z
    1c8c:	31 81       	ldd	r19, Z+1	; 0x01
    1c8e:	e5 e2       	ldi	r30, 0x25	; 37
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	88 2f       	mov	r24, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	82 2b       	or	r24, r18
    1ca2:	93 2b       	or	r25, r19
    1ca4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ca6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <ADC_enuRead+0x62>

			#warning "ADC_enuRead(u16*): Optimumt Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

		#endif
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    1cae:	83 e0       	ldi	r24, 0x03	; 3
    1cb0:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_NULL_POINTER )
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	83 30       	cpi	r24, 0x03	; 3
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <ADC_enuRead+0x6a>
			Local_enuErrorState = ES_OK ;
    1cb8:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <ADC_enuReadHigh>:

ES_t ADC_enuReadHigh(u8 *Copy_u8ADC_Value)

{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <ADC_enuReadHigh+0x6>
    1cce:	0f 92       	push	r0
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	9b 83       	std	Y+3, r25	; 0x03
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ADC_Value != NULL)
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	39 f0       	breq	.+14     	; 0x1cf2 <ADC_enuReadHigh+0x2a>

			#warning "ADC_enuReadHigh(u8*): Optimum Way to read High is to set ADC_ADJUST to LEFT_ADJUST"

		#elif ( ADC_ADJUST == LEFT_ADJUST)

			*Copy_u8ADC_Value = ADCH ;
    1ce4:	e5 e2       	ldi	r30, 0x25	; 37
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	ea 81       	ldd	r30, Y+2	; 0x02
    1cec:	fb 81       	ldd	r31, Y+3	; 0x03
    1cee:	80 83       	st	Z, r24
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <ADC_enuReadHigh+0x2e>

		#endif
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
    1cf4:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_NULL_POINTER )
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	83 30       	cpi	r24, 0x03	; 3
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <ADC_enuReadHigh+0x36>
			Local_enuErrorState = ES_OK ;
    1cfc:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <ADC_enuPollingRead>:

ES_t ADC_enuPollingRead(u16 *Copy_u16ADC_Value)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <ADC_enuPollingRead+0x6>
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	9b 83       	std	Y+3, r25	; 0x03
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u16ADC_Value != NULL)
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	9b 81       	ldd	r25, Y+3	; 0x03
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	09 f1       	breq	.+66     	; 0x1d6a <ADC_enuPollingRead+0x5e>
		*Copy_u16ADC_Value  = ADCL;
		*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );

#elif ( ADC_ADJUST == LEFT_ADJUST)

		*Copy_u16ADC_Value  = ( ADCL >> 6 );
    1d28:	e4 e2       	ldi	r30, 0x24	; 36
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	82 95       	swap	r24
    1d30:	86 95       	lsr	r24
    1d32:	86 95       	lsr	r24
    1d34:	83 70       	andi	r24, 0x03	; 3
    1d36:	88 2f       	mov	r24, r24
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 2 );
    1d42:	ea 81       	ldd	r30, Y+2	; 0x02
    1d44:	fb 81       	ldd	r31, Y+3	; 0x03
    1d46:	20 81       	ld	r18, Z
    1d48:	31 81       	ldd	r19, Z+1	; 0x01
    1d4a:	e5 e2       	ldi	r30, 0x25	; 37
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	82 2b       	or	r24, r18
    1d5e:	93 2b       	or	r25, r19
    1d60:	ea 81       	ldd	r30, Y+2	; 0x02
    1d62:	fb 81       	ldd	r31, Y+3	; 0x03
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	80 83       	st	Z, r24
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <ADC_enuPollingRead+0x62>

		#warning "ADC_enuRead(u16*): Optimum Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

#endif
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_NULL_POINTER )
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	83 30       	cpi	r24, 0x03	; 3
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <ADC_enuPollingRead+0x6a>
		Local_enuErrorState = ES_OK ;
    1d74:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void ( *Copy_pFunAppFun )(void))
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <ADC_enuCallBack+0x6>
    1d8a:	0f 92       	push	r0
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	9b 83       	std	Y+3, r25	; 0x03
    1d92:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pFunAppFun != NULL)
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	41 f0       	breq	.+16     	; 0x1db0 <ADC_enuCallBack+0x2c>
	{
		ADC_pFunISRFun = Copy_pFunAppFun;
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	9b 81       	ldd	r25, Y+3	; 0x03
    1da4:	90 93 0b 02 	sts	0x020B, r25
    1da8:	80 93 0a 02 	sts	0x020A, r24
		Local_enuErrorState = ES_OK;
    1dac:	19 82       	std	Y+1, r1	; 0x01
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <ADC_enuCallBack+0x30>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62

	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
    1dca:	a6 e2       	ldi	r26, 0x26	; 38
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e6 e2       	ldi	r30, 0x26	; 38
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	80 68       	ori	r24, 0x80	; 128
    1dd6:	8c 93       	st	X, r24
	return ES_NOK;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
}
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <ADC_enuDisable>:

ES_t ADC_enuDisable(void)

{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~( BIT_MASK << ADC_ENABLE_BIT );
    1de8:	a6 e2       	ldi	r26, 0x26	; 38
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e6 e2       	ldi	r30, 0x26	; 38
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	8f 77       	andi	r24, 0x7F	; 127
    1df4:	8c 93       	st	X, r24
	return ES_NOK;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
    1e06:	a6 e2       	ldi	r26, 0x26	; 38
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e6 e2       	ldi	r30, 0x26	; 38
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 68       	ori	r24, 0x80	; 128
    1e12:	8c 93       	st	X, r24
	return ES_NOK;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~( BIT_MASK << ADC_ENABLE_BIT );
    1e24:	a6 e2       	ldi	r26, 0x26	; 38
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e6 e2       	ldi	r30, 0x26	; 38
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8f 77       	andi	r24, 0x7F	; 127
    1e30:	8c 93       	st	X, r24
	return ES_NOK;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
}
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <__vector_16>:


void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    1e3a:	1f 92       	push	r1
    1e3c:	0f 92       	push	r0
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	0f 92       	push	r0
    1e42:	11 24       	eor	r1, r1
    1e44:	2f 93       	push	r18
    1e46:	3f 93       	push	r19
    1e48:	4f 93       	push	r20
    1e4a:	5f 93       	push	r21
    1e4c:	6f 93       	push	r22
    1e4e:	7f 93       	push	r23
    1e50:	8f 93       	push	r24
    1e52:	9f 93       	push	r25
    1e54:	af 93       	push	r26
    1e56:	bf 93       	push	r27
    1e58:	ef 93       	push	r30
    1e5a:	ff 93       	push	r31
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pFunISRFun != NULL)
    1e64:	80 91 0a 02 	lds	r24, 0x020A
    1e68:	90 91 0b 02 	lds	r25, 0x020B
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	29 f0       	breq	.+10     	; 0x1e7a <__vector_16+0x40>
		ADC_pFunISRFun();
    1e70:	e0 91 0a 02 	lds	r30, 0x020A
    1e74:	f0 91 0b 02 	lds	r31, 0x020B
    1e78:	09 95       	icall
}
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	ff 91       	pop	r31
    1e80:	ef 91       	pop	r30
    1e82:	bf 91       	pop	r27
    1e84:	af 91       	pop	r26
    1e86:	9f 91       	pop	r25
    1e88:	8f 91       	pop	r24
    1e8a:	7f 91       	pop	r23
    1e8c:	6f 91       	pop	r22
    1e8e:	5f 91       	pop	r21
    1e90:	4f 91       	pop	r20
    1e92:	3f 91       	pop	r19
    1e94:	2f 91       	pop	r18
    1e96:	0f 90       	pop	r0
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	0f 90       	pop	r0
    1e9c:	1f 90       	pop	r1
    1e9e:	18 95       	reti

00001ea0 <Switch_enuInit>:
extern Switch_t Switch[];
extern u8 Switch_u8SwitchZero;


ES_t Switch_enuInit(void)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <Switch_enuInit+0x6>
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <Switch_enuInit+0x8>
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	8a 83       	std	Y+2, r24	; 0x02
    1eb0:	4d c0       	rjmp	.+154    	; 0x1f4c <Switch_enuInit+0xac>

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
	{
		Local_enuAerror[0] = DIO_enuSetPinDirection	(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , DIO_u8INPUT);
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	ee 55       	subi	r30, 0x5E	; 94
    1ec4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec6:	20 81       	ld	r18, Z
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	ed 55       	subi	r30, 0x5D	; 93
    1eda:	fe 4f       	sbci	r31, 0xFE	; 254
    1edc:	90 81       	ld	r25, Z
    1ede:	82 2f       	mov	r24, r18
    1ee0:	69 2f       	mov	r22, r25
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
    1ee8:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	fc 01       	movw	r30, r24
    1efa:	ee 55       	subi	r30, 0x5E	; 94
    1efc:	fe 4f       	sbci	r31, 0xFE	; 254
    1efe:	30 81       	ld	r19, Z
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	fc 01       	movw	r30, r24
    1f10:	ed 55       	subi	r30, 0x5D	; 93
    1f12:	fe 4f       	sbci	r31, 0xFE	; 254
    1f14:	20 81       	ld	r18, Z
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	fc 01       	movw	r30, r24
    1f28:	ee 55       	subi	r30, 0x5E	; 94
    1f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f2c:	90 81       	ld	r25, Z
    1f2e:	83 2f       	mov	r24, r19
    1f30:	62 2f       	mov	r22, r18
    1f32:	49 2f       	mov	r20, r25
    1f34:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    1f38:	8c 83       	std	Y+4, r24	; 0x04

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	88 23       	and	r24, r24
    1f3e:	61 f4       	brne	.+24     	; 0x1f58 <Switch_enuInit+0xb8>
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	88 23       	and	r24, r24
    1f44:	49 f4       	brne	.+18     	; 0x1f58 <Switch_enuInit+0xb8>

ES_t Switch_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	90 91 a0 01 	lds	r25, 0x01A0
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	89 17       	cp	r24, r25
    1f54:	08 f4       	brcc	.+2      	; 0x1f58 <Switch_enuInit+0xb8>
    1f56:	ad cf       	rjmp	.-166    	; 0x1eb2 <Switch_enuInit+0x12>
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
	}

	if (Local_enuAerror[0] == ES_OK && Local_enuAerror[1] == ES_OK)
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	88 23       	and	r24, r24
    1f5c:	21 f4       	brne	.+8      	; 0x1f66 <Switch_enuInit+0xc6>
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	88 23       	and	r24, r24
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <Switch_enuInit+0xc6>
		Local_enuErrorState = ES_OK;
    1f64:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <Switch_enuGetPressed>:

ES_t Switch_enuGetPressed (u8 Copy_u8SwitchNum ,u8 * Copy_pu8SwitchValue)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <Switch_enuGetPressed+0x6>
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <Switch_enuGetPressed+0x8>
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	8a 83       	std	Y+2, r24	; 0x02
    1f84:	7c 83       	std	Y+4, r23	; 0x04
    1f86:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8SwitchNum-=Switch_u8SwitchZero) < Switch_u8SwitchesMaxNum )
    1f8c:	90 91 a1 01 	lds	r25, 0x01A1
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	89 1b       	sub	r24, r25
    1f94:	8a 83       	std	Y+2, r24	; 0x02
    1f96:	90 91 a0 01 	lds	r25, 0x01A0
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	89 17       	cp	r24, r25
    1f9e:	f8 f4       	brcc	.+62     	; 0x1fde <Switch_enuGetPressed+0x68>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Switch[Copy_u8SwitchNum].sw_Grp , Switch[Copy_u8SwitchNum].sw_Pin , Copy_pu8SwitchValue);
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	fc 01       	movw	r30, r24
    1fb0:	ee 55       	subi	r30, 0x5E	; 94
    1fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb4:	40 81       	ld	r20, Z
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	ed 55       	subi	r30, 0x5D	; 93
    1fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fca:	90 81       	ld	r25, Z
    1fcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fce:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd0:	84 2f       	mov	r24, r20
    1fd2:	69 2f       	mov	r22, r25
    1fd4:	a9 01       	movw	r20, r18
    1fd6:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_enuGetPinValue>
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <Switch_enuGetPressed+0x6c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <SevSeg_enuInit>:
extern u8 ModuleValuePins;
extern u8 ModuleControlPins;
extern SSegModule_t SSegModule[];

ES_t SevSeg_enuInit(void)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <SevSeg_enuInit+0x6>
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <SevSeg_enuInit+0x8>
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    2002:	8b e0       	ldi	r24, 0x0B	; 11
    2004:	8b 83       	std	Y+3, r24	; 0x03
    2006:	bc c0       	rjmp	.+376    	; 0x2180 <SevSeg_enuInit+0x18e>
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	8b 50       	subi	r24, 0x0B	; 11
    200c:	8a 83       	std	Y+2, r24	; 0x02
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    200e:	19 82       	std	Y+1, r1	; 0x01
    2010:	3a c0       	rjmp	.+116    	; 0x2086 <SevSeg_enuInit+0x94>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	48 2f       	mov	r20, r24
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	c9 01       	movw	r24, r18
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	82 1b       	sub	r24, r18
    202e:	93 0b       	sbc	r25, r19
    2030:	84 0f       	add	r24, r20
    2032:	95 1f       	adc	r25, r21
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	fc 01       	movw	r30, r24
    203a:	ef 54       	subi	r30, 0x4F	; 79
    203c:	fe 4f       	sbci	r31, 0xFE	; 254
    203e:	60 81       	ld	r22, Z
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	48 2f       	mov	r20, r24
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	c9 01       	movw	r24, r18
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	82 1b       	sub	r24, r18
    205c:	93 0b       	sbc	r25, r19
    205e:	84 0f       	add	r24, r20
    2060:	95 1f       	adc	r25, r21
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	fc 01       	movw	r30, r24
    2068:	ee 54       	subi	r30, 0x4E	; 78
    206a:	fe 4f       	sbci	r31, 0xFE	; 254
    206c:	90 81       	ld	r25, Z
    206e:	86 2f       	mov	r24, r22
    2070:	69 2f       	mov	r22, r25
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
    2078:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    207a:	8c 81       	ldd	r24, Y+4	; 0x04
    207c:	88 23       	and	r24, r24
    207e:	41 f4       	brne	.+16     	; 0x2090 <SevSeg_enuInit+0x9e>
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	8f 5f       	subi	r24, 0xFF	; 255
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	90 91 af 01 	lds	r25, 0x01AF
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	89 17       	cp	r24, r25
    208e:	08 f2       	brcs	.-126    	; 0x2012 <SevSeg_enuInit+0x20>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
		if( Local_enuErrorState == ES_OK)
    2090:	8c 81       	ldd	r24, Y+4	; 0x04
    2092:	88 23       	and	r24, r24
    2094:	61 f5       	brne	.+88     	; 0x20ee <SevSeg_enuInit+0xfc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	88 2f       	mov	r24, r24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9c 01       	movw	r18, r24
    209e:	22 0f       	add	r18, r18
    20a0:	33 1f       	adc	r19, r19
    20a2:	c9 01       	movw	r24, r18
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	82 1b       	sub	r24, r18
    20b2:	93 0b       	sbc	r25, r19
    20b4:	fc 01       	movw	r30, r24
    20b6:	e7 54       	subi	r30, 0x47	; 71
    20b8:	fe 4f       	sbci	r31, 0xFE	; 254
    20ba:	40 81       	ld	r20, Z
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9c 01       	movw	r18, r24
    20c4:	22 0f       	add	r18, r18
    20c6:	33 1f       	adc	r19, r19
    20c8:	c9 01       	movw	r24, r18
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	82 1b       	sub	r24, r18
    20d8:	93 0b       	sbc	r25, r19
    20da:	fc 01       	movw	r30, r24
    20dc:	e6 54       	subi	r30, 0x46	; 70
    20de:	fe 4f       	sbci	r31, 0xFE	; 254
    20e0:	90 81       	ld	r25, Z
    20e2:	84 2f       	mov	r24, r20
    20e4:	69 2f       	mov	r22, r25
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
    20ec:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    20ee:	19 82       	std	Y+1, r1	; 0x01
    20f0:	3b c0       	rjmp	.+118    	; 0x2168 <SevSeg_enuInit+0x176>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	48 2f       	mov	r20, r24
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	c9 01       	movw	r24, r18
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	82 1b       	sub	r24, r18
    210e:	93 0b       	sbc	r25, r19
    2110:	84 0f       	add	r24, r20
    2112:	95 1f       	adc	r25, r21
    2114:	05 96       	adiw	r24, 0x05	; 5
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	fc 01       	movw	r30, r24
    211c:	ef 54       	subi	r30, 0x4F	; 79
    211e:	fe 4f       	sbci	r31, 0xFE	; 254
    2120:	60 81       	ld	r22, Z
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	48 2f       	mov	r20, r24
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	c9 01       	movw	r24, r18
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	82 1b       	sub	r24, r18
    213e:	93 0b       	sbc	r25, r19
    2140:	84 0f       	add	r24, r20
    2142:	95 1f       	adc	r25, r21
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	fc 01       	movw	r30, r24
    214a:	e4 54       	subi	r30, 0x44	; 68
    214c:	fe 4f       	sbci	r31, 0xFE	; 254
    214e:	90 81       	ld	r25, Z
    2150:	86 2f       	mov	r24, r22
    2152:	69 2f       	mov	r22, r25
    2154:	41 e0       	ldi	r20, 0x01	; 1
    2156:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
    215a:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	88 23       	and	r24, r24
    2160:	61 f4       	brne	.+24     	; 0x217a <SevSeg_enuInit+0x188>
		if( Local_enuErrorState == ES_OK)
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	88 23       	and	r24, r24
    216c:	31 f4       	brne	.+12     	; 0x217a <SevSeg_enuInit+0x188>
    216e:	90 91 b0 01 	lds	r25, 0x01B0
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	89 17       	cp	r24, r25
    2176:	08 f4       	brcc	.+2      	; 0x217a <SevSeg_enuInit+0x188>
    2178:	bc cf       	rjmp	.-136    	; 0x20f2 <SevSeg_enuInit+0x100>
ES_t SevSeg_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	8f 5f       	subi	r24, 0xFF	; 255
    217e:	8b 83       	std	Y+3, r24	; 0x03
    2180:	90 91 ae 01 	lds	r25, 0x01AE
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	98 17       	cp	r25, r24
    2188:	08 f0       	brcs	.+2      	; 0x218c <SevSeg_enuInit+0x19a>
    218a:	3e cf       	rjmp	.-388    	; 0x2008 <SevSeg_enuInit+0x16>
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
	}

	return Local_enuErrorState ;//DONE
    218c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <SevSeg_enuSetDigitValue>:
ES_t SevSeg_enuSetDigitValue(u8 Copy_u8ModuleNum , u8 Copy_u8SevSegDigitValue)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <SevSeg_enuSetDigitValue+0x6>
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <SevSeg_enuSetDigitValue+0x8>
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	8b 83       	std	Y+3, r24	; 0x03
    21aa:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK ;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	8b 50       	subi	r24, 0x0B	; 11
    21b4:	8b 83       	std	Y+3, r24	; 0x03
    21b6:	90 91 ae 01 	lds	r25, 0x01AE
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	89 17       	cp	r24, r25
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <SevSeg_enuSetDigitValue+0x26>
    21c0:	59 c0       	rjmp	.+178    	; 0x2274 <SevSeg_enuSetDigitValue+0xd8>
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	8a 30       	cpi	r24, 0x0A	; 10
    21c6:	08 f0       	brcs	.+2      	; 0x21ca <SevSeg_enuSetDigitValue+0x2e>
    21c8:	52 c0       	rjmp	.+164    	; 0x226e <SevSeg_enuSetDigitValue+0xd2>
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    21ca:	19 82       	std	Y+1, r1	; 0x01
    21cc:	49 c0       	rjmp	.+146    	; 0x2260 <SevSeg_enuSetDigitValue+0xc4>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputGrp ,
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	48 2f       	mov	r20, r24
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	c9 01       	movw	r24, r18
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	82 1b       	sub	r24, r18
    21ea:	93 0b       	sbc	r25, r19
    21ec:	84 0f       	add	r24, r20
    21ee:	95 1f       	adc	r25, r21
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	fc 01       	movw	r30, r24
    21f6:	ef 54       	subi	r30, 0x4F	; 79
    21f8:	fe 4f       	sbci	r31, 0xFE	; 254
    21fa:	60 81       	ld	r22, Z
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	48 2f       	mov	r20, r24
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	c9 01       	movw	r24, r18
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	82 1b       	sub	r24, r18
    2218:	93 0b       	sbc	r25, r19
    221a:	84 0f       	add	r24, r20
    221c:	95 1f       	adc	r25, r21
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	fc 01       	movw	r30, r24
    2224:	ee 54       	subi	r30, 0x4E	; 78
    2226:	fe 4f       	sbci	r31, 0xFE	; 254
    2228:	40 81       	ld	r20, Z
    222a:	8c 81       	ldd	r24, Y+4	; 0x04
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	f9 01       	movw	r30, r18
    2238:	02 c0       	rjmp	.+4      	; 0x223e <SevSeg_enuSetDigitValue+0xa2>
    223a:	f5 95       	asr	r31
    223c:	e7 95       	ror	r30
    223e:	8a 95       	dec	r24
    2240:	e2 f7       	brpl	.-8      	; 0x223a <SevSeg_enuSetDigitValue+0x9e>
    2242:	cf 01       	movw	r24, r30
    2244:	98 2f       	mov	r25, r24
    2246:	91 70       	andi	r25, 0x01	; 1
    2248:	86 2f       	mov	r24, r22
    224a:	64 2f       	mov	r22, r20
    224c:	49 2f       	mov	r20, r25
    224e:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    2252:	8a 83       	std	Y+2, r24	; 0x02
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	88 23       	and	r24, r24
    2258:	79 f4       	brne	.+30     	; 0x2278 <SevSeg_enuSetDigitValue+0xdc>

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	8f 5f       	subi	r24, 0xFF	; 255
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	90 91 af 01 	lds	r25, 0x01AF
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	89 17       	cp	r24, r25
    2268:	08 f4       	brcc	.+2      	; 0x226c <SevSeg_enuSetDigitValue+0xd0>
    226a:	b1 cf       	rjmp	.-158    	; 0x21ce <SevSeg_enuSetDigitValue+0x32>
    226c:	05 c0       	rjmp	.+10     	; 0x2278 <SevSeg_enuSetDigitValue+0xdc>
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	8a 83       	std	Y+2, r24	; 0x02
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <SevSeg_enuSetDigitValue+0xdc>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	8a 83       	std	Y+2, r24	; 0x02


	return Local_enuErrorState ;//DONE
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
}
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <SevSeg_enuSetDIPValue>:

ES_t SevSeg_enuSetDIPValue(u8 Copy_u8ModuleNum ,u8 Copy_u8SevSegDIPValue)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	00 d0       	rcall	.+0      	; 0x228e <SevSeg_enuSetDIPValue+0x6>
    228e:	0f 92       	push	r0
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	8a 83       	std	Y+2, r24	; 0x02
    2296:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	8b 50       	subi	r24, 0x0B	; 11
    22a0:	8a 83       	std	Y+2, r24	; 0x02
    22a2:	90 91 ae 01 	lds	r25, 0x01AE
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	89 17       	cp	r24, r25
    22aa:	b0 f5       	brcc	.+108    	; 0x2318 <SevSeg_enuSetDIPValue+0x90>
	{
		if( Copy_u8SevSegDIPValue == DIP_ON ||Copy_u8SevSegDIPValue == DIP_OFF )
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	19 f0       	breq	.+6      	; 0x22b8 <SevSeg_enuSetDIPValue+0x30>
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	88 23       	and	r24, r24
    22b6:	69 f5       	brne	.+90     	; 0x2312 <SevSeg_enuSetDIPValue+0x8a>
		{
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].DIP_Conf.InputGrp ,
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9c 01       	movw	r18, r24
    22c0:	22 0f       	add	r18, r18
    22c2:	33 1f       	adc	r19, r19
    22c4:	c9 01       	movw	r24, r18
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	82 1b       	sub	r24, r18
    22d4:	93 0b       	sbc	r25, r19
    22d6:	fc 01       	movw	r30, r24
    22d8:	e7 54       	subi	r30, 0x47	; 71
    22da:	fe 4f       	sbci	r31, 0xFE	; 254
    22dc:	40 81       	ld	r20, Z
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9c 01       	movw	r18, r24
    22e6:	22 0f       	add	r18, r18
    22e8:	33 1f       	adc	r19, r19
    22ea:	c9 01       	movw	r24, r18
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	82 1b       	sub	r24, r18
    22fa:	93 0b       	sbc	r25, r19
    22fc:	fc 01       	movw	r30, r24
    22fe:	e6 54       	subi	r30, 0x46	; 70
    2300:	fe 4f       	sbci	r31, 0xFE	; 254
    2302:	90 81       	ld	r25, Z
    2304:	84 2f       	mov	r24, r20
    2306:	69 2f       	mov	r22, r25
    2308:	4b 81       	ldd	r20, Y+3	; 0x03
    230a:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	05 c0       	rjmp	.+10     	; 0x231c <SevSeg_enuSetDIPValue+0x94>
														SSegModule[Copy_u8ModuleNum].DIP_Conf.InputPin  , Copy_u8SevSegDIPValue );
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    2312:	82 e0       	ldi	r24, 0x02	; 2
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	02 c0       	rjmp	.+4      	; 0x231c <SevSeg_enuSetDIPValue+0x94>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    231c:	89 81       	ldd	r24, Y+1	; 0x01
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <SevSeg_enuFrameDelay>:

ES_t SevSeg_enuFrameDelay(u8 Copy_u8SevSegTotalModules, u8 *Copy_pu8SevSegModuleDelay)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	00 d0       	rcall	.+0      	; 0x2330 <SevSeg_enuFrameDelay+0x6>
    2330:	00 d0       	rcall	.+0      	; 0x2332 <SevSeg_enuFrameDelay+0x8>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	8a 83       	std	Y+2, r24	; 0x02
    2338:	7c 83       	std	Y+4, r23	; 0x04
    233a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8SevSegTotalModules <= SevSeg_u8MaxModules)
    2340:	90 91 ae 01 	lds	r25, 0x01AE
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	98 17       	cp	r25, r24
    2348:	98 f0       	brcs	.+38     	; 0x2370 <SevSeg_enuFrameDelay+0x46>
	{

		*Copy_pu8SevSegModuleDelay = SevSeg_u8MODULE_DELAY( Copy_u8SevSegTotalModules );
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	ac 01       	movw	r20, r24
    2352:	4d 5e       	subi	r20, 0xED	; 237
    2354:	5f 4f       	sbci	r21, 0xFF	; 255
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	ca 01       	movw	r24, r20
    235e:	b9 01       	movw	r22, r18
    2360:	0e 94 15 24 	call	0x482a	; 0x482a <__divmodhi4>
    2364:	cb 01       	movw	r24, r22
    2366:	eb 81       	ldd	r30, Y+3	; 0x03
    2368:	fc 81       	ldd	r31, Y+4	; 0x04
    236a:	80 83       	st	Z, r24

		Local_enuErrorState=ES_OK;
    236c:	19 82       	std	Y+1, r1	; 0x01
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <SevSeg_enuFrameDelay+0x4a>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    2370:	82 e0       	ldi	r24, 0x02	; 2
    2372:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    2374:	89 81       	ldd	r24, Y+1	; 0x01
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <SevSeg_enuModuleControl>:

ES_t SevSeg_enuModuleControl(u8 Copy_u8SevSegModuleNum , u8 Copy_u8SevSegModuleStatus)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	27 97       	sbiw	r28, 0x07	; 7
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	8c 83       	std	Y+4, r24	; 0x04
    239a:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Output;

	if( Copy_u8SevSegModuleStatus == MODULE_DISABLE || Copy_u8SevSegModuleStatus == MODULE_ENABLE )
    23a0:	8d 81       	ldd	r24, Y+5	; 0x05
    23a2:	8d 30       	cpi	r24, 0x0D	; 13
    23a4:	21 f0       	breq	.+8      	; 0x23ae <SevSeg_enuModuleControl+0x2a>
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	8e 30       	cpi	r24, 0x0E	; 14
    23aa:	09 f0       	breq	.+2      	; 0x23ae <SevSeg_enuModuleControl+0x2a>
    23ac:	64 c0       	rjmp	.+200    	; 0x2476 <SevSeg_enuModuleControl+0xf2>
	{
		if( (Copy_u8SevSegModuleNum -= MODULE_1)< SevSeg_u8MaxModules )
    23ae:	8c 81       	ldd	r24, Y+4	; 0x04
    23b0:	8b 50       	subi	r24, 0x0B	; 11
    23b2:	8c 83       	std	Y+4, r24	; 0x04
    23b4:	90 91 ae 01 	lds	r25, 0x01AE
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	89 17       	cp	r24, r25
    23bc:	08 f0       	brcs	.+2      	; 0x23c0 <SevSeg_enuModuleControl+0x3c>
    23be:	58 c0       	rjmp	.+176    	; 0x2470 <SevSeg_enuModuleControl+0xec>
		{
			switch( Copy_u8SevSegModuleStatus )
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	3f 83       	std	Y+7, r19	; 0x07
    23c8:	2e 83       	std	Y+6, r18	; 0x06
    23ca:	8e 81       	ldd	r24, Y+6	; 0x06
    23cc:	9f 81       	ldd	r25, Y+7	; 0x07
    23ce:	8d 30       	cpi	r24, 0x0D	; 13
    23d0:	91 05       	cpc	r25, r1
    23d2:	31 f0       	breq	.+12     	; 0x23e0 <SevSeg_enuModuleControl+0x5c>
    23d4:	2e 81       	ldd	r18, Y+6	; 0x06
    23d6:	3f 81       	ldd	r19, Y+7	; 0x07
    23d8:	2e 30       	cpi	r18, 0x0E	; 14
    23da:	31 05       	cpc	r19, r1
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <SevSeg_enuModuleControl+0x60>
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <SevSeg_enuModuleControl+0x64>
			{
				case MODULE_DISABLE : Local_u8Output = DIO_u8LOW;
    23e0:	1a 82       	std	Y+2, r1	; 0x02
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <SevSeg_enuModuleControl+0x64>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	8a 83       	std	Y+2, r24	; 0x02
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    23e8:	19 82       	std	Y+1, r1	; 0x01
    23ea:	3b c0       	rjmp	.+118    	; 0x2462 <SevSeg_enuModuleControl+0xde>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	48 2f       	mov	r20, r24
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	c9 01       	movw	r24, r18
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	82 1b       	sub	r24, r18
    2408:	93 0b       	sbc	r25, r19
    240a:	84 0f       	add	r24, r20
    240c:	95 1f       	adc	r25, r21
    240e:	05 96       	adiw	r24, 0x05	; 5
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	fc 01       	movw	r30, r24
    2416:	ef 54       	subi	r30, 0x4F	; 79
    2418:	fe 4f       	sbci	r31, 0xFE	; 254
    241a:	60 81       	ld	r22, Z
    241c:	8c 81       	ldd	r24, Y+4	; 0x04
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	48 2f       	mov	r20, r24
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	c9 01       	movw	r24, r18
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	82 1b       	sub	r24, r18
    2438:	93 0b       	sbc	r25, r19
    243a:	84 0f       	add	r24, r20
    243c:	95 1f       	adc	r25, r21
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	fc 01       	movw	r30, r24
    2444:	e4 54       	subi	r30, 0x44	; 68
    2446:	fe 4f       	sbci	r31, 0xFE	; 254
    2448:	90 81       	ld	r25, Z
    244a:	86 2f       	mov	r24, r22
    244c:	69 2f       	mov	r22, r25
    244e:	4a 81       	ldd	r20, Y+2	; 0x02
    2450:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    2454:	8b 83       	std	Y+3, r24	; 0x03
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	88 23       	and	r24, r24
    245a:	79 f4       	brne	.+30     	; 0x247a <SevSeg_enuModuleControl+0xf6>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	8f 5f       	subi	r24, 0xFF	; 255
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	90 91 b0 01 	lds	r25, 0x01B0
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	89 17       	cp	r24, r25
    246a:	08 f4       	brcc	.+2      	; 0x246e <SevSeg_enuModuleControl+0xea>
    246c:	bf cf       	rjmp	.-130    	; 0x23ec <SevSeg_enuModuleControl+0x68>
    246e:	05 c0       	rjmp	.+10     	; 0x247a <SevSeg_enuModuleControl+0xf6>
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else	Local_enuErrorState = ES_OUT_RANGE;
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	8b 83       	std	Y+3, r24	; 0x03
    2474:	02 c0       	rjmp	.+4      	; 0x247a <SevSeg_enuModuleControl+0xf6>
	}
	else	Local_enuErrorState = ES_OUT_RANGE;
    2476:	82 e0       	ldi	r24, 0x02	; 2
    2478:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;//DONE
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    247c:	27 96       	adiw	r28, 0x07	; 7
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <LM35_enuInit>:
#include "..\..\MCAL\DIO\DIO_int.h"

#include "LM35_config.h"

ES_t LM35_enuInit(void)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	00 d0       	rcall	.+0      	; 0x2494 <LM35_enuInit+0x6>
    2494:	0f 92       	push	r0
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[2];
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	89 83       	std	Y+1, r24	; 0x01

	Local_AenuErrorState[0] = DIO_enuSetPinDirection( VSS_GRP , VSS_PIN , DIO_u8OUTPUT);
    249e:	82 e0       	ldi	r24, 0x02	; 2
    24a0:	61 e0       	ldi	r22, 0x01	; 1
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
    24a8:	8a 83       	std	Y+2, r24	; 0x02
	Local_AenuErrorState[1] = DIO_enuSetPinValue( VSS_GRP , VSS_PIN , DIO_u8HIGH);
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	61 e0       	ldi	r22, 0x01	; 1
    24ae:	41 e0       	ldi	r20, 0x01	; 1
    24b0:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    24b4:	8b 83       	std	Y+3, r24	; 0x03

	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	88 23       	and	r24, r24
    24ba:	09 f5       	brne	.+66     	; 0x24fe <LM35_enuInit+0x70>
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	88 23       	and	r24, r24
    24c0:	f1 f4       	brne	.+60     	; 0x24fe <LM35_enuInit+0x70>
	{
		Local_AenuErrorState[0] = DIO_enuSetPinDirection( GROUND_GRP , GROUND_PIN , DIO_u8OUTPUT );
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	41 e0       	ldi	r20, 0x01	; 1
    24c8:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
    24cc:	8a 83       	std	Y+2, r24	; 0x02
		Local_AenuErrorState[1] = DIO_enuSetPinValue( GROUND_GRP , GROUND_PIN , DIO_u8LOW);
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    24d8:	8b 83       	std	Y+3, r24	; 0x03

		if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	88 23       	and	r24, r24
    24de:	79 f4       	brne	.+30     	; 0x24fe <LM35_enuInit+0x70>
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	88 23       	and	r24, r24
    24e4:	61 f4       	brne	.+24     	; 0x24fe <LM35_enuInit+0x70>
		{
			Local_AenuErrorState[0] = DIO_enuSetPinDirection( TEMP_VALUE_GRP , TEMP_VALUE_PIN , DIO_u8INPUT );
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
    24f0:	8a 83       	std	Y+2, r24	; 0x02
			Local_AenuErrorState[1] = DIO_enuSetPinValue( TEMP_VALUE_GRP , TEMP_VALUE_PIN , TEMP_VALUE_STATE );
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	40 e0       	ldi	r20, 0x00	; 0
    24f8:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    24fc:	8b 83       	std	Y+3, r24	; 0x03
		}

	}

	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	88 23       	and	r24, r24
    2502:	21 f4       	brne	.+8      	; 0x250c <LM35_enuInit+0x7e>
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	88 23       	and	r24, r24
    2508:	09 f4       	brne	.+2      	; 0x250c <LM35_enuInit+0x7e>
		Local_enuErrorState = ES_OK;
    250a:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    250c:	89 81       	ldd	r24, Y+1	; 0x01
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <LD_enuInit>:

extern LD_t LD[];


ES_t LD_enuInit(void)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	00 d0       	rcall	.+0      	; 0x2520 <LD_enuInit+0x6>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <LD_enuInit+0x8>
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	8a 83       	std	Y+2, r24	; 0x02

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
    252a:	80 91 ce 01 	lds	r24, 0x01CE
    252e:	81 34       	cpi	r24, 0x41	; 65
    2530:	09 f4       	brne	.+2      	; 0x2534 <LD_enuInit+0x1a>
    2532:	41 c0       	rjmp	.+130    	; 0x25b6 <LD_enuInit+0x9c>
    2534:	80 91 ce 01 	lds	r24, 0x01CE
    2538:	82 34       	cpi	r24, 0x42	; 66
    253a:	09 f0       	breq	.+2      	; 0x253e <LD_enuInit+0x24>
    253c:	4a c0       	rjmp	.+148    	; 0x25d2 <LD_enuInit+0xb8>
    253e:	3b c0       	rjmp	.+118    	; 0x25b6 <LD_enuInit+0x9c>
	{
		for(u8 Local_u8Iter; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
		{
			Local_AenuStatus[0] = DIO_enuSetPinDirection	( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , DIO_u8OUTPUT);
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	88 2f       	mov	r24, r24
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	fc 01       	movw	r30, r24
    254c:	e0 53       	subi	r30, 0x30	; 48
    254e:	fe 4f       	sbci	r31, 0xFE	; 254
    2550:	20 81       	ld	r18, Z
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	fc 01       	movw	r30, r24
    255e:	ef 52       	subi	r30, 0x2F	; 47
    2560:	fe 4f       	sbci	r31, 0xFE	; 254
    2562:	90 81       	ld	r25, Z
    2564:	82 2f       	mov	r24, r18
    2566:	69 2f       	mov	r22, r25
    2568:	41 e0       	ldi	r20, 0x01	; 1
    256a:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
    256e:	8b 83       	std	Y+3, r24	; 0x03
			Local_AenuStatus[1] = DIO_enuSetPinValue		( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8Off);
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	fc 01       	movw	r30, r24
    257c:	e0 53       	subi	r30, 0x30	; 48
    257e:	fe 4f       	sbci	r31, 0xFE	; 254
    2580:	30 81       	ld	r19, Z
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	fc 01       	movw	r30, r24
    258e:	ef 52       	subi	r30, 0x2F	; 47
    2590:	fe 4f       	sbci	r31, 0xFE	; 254
    2592:	90 81       	ld	r25, Z
    2594:	20 91 0c 02 	lds	r18, 0x020C
    2598:	83 2f       	mov	r24, r19
    259a:	69 2f       	mov	r22, r25
    259c:	42 2f       	mov	r20, r18
    259e:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    25a2:	8c 83       	std	Y+4, r24	; 0x04

			if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	88 23       	and	r24, r24
    25a8:	61 f4       	brne	.+24     	; 0x25c2 <LD_enuInit+0xa8>
    25aa:	8c 81       	ldd	r24, Y+4	; 0x04
    25ac:	88 23       	and	r24, r24
    25ae:	49 f4       	brne	.+18     	; 0x25c2 <LD_enuInit+0xa8>
{
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
	{
		for(u8 Local_u8Iter; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	90 91 cd 01 	lds	r25, 0x01CD
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	89 17       	cp	r24, r25
    25be:	08 f4       	brcc	.+2      	; 0x25c2 <LD_enuInit+0xa8>
    25c0:	bf cf       	rjmp	.-130    	; 0x2540 <LD_enuInit+0x26>
			Local_AenuStatus[1] = DIO_enuSetPinValue		( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8Off);

			if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
		}

		if(Local_AenuStatus[0] == ES_OK && Local_AenuStatus[1] == ES_OK)
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	88 23       	and	r24, r24
    25c6:	39 f4       	brne	.+14     	; 0x25d6 <LD_enuInit+0xbc>
    25c8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ca:	88 23       	and	r24, r24
    25cc:	21 f4       	brne	.+8      	; 0x25d6 <LD_enuInit+0xbc>
			Local_enuErrorStatus = ES_OK;
    25ce:	1a 82       	std	Y+2, r1	; 0x02
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <LD_enuInit+0xbc>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    25d2:	82 e0       	ldi	r24, 0x02	; 2
    25d4:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorStatus;
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <LD_enuSetState>:

ES_t LD_enuSetState(u8 Copy_u8LD_Num ,u8 Copy_u8LDSetValue)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <LD_enuSetState+0x6>
    25ec:	0f 92       	push	r0
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	8a 83       	std	Y+2, r24	; 0x02
    25f4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK ;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	89 83       	std	Y+1, r24	; 0x01

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
    25fa:	80 91 ce 01 	lds	r24, 0x01CE
    25fe:	81 34       	cpi	r24, 0x41	; 65
    2600:	21 f0       	breq	.+8      	; 0x260a <LD_enuSetState+0x24>
    2602:	80 91 ce 01 	lds	r24, 0x01CE
    2606:	82 34       	cpi	r24, 0x42	; 66
    2608:	71 f5       	brne	.+92     	; 0x2666 <LD_enuSetState+0x80>
	{
		if( Copy_u8LD_Num < LD_u8LD_MaxNum)
    260a:	90 91 cd 01 	lds	r25, 0x01CD
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	89 17       	cp	r24, r25
    2612:	30 f5       	brcc	.+76     	; 0x2660 <LD_enuSetState+0x7a>
		{
			if( Copy_u8LDSetValue == LD_u8On || Copy_u8LDSetValue == LD_u8Off )
    2614:	90 91 cf 01 	lds	r25, 0x01CF
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	89 17       	cp	r24, r25
    261c:	29 f0       	breq	.+10     	; 0x2628 <LD_enuSetState+0x42>
    261e:	90 91 0c 02 	lds	r25, 0x020C
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	89 17       	cp	r24, r25
    2626:	c9 f4       	brne	.+50     	; 0x265a <LD_enuSetState+0x74>
			{
				Local_enuErrorStatus = DIO_enuSetPinValue(LD[Copy_u8LD_Num].LD_Grp , LD[Copy_u8LD_Num].LD_Pin , Copy_u8LDSetValue);
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	88 2f       	mov	r24, r24
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	fc 01       	movw	r30, r24
    2634:	e0 53       	subi	r30, 0x30	; 48
    2636:	fe 4f       	sbci	r31, 0xFE	; 254
    2638:	20 81       	ld	r18, Z
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	fc 01       	movw	r30, r24
    2646:	ef 52       	subi	r30, 0x2F	; 47
    2648:	fe 4f       	sbci	r31, 0xFE	; 254
    264a:	90 81       	ld	r25, Z
    264c:	82 2f       	mov	r24, r18
    264e:	69 2f       	mov	r22, r25
    2650:	4b 81       	ldd	r20, Y+3	; 0x03
    2652:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	08 c0       	rjmp	.+16     	; 0x266a <LD_enuSetState+0x84>
			}
			else Local_enuErrorStatus = ES_OUT_RANGE;
    265a:	82 e0       	ldi	r24, 0x02	; 2
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	05 c0       	rjmp	.+10     	; 0x266a <LD_enuSetState+0x84>
		}
		else Local_enuErrorStatus = ES_OUT_RANGE;
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	02 c0       	rjmp	.+4      	; 0x266a <LD_enuSetState+0x84>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    266a:	89 81       	ldd	r24, Y+1	; 0x01
}
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <LCD_enuInit>:
#include "LCD_priv.h"

#include <util/delay.h>

ES_t LCD_enuInit(void)
{
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	ab 97       	sbiw	r28, 0x2b	; 43
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	8b a7       	std	Y+43, r24	; 0x2b
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a0 ef       	ldi	r26, 0xF0	; 240
    2696:	b1 e4       	ldi	r27, 0x41	; 65
    2698:	8f a3       	std	Y+39, r24	; 0x27
    269a:	98 a7       	std	Y+40, r25	; 0x28
    269c:	a9 a7       	std	Y+41, r26	; 0x29
    269e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	6f a1       	ldd	r22, Y+39	; 0x27
    26a2:	78 a5       	ldd	r23, Y+40	; 0x28
    26a4:	89 a5       	ldd	r24, Y+41	; 0x29
    26a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4a e7       	ldi	r20, 0x7A	; 122
    26ae:	55 e4       	ldi	r21, 0x45	; 69
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	8b a3       	std	Y+35, r24	; 0x23
    26ba:	9c a3       	std	Y+36, r25	; 0x24
    26bc:	ad a3       	std	Y+37, r26	; 0x25
    26be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26c0:	6b a1       	ldd	r22, Y+35	; 0x23
    26c2:	7c a1       	ldd	r23, Y+36	; 0x24
    26c4:	8d a1       	ldd	r24, Y+37	; 0x25
    26c6:	9e a1       	ldd	r25, Y+38	; 0x26
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <LCD_enuInit+0x6a>
		__ticks = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9a a3       	std	Y+34, r25	; 0x22
    26de:	89 a3       	std	Y+33, r24	; 0x21
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <LCD_enuInit+0xe8>
	else if (__tmp > 65535)
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	4c f5       	brge	.+82     	; 0x274c <LCD_enuInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6f a1       	ldd	r22, Y+39	; 0x27
    26fc:	78 a5       	ldd	r23, Y+40	; 0x28
    26fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2700:	9a a5       	ldd	r25, Y+42	; 0x2a
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9a a3       	std	Y+34, r25	; 0x22
    2720:	89 a3       	std	Y+33, r24	; 0x21
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <LCD_enuInit+0xca>
    2724:	80 e9       	ldi	r24, 0x90	; 144
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	98 a3       	std	Y+32, r25	; 0x20
    272a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    272c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    272e:	98 a1       	ldd	r25, Y+32	; 0x20
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <LCD_enuInit+0xb8>
    2734:	98 a3       	std	Y+32, r25	; 0x20
    2736:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	89 a1       	ldd	r24, Y+33	; 0x21
    273a:	9a a1       	ldd	r25, Y+34	; 0x22
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	9a a3       	std	Y+34, r25	; 0x22
    2740:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	89 a1       	ldd	r24, Y+33	; 0x21
    2744:	9a a1       	ldd	r25, Y+34	; 0x22
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <LCD_enuInit+0xac>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <LCD_enuInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	6b a1       	ldd	r22, Y+35	; 0x23
    274e:	7c a1       	ldd	r23, Y+36	; 0x24
    2750:	8d a1       	ldd	r24, Y+37	; 0x25
    2752:	9e a1       	ldd	r25, Y+38	; 0x26
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9a a3       	std	Y+34, r25	; 0x22
    275e:	89 a3       	std	Y+33, r24	; 0x21
    2760:	89 a1       	ldd	r24, Y+33	; 0x21
    2762:	9a a1       	ldd	r25, Y+34	; 0x22
    2764:	9e 8f       	std	Y+30, r25	; 0x1e
    2766:	8d 8f       	std	Y+29, r24	; 0x1d
    2768:	8d 8d       	ldd	r24, Y+29	; 0x1d
    276a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <LCD_enuInit+0xf4>
    2770:	9e 8f       	std	Y+30, r25	; 0x1e
    2772:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);

	DIO_enuSetPinDirection(RS_GRP , RS_PIN , DIO_u8OUTPUT);
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	61 e0       	ldi	r22, 0x01	; 1
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
#if RW_GRP != NC && RW_PIN != NC
	DIO_enuSetPinDirection(RW_GRP , RW_PIN , DIO_u8OUTPUT);
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	62 e0       	ldi	r22, 0x02	; 2
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
#endif
	DIO_enuSetPinDirection(EN_GRP , EN_PIN , DIO_u8OUTPUT);
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	63 e0       	ldi	r22, 0x03	; 3
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP , D7_PIN , DIO_u8OUTPUT);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	67 e0       	ldi	r22, 0x07	; 7
    2796:	41 e0       	ldi	r20, 0x01	; 1
    2798:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP , D6_PIN , DIO_u8OUTPUT);
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	66 e0       	ldi	r22, 0x06	; 6
    27a0:	41 e0       	ldi	r20, 0x01	; 1
    27a2:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP , D5_PIN , DIO_u8OUTPUT);
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	65 e0       	ldi	r22, 0x05	; 5
    27aa:	41 e0       	ldi	r20, 0x01	; 1
    27ac:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP , D4_PIN , DIO_u8OUTPUT);
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	64 e0       	ldi	r22, 0x04	; 4
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch( 0x38 );

#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(D7_GRP , D7_PIN , DIO_u8LOW);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	67 e0       	ldi	r22, 0x07	; 7
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , DIO_u8LOW);
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	66 e0       	ldi	r22, 0x06	; 6
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , DIO_u8HIGH);
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	65 e0       	ldi	r22, 0x05	; 5
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , DIO_u8LOW);
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	64 e0       	ldi	r22, 0x04	; 4
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	63 e0       	ldi	r22, 0x03	; 3
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	a0 e8       	ldi	r26, 0x80	; 128
    27f2:	bf e3       	ldi	r27, 0x3F	; 63
    27f4:	89 8f       	std	Y+25, r24	; 0x19
    27f6:	9a 8f       	std	Y+26, r25	; 0x1a
    27f8:	ab 8f       	std	Y+27, r26	; 0x1b
    27fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	69 8d       	ldd	r22, Y+25	; 0x19
    27fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2800:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2802:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a e7       	ldi	r20, 0x7A	; 122
    280a:	55 e4       	ldi	r21, 0x45	; 69
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	8d 8b       	std	Y+21, r24	; 0x15
    2816:	9e 8b       	std	Y+22, r25	; 0x16
    2818:	af 8b       	std	Y+23, r26	; 0x17
    281a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    281c:	6d 89       	ldd	r22, Y+21	; 0x15
    281e:	7e 89       	ldd	r23, Y+22	; 0x16
    2820:	8f 89       	ldd	r24, Y+23	; 0x17
    2822:	98 8d       	ldd	r25, Y+24	; 0x18
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2830:	88 23       	and	r24, r24
    2832:	2c f4       	brge	.+10     	; 0x283e <LCD_enuInit+0x1c6>
		__ticks = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9c 8b       	std	Y+20, r25	; 0x14
    283a:	8b 8b       	std	Y+19, r24	; 0x13
    283c:	3f c0       	rjmp	.+126    	; 0x28bc <LCD_enuInit+0x244>
	else if (__tmp > 65535)
    283e:	6d 89       	ldd	r22, Y+21	; 0x15
    2840:	7e 89       	ldd	r23, Y+22	; 0x16
    2842:	8f 89       	ldd	r24, Y+23	; 0x17
    2844:	98 8d       	ldd	r25, Y+24	; 0x18
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	4c f5       	brge	.+82     	; 0x28a8 <LCD_enuInit+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	69 8d       	ldd	r22, Y+25	; 0x19
    2858:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9c 8b       	std	Y+20, r25	; 0x14
    287c:	8b 8b       	std	Y+19, r24	; 0x13
    287e:	0f c0       	rjmp	.+30     	; 0x289e <LCD_enuInit+0x226>
    2880:	80 e9       	ldi	r24, 0x90	; 144
    2882:	91 e0       	ldi	r25, 0x01	; 1
    2884:	9a 8b       	std	Y+18, r25	; 0x12
    2886:	89 8b       	std	Y+17, r24	; 0x11
    2888:	89 89       	ldd	r24, Y+17	; 0x11
    288a:	9a 89       	ldd	r25, Y+18	; 0x12
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <LCD_enuInit+0x214>
    2890:	9a 8b       	std	Y+18, r25	; 0x12
    2892:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	8b 89       	ldd	r24, Y+19	; 0x13
    2896:	9c 89       	ldd	r25, Y+20	; 0x14
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	9c 8b       	std	Y+20, r25	; 0x14
    289c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289e:	8b 89       	ldd	r24, Y+19	; 0x13
    28a0:	9c 89       	ldd	r25, Y+20	; 0x14
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	69 f7       	brne	.-38     	; 0x2880 <LCD_enuInit+0x208>
    28a6:	14 c0       	rjmp	.+40     	; 0x28d0 <LCD_enuInit+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	6d 89       	ldd	r22, Y+21	; 0x15
    28aa:	7e 89       	ldd	r23, Y+22	; 0x16
    28ac:	8f 89       	ldd	r24, Y+23	; 0x17
    28ae:	98 8d       	ldd	r25, Y+24	; 0x18
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9c 8b       	std	Y+20, r25	; 0x14
    28ba:	8b 8b       	std	Y+19, r24	; 0x13
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	98 8b       	std	Y+16, r25	; 0x10
    28c2:	8f 87       	std	Y+15, r24	; 0x0f
    28c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c6:	98 89       	ldd	r25, Y+16	; 0x10
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_enuInit+0x250>
    28cc:	98 8b       	std	Y+16, r25	; 0x10
    28ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	63 e0       	ldi	r22, 0x03	; 3
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e8       	ldi	r26, 0x80	; 128
    28e0:	b0 e4       	ldi	r27, 0x40	; 64
    28e2:	8b 87       	std	Y+11, r24	; 0x0b
    28e4:	9c 87       	std	Y+12, r25	; 0x0c
    28e6:	ad 87       	std	Y+13, r26	; 0x0d
    28e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	4a e7       	ldi	r20, 0x7A	; 122
    28f8:	55 e4       	ldi	r21, 0x45	; 69
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	8f 83       	std	Y+7, r24	; 0x07
    2904:	98 87       	std	Y+8, r25	; 0x08
    2906:	a9 87       	std	Y+9, r26	; 0x09
    2908:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    290a:	6f 81       	ldd	r22, Y+7	; 0x07
    290c:	78 85       	ldd	r23, Y+8	; 0x08
    290e:	89 85       	ldd	r24, Y+9	; 0x09
    2910:	9a 85       	ldd	r25, Y+10	; 0x0a
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e8       	ldi	r20, 0x80	; 128
    2918:	5f e3       	ldi	r21, 0x3F	; 63
    291a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291e:	88 23       	and	r24, r24
    2920:	2c f4       	brge	.+10     	; 0x292c <LCD_enuInit+0x2b4>
		__ticks = 1;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	3f c0       	rjmp	.+126    	; 0x29aa <LCD_enuInit+0x332>
	else if (__tmp > 65535)
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	4f e7       	ldi	r20, 0x7F	; 127
    293a:	57 e4       	ldi	r21, 0x47	; 71
    293c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2940:	18 16       	cp	r1, r24
    2942:	4c f5       	brge	.+82     	; 0x2996 <LCD_enuInit+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2944:	6b 85       	ldd	r22, Y+11	; 0x0b
    2946:	7c 85       	ldd	r23, Y+12	; 0x0c
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e2       	ldi	r20, 0x20	; 32
    2952:	51 e4       	ldi	r21, 0x41	; 65
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	bc 01       	movw	r22, r24
    295e:	cd 01       	movw	r24, r26
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	0f c0       	rjmp	.+30     	; 0x298c <LCD_enuInit+0x314>
    296e:	80 e9       	ldi	r24, 0x90	; 144
    2970:	91 e0       	ldi	r25, 0x01	; 1
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	8b 83       	std	Y+3, r24	; 0x03
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <LCD_enuInit+0x302>
    297e:	9c 83       	std	Y+4, r25	; 0x04
    2980:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	69 f7       	brne	.-38     	; 0x296e <LCD_enuInit+0x2f6>
    2994:	14 c0       	rjmp	.+40     	; 0x29be <LCD_enuInit+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <LCD_enuInit+0x33e>
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x28 );
    29c8:	88 e2       	ldi	r24, 0x28	; 40
    29ca:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>

#endif

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	61 e0       	ldi	r22, 0x01	; 1
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x8 );//Display still OFF
    29d8:	88 e0       	ldi	r24, 0x08	; 8
    29da:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	61 e0       	ldi	r22, 0x01	; 1
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x1 );
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	61 e0       	ldi	r22, 0x01	; 1
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x6 );
    29f8:	86 e0       	ldi	r24, 0x06	; 6
    29fa:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>



	return Local_enuErrorState;
    29fe:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    2a00:	ab 96       	adiw	r28, 0x2b	; 43
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <LCD_enuWriteData+0x6>
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	61 e0       	ldi	r22, 0x01	; 1
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( Copy_u8Data );
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Cmnd)
{
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <LCD_enuWriteCommand+0x6>
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	61 e0       	ldi	r22, 0x01	; 1
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( Copy_u8Cmnd );
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>


	return Local_enuErrorState;
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
    2a6a:	df 93       	push	r29
    2a6c:	cf 93       	push	r28
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <LCD_enuWriteString+0x6>
    2a70:	0f 92       	push	r0
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	9b 83       	std	Y+3, r25	; 0x03
    2a78:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	10 c0       	rjmp	.+32     	; 0x2aa0 <LCD_enuWriteString+0x36>

	while (*Copy_pcString)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	61 e0       	ldi	r22, 0x01	; 1
    2a84:	41 e0       	ldi	r20, 0x01	; 1
    2a86:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch( *Copy_pcString++ );
    2a8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2a8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2a8e:	20 81       	ld	r18, Z
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	9b 81       	ldd	r25, Y+3	; 0x03
    2a94:	01 96       	adiw	r24, 0x01	; 1
    2a96:	9b 83       	std	Y+3, r25	; 0x03
    2a98:	8a 83       	std	Y+2, r24	; 0x02
    2a9a:	82 2f       	mov	r24, r18
    2a9c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
	ES_t Local_enuErrorState = ES_NOK;

	while (*Copy_pcString)
    2aa0:	ea 81       	ldd	r30, Y+2	; 0x02
    2aa2:	fb 81       	ldd	r31, Y+3	; 0x03
    2aa4:	80 81       	ld	r24, Z
    2aa6:	88 23       	and	r24, r24
    2aa8:	59 f7       	brne	.-42     	; 0x2a80 <LCD_enuWriteString+0x16>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch( *Copy_pcString++ );
	}

	return Local_enuErrorState;
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <LCD_enuGoToPosition>:


ES_t LCD_enuGoToPosition(u8 Copy_u8Row , u8 Copy_u8Column)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <LCD_enuGoToPosition+0x6>
    2abe:	0f 92       	push	r0
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	8a 83       	std	Y+2, r24	; 0x02
    2ac6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Row >= 1 && Copy_u8Row <=2 &&
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	88 23       	and	r24, r24
    2ad0:	09 f1       	breq	.+66     	; 0x2b14 <LCD_enuGoToPosition+0x5c>
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	83 30       	cpi	r24, 0x03	; 3
    2ad6:	f0 f4       	brcc	.+60     	; 0x2b14 <LCD_enuGoToPosition+0x5c>
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	88 23       	and	r24, r24
    2adc:	d9 f0       	breq	.+54     	; 0x2b14 <LCD_enuGoToPosition+0x5c>
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	81 31       	cpi	r24, 0x11	; 17
    2ae2:	c0 f4       	brcc	.+48     	; 0x2b14 <LCD_enuGoToPosition+0x5c>
			Copy_u8Column >=1 && Copy_u8Column <=16)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	61 e0       	ldi	r22, 0x01	; 1
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch( 0x80 + ( Copy_u8Row - 1 )*0x40 + ( Copy_u8Column - 1 ) );
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	88 2f       	mov	r24, r24
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	00 24       	eor	r0, r0
    2af8:	96 95       	lsr	r25
    2afa:	87 95       	ror	r24
    2afc:	07 94       	ror	r0
    2afe:	96 95       	lsr	r25
    2b00:	87 95       	ror	r24
    2b02:	07 94       	ror	r0
    2b04:	98 2f       	mov	r25, r24
    2b06:	80 2d       	mov	r24, r0
    2b08:	98 2f       	mov	r25, r24
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	89 0f       	add	r24, r25
    2b0e:	81 50       	subi	r24, 0x01	; 1
    2b10:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
	}
	return Local_enuErrorState;
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch(u8 Copy_u8Byte)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	e9 97       	sbiw	r28, 0x39	; 57
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	89 af       	std	Y+57, r24	; 0x39
#if RW_GRP != NC  && RW_PIN != NC
	DIO_enuSetPinValue(RW_GRP , RW_PIN , DIO_u8LOW);
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	62 e0       	ldi	r22, 0x02	; 2
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
#endif
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	63 e0       	ldi	r22, 0x03	; 3
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
	_delay_ms(4);


#elif LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 7 )&1 ));
    2b4c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b4e:	98 2f       	mov	r25, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	99 27       	eor	r25, r25
    2b54:	99 1f       	adc	r25, r25
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	67 e0       	ldi	r22, 0x07	; 7
    2b5a:	49 2f       	mov	r20, r25
    2b5c:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 6 )&1 ));
    2b60:	89 ad       	ldd	r24, Y+57	; 0x39
    2b62:	82 95       	swap	r24
    2b64:	86 95       	lsr	r24
    2b66:	86 95       	lsr	r24
    2b68:	83 70       	andi	r24, 0x03	; 3
    2b6a:	98 2f       	mov	r25, r24
    2b6c:	91 70       	andi	r25, 0x01	; 1
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	66 e0       	ldi	r22, 0x06	; 6
    2b72:	49 2f       	mov	r20, r25
    2b74:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 5 )&1 ));
    2b78:	89 ad       	ldd	r24, Y+57	; 0x39
    2b7a:	82 95       	swap	r24
    2b7c:	86 95       	lsr	r24
    2b7e:	87 70       	andi	r24, 0x07	; 7
    2b80:	98 2f       	mov	r25, r24
    2b82:	91 70       	andi	r25, 0x01	; 1
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	65 e0       	ldi	r22, 0x05	; 5
    2b88:	49 2f       	mov	r20, r25
    2b8a:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 4 )&1 ));
    2b8e:	89 ad       	ldd	r24, Y+57	; 0x39
    2b90:	82 95       	swap	r24
    2b92:	8f 70       	andi	r24, 0x0F	; 15
    2b94:	98 2f       	mov	r25, r24
    2b96:	91 70       	andi	r25, 0x01	; 1
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	64 e0       	ldi	r22, 0x04	; 4
    2b9c:	49 2f       	mov	r20, r25
    2b9e:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	63 e0       	ldi	r22, 0x03	; 3
    2ba6:	41 e0       	ldi	r20, 0x01	; 1
    2ba8:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a0 e8       	ldi	r26, 0x80	; 128
    2bb2:	bf e3       	ldi	r27, 0x3F	; 63
    2bb4:	8d ab       	std	Y+53, r24	; 0x35
    2bb6:	9e ab       	std	Y+54, r25	; 0x36
    2bb8:	af ab       	std	Y+55, r26	; 0x37
    2bba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	6d a9       	ldd	r22, Y+53	; 0x35
    2bbe:	7e a9       	ldd	r23, Y+54	; 0x36
    2bc0:	8f a9       	ldd	r24, Y+55	; 0x37
    2bc2:	98 ad       	ldd	r25, Y+56	; 0x38
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a e7       	ldi	r20, 0x7A	; 122
    2bca:	55 e4       	ldi	r21, 0x45	; 69
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	89 ab       	std	Y+49, r24	; 0x31
    2bd6:	9a ab       	std	Y+50, r25	; 0x32
    2bd8:	ab ab       	std	Y+51, r26	; 0x33
    2bda:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bdc:	69 a9       	ldd	r22, Y+49	; 0x31
    2bde:	7a a9       	ldd	r23, Y+50	; 0x32
    2be0:	8b a9       	ldd	r24, Y+51	; 0x33
    2be2:	9c a9       	ldd	r25, Y+52	; 0x34
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf0:	88 23       	and	r24, r24
    2bf2:	2c f4       	brge	.+10     	; 0x2bfe <LCD_enuWriteNLatch+0xdc>
		__ticks = 1;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	98 ab       	std	Y+48, r25	; 0x30
    2bfa:	8f a7       	std	Y+47, r24	; 0x2f
    2bfc:	3f c0       	rjmp	.+126    	; 0x2c7c <LCD_enuWriteNLatch+0x15a>
	else if (__tmp > 65535)
    2bfe:	69 a9       	ldd	r22, Y+49	; 0x31
    2c00:	7a a9       	ldd	r23, Y+50	; 0x32
    2c02:	8b a9       	ldd	r24, Y+51	; 0x33
    2c04:	9c a9       	ldd	r25, Y+52	; 0x34
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	3f ef       	ldi	r19, 0xFF	; 255
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	57 e4       	ldi	r21, 0x47	; 71
    2c0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	4c f5       	brge	.+82     	; 0x2c68 <LCD_enuWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c16:	6d a9       	ldd	r22, Y+53	; 0x35
    2c18:	7e a9       	ldd	r23, Y+54	; 0x36
    2c1a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c1c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	40 e2       	ldi	r20, 0x20	; 32
    2c24:	51 e4       	ldi	r21, 0x41	; 65
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	98 ab       	std	Y+48, r25	; 0x30
    2c3c:	8f a7       	std	Y+47, r24	; 0x2f
    2c3e:	0f c0       	rjmp	.+30     	; 0x2c5e <LCD_enuWriteNLatch+0x13c>
    2c40:	80 e9       	ldi	r24, 0x90	; 144
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	9e a7       	std	Y+46, r25	; 0x2e
    2c46:	8d a7       	std	Y+45, r24	; 0x2d
    2c48:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c4a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <LCD_enuWriteNLatch+0x12a>
    2c50:	9e a7       	std	Y+46, r25	; 0x2e
    2c52:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c54:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c56:	98 a9       	ldd	r25, Y+48	; 0x30
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	98 ab       	std	Y+48, r25	; 0x30
    2c5c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c60:	98 a9       	ldd	r25, Y+48	; 0x30
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	69 f7       	brne	.-38     	; 0x2c40 <LCD_enuWriteNLatch+0x11e>
    2c66:	14 c0       	rjmp	.+40     	; 0x2c90 <LCD_enuWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c68:	69 a9       	ldd	r22, Y+49	; 0x31
    2c6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	98 ab       	std	Y+48, r25	; 0x30
    2c7a:	8f a7       	std	Y+47, r24	; 0x2f
    2c7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c80:	9c a7       	std	Y+44, r25	; 0x2c
    2c82:	8b a7       	std	Y+43, r24	; 0x2b
    2c84:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c86:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <LCD_enuWriteNLatch+0x166>
    2c8c:	9c a7       	std	Y+44, r25	; 0x2c
    2c8e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	63 e0       	ldi	r22, 0x03	; 3
    2c94:	40 e0       	ldi	r20, 0x00	; 0
    2c96:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	a0 e8       	ldi	r26, 0x80	; 128
    2ca0:	b0 e4       	ldi	r27, 0x40	; 64
    2ca2:	8f a3       	std	Y+39, r24	; 0x27
    2ca4:	98 a7       	std	Y+40, r25	; 0x28
    2ca6:	a9 a7       	std	Y+41, r26	; 0x29
    2ca8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2caa:	6f a1       	ldd	r22, Y+39	; 0x27
    2cac:	78 a5       	ldd	r23, Y+40	; 0x28
    2cae:	89 a5       	ldd	r24, Y+41	; 0x29
    2cb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4a e7       	ldi	r20, 0x7A	; 122
    2cb8:	55 e4       	ldi	r21, 0x45	; 69
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	8b a3       	std	Y+35, r24	; 0x23
    2cc4:	9c a3       	std	Y+36, r25	; 0x24
    2cc6:	ad a3       	std	Y+37, r26	; 0x25
    2cc8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cca:	6b a1       	ldd	r22, Y+35	; 0x23
    2ccc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cce:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e8       	ldi	r20, 0x80	; 128
    2cd8:	5f e3       	ldi	r21, 0x3F	; 63
    2cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cde:	88 23       	and	r24, r24
    2ce0:	2c f4       	brge	.+10     	; 0x2cec <LCD_enuWriteNLatch+0x1ca>
		__ticks = 1;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	9a a3       	std	Y+34, r25	; 0x22
    2ce8:	89 a3       	std	Y+33, r24	; 0x21
    2cea:	3f c0       	rjmp	.+126    	; 0x2d6a <LCD_enuWriteNLatch+0x248>
	else if (__tmp > 65535)
    2cec:	6b a1       	ldd	r22, Y+35	; 0x23
    2cee:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	3f ef       	ldi	r19, 0xFF	; 255
    2cf8:	4f e7       	ldi	r20, 0x7F	; 127
    2cfa:	57 e4       	ldi	r21, 0x47	; 71
    2cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d00:	18 16       	cp	r1, r24
    2d02:	4c f5       	brge	.+82     	; 0x2d56 <LCD_enuWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d04:	6f a1       	ldd	r22, Y+39	; 0x27
    2d06:	78 a5       	ldd	r23, Y+40	; 0x28
    2d08:	89 a5       	ldd	r24, Y+41	; 0x29
    2d0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e2       	ldi	r20, 0x20	; 32
    2d12:	51 e4       	ldi	r21, 0x41	; 65
    2d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	bc 01       	movw	r22, r24
    2d1e:	cd 01       	movw	r24, r26
    2d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	9a a3       	std	Y+34, r25	; 0x22
    2d2a:	89 a3       	std	Y+33, r24	; 0x21
    2d2c:	0f c0       	rjmp	.+30     	; 0x2d4c <LCD_enuWriteNLatch+0x22a>
    2d2e:	80 e9       	ldi	r24, 0x90	; 144
    2d30:	91 e0       	ldi	r25, 0x01	; 1
    2d32:	98 a3       	std	Y+32, r25	; 0x20
    2d34:	8f 8f       	std	Y+31, r24	; 0x1f
    2d36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d38:	98 a1       	ldd	r25, Y+32	; 0x20
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <LCD_enuWriteNLatch+0x218>
    2d3e:	98 a3       	std	Y+32, r25	; 0x20
    2d40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d42:	89 a1       	ldd	r24, Y+33	; 0x21
    2d44:	9a a1       	ldd	r25, Y+34	; 0x22
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	9a a3       	std	Y+34, r25	; 0x22
    2d4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	69 f7       	brne	.-38     	; 0x2d2e <LCD_enuWriteNLatch+0x20c>
    2d54:	14 c0       	rjmp	.+40     	; 0x2d7e <LCD_enuWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d56:	6b a1       	ldd	r22, Y+35	; 0x23
    2d58:	7c a1       	ldd	r23, Y+36	; 0x24
    2d5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	9a a3       	std	Y+34, r25	; 0x22
    2d68:	89 a3       	std	Y+33, r24	; 0x21
    2d6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d6e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d70:	8d 8f       	std	Y+29, r24	; 0x1d
    2d72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <LCD_enuWriteNLatch+0x254>
    2d7a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d7c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4);

	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 3 )&1 ));
    2d7e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d80:	86 95       	lsr	r24
    2d82:	86 95       	lsr	r24
    2d84:	86 95       	lsr	r24
    2d86:	98 2f       	mov	r25, r24
    2d88:	91 70       	andi	r25, 0x01	; 1
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	67 e0       	ldi	r22, 0x07	; 7
    2d8e:	49 2f       	mov	r20, r25
    2d90:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 2 )&1 ));
    2d94:	89 ad       	ldd	r24, Y+57	; 0x39
    2d96:	86 95       	lsr	r24
    2d98:	86 95       	lsr	r24
    2d9a:	98 2f       	mov	r25, r24
    2d9c:	91 70       	andi	r25, 0x01	; 1
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	66 e0       	ldi	r22, 0x06	; 6
    2da2:	49 2f       	mov	r20, r25
    2da4:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 1 )&1 ));
    2da8:	89 ad       	ldd	r24, Y+57	; 0x39
    2daa:	86 95       	lsr	r24
    2dac:	98 2f       	mov	r25, r24
    2dae:	91 70       	andi	r25, 0x01	; 1
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	65 e0       	ldi	r22, 0x05	; 5
    2db4:	49 2f       	mov	r20, r25
    2db6:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 0 )&1 ));
    2dba:	89 ad       	ldd	r24, Y+57	; 0x39
    2dbc:	98 2f       	mov	r25, r24
    2dbe:	91 70       	andi	r25, 0x01	; 1
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	64 e0       	ldi	r22, 0x04	; 4
    2dc4:	49 2f       	mov	r20, r25
    2dc6:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	63 e0       	ldi	r22, 0x03	; 3
    2dce:	41 e0       	ldi	r20, 0x01	; 1
    2dd0:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	a0 e8       	ldi	r26, 0x80	; 128
    2dda:	bf e3       	ldi	r27, 0x3F	; 63
    2ddc:	89 8f       	std	Y+25, r24	; 0x19
    2dde:	9a 8f       	std	Y+26, r25	; 0x1a
    2de0:	ab 8f       	std	Y+27, r26	; 0x1b
    2de2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de4:	69 8d       	ldd	r22, Y+25	; 0x19
    2de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	4a e7       	ldi	r20, 0x7A	; 122
    2df2:	55 e4       	ldi	r21, 0x45	; 69
    2df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	8d 8b       	std	Y+21, r24	; 0x15
    2dfe:	9e 8b       	std	Y+22, r25	; 0x16
    2e00:	af 8b       	std	Y+23, r26	; 0x17
    2e02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e04:	6d 89       	ldd	r22, Y+21	; 0x15
    2e06:	7e 89       	ldd	r23, Y+22	; 0x16
    2e08:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e8       	ldi	r20, 0x80	; 128
    2e12:	5f e3       	ldi	r21, 0x3F	; 63
    2e14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e18:	88 23       	and	r24, r24
    2e1a:	2c f4       	brge	.+10     	; 0x2e26 <LCD_enuWriteNLatch+0x304>
		__ticks = 1;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	9c 8b       	std	Y+20, r25	; 0x14
    2e22:	8b 8b       	std	Y+19, r24	; 0x13
    2e24:	3f c0       	rjmp	.+126    	; 0x2ea4 <LCD_enuWriteNLatch+0x382>
	else if (__tmp > 65535)
    2e26:	6d 89       	ldd	r22, Y+21	; 0x15
    2e28:	7e 89       	ldd	r23, Y+22	; 0x16
    2e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	3f ef       	ldi	r19, 0xFF	; 255
    2e32:	4f e7       	ldi	r20, 0x7F	; 127
    2e34:	57 e4       	ldi	r21, 0x47	; 71
    2e36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e3a:	18 16       	cp	r1, r24
    2e3c:	4c f5       	brge	.+82     	; 0x2e90 <LCD_enuWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e2       	ldi	r20, 0x20	; 32
    2e4c:	51 e4       	ldi	r21, 0x41	; 65
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	bc 01       	movw	r22, r24
    2e58:	cd 01       	movw	r24, r26
    2e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	9c 8b       	std	Y+20, r25	; 0x14
    2e64:	8b 8b       	std	Y+19, r24	; 0x13
    2e66:	0f c0       	rjmp	.+30     	; 0x2e86 <LCD_enuWriteNLatch+0x364>
    2e68:	80 e9       	ldi	r24, 0x90	; 144
    2e6a:	91 e0       	ldi	r25, 0x01	; 1
    2e6c:	9a 8b       	std	Y+18, r25	; 0x12
    2e6e:	89 8b       	std	Y+17, r24	; 0x11
    2e70:	89 89       	ldd	r24, Y+17	; 0x11
    2e72:	9a 89       	ldd	r25, Y+18	; 0x12
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <LCD_enuWriteNLatch+0x352>
    2e78:	9a 8b       	std	Y+18, r25	; 0x12
    2e7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	9c 8b       	std	Y+20, r25	; 0x14
    2e84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e86:	8b 89       	ldd	r24, Y+19	; 0x13
    2e88:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	69 f7       	brne	.-38     	; 0x2e68 <LCD_enuWriteNLatch+0x346>
    2e8e:	14 c0       	rjmp	.+40     	; 0x2eb8 <LCD_enuWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e90:	6d 89       	ldd	r22, Y+21	; 0x15
    2e92:	7e 89       	ldd	r23, Y+22	; 0x16
    2e94:	8f 89       	ldd	r24, Y+23	; 0x17
    2e96:	98 8d       	ldd	r25, Y+24	; 0x18
    2e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	9c 8b       	std	Y+20, r25	; 0x14
    2ea2:	8b 8b       	std	Y+19, r24	; 0x13
    2ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea8:	98 8b       	std	Y+16, r25	; 0x10
    2eaa:	8f 87       	std	Y+15, r24	; 0x0f
    2eac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eae:	98 89       	ldd	r25, Y+16	; 0x10
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <LCD_enuWriteNLatch+0x38e>
    2eb4:	98 8b       	std	Y+16, r25	; 0x10
    2eb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	63 e0       	ldi	r22, 0x03	; 3
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a0 e8       	ldi	r26, 0x80	; 128
    2ec8:	b0 e4       	ldi	r27, 0x40	; 64
    2eca:	8b 87       	std	Y+11, r24	; 0x0b
    2ecc:	9c 87       	std	Y+12, r25	; 0x0c
    2ece:	ad 87       	std	Y+13, r26	; 0x0d
    2ed0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	4a e7       	ldi	r20, 0x7A	; 122
    2ee0:	55 e4       	ldi	r21, 0x45	; 69
    2ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	8f 83       	std	Y+7, r24	; 0x07
    2eec:	98 87       	std	Y+8, r25	; 0x08
    2eee:	a9 87       	std	Y+9, r26	; 0x09
    2ef0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef4:	78 85       	ldd	r23, Y+8	; 0x08
    2ef6:	89 85       	ldd	r24, Y+9	; 0x09
    2ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e8       	ldi	r20, 0x80	; 128
    2f00:	5f e3       	ldi	r21, 0x3F	; 63
    2f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f06:	88 23       	and	r24, r24
    2f08:	2c f4       	brge	.+10     	; 0x2f14 <LCD_enuWriteNLatch+0x3f2>
		__ticks = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	9e 83       	std	Y+6, r25	; 0x06
    2f10:	8d 83       	std	Y+5, r24	; 0x05
    2f12:	3f c0       	rjmp	.+126    	; 0x2f92 <LCD_enuWriteNLatch+0x470>
	else if (__tmp > 65535)
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	3f ef       	ldi	r19, 0xFF	; 255
    2f20:	4f e7       	ldi	r20, 0x7F	; 127
    2f22:	57 e4       	ldi	r21, 0x47	; 71
    2f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f28:	18 16       	cp	r1, r24
    2f2a:	4c f5       	brge	.+82     	; 0x2f7e <LCD_enuWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e2       	ldi	r20, 0x20	; 32
    2f3a:	51 e4       	ldi	r21, 0x41	; 65
    2f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	bc 01       	movw	r22, r24
    2f46:	cd 01       	movw	r24, r26
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	9e 83       	std	Y+6, r25	; 0x06
    2f52:	8d 83       	std	Y+5, r24	; 0x05
    2f54:	0f c0       	rjmp	.+30     	; 0x2f74 <LCD_enuWriteNLatch+0x452>
    2f56:	80 e9       	ldi	r24, 0x90	; 144
    2f58:	91 e0       	ldi	r25, 0x01	; 1
    2f5a:	9c 83       	std	Y+4, r25	; 0x04
    2f5c:	8b 83       	std	Y+3, r24	; 0x03
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	9c 81       	ldd	r25, Y+4	; 0x04
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	f1 f7       	brne	.-4      	; 0x2f62 <LCD_enuWriteNLatch+0x440>
    2f66:	9c 83       	std	Y+4, r25	; 0x04
    2f68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	9e 81       	ldd	r25, Y+6	; 0x06
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	69 f7       	brne	.-38     	; 0x2f56 <LCD_enuWriteNLatch+0x434>
    2f7c:	14 c0       	rjmp	.+40     	; 0x2fa6 <LCD_enuWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f80:	78 85       	ldd	r23, Y+8	; 0x08
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	9e 83       	std	Y+6, r25	; 0x06
    2f90:	8d 83       	std	Y+5, r24	; 0x05
    2f92:	8d 81       	ldd	r24, Y+5	; 0x05
    2f94:	9e 81       	ldd	r25, Y+6	; 0x06
    2f96:	9a 83       	std	Y+2, r25	; 0x02
    2f98:	89 83       	std	Y+1, r24	; 0x01
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <LCD_enuWriteNLatch+0x47c>
    2fa2:	9a 83       	std	Y+2, r25	; 0x02
    2fa4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);
#else
#error "LCD mode is wrong ya 7aywan"
#endif
	return ES_OK;
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
}
    2fa8:	e9 96       	adiw	r28, 0x39	; 57
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <LCD_enuWriteIntegerNum>:

/*		ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)		*/
ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)
{
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	2d 97       	sbiw	r28, 0x0d	; 13
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	69 87       	std	Y+9, r22	; 0x09
    2fd0:	7a 87       	std	Y+10, r23	; 0x0a
    2fd2:	8b 87       	std	Y+11, r24	; 0x0b
    2fd4:	9c 87       	std	Y+12, r25	; 0x0c
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8DigitCounter = 1 ;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	8d 83       	std	Y+5, r24	; 0x05

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	61 e0       	ldi	r22, 0x01	; 1
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    2fe8:	8f 83       	std	Y+7, r24	; 0x07
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2fea:	86 e0       	ldi	r24, 0x06	; 6
    2fec:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    2ff0:	88 87       	std	Y+8, r24	; 0x08

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff4:	88 23       	and	r24, r24
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <LCD_enuWriteIntegerNum+0x40>
    2ff8:	eb c0       	rjmp	.+470    	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
    2ffa:	88 85       	ldd	r24, Y+8	; 0x08
    2ffc:	88 23       	and	r24, r24
    2ffe:	09 f0       	breq	.+2      	; 0x3002 <LCD_enuWriteIntegerNum+0x48>
    3000:	e7 c0       	rjmp	.+462    	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
	{
		if( Copy_s32Num < 0 )
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	ab 85       	ldd	r26, Y+11	; 0x0b
    3008:	bc 85       	ldd	r27, Y+12	; 0x0c
    300a:	bb 23       	and	r27, r27
    300c:	cc f4       	brge	.+50     	; 0x3040 <LCD_enuWriteIntegerNum+0x86>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	61 e0       	ldi	r22, 0x01	; 1
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3018:	8f 83       	std	Y+7, r24	; 0x07
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    301a:	8d e2       	ldi	r24, 0x2D	; 45
    301c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3020:	88 87       	std	Y+8, r24	; 0x08
			Copy_s32Num = - Copy_s32Num;
    3022:	89 85       	ldd	r24, Y+9	; 0x09
    3024:	9a 85       	ldd	r25, Y+10	; 0x0a
    3026:	ab 85       	ldd	r26, Y+11	; 0x0b
    3028:	bc 85       	ldd	r27, Y+12	; 0x0c
    302a:	b0 95       	com	r27
    302c:	a0 95       	com	r26
    302e:	90 95       	com	r25
    3030:	81 95       	neg	r24
    3032:	9f 4f       	sbci	r25, 0xFF	; 255
    3034:	af 4f       	sbci	r26, 0xFF	; 255
    3036:	bf 4f       	sbci	r27, 0xFF	; 255
    3038:	89 87       	std	Y+9, r24	; 0x09
    303a:	9a 87       	std	Y+10, r25	; 0x0a
    303c:	ab 87       	std	Y+11, r26	; 0x0b
    303e:	bc 87       	std	Y+12, r27	; 0x0c
		}

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3040:	8f 81       	ldd	r24, Y+7	; 0x07
    3042:	88 23       	and	r24, r24
    3044:	09 f0       	breq	.+2      	; 0x3048 <LCD_enuWriteIntegerNum+0x8e>
    3046:	c4 c0       	rjmp	.+392    	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
    3048:	88 85       	ldd	r24, Y+8	; 0x08
    304a:	88 23       	and	r24, r24
    304c:	09 f0       	breq	.+2      	; 0x3050 <LCD_enuWriteIntegerNum+0x96>
    304e:	c0 c0       	rjmp	.+384    	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
		{
			u32 Local_u32Number = Copy_s32Num;
    3050:	89 85       	ldd	r24, Y+9	; 0x09
    3052:	9a 85       	ldd	r25, Y+10	; 0x0a
    3054:	ab 85       	ldd	r26, Y+11	; 0x0b
    3056:	bc 85       	ldd	r27, Y+12	; 0x0c
    3058:	89 83       	std	Y+1, r24	; 0x01
    305a:	9a 83       	std	Y+2, r25	; 0x02
    305c:	ab 83       	std	Y+3, r26	; 0x03
    305e:	bc 83       	std	Y+4, r27	; 0x04
    3060:	1c c0       	rjmp	.+56     	; 0x309a <LCD_enuWriteIntegerNum+0xe0>

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	61 e0       	ldi	r22, 0x01	; 1
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    306c:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    306e:	84 e1       	ldi	r24, 0x14	; 20
    3070:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3074:	88 87       	std	Y+8, r24	; 0x08
				Local_u32Number /=10;
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	9a 81       	ldd	r25, Y+2	; 0x02
    307a:	ab 81       	ldd	r26, Y+3	; 0x03
    307c:	bc 81       	ldd	r27, Y+4	; 0x04
    307e:	2a e0       	ldi	r18, 0x0A	; 10
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	0e 94 28 24 	call	0x4850	; 0x4850 <__udivmodsi4>
    308e:	da 01       	movw	r26, r20
    3090:	c9 01       	movw	r24, r18
    3092:	89 83       	std	Y+1, r24	; 0x01
    3094:	9a 83       	std	Y+2, r25	; 0x02
    3096:	ab 83       	std	Y+3, r26	; 0x03
    3098:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			u32 Local_u32Number = Copy_s32Num;

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	9a 81       	ldd	r25, Y+2	; 0x02
    309e:	ab 81       	ldd	r26, Y+3	; 0x03
    30a0:	bc 81       	ldd	r27, Y+4	; 0x04
    30a2:	8b 30       	cpi	r24, 0x0B	; 11
    30a4:	91 05       	cpc	r25, r1
    30a6:	a1 05       	cpc	r26, r1
    30a8:	b1 05       	cpc	r27, r1
    30aa:	30 f0       	brcs	.+12     	; 0x30b8 <LCD_enuWriteIntegerNum+0xfe>
    30ac:	8f 81       	ldd	r24, Y+7	; 0x07
    30ae:	88 23       	and	r24, r24
    30b0:	19 f4       	brne	.+6      	; 0x30b8 <LCD_enuWriteIntegerNum+0xfe>
    30b2:	88 85       	ldd	r24, Y+8	; 0x08
    30b4:	88 23       	and	r24, r24
    30b6:	a9 f2       	breq	.-86     	; 0x3062 <LCD_enuWriteIntegerNum+0xa8>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    30b8:	8f 81       	ldd	r24, Y+7	; 0x07
    30ba:	88 23       	and	r24, r24
    30bc:	09 f0       	breq	.+2      	; 0x30c0 <LCD_enuWriteIntegerNum+0x106>
    30be:	88 c0       	rjmp	.+272    	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
    30c0:	88 85       	ldd	r24, Y+8	; 0x08
    30c2:	88 23       	and	r24, r24
    30c4:	09 f0       	breq	.+2      	; 0x30c8 <LCD_enuWriteIntegerNum+0x10e>
    30c6:	84 c0       	rjmp	.+264    	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	61 e0       	ldi	r22, 0x01	; 1
    30cc:	40 e0       	ldi	r20, 0x00	; 0
    30ce:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    30d2:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    30d4:	84 e0       	ldi	r24, 0x04	; 4
    30d6:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    30da:	88 87       	std	Y+8, r24	; 0x08

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    30dc:	8f 81       	ldd	r24, Y+7	; 0x07
    30de:	88 23       	and	r24, r24
    30e0:	09 f0       	breq	.+2      	; 0x30e4 <LCD_enuWriteIntegerNum+0x12a>
    30e2:	76 c0       	rjmp	.+236    	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
    30e4:	88 85       	ldd	r24, Y+8	; 0x08
    30e6:	88 23       	and	r24, r24
    30e8:	09 f0       	breq	.+2      	; 0x30ec <LCD_enuWriteIntegerNum+0x132>
    30ea:	72 c0       	rjmp	.+228    	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
    30ec:	2d c0       	rjmp	.+90     	; 0x3148 <LCD_enuWriteIntegerNum+0x18e>
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
					{
						Local_u8DigitCounter++;
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
    30f0:	8f 5f       	subi	r24, 0xFF	; 255
    30f2:	8d 83       	std	Y+5, r24	; 0x05
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	41 e0       	ldi	r20, 0x01	; 1
    30fa:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    30fe:	8f 83       	std	Y+7, r24	; 0x07
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
    3100:	89 85       	ldd	r24, Y+9	; 0x09
    3102:	9a 85       	ldd	r25, Y+10	; 0x0a
    3104:	ab 85       	ldd	r26, Y+11	; 0x0b
    3106:	bc 85       	ldd	r27, Y+12	; 0x0c
    3108:	2a e0       	ldi	r18, 0x0A	; 10
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e0       	ldi	r20, 0x00	; 0
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	bc 01       	movw	r22, r24
    3112:	cd 01       	movw	r24, r26
    3114:	0e 94 4a 24 	call	0x4894	; 0x4894 <__divmodsi4>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	80 5d       	subi	r24, 0xD0	; 208
    311e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3122:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
    3124:	89 85       	ldd	r24, Y+9	; 0x09
    3126:	9a 85       	ldd	r25, Y+10	; 0x0a
    3128:	ab 85       	ldd	r26, Y+11	; 0x0b
    312a:	bc 85       	ldd	r27, Y+12	; 0x0c
    312c:	2a e0       	ldi	r18, 0x0A	; 10
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e0       	ldi	r20, 0x00	; 0
    3132:	50 e0       	ldi	r21, 0x00	; 0
    3134:	bc 01       	movw	r22, r24
    3136:	cd 01       	movw	r24, r26
    3138:	0e 94 4a 24 	call	0x4894	; 0x4894 <__divmodsi4>
    313c:	da 01       	movw	r26, r20
    313e:	c9 01       	movw	r24, r18
    3140:	89 87       	std	Y+9, r24	; 0x09
    3142:	9a 87       	std	Y+10, r25	; 0x0a
    3144:	ab 87       	std	Y+11, r26	; 0x0b
    3146:	bc 87       	std	Y+12, r27	; 0x0c
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    3148:	89 85       	ldd	r24, Y+9	; 0x09
    314a:	9a 85       	ldd	r25, Y+10	; 0x0a
    314c:	ab 85       	ldd	r26, Y+11	; 0x0b
    314e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	a1 05       	cpc	r26, r1
    3154:	b1 05       	cpc	r27, r1
    3156:	31 f0       	breq	.+12     	; 0x3164 <LCD_enuWriteIntegerNum+0x1aa>
    3158:	8f 81       	ldd	r24, Y+7	; 0x07
    315a:	88 23       	and	r24, r24
    315c:	19 f4       	brne	.+6      	; 0x3164 <LCD_enuWriteIntegerNum+0x1aa>
    315e:	88 85       	ldd	r24, Y+8	; 0x08
    3160:	88 23       	and	r24, r24
    3162:	29 f2       	breq	.-118    	; 0x30ee <LCD_enuWriteIntegerNum+0x134>
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3164:	8f 81       	ldd	r24, Y+7	; 0x07
    3166:	88 23       	and	r24, r24
    3168:	99 f5       	brne	.+102    	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
    316a:	88 85       	ldd	r24, Y+8	; 0x08
    316c:	88 23       	and	r24, r24
    316e:	81 f5       	brne	.+96     	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
    3170:	0a c0       	rjmp	.+20     	; 0x3186 <LCD_enuWriteIntegerNum+0x1cc>
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	61 e0       	ldi	r22, 0x01	; 1
    3176:	40 e0       	ldi	r20, 0x00	; 0
    3178:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    317c:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    317e:	84 e1       	ldi	r24, 0x14	; 20
    3180:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3184:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3186:	8d 81       	ldd	r24, Y+5	; 0x05
    3188:	8d 87       	std	Y+13, r24	; 0x0d
    318a:	8d 85       	ldd	r24, Y+13	; 0x0d
    318c:	88 23       	and	r24, r24
    318e:	11 f0       	breq	.+4      	; 0x3194 <LCD_enuWriteIntegerNum+0x1da>
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	8d 87       	std	Y+13, r24	; 0x0d
    3194:	9d 85       	ldd	r25, Y+13	; 0x0d
    3196:	8d 81       	ldd	r24, Y+5	; 0x05
    3198:	81 50       	subi	r24, 0x01	; 1
    319a:	8d 83       	std	Y+5, r24	; 0x05
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	89 27       	eor	r24, r25
    31a0:	88 23       	and	r24, r24
    31a2:	31 f4       	brne	.+12     	; 0x31b0 <LCD_enuWriteIntegerNum+0x1f6>
    31a4:	8f 81       	ldd	r24, Y+7	; 0x07
    31a6:	88 23       	and	r24, r24
    31a8:	19 f4       	brne	.+6      	; 0x31b0 <LCD_enuWriteIntegerNum+0x1f6>
    31aa:	88 85       	ldd	r24, Y+8	; 0x08
    31ac:	88 23       	and	r24, r24
    31ae:	09 f3       	breq	.-62     	; 0x3172 <LCD_enuWriteIntegerNum+0x1b8>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
						}

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    31b0:	8f 81       	ldd	r24, Y+7	; 0x07
    31b2:	88 23       	and	r24, r24
    31b4:	69 f4       	brne	.+26     	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
    31b6:	88 85       	ldd	r24, Y+8	; 0x08
    31b8:	88 23       	and	r24, r24
    31ba:	51 f4       	brne	.+20     	; 0x31d0 <LCD_enuWriteIntegerNum+0x216>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	61 e0       	ldi	r22, 0x01	; 1
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    31c6:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    31c8:	86 e0       	ldi	r24, 0x06	; 6
    31ca:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    31ce:	88 87       	std	Y+8, r24	; 0x08

			}

		}
	}
	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    31d0:	8f 81       	ldd	r24, Y+7	; 0x07
    31d2:	88 23       	and	r24, r24
    31d4:	21 f4       	brne	.+8      	; 0x31de <LCD_enuWriteIntegerNum+0x224>
    31d6:	88 85       	ldd	r24, Y+8	; 0x08
    31d8:	88 23       	and	r24, r24
    31da:	09 f4       	brne	.+2      	; 0x31de <LCD_enuWriteIntegerNum+0x224>
			 	 Local_enuErrorState = ES_OK;
    31dc:	1e 82       	std	Y+6, r1	; 0x06

	return (Local_enuErrorState = ES_OK);
    31de:	1e 82       	std	Y+6, r1	; 0x06
    31e0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    31e2:	2d 96       	adiw	r28, 0x0d	; 13
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	08 95       	ret

000031f4 <LCD_enuWriteFloatNum>:

/*		ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)		*/
ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)
{
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	66 97       	sbiw	r28, 0x16	; 22
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	de bf       	out	0x3e, r29	; 62
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	cd bf       	out	0x3d, r28	; 61
    3208:	69 8b       	std	Y+17, r22	; 0x11
    320a:	7a 8b       	std	Y+18, r23	; 0x12
    320c:	8b 8b       	std	Y+19, r24	; 0x13
    320e:	9c 8b       	std	Y+20, r25	; 0x14
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	8e 87       	std	Y+14, r24	; 0x0e

	u8 Local_u8DigitCounter = 0 ;
    3214:	1d 86       	std	Y+13, r1	; 0x0d
	u32 Local_u32Integer = 0 , Local_u32Number = 0;
    3216:	19 86       	std	Y+9, r1	; 0x09
    3218:	1a 86       	std	Y+10, r1	; 0x0a
    321a:	1b 86       	std	Y+11, r1	; 0x0b
    321c:	1c 86       	std	Y+12, r1	; 0x0c
    321e:	1d 82       	std	Y+5, r1	; 0x05
    3220:	1e 82       	std	Y+6, r1	; 0x06
    3222:	1f 82       	std	Y+7, r1	; 0x07
    3224:	18 86       	std	Y+8, r1	; 0x08
	f32 Local_f32_Fraction = 0.0 ;
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	a0 e0       	ldi	r26, 0x00	; 0
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	89 83       	std	Y+1, r24	; 0x01
    3230:	9a 83       	std	Y+2, r25	; 0x02
    3232:	ab 83       	std	Y+3, r26	; 0x03
    3234:	bc 83       	std	Y+4, r27	; 0x04

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	61 e0       	ldi	r22, 0x01	; 1
    323a:	40 e0       	ldi	r20, 0x00	; 0
    323c:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3240:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    3242:	86 e0       	ldi	r24, 0x06	; 6
    3244:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3248:	88 8b       	std	Y+16, r24	; 0x10

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    324a:	8f 85       	ldd	r24, Y+15	; 0x0f
    324c:	88 23       	and	r24, r24
    324e:	09 f0       	breq	.+2      	; 0x3252 <LCD_enuWriteFloatNum+0x5e>
    3250:	8f c1       	rjmp	.+798    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    3252:	88 89       	ldd	r24, Y+16	; 0x10
    3254:	88 23       	and	r24, r24
    3256:	09 f0       	breq	.+2      	; 0x325a <LCD_enuWriteFloatNum+0x66>
    3258:	8b c1       	rjmp	.+790    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
	{
		if( Copy_f32Num < 0 )
    325a:	69 89       	ldd	r22, Y+17	; 0x11
    325c:	7a 89       	ldd	r23, Y+18	; 0x12
    325e:	8b 89       	ldd	r24, Y+19	; 0x13
    3260:	9c 89       	ldd	r25, Y+20	; 0x14
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    326e:	88 23       	and	r24, r24
    3270:	9c f4       	brge	.+38     	; 0x3298 <LCD_enuWriteFloatNum+0xa4>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	61 e0       	ldi	r22, 0x01	; 1
    3276:	41 e0       	ldi	r20, 0x01	; 1
    3278:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    327c:	8f 87       	std	Y+15, r24	; 0x0f
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    327e:	8d e2       	ldi	r24, 0x2D	; 45
    3280:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3284:	88 8b       	std	Y+16, r24	; 0x10
			Copy_f32Num = - Copy_f32Num;
    3286:	89 89       	ldd	r24, Y+17	; 0x11
    3288:	9a 89       	ldd	r25, Y+18	; 0x12
    328a:	ab 89       	ldd	r26, Y+19	; 0x13
    328c:	bc 89       	ldd	r27, Y+20	; 0x14
    328e:	b0 58       	subi	r27, 0x80	; 128
    3290:	89 8b       	std	Y+17, r24	; 0x11
    3292:	9a 8b       	std	Y+18, r25	; 0x12
    3294:	ab 8b       	std	Y+19, r26	; 0x13
    3296:	bc 8b       	std	Y+20, r27	; 0x14
		}

		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
    3298:	69 89       	ldd	r22, Y+17	; 0x11
    329a:	7a 89       	ldd	r23, Y+18	; 0x12
    329c:	8b 89       	ldd	r24, Y+19	; 0x13
    329e:	9c 89       	ldd	r25, Y+20	; 0x14
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	8d 83       	std	Y+5, r24	; 0x05
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	af 83       	std	Y+7, r26	; 0x07
    32ae:	b8 87       	std	Y+8, r27	; 0x08
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	af 81       	ldd	r26, Y+7	; 0x07
    32b6:	b8 85       	ldd	r27, Y+8	; 0x08
    32b8:	89 87       	std	Y+9, r24	; 0x09
    32ba:	9a 87       	std	Y+10, r25	; 0x0a
    32bc:	ab 87       	std	Y+11, r26	; 0x0b
    32be:	bc 87       	std	Y+12, r27	; 0x0c
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;
    32c0:	69 85       	ldd	r22, Y+9	; 0x09
    32c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    32c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    32c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    32c8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    32cc:	9b 01       	movw	r18, r22
    32ce:	ac 01       	movw	r20, r24
    32d0:	69 89       	ldd	r22, Y+17	; 0x11
    32d2:	7a 89       	ldd	r23, Y+18	; 0x12
    32d4:	8b 89       	ldd	r24, Y+19	; 0x13
    32d6:	9c 89       	ldd	r25, Y+20	; 0x14
    32d8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	9a 83       	std	Y+2, r25	; 0x02
    32e4:	ab 83       	std	Y+3, r26	; 0x03
    32e6:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    32e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ea:	88 23       	and	r24, r24
    32ec:	09 f0       	breq	.+2      	; 0x32f0 <LCD_enuWriteFloatNum+0xfc>
    32ee:	40 c1       	rjmp	.+640    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    32f0:	88 89       	ldd	r24, Y+16	; 0x10
    32f2:	88 23       	and	r24, r24
    32f4:	09 f0       	breq	.+2      	; 0x32f8 <LCD_enuWriteFloatNum+0x104>
    32f6:	3c c1       	rjmp	.+632    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    32f8:	1c c0       	rjmp	.+56     	; 0x3332 <LCD_enuWriteFloatNum+0x13e>
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	61 e0       	ldi	r22, 0x01	; 1
    32fe:	40 e0       	ldi	r20, 0x00	; 0
    3300:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3304:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
    3306:	84 e1       	ldi	r24, 0x14	; 20
    3308:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    330c:	8f 87       	std	Y+15, r24	; 0x0f
				Local_u32Number /=10;
    330e:	8d 81       	ldd	r24, Y+5	; 0x05
    3310:	9e 81       	ldd	r25, Y+6	; 0x06
    3312:	af 81       	ldd	r26, Y+7	; 0x07
    3314:	b8 85       	ldd	r27, Y+8	; 0x08
    3316:	2a e0       	ldi	r18, 0x0A	; 10
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e0       	ldi	r20, 0x00	; 0
    331c:	50 e0       	ldi	r21, 0x00	; 0
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 28 24 	call	0x4850	; 0x4850 <__udivmodsi4>
    3326:	da 01       	movw	r26, r20
    3328:	c9 01       	movw	r24, r18
    332a:	8d 83       	std	Y+5, r24	; 0x05
    332c:	9e 83       	std	Y+6, r25	; 0x06
    332e:	af 83       	std	Y+7, r26	; 0x07
    3330:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	af 81       	ldd	r26, Y+7	; 0x07
    3338:	b8 85       	ldd	r27, Y+8	; 0x08
    333a:	8b 30       	cpi	r24, 0x0B	; 11
    333c:	91 05       	cpc	r25, r1
    333e:	a1 05       	cpc	r26, r1
    3340:	b1 05       	cpc	r27, r1
    3342:	30 f0       	brcs	.+12     	; 0x3350 <LCD_enuWriteFloatNum+0x15c>
    3344:	8f 85       	ldd	r24, Y+15	; 0x0f
    3346:	88 23       	and	r24, r24
    3348:	19 f4       	brne	.+6      	; 0x3350 <LCD_enuWriteFloatNum+0x15c>
    334a:	88 89       	ldd	r24, Y+16	; 0x10
    334c:	88 23       	and	r24, r24
    334e:	a9 f2       	breq	.-86     	; 0x32fa <LCD_enuWriteFloatNum+0x106>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3350:	8f 85       	ldd	r24, Y+15	; 0x0f
    3352:	88 23       	and	r24, r24
    3354:	09 f0       	breq	.+2      	; 0x3358 <LCD_enuWriteFloatNum+0x164>
    3356:	0c c1       	rjmp	.+536    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    3358:	88 89       	ldd	r24, Y+16	; 0x10
    335a:	88 23       	and	r24, r24
    335c:	09 f0       	breq	.+2      	; 0x3360 <LCD_enuWriteFloatNum+0x16c>
    335e:	08 c1       	rjmp	.+528    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	61 e0       	ldi	r22, 0x01	; 1
    3364:	40 e0       	ldi	r20, 0x00	; 0
    3366:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    336a:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    336c:	84 e0       	ldi	r24, 0x04	; 4
    336e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3372:	88 8b       	std	Y+16, r24	; 0x10

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3374:	8f 85       	ldd	r24, Y+15	; 0x0f
    3376:	88 23       	and	r24, r24
    3378:	09 f0       	breq	.+2      	; 0x337c <LCD_enuWriteFloatNum+0x188>
    337a:	fa c0       	rjmp	.+500    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    337c:	88 89       	ldd	r24, Y+16	; 0x10
    337e:	88 23       	and	r24, r24
    3380:	09 f0       	breq	.+2      	; 0x3384 <LCD_enuWriteFloatNum+0x190>
    3382:	f6 c0       	rjmp	.+492    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
				{
					do
					{
						Local_u8DigitCounter++;
    3384:	8d 85       	ldd	r24, Y+13	; 0x0d
    3386:	8f 5f       	subi	r24, 0xFF	; 255
    3388:	8d 87       	std	Y+13, r24	; 0x0d
						DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	61 e0       	ldi	r22, 0x01	; 1
    338e:	41 e0       	ldi	r20, 0x01	; 1
    3390:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
						LCD_enuWriteNLatch(ZERO_ASCII + (Local_u32Integer % 10));
    3394:	89 85       	ldd	r24, Y+9	; 0x09
    3396:	9a 85       	ldd	r25, Y+10	; 0x0a
    3398:	ab 85       	ldd	r26, Y+11	; 0x0b
    339a:	bc 85       	ldd	r27, Y+12	; 0x0c
    339c:	2a e0       	ldi	r18, 0x0A	; 10
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	50 e0       	ldi	r21, 0x00	; 0
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0e 94 28 24 	call	0x4850	; 0x4850 <__udivmodsi4>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	80 5d       	subi	r24, 0xD0	; 208
    33b2:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
						Local_u32Integer /= 10;
    33b6:	89 85       	ldd	r24, Y+9	; 0x09
    33b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    33bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    33be:	2a e0       	ldi	r18, 0x0A	; 10
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e0       	ldi	r20, 0x00	; 0
    33c4:	50 e0       	ldi	r21, 0x00	; 0
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	0e 94 28 24 	call	0x4850	; 0x4850 <__udivmodsi4>
    33ce:	da 01       	movw	r26, r20
    33d0:	c9 01       	movw	r24, r18
    33d2:	89 87       	std	Y+9, r24	; 0x09
    33d4:	9a 87       	std	Y+10, r25	; 0x0a
    33d6:	ab 87       	std	Y+11, r26	; 0x0b
    33d8:	bc 87       	std	Y+12, r27	; 0x0c
					}while(Local_u32Integer && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK);
    33da:	89 85       	ldd	r24, Y+9	; 0x09
    33dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33de:	ab 85       	ldd	r26, Y+11	; 0x0b
    33e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	a1 05       	cpc	r26, r1
    33e6:	b1 05       	cpc	r27, r1
    33e8:	31 f0       	breq	.+12     	; 0x33f6 <LCD_enuWriteFloatNum+0x202>
    33ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ec:	88 23       	and	r24, r24
    33ee:	19 f4       	brne	.+6      	; 0x33f6 <LCD_enuWriteFloatNum+0x202>
    33f0:	88 89       	ldd	r24, Y+16	; 0x10
    33f2:	88 23       	and	r24, r24
    33f4:	39 f2       	breq	.-114    	; 0x3384 <LCD_enuWriteFloatNum+0x190>

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    33f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f8:	88 23       	and	r24, r24
    33fa:	09 f0       	breq	.+2      	; 0x33fe <LCD_enuWriteFloatNum+0x20a>
    33fc:	b9 c0       	rjmp	.+370    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    33fe:	88 89       	ldd	r24, Y+16	; 0x10
    3400:	88 23       	and	r24, r24
    3402:	09 f0       	breq	.+2      	; 0x3406 <LCD_enuWriteFloatNum+0x212>
    3404:	b5 c0       	rjmp	.+362    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
					{
						do
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	61 e0       	ldi	r22, 0x01	; 1
    340a:	40 e0       	ldi	r20, 0x00	; 0
    340c:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3410:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    3412:	84 e1       	ldi	r24, 0x14	; 20
    3414:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3418:	88 8b       	std	Y+16, r24	; 0x10
						}while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK );
    341a:	8d 85       	ldd	r24, Y+13	; 0x0d
    341c:	8e 8b       	std	Y+22, r24	; 0x16
    341e:	9e 89       	ldd	r25, Y+22	; 0x16
    3420:	99 23       	and	r25, r25
    3422:	11 f0       	breq	.+4      	; 0x3428 <LCD_enuWriteFloatNum+0x234>
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	8e 8b       	std	Y+22, r24	; 0x16
    3428:	9e 89       	ldd	r25, Y+22	; 0x16
    342a:	8d 85       	ldd	r24, Y+13	; 0x0d
    342c:	81 50       	subi	r24, 0x01	; 1
    342e:	8d 87       	std	Y+13, r24	; 0x0d
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	89 27       	eor	r24, r25
    3434:	88 23       	and	r24, r24
    3436:	31 f4       	brne	.+12     	; 0x3444 <LCD_enuWriteFloatNum+0x250>
    3438:	8f 85       	ldd	r24, Y+15	; 0x0f
    343a:	88 23       	and	r24, r24
    343c:	19 f4       	brne	.+6      	; 0x3444 <LCD_enuWriteFloatNum+0x250>
    343e:	88 89       	ldd	r24, Y+16	; 0x10
    3440:	88 23       	and	r24, r24
    3442:	09 f3       	breq	.-62     	; 0x3406 <LCD_enuWriteFloatNum+0x212>

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3444:	8f 85       	ldd	r24, Y+15	; 0x0f
    3446:	88 23       	and	r24, r24
    3448:	09 f0       	breq	.+2      	; 0x344c <LCD_enuWriteFloatNum+0x258>
    344a:	92 c0       	rjmp	.+292    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    344c:	88 89       	ldd	r24, Y+16	; 0x10
    344e:	88 23       	and	r24, r24
    3450:	09 f0       	breq	.+2      	; 0x3454 <LCD_enuWriteFloatNum+0x260>
    3452:	8e c0       	rjmp	.+284    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	61 e0       	ldi	r22, 0x01	; 1
    3458:	40 e0       	ldi	r20, 0x00	; 0
    345a:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    345e:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    3460:	86 e0       	ldi	r24, 0x06	; 6
    3462:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3466:	88 8b       	std	Y+16, r24	; 0x10

							if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3468:	8f 85       	ldd	r24, Y+15	; 0x0f
    346a:	88 23       	and	r24, r24
    346c:	09 f0       	breq	.+2      	; 0x3470 <LCD_enuWriteFloatNum+0x27c>
    346e:	80 c0       	rjmp	.+256    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    3470:	88 89       	ldd	r24, Y+16	; 0x10
    3472:	88 23       	and	r24, r24
    3474:	09 f0       	breq	.+2      	; 0x3478 <LCD_enuWriteFloatNum+0x284>
    3476:	7c c0       	rjmp	.+248    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
							{
								if(Local_f32_Fraction > 0.0f)
    3478:	69 81       	ldd	r22, Y+1	; 0x01
    347a:	7a 81       	ldd	r23, Y+2	; 0x02
    347c:	8b 81       	ldd	r24, Y+3	; 0x03
    347e:	9c 81       	ldd	r25, Y+4	; 0x04
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	50 e0       	ldi	r21, 0x00	; 0
    3488:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    348c:	18 16       	cp	r1, r24
    348e:	54 f4       	brge	.+20     	; 0x34a4 <LCD_enuWriteFloatNum+0x2b0>
								{
									Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	61 e0       	ldi	r22, 0x01	; 1
    3494:	41 e0       	ldi	r20, 0x01	; 1
    3496:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    349a:	8f 87       	std	Y+15, r24	; 0x0f
									Local_enuStatus[1] = LCD_enuWriteNLatch(DOT);
    349c:	8e e2       	ldi	r24, 0x2E	; 46
    349e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    34a2:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    34a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a6:	88 23       	and	r24, r24
    34a8:	09 f0       	breq	.+2      	; 0x34ac <LCD_enuWriteFloatNum+0x2b8>
    34aa:	62 c0       	rjmp	.+196    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    34ac:	88 89       	ldd	r24, Y+16	; 0x10
    34ae:	88 23       	and	r24, r24
    34b0:	09 f0       	breq	.+2      	; 0x34b4 <LCD_enuWriteFloatNum+0x2c0>
    34b2:	5e c0       	rjmp	.+188    	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
								{
									Local_u8DigitCounter =0;
    34b4:	1d 86       	std	Y+13, r1	; 0x0d
    34b6:	3e c0       	rjmp	.+124    	; 0x3534 <LCD_enuWriteFloatNum+0x340>
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
									{
										Local_u8DigitCounter++;
    34b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ba:	8f 5f       	subi	r24, 0xFF	; 255
    34bc:	8d 87       	std	Y+13, r24	; 0x0d
										Local_f32_Fraction *= 10.0;
    34be:	69 81       	ldd	r22, Y+1	; 0x01
    34c0:	7a 81       	ldd	r23, Y+2	; 0x02
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	9c 81       	ldd	r25, Y+4	; 0x04
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e2       	ldi	r20, 0x20	; 32
    34cc:	51 e4       	ldi	r21, 0x41	; 65
    34ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	9a 83       	std	Y+2, r25	; 0x02
    34da:	ab 83       	std	Y+3, r26	; 0x03
    34dc:	bc 83       	std	Y+4, r27	; 0x04
										Local_u32Integer = (u32) Local_f32_Fraction;
    34de:	69 81       	ldd	r22, Y+1	; 0x01
    34e0:	7a 81       	ldd	r23, Y+2	; 0x02
    34e2:	8b 81       	ldd	r24, Y+3	; 0x03
    34e4:	9c 81       	ldd	r25, Y+4	; 0x04
    34e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	89 87       	std	Y+9, r24	; 0x09
    34f0:	9a 87       	std	Y+10, r25	; 0x0a
    34f2:	ab 87       	std	Y+11, r26	; 0x0b
    34f4:	bc 87       	std	Y+12, r27	; 0x0c
										Local_f32_Fraction -= Local_u32Integer;
    34f6:	69 85       	ldd	r22, Y+9	; 0x09
    34f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    34fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    34fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    34fe:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3502:	9b 01       	movw	r18, r22
    3504:	ac 01       	movw	r20, r24
    3506:	69 81       	ldd	r22, Y+1	; 0x01
    3508:	7a 81       	ldd	r23, Y+2	; 0x02
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	9c 81       	ldd	r25, Y+4	; 0x04
    350e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	89 83       	std	Y+1, r24	; 0x01
    3518:	9a 83       	std	Y+2, r25	; 0x02
    351a:	ab 83       	std	Y+3, r26	; 0x03
    351c:	bc 83       	std	Y+4, r27	; 0x04
										Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	61 e0       	ldi	r22, 0x01	; 1
    3522:	41 e0       	ldi	r20, 0x01	; 1
    3524:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3528:	8f 87       	std	Y+15, r24	; 0x0f
										Local_enuStatus[1] = LCD_enuWriteNLatch((ZERO_ASCII + Local_u32Integer));
    352a:	89 85       	ldd	r24, Y+9	; 0x09
    352c:	80 5d       	subi	r24, 0xD0	; 208
    352e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3532:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
								{
									Local_u8DigitCounter =0;
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3534:	1d 8a       	std	Y+21, r1	; 0x15
    3536:	69 81       	ldd	r22, Y+1	; 0x01
    3538:	7a 81       	ldd	r23, Y+2	; 0x02
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	9c 81       	ldd	r25, Y+4	; 0x04
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e0       	ldi	r20, 0x00	; 0
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    354a:	18 16       	cp	r1, r24
    354c:	14 f4       	brge	.+4      	; 0x3552 <LCD_enuWriteFloatNum+0x35e>
    354e:	91 e0       	ldi	r25, 0x01	; 1
    3550:	9d 8b       	std	Y+21, r25	; 0x15
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	9d 89       	ldd	r25, Y+21	; 0x15
    3556:	89 27       	eor	r24, r25
    3558:	88 23       	and	r24, r24
    355a:	51 f4       	brne	.+20     	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    355c:	8d 85       	ldd	r24, Y+13	; 0x0d
    355e:	86 30       	cpi	r24, 0x06	; 6
    3560:	38 f4       	brcc	.+14     	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    3562:	8f 85       	ldd	r24, Y+15	; 0x0f
    3564:	88 23       	and	r24, r24
    3566:	21 f4       	brne	.+8      	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    3568:	88 89       	ldd	r24, Y+16	; 0x10
    356a:	88 23       	and	r24, r24
    356c:	09 f4       	brne	.+2      	; 0x3570 <LCD_enuWriteFloatNum+0x37c>
    356e:	a4 cf       	rjmp	.-184    	; 0x34b8 <LCD_enuWriteFloatNum+0x2c4>
				}
			}
		}
	}

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    3570:	8f 85       	ldd	r24, Y+15	; 0x0f
    3572:	88 23       	and	r24, r24
    3574:	21 f4       	brne	.+8      	; 0x357e <LCD_enuWriteFloatNum+0x38a>
    3576:	88 89       	ldd	r24, Y+16	; 0x10
    3578:	88 23       	and	r24, r24
    357a:	09 f4       	brne	.+2      	; 0x357e <LCD_enuWriteFloatNum+0x38a>
		 	 Local_enuErrorState = ES_OK;
    357c:	1e 86       	std	Y+14, r1	; 0x0e

	return Local_enuErrorState ;
    357e:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    3580:	66 96       	adiw	r28, 0x16	; 22
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	08 95       	ret

00003592 <LCD_enuWriteExtraPattern>:

/*		ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)		*/
ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)
{
    3592:	df 93       	push	r29
    3594:	cf 93       	push	r28
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    359a:	2b 97       	sbiw	r28, 0x0b	; 11
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	9e 83       	std	Y+6, r25	; 0x06
    35a8:	8d 83       	std	Y+5, r24	; 0x05
    35aa:	6f 83       	std	Y+7, r22	; 0x07
    35ac:	48 87       	std	Y+8, r20	; 0x08
    35ae:	29 87       	std	Y+9, r18	; 0x09

	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
    35b4:	88 85       	ldd	r24, Y+8	; 0x08
    35b6:	85 36       	cpi	r24, 0x65	; 101
    35b8:	08 f4       	brcc	.+2      	; 0x35bc <LCD_enuWriteExtraPattern+0x2a>
    35ba:	52 c0       	rjmp	.+164    	; 0x3660 <LCD_enuWriteExtraPattern+0xce>
    35bc:	88 85       	ldd	r24, Y+8	; 0x08
    35be:	8d 36       	cpi	r24, 0x6D	; 109
    35c0:	08 f0       	brcs	.+2      	; 0x35c4 <LCD_enuWriteExtraPattern+0x32>
    35c2:	4e c0       	rjmp	.+156    	; 0x3660 <LCD_enuWriteExtraPattern+0xce>
    35c4:	88 85       	ldd	r24, Y+8	; 0x08
    35c6:	28 2f       	mov	r18, r24
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	8f 81       	ldd	r24, Y+7	; 0x07
    35cc:	88 2f       	mov	r24, r24
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	82 0f       	add	r24, r18
    35d2:	93 1f       	adc	r25, r19
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	8d 36       	cpi	r24, 0x6D	; 109
    35d8:	91 05       	cpc	r25, r1
    35da:	0c f0       	brlt	.+2      	; 0x35de <LCD_enuWriteExtraPattern+0x4c>
    35dc:	41 c0       	rjmp	.+130    	; 0x3660 <LCD_enuWriteExtraPattern+0xce>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	61 e0       	ldi	r22, 0x01	; 1
    35e2:	40 e0       	ldi	r20, 0x00	; 0
    35e4:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    35e8:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));
    35ea:	88 85       	ldd	r24, Y+8	; 0x08
    35ec:	88 2f       	mov	r24, r24
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	8d 55       	subi	r24, 0x5D	; 93
    35f2:	90 40       	sbci	r25, 0x00	; 0
    35f4:	88 0f       	add	r24, r24
    35f6:	99 1f       	adc	r25, r25
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	88 0f       	add	r24, r24
    35fe:	99 1f       	adc	r25, r25
    3600:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3604:	8c 83       	std	Y+4, r24	; 0x04

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    3606:	19 82       	std	Y+1, r1	; 0x01
    3608:	15 c0       	rjmp	.+42     	; 0x3634 <LCD_enuWriteExtraPattern+0xa2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	61 e0       	ldi	r22, 0x01	; 1
    360e:	41 e0       	ldi	r20, 0x01	; 1
    3610:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3614:	8b 83       	std	Y+3, r24	; 0x03
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	28 2f       	mov	r18, r24
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	8d 81       	ldd	r24, Y+5	; 0x05
    361e:	9e 81       	ldd	r25, Y+6	; 0x06
    3620:	fc 01       	movw	r30, r24
    3622:	e2 0f       	add	r30, r18
    3624:	f3 1f       	adc	r31, r19
    3626:	80 81       	ld	r24, Z
    3628:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    362c:	8c 83       	std	Y+4, r24	; 0x04
	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	8f 5f       	subi	r24, 0xFF	; 255
    3632:	89 83       	std	Y+1, r24	; 0x01
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	28 2f       	mov	r18, r24
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	8f 81       	ldd	r24, Y+7	; 0x07
    363c:	88 2f       	mov	r24, r24
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	88 0f       	add	r24, r24
    3642:	99 1f       	adc	r25, r25
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25
    3648:	88 0f       	add	r24, r24
    364a:	99 1f       	adc	r25, r25
    364c:	28 17       	cp	r18, r24
    364e:	39 07       	cpc	r19, r25
    3650:	4c f4       	brge	.+18     	; 0x3664 <LCD_enuWriteExtraPattern+0xd2>
    3652:	8b 81       	ldd	r24, Y+3	; 0x03
    3654:	88 23       	and	r24, r24
    3656:	31 f4       	brne	.+12     	; 0x3664 <LCD_enuWriteExtraPattern+0xd2>
    3658:	8c 81       	ldd	r24, Y+4	; 0x04
    365a:	88 23       	and	r24, r24
    365c:	b1 f2       	breq	.-84     	; 0x360a <LCD_enuWriteExtraPattern+0x78>
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <LCD_enuWriteExtraPattern+0xd2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3660:	82 e0       	ldi	r24, 0x02	; 2
    3662:	8a 83       	std	Y+2, r24	; 0x02

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    3664:	8a 81       	ldd	r24, Y+2	; 0x02
    3666:	82 30       	cpi	r24, 0x02	; 2
    3668:	71 f1       	breq	.+92     	; 0x36c6 <LCD_enuWriteExtraPattern+0x134>
    366a:	8b 81       	ldd	r24, Y+3	; 0x03
    366c:	88 23       	and	r24, r24
    366e:	59 f5       	brne	.+86     	; 0x36c6 <LCD_enuWriteExtraPattern+0x134>
    3670:	8c 81       	ldd	r24, Y+4	; 0x04
    3672:	88 23       	and	r24, r24
    3674:	41 f5       	brne	.+80     	; 0x36c6 <LCD_enuWriteExtraPattern+0x134>
	{
		if(Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT || Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT )
    3676:	89 85       	ldd	r24, Y+9	; 0x09
    3678:	8e 36       	cpi	r24, 0x6E	; 110
    367a:	19 f0       	breq	.+6      	; 0x3682 <LCD_enuWriteExtraPattern+0xf0>
    367c:	89 85       	ldd	r24, Y+9	; 0x09
    367e:	8e 36       	cpi	r24, 0x6E	; 110
    3680:	01 f5       	brne	.+64     	; 0x36c2 <LCD_enuWriteExtraPattern+0x130>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	61 e0       	ldi	r22, 0x01	; 1
    3686:	40 e0       	ldi	r20, 0x00	; 0
    3688:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    368c:	8b 83       	std	Y+3, r24	; 0x03

			switch(Copy_u8DisplayDirection)
    368e:	89 85       	ldd	r24, Y+9	; 0x09
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	3b 87       	std	Y+11, r19	; 0x0b
    3696:	2a 87       	std	Y+10, r18	; 0x0a
    3698:	8a 85       	ldd	r24, Y+10	; 0x0a
    369a:	9b 85       	ldd	r25, Y+11	; 0x0b
    369c:	8e 36       	cpi	r24, 0x6E	; 110
    369e:	91 05       	cpc	r25, r1
    36a0:	31 f0       	breq	.+12     	; 0x36ae <LCD_enuWriteExtraPattern+0x11c>
    36a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    36a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    36a6:	2f 36       	cpi	r18, 0x6F	; 111
    36a8:	31 05       	cpc	r19, r1
    36aa:	31 f0       	breq	.+12     	; 0x36b8 <LCD_enuWriteExtraPattern+0x126>
    36ac:	0c c0       	rjmp	.+24     	; 0x36c6 <LCD_enuWriteExtraPattern+0x134>
			{
				case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    36ae:	86 e0       	ldi	r24, 0x06	; 6
    36b0:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    36b4:	8c 83       	std	Y+4, r24	; 0x04
    36b6:	07 c0       	rjmp	.+14     	; 0x36c6 <LCD_enuWriteExtraPattern+0x134>
												break;
				case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    36b8:	84 e0       	ldi	r24, 0x04	; 4
    36ba:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    36be:	8c 83       	std	Y+4, r24	; 0x04
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <LCD_enuWriteExtraPattern+0x134>
												break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    36c2:	82 e0       	ldi	r24, 0x02	; 2
    36c4:	8a 83       	std	Y+2, r24	; 0x02
	}

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	82 30       	cpi	r24, 0x02	; 2
    36ca:	39 f0       	breq	.+14     	; 0x36da <LCD_enuWriteExtraPattern+0x148>
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	88 23       	and	r24, r24
    36d0:	21 f4       	brne	.+8      	; 0x36da <LCD_enuWriteExtraPattern+0x148>
    36d2:	8c 81       	ldd	r24, Y+4	; 0x04
    36d4:	88 23       	and	r24, r24
    36d6:	09 f4       	brne	.+2      	; 0x36da <LCD_enuWriteExtraPattern+0x148>
	 	 Local_enuErrorState = ES_OK;
    36d8:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState;
    36da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    36dc:	2b 96       	adiw	r28, 0x0b	; 11
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	de bf       	out	0x3e, r29	; 62
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	cd bf       	out	0x3d, r28	; 61
    36e8:	cf 91       	pop	r28
    36ea:	df 91       	pop	r29
    36ec:	08 95       	ret

000036ee <LCD_enuSetTextDirection>:

ES_t LCD_enuSetTextDirection(u8 Copy_u8Direction)
{
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	00 d0       	rcall	.+0      	; 0x36f4 <LCD_enuSetTextDirection+0x6>
    36f4:	00 d0       	rcall	.+0      	; 0x36f6 <LCD_enuSetTextDirection+0x8>
    36f6:	00 d0       	rcall	.+0      	; 0x36f8 <LCD_enuSetTextDirection+0xa>
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Direction == DISPLAY_DIR_RIGHT || Copy_u8Direction == DISPLAY_DIR_RIGHT )
    3702:	8c 81       	ldd	r24, Y+4	; 0x04
    3704:	8e 36       	cpi	r24, 0x6E	; 110
    3706:	19 f0       	breq	.+6      	; 0x370e <LCD_enuSetTextDirection+0x20>
    3708:	8c 81       	ldd	r24, Y+4	; 0x04
    370a:	8e 36       	cpi	r24, 0x6E	; 110
    370c:	01 f5       	brne	.+64     	; 0x374e <LCD_enuSetTextDirection+0x60>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	61 e0       	ldi	r22, 0x01	; 1
    3712:	40 e0       	ldi	r20, 0x00	; 0
    3714:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3718:	8a 83       	std	Y+2, r24	; 0x02

		switch(Copy_u8Direction)
    371a:	8c 81       	ldd	r24, Y+4	; 0x04
    371c:	28 2f       	mov	r18, r24
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	3e 83       	std	Y+6, r19	; 0x06
    3722:	2d 83       	std	Y+5, r18	; 0x05
    3724:	8d 81       	ldd	r24, Y+5	; 0x05
    3726:	9e 81       	ldd	r25, Y+6	; 0x06
    3728:	8e 36       	cpi	r24, 0x6E	; 110
    372a:	91 05       	cpc	r25, r1
    372c:	31 f0       	breq	.+12     	; 0x373a <LCD_enuSetTextDirection+0x4c>
    372e:	2d 81       	ldd	r18, Y+5	; 0x05
    3730:	3e 81       	ldd	r19, Y+6	; 0x06
    3732:	2f 36       	cpi	r18, 0x6F	; 111
    3734:	31 05       	cpc	r19, r1
    3736:	31 f0       	breq	.+12     	; 0x3744 <LCD_enuSetTextDirection+0x56>
    3738:	0c c0       	rjmp	.+24     	; 0x3752 <LCD_enuSetTextDirection+0x64>
		{
			case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    373a:	86 e0       	ldi	r24, 0x06	; 6
    373c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    3740:	8b 83       	std	Y+3, r24	; 0x03
    3742:	07 c0       	rjmp	.+14     	; 0x3752 <LCD_enuSetTextDirection+0x64>
											break;
			case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    3744:	84 e0       	ldi	r24, 0x04	; 4
    3746:	0e 94 91 15 	call	0x2b22	; 0x2b22 <LCD_enuWriteNLatch>
    374a:	8b 83       	std	Y+3, r24	; 0x03
    374c:	02 c0       	rjmp	.+4      	; 0x3752 <LCD_enuSetTextDirection+0x64>
											break;
		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	82 30       	cpi	r24, 0x02	; 2
    3756:	39 f0       	breq	.+14     	; 0x3766 <LCD_enuSetTextDirection+0x78>
    3758:	8a 81       	ldd	r24, Y+2	; 0x02
    375a:	88 23       	and	r24, r24
    375c:	21 f4       	brne	.+8      	; 0x3766 <LCD_enuSetTextDirection+0x78>
    375e:	8b 81       	ldd	r24, Y+3	; 0x03
    3760:	88 23       	and	r24, r24
    3762:	09 f4       	brne	.+2      	; 0x3766 <LCD_enuSetTextDirection+0x78>
		 	 Local_enuErrorState = ES_OK;
    3764:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    3766:	89 81       	ldd	r24, Y+1	; 0x01
}
    3768:	26 96       	adiw	r28, 0x06	; 6
    376a:	0f b6       	in	r0, 0x3f	; 63
    376c:	f8 94       	cli
    376e:	de bf       	out	0x3e, r29	; 62
    3770:	0f be       	out	0x3f, r0	; 63
    3772:	cd bf       	out	0x3d, r28	; 61
    3774:	cf 91       	pop	r28
    3776:	df 91       	pop	r29
    3778:	08 95       	ret

0000377a <Keypad_enuInit>:
extern u8 Kpad_u8KeyValues[];
extern KP_Output_t KeyPadCols[];
extern KP_Input_t KeyPadRows[];

ES_t Keypad_enuInit(void)
{
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	00 d0       	rcall	.+0      	; 0x3780 <Keypad_enuInit+0x6>
    3780:	00 d0       	rcall	.+0      	; 0x3782 <Keypad_enuInit+0x8>
    3782:	0f 92       	push	r0
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Iter=0 , Local_u8Flag = 0;
    378c:	1a 82       	std	Y+2, r1	; 0x02
    378e:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    3790:	90 91 d7 01 	lds	r25, 0x01D7
    3794:	80 91 d6 01 	lds	r24, 0x01D6
    3798:	89 17       	cp	r24, r25
    379a:	08 f4       	brcc	.+2      	; 0x379e <Keypad_enuInit+0x24>
    379c:	af c0       	rjmp	.+350    	; 0x38fc <Keypad_enuInit+0x182>
    379e:	90 91 d8 01 	lds	r25, 0x01D8
    37a2:	80 91 d6 01 	lds	r24, 0x01D6
    37a6:	89 17       	cp	r24, r25
    37a8:	08 f4       	brcc	.+2      	; 0x37ac <Keypad_enuInit+0x32>
    37aa:	a8 c0       	rjmp	.+336    	; 0x38fc <Keypad_enuInit+0x182>
    37ac:	54 c0       	rjmp	.+168    	; 0x3856 <Keypad_enuInit+0xdc>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8INPUT	);
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	28 2f       	mov	r18, r24
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	c9 01       	movw	r24, r18
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	82 0f       	add	r24, r18
    37bc:	93 1f       	adc	r25, r19
    37be:	fc 01       	movw	r30, r24
    37c0:	ef 50       	subi	r30, 0x0F	; 15
    37c2:	fe 4f       	sbci	r31, 0xFE	; 254
    37c4:	40 81       	ld	r20, Z
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	28 2f       	mov	r18, r24
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	c9 01       	movw	r24, r18
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	82 0f       	add	r24, r18
    37d4:	93 1f       	adc	r25, r19
    37d6:	fc 01       	movw	r30, r24
    37d8:	ee 50       	subi	r30, 0x0E	; 14
    37da:	fe 4f       	sbci	r31, 0xFE	; 254
    37dc:	90 81       	ld	r25, Z
    37de:	84 2f       	mov	r24, r20
    37e0:	69 2f       	mov	r22, r25
    37e2:	40 e0       	ldi	r20, 0x00	; 0
    37e4:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
    37e8:	8c 83       	std	Y+4, r24	; 0x04
			Local_enuError[1] = DIO_enuSetPinValue		( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState	);
    37ea:	8a 81       	ldd	r24, Y+2	; 0x02
    37ec:	28 2f       	mov	r18, r24
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	c9 01       	movw	r24, r18
    37f2:	88 0f       	add	r24, r24
    37f4:	99 1f       	adc	r25, r25
    37f6:	82 0f       	add	r24, r18
    37f8:	93 1f       	adc	r25, r19
    37fa:	fc 01       	movw	r30, r24
    37fc:	ef 50       	subi	r30, 0x0F	; 15
    37fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3800:	50 81       	ld	r21, Z
    3802:	8a 81       	ldd	r24, Y+2	; 0x02
    3804:	28 2f       	mov	r18, r24
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	c9 01       	movw	r24, r18
    380a:	88 0f       	add	r24, r24
    380c:	99 1f       	adc	r25, r25
    380e:	82 0f       	add	r24, r18
    3810:	93 1f       	adc	r25, r19
    3812:	fc 01       	movw	r30, r24
    3814:	ee 50       	subi	r30, 0x0E	; 14
    3816:	fe 4f       	sbci	r31, 0xFE	; 254
    3818:	40 81       	ld	r20, Z
    381a:	8a 81       	ldd	r24, Y+2	; 0x02
    381c:	28 2f       	mov	r18, r24
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	c9 01       	movw	r24, r18
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	82 0f       	add	r24, r18
    3828:	93 1f       	adc	r25, r19
    382a:	fc 01       	movw	r30, r24
    382c:	ed 50       	subi	r30, 0x0D	; 13
    382e:	fe 4f       	sbci	r31, 0xFE	; 254
    3830:	90 81       	ld	r25, Z
    3832:	85 2f       	mov	r24, r21
    3834:	64 2f       	mov	r22, r20
    3836:	49 2f       	mov	r20, r25
    3838:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    383c:	8d 83       	std	Y+5, r24	; 0x05

			if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    383e:	8c 81       	ldd	r24, Y+4	; 0x04
    3840:	88 23       	and	r24, r24
    3842:	19 f4       	brne	.+6      	; 0x384a <Keypad_enuInit+0xd0>
    3844:	8d 81       	ldd	r24, Y+5	; 0x05
    3846:	88 23       	and	r24, r24
    3848:	19 f0       	breq	.+6      	; 0x3850 <Keypad_enuInit+0xd6>
			{
				Local_u8Flag = 1;
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	89 83       	std	Y+1, r24	; 0x01
    384e:	09 c0       	rjmp	.+18     	; 0x3862 <Keypad_enuInit+0xe8>
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
	u8 Local_u8Iter=0 , Local_u8Flag = 0;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    3850:	8a 81       	ldd	r24, Y+2	; 0x02
    3852:	8f 5f       	subi	r24, 0xFF	; 255
    3854:	8a 83       	std	Y+2, r24	; 0x02
    3856:	90 91 d7 01 	lds	r25, 0x01D7
    385a:	8a 81       	ldd	r24, Y+2	; 0x02
    385c:	89 17       	cp	r24, r25
    385e:	08 f4       	brcc	.+2      	; 0x3862 <Keypad_enuInit+0xe8>
    3860:	a6 cf       	rjmp	.-180    	; 0x37ae <Keypad_enuInit+0x34>
			{
				Local_u8Flag = 1;
				break;
			}
		}
		if(!Local_u8Flag)
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	88 23       	and	r24, r24
    3866:	09 f0       	breq	.+2      	; 0x386a <Keypad_enuInit+0xf0>
    3868:	44 c0       	rjmp	.+136    	; 0x38f2 <Keypad_enuInit+0x178>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    386a:	1a 82       	std	Y+2, r1	; 0x02
    386c:	3c c0       	rjmp	.+120    	; 0x38e6 <Keypad_enuInit+0x16c>
			{
				Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8OUTPUT );
    386e:	8a 81       	ldd	r24, Y+2	; 0x02
    3870:	88 2f       	mov	r24, r24
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	88 0f       	add	r24, r24
    3876:	99 1f       	adc	r25, r25
    3878:	fc 01       	movw	r30, r24
    387a:	e7 51       	subi	r30, 0x17	; 23
    387c:	fe 4f       	sbci	r31, 0xFE	; 254
    387e:	20 81       	ld	r18, Z
    3880:	8a 81       	ldd	r24, Y+2	; 0x02
    3882:	88 2f       	mov	r24, r24
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	88 0f       	add	r24, r24
    3888:	99 1f       	adc	r25, r25
    388a:	fc 01       	movw	r30, r24
    388c:	e6 51       	subi	r30, 0x16	; 22
    388e:	fe 4f       	sbci	r31, 0xFE	; 254
    3890:	90 81       	ld	r25, Z
    3892:	82 2f       	mov	r24, r18
    3894:	69 2f       	mov	r22, r25
    3896:	41 e0       	ldi	r20, 0x01	; 1
    3898:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinDirection>
    389c:	8c 83       	std	Y+4, r24	; 0x04
				Local_enuError[1] = DIO_enuSetPinValue		( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8HIGH	 );
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	88 2f       	mov	r24, r24
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	88 0f       	add	r24, r24
    38a6:	99 1f       	adc	r25, r25
    38a8:	fc 01       	movw	r30, r24
    38aa:	e7 51       	subi	r30, 0x17	; 23
    38ac:	fe 4f       	sbci	r31, 0xFE	; 254
    38ae:	20 81       	ld	r18, Z
    38b0:	8a 81       	ldd	r24, Y+2	; 0x02
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	fc 01       	movw	r30, r24
    38bc:	e6 51       	subi	r30, 0x16	; 22
    38be:	fe 4f       	sbci	r31, 0xFE	; 254
    38c0:	90 81       	ld	r25, Z
    38c2:	82 2f       	mov	r24, r18
    38c4:	69 2f       	mov	r22, r25
    38c6:	41 e0       	ldi	r20, 0x01	; 1
    38c8:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    38cc:	8d 83       	std	Y+5, r24	; 0x05

				if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    38ce:	8c 81       	ldd	r24, Y+4	; 0x04
    38d0:	88 23       	and	r24, r24
    38d2:	19 f4       	brne	.+6      	; 0x38da <Keypad_enuInit+0x160>
    38d4:	8d 81       	ldd	r24, Y+5	; 0x05
    38d6:	88 23       	and	r24, r24
    38d8:	19 f0       	breq	.+6      	; 0x38e0 <Keypad_enuInit+0x166>
				{
					Local_u8Flag = 1;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	89 83       	std	Y+1, r24	; 0x01
    38de:	09 c0       	rjmp	.+18     	; 0x38f2 <Keypad_enuInit+0x178>
				break;
			}
		}
		if(!Local_u8Flag)
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    38e0:	8a 81       	ldd	r24, Y+2	; 0x02
    38e2:	8f 5f       	subi	r24, 0xFF	; 255
    38e4:	8a 83       	std	Y+2, r24	; 0x02
    38e6:	90 91 d8 01 	lds	r25, 0x01D8
    38ea:	8a 81       	ldd	r24, Y+2	; 0x02
    38ec:	89 17       	cp	r24, r25
    38ee:	08 f4       	brcc	.+2      	; 0x38f2 <Keypad_enuInit+0x178>
    38f0:	be cf       	rjmp	.-132    	; 0x386e <Keypad_enuInit+0xf4>
					Local_u8Flag = 1;
					break;
				}
			}
		}
		if( !Local_u8Flag )
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	88 23       	and	r24, r24
    38f6:	21 f4       	brne	.+8      	; 0x3900 <Keypad_enuInit+0x186>
			Local_enuErrorState = ES_OK;
    38f8:	1b 82       	std	Y+3, r1	; 0x03
    38fa:	02 c0       	rjmp	.+4      	; 0x3900 <Keypad_enuInit+0x186>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    38fc:	82 e0       	ldi	r24, 0x02	; 2
    38fe:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState;//DONE
    3900:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)

{
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	65 97       	sbiw	r28, 0x15	; 21
    391c:	0f b6       	in	r0, 0x3f	; 63
    391e:	f8 94       	cli
    3920:	de bf       	out	0x3e, r29	; 62
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	cd bf       	out	0x3d, r28	; 61
    3926:	9d 8b       	std	Y+21, r25	; 0x15
    3928:	8c 8b       	std	Y+20, r24	; 0x14
	ES_t Local_enuErrorState = ES_NOK;
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	8a 8b       	std	Y+18, r24	; 0x12

	if (Copy_pu8KeyValue != NULL)
    392e:	8c 89       	ldd	r24, Y+20	; 0x14
    3930:	9d 89       	ldd	r25, Y+21	; 0x15
    3932:	00 97       	sbiw	r24, 0x00	; 0
    3934:	09 f4       	brne	.+2      	; 0x3938 <Keypad_enuGetPressedKey+0x26>
    3936:	61 c1       	rjmp	.+706    	; 0x3bfa <Keypad_enuGetPressedKey+0x2e8>
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	8b 8b       	std	Y+19, r24	; 0x13
    393c:	19 8a       	std	Y+17, r1	; 0x11

		*Copy_pu8KeyValue = 0xff;
    393e:	ec 89       	ldd	r30, Y+20	; 0x14
    3940:	fd 89       	ldd	r31, Y+21	; 0x15
    3942:	8f ef       	ldi	r24, 0xFF	; 255
    3944:	80 83       	st	Z, r24

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    3946:	18 8a       	std	Y+16, r1	; 0x10
    3948:	51 c1       	rjmp	.+674    	; 0x3bec <Keypad_enuGetPressedKey+0x2da>
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );
    394a:	88 89       	ldd	r24, Y+16	; 0x10
    394c:	88 2f       	mov	r24, r24
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	88 0f       	add	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	fc 01       	movw	r30, r24
    3956:	e7 51       	subi	r30, 0x17	; 23
    3958:	fe 4f       	sbci	r31, 0xFE	; 254
    395a:	20 81       	ld	r18, Z
    395c:	88 89       	ldd	r24, Y+16	; 0x10
    395e:	88 2f       	mov	r24, r24
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	88 0f       	add	r24, r24
    3964:	99 1f       	adc	r25, r25
    3966:	fc 01       	movw	r30, r24
    3968:	e6 51       	subi	r30, 0x16	; 22
    396a:	fe 4f       	sbci	r31, 0xFE	; 254
    396c:	90 81       	ld	r25, Z
    396e:	82 2f       	mov	r24, r18
    3970:	69 2f       	mov	r22, r25
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3978:	8a 8b       	std	Y+18, r24	; 0x12

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    397a:	1f 86       	std	Y+15, r1	; 0x0f
    397c:	0d c1       	rjmp	.+538    	; 0x3b98 <Keypad_enuGetPressedKey+0x286>
			{
				Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    397e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3980:	28 2f       	mov	r18, r24
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	c9 01       	movw	r24, r18
    3986:	88 0f       	add	r24, r24
    3988:	99 1f       	adc	r25, r25
    398a:	82 0f       	add	r24, r18
    398c:	93 1f       	adc	r25, r19
    398e:	fc 01       	movw	r30, r24
    3990:	ef 50       	subi	r30, 0x0F	; 15
    3992:	fe 4f       	sbci	r31, 0xFE	; 254
    3994:	40 81       	ld	r20, Z
    3996:	8f 85       	ldd	r24, Y+15	; 0x0f
    3998:	28 2f       	mov	r18, r24
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	c9 01       	movw	r24, r18
    399e:	88 0f       	add	r24, r24
    39a0:	99 1f       	adc	r25, r25
    39a2:	82 0f       	add	r24, r18
    39a4:	93 1f       	adc	r25, r19
    39a6:	fc 01       	movw	r30, r24
    39a8:	ee 50       	subi	r30, 0x0E	; 14
    39aa:	fe 4f       	sbci	r31, 0xFE	; 254
    39ac:	90 81       	ld	r25, Z
    39ae:	9e 01       	movw	r18, r28
    39b0:	2d 5e       	subi	r18, 0xED	; 237
    39b2:	3f 4f       	sbci	r19, 0xFF	; 255
    39b4:	84 2f       	mov	r24, r20
    39b6:	69 2f       	mov	r22, r25
    39b8:	a9 01       	movw	r20, r18
    39ba:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_enuGetPinValue>
    39be:	8a 8b       	std	Y+18, r24	; 0x12

				if( (Local_u8RowValue == DIO_u8LOW) && ( Local_enuErrorState == ES_OK) )
    39c0:	8b 89       	ldd	r24, Y+19	; 0x13
    39c2:	88 23       	and	r24, r24
    39c4:	09 f0       	breq	.+2      	; 0x39c8 <Keypad_enuGetPressedKey+0xb6>
    39c6:	e5 c0       	rjmp	.+458    	; 0x3b92 <Keypad_enuGetPressedKey+0x280>
    39c8:	8a 89       	ldd	r24, Y+18	; 0x12
    39ca:	88 23       	and	r24, r24
    39cc:	09 f0       	breq	.+2      	; 0x39d0 <Keypad_enuGetPressedKey+0xbe>
    39ce:	e1 c0       	rjmp	.+450    	; 0x3b92 <Keypad_enuGetPressedKey+0x280>
    39d0:	80 e0       	ldi	r24, 0x00	; 0
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	a0 e4       	ldi	r26, 0x40	; 64
    39d6:	b0 e4       	ldi	r27, 0x40	; 64
    39d8:	8b 87       	std	Y+11, r24	; 0x0b
    39da:	9c 87       	std	Y+12, r25	; 0x0c
    39dc:	ad 87       	std	Y+13, r26	; 0x0d
    39de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    39e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    39e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	4a e7       	ldi	r20, 0x7A	; 122
    39ee:	55 e4       	ldi	r21, 0x45	; 69
    39f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	8f 83       	std	Y+7, r24	; 0x07
    39fa:	98 87       	std	Y+8, r25	; 0x08
    39fc:	a9 87       	std	Y+9, r26	; 0x09
    39fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a00:	6f 81       	ldd	r22, Y+7	; 0x07
    3a02:	78 85       	ldd	r23, Y+8	; 0x08
    3a04:	89 85       	ldd	r24, Y+9	; 0x09
    3a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e8       	ldi	r20, 0x80	; 128
    3a0e:	5f e3       	ldi	r21, 0x3F	; 63
    3a10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a14:	88 23       	and	r24, r24
    3a16:	2c f4       	brge	.+10     	; 0x3a22 <Keypad_enuGetPressedKey+0x110>
		__ticks = 1;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	9e 83       	std	Y+6, r25	; 0x06
    3a1e:	8d 83       	std	Y+5, r24	; 0x05
    3a20:	3f c0       	rjmp	.+126    	; 0x3aa0 <Keypad_enuGetPressedKey+0x18e>
	else if (__tmp > 65535)
    3a22:	6f 81       	ldd	r22, Y+7	; 0x07
    3a24:	78 85       	ldd	r23, Y+8	; 0x08
    3a26:	89 85       	ldd	r24, Y+9	; 0x09
    3a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	3f ef       	ldi	r19, 0xFF	; 255
    3a2e:	4f e7       	ldi	r20, 0x7F	; 127
    3a30:	57 e4       	ldi	r21, 0x47	; 71
    3a32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a36:	18 16       	cp	r1, r24
    3a38:	4c f5       	brge	.+82     	; 0x3a8c <Keypad_enuGetPressedKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e2       	ldi	r20, 0x20	; 32
    3a48:	51 e4       	ldi	r21, 0x41	; 65
    3a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	9e 83       	std	Y+6, r25	; 0x06
    3a60:	8d 83       	std	Y+5, r24	; 0x05
    3a62:	0f c0       	rjmp	.+30     	; 0x3a82 <Keypad_enuGetPressedKey+0x170>
    3a64:	80 e9       	ldi	r24, 0x90	; 144
    3a66:	91 e0       	ldi	r25, 0x01	; 1
    3a68:	9c 83       	std	Y+4, r25	; 0x04
    3a6a:	8b 83       	std	Y+3, r24	; 0x03
    3a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	f1 f7       	brne	.-4      	; 0x3a70 <Keypad_enuGetPressedKey+0x15e>
    3a74:	9c 83       	std	Y+4, r25	; 0x04
    3a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a78:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	9e 83       	std	Y+6, r25	; 0x06
    3a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	9e 81       	ldd	r25, Y+6	; 0x06
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	69 f7       	brne	.-38     	; 0x3a64 <Keypad_enuGetPressedKey+0x152>
    3a8a:	14 c0       	rjmp	.+40     	; 0x3ab4 <Keypad_enuGetPressedKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a8e:	78 85       	ldd	r23, Y+8	; 0x08
    3a90:	89 85       	ldd	r24, Y+9	; 0x09
    3a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	9e 83       	std	Y+6, r25	; 0x06
    3a9e:	8d 83       	std	Y+5, r24	; 0x05
    3aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	f1 f7       	brne	.-4      	; 0x3aac <Keypad_enuGetPressedKey+0x19a>
    3ab0:	9a 83       	std	Y+2, r25	; 0x02
    3ab2:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(KEYPAD_BOUNCE_DELAY);
					Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    3ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab6:	28 2f       	mov	r18, r24
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	c9 01       	movw	r24, r18
    3abc:	88 0f       	add	r24, r24
    3abe:	99 1f       	adc	r25, r25
    3ac0:	82 0f       	add	r24, r18
    3ac2:	93 1f       	adc	r25, r19
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	ef 50       	subi	r30, 0x0F	; 15
    3ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aca:	40 81       	ld	r20, Z
    3acc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ace:	28 2f       	mov	r18, r24
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	c9 01       	movw	r24, r18
    3ad4:	88 0f       	add	r24, r24
    3ad6:	99 1f       	adc	r25, r25
    3ad8:	82 0f       	add	r24, r18
    3ada:	93 1f       	adc	r25, r19
    3adc:	fc 01       	movw	r30, r24
    3ade:	ee 50       	subi	r30, 0x0E	; 14
    3ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae2:	90 81       	ld	r25, Z
    3ae4:	9e 01       	movw	r18, r28
    3ae6:	2d 5e       	subi	r18, 0xED	; 237
    3ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aea:	84 2f       	mov	r24, r20
    3aec:	69 2f       	mov	r22, r25
    3aee:	a9 01       	movw	r20, r18
    3af0:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_enuGetPinValue>
    3af4:	8a 8b       	std	Y+18, r24	; 0x12

					if( Local_enuErrorState == ES_OK  && Local_u8RowValue == DIO_u8LOW )
    3af6:	8a 89       	ldd	r24, Y+18	; 0x12
    3af8:	88 23       	and	r24, r24
    3afa:	09 f0       	breq	.+2      	; 0x3afe <Keypad_enuGetPressedKey+0x1ec>
    3afc:	4a c0       	rjmp	.+148    	; 0x3b92 <Keypad_enuGetPressedKey+0x280>
    3afe:	8b 89       	ldd	r24, Y+19	; 0x13
    3b00:	88 23       	and	r24, r24
    3b02:	09 f0       	breq	.+2      	; 0x3b06 <Keypad_enuGetPressedKey+0x1f4>
    3b04:	46 c0       	rjmp	.+140    	; 0x3b92 <Keypad_enuGetPressedKey+0x280>
					{
						Local_u8Pressed = 1 ;
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	89 8b       	std	Y+17, r24	; 0x11
						*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];
    3b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b0c:	28 2f       	mov	r18, r24
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	80 91 d8 01 	lds	r24, 0x01D8
    3b14:	88 2f       	mov	r24, r24
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	a9 01       	movw	r20, r18
    3b1a:	48 9f       	mul	r20, r24
    3b1c:	90 01       	movw	r18, r0
    3b1e:	49 9f       	mul	r20, r25
    3b20:	30 0d       	add	r19, r0
    3b22:	58 9f       	mul	r21, r24
    3b24:	30 0d       	add	r19, r0
    3b26:	11 24       	eor	r1, r1
    3b28:	88 89       	ldd	r24, Y+16	; 0x10
    3b2a:	88 2f       	mov	r24, r24
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	82 0f       	add	r24, r18
    3b30:	93 1f       	adc	r25, r19
    3b32:	fc 01       	movw	r30, r24
    3b34:	e7 52       	subi	r30, 0x27	; 39
    3b36:	fe 4f       	sbci	r31, 0xFE	; 254
    3b38:	80 81       	ld	r24, Z
    3b3a:	ec 89       	ldd	r30, Y+20	; 0x14
    3b3c:	fd 89       	ldd	r31, Y+21	; 0x15
    3b3e:	80 83       	st	Z, r24
    3b40:	21 c0       	rjmp	.+66     	; 0x3b84 <Keypad_enuGetPressedKey+0x272>

						while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
						{
							Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    3b42:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b44:	28 2f       	mov	r18, r24
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	c9 01       	movw	r24, r18
    3b4a:	88 0f       	add	r24, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	82 0f       	add	r24, r18
    3b50:	93 1f       	adc	r25, r19
    3b52:	fc 01       	movw	r30, r24
    3b54:	ef 50       	subi	r30, 0x0F	; 15
    3b56:	fe 4f       	sbci	r31, 0xFE	; 254
    3b58:	40 81       	ld	r20, Z
    3b5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b5c:	28 2f       	mov	r18, r24
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	c9 01       	movw	r24, r18
    3b62:	88 0f       	add	r24, r24
    3b64:	99 1f       	adc	r25, r25
    3b66:	82 0f       	add	r24, r18
    3b68:	93 1f       	adc	r25, r19
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	ee 50       	subi	r30, 0x0E	; 14
    3b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b70:	90 81       	ld	r25, Z
    3b72:	9e 01       	movw	r18, r28
    3b74:	2d 5e       	subi	r18, 0xED	; 237
    3b76:	3f 4f       	sbci	r19, 0xFF	; 255
    3b78:	84 2f       	mov	r24, r20
    3b7a:	69 2f       	mov	r22, r25
    3b7c:	a9 01       	movw	r20, r18
    3b7e:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_enuGetPinValue>
    3b82:	8a 8b       	std	Y+18, r24	; 0x12
					if( Local_enuErrorState == ES_OK  && Local_u8RowValue == DIO_u8LOW )
					{
						Local_u8Pressed = 1 ;
						*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];

						while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
    3b84:	8b 89       	ldd	r24, Y+19	; 0x13
    3b86:	88 23       	and	r24, r24
    3b88:	81 f4       	brne	.+32     	; 0x3baa <Keypad_enuGetPressedKey+0x298>
    3b8a:	8a 89       	ldd	r24, Y+18	; 0x12
    3b8c:	88 23       	and	r24, r24
    3b8e:	c9 f2       	breq	.-78     	; 0x3b42 <Keypad_enuGetPressedKey+0x230>
    3b90:	0c c0       	rjmp	.+24     	; 0x3baa <Keypad_enuGetPressedKey+0x298>

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    3b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b94:	8f 5f       	subi	r24, 0xFF	; 255
    3b96:	8f 87       	std	Y+15, r24	; 0x0f
    3b98:	8a 89       	ldd	r24, Y+18	; 0x12
    3b9a:	88 23       	and	r24, r24
    3b9c:	31 f4       	brne	.+12     	; 0x3baa <Keypad_enuGetPressedKey+0x298>
    3b9e:	90 91 d7 01 	lds	r25, 0x01D7
    3ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba4:	89 17       	cp	r24, r25
    3ba6:	08 f4       	brcc	.+2      	; 0x3baa <Keypad_enuGetPressedKey+0x298>
    3ba8:	ea ce       	rjmp	.-556    	; 0x397e <Keypad_enuGetPressedKey+0x6c>
						break;
					}
				}
			}

			if( (Local_u8Pressed == 1) || (Local_enuErrorState != ES_OK) )
    3baa:	89 89       	ldd	r24, Y+17	; 0x11
    3bac:	81 30       	cpi	r24, 0x01	; 1
    3bae:	39 f1       	breq	.+78     	; 0x3bfe <Keypad_enuGetPressedKey+0x2ec>
    3bb0:	8a 89       	ldd	r24, Y+18	; 0x12
    3bb2:	88 23       	and	r24, r24
    3bb4:	21 f5       	brne	.+72     	; 0x3bfe <Keypad_enuGetPressedKey+0x2ec>
				break;
			else
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
    3bb6:	88 89       	ldd	r24, Y+16	; 0x10
    3bb8:	88 2f       	mov	r24, r24
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	e7 51       	subi	r30, 0x17	; 23
    3bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bc6:	20 81       	ld	r18, Z
    3bc8:	88 89       	ldd	r24, Y+16	; 0x10
    3bca:	88 2f       	mov	r24, r24
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	88 0f       	add	r24, r24
    3bd0:	99 1f       	adc	r25, r25
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	e6 51       	subi	r30, 0x16	; 22
    3bd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd8:	90 81       	ld	r25, Z
    3bda:	82 2f       	mov	r24, r18
    3bdc:	69 2f       	mov	r22, r25
    3bde:	41 e0       	ldi	r20, 0x01	; 1
    3be0:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3be4:	8a 8b       	std	Y+18, r24	; 0x12
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;

		*Copy_pu8KeyValue = 0xff;

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    3be6:	88 89       	ldd	r24, Y+16	; 0x10
    3be8:	8f 5f       	subi	r24, 0xFF	; 255
    3bea:	88 8b       	std	Y+16, r24	; 0x10
    3bec:	90 91 d8 01 	lds	r25, 0x01D8
    3bf0:	88 89       	ldd	r24, Y+16	; 0x10
    3bf2:	89 17       	cp	r24, r25
    3bf4:	08 f4       	brcc	.+2      	; 0x3bf8 <Keypad_enuGetPressedKey+0x2e6>
    3bf6:	a9 ce       	rjmp	.-686    	; 0x394a <Keypad_enuGetPressedKey+0x38>
    3bf8:	02 c0       	rjmp	.+4      	; 0x3bfe <Keypad_enuGetPressedKey+0x2ec>
				break;
			else
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
		}
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    3bfa:	83 e0       	ldi	r24, 0x03	; 3
    3bfc:	8a 8b       	std	Y+18, r24	; 0x12

	return Local_enuErrorState;//DONE
    3bfe:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3c00:	65 96       	adiw	r28, 0x15	; 21
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	cf 91       	pop	r28
    3c0e:	df 91       	pop	r29
    3c10:	08 95       	ret

00003c12 <Keypad_Sleep>:

ES_t Keypad_Sleep(void)
{
    3c12:	df 93       	push	r29
    3c14:	cf 93       	push	r28
    3c16:	00 d0       	rcall	.+0      	; 0x3c18 <Keypad_Sleep+0x6>
    3c18:	cd b7       	in	r28, 0x3d	; 61
    3c1a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter=0 ;
    3c20:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    3c22:	90 91 d7 01 	lds	r25, 0x01D7
    3c26:	80 91 d6 01 	lds	r24, 0x01D6
    3c2a:	89 17       	cp	r24, r25
    3c2c:	08 f4       	brcc	.+2      	; 0x3c30 <Keypad_Sleep+0x1e>
    3c2e:	5a c0       	rjmp	.+180    	; 0x3ce4 <Keypad_Sleep+0xd2>
    3c30:	90 91 d8 01 	lds	r25, 0x01D8
    3c34:	80 91 d6 01 	lds	r24, 0x01D6
    3c38:	89 17       	cp	r24, r25
    3c3a:	08 f4       	brcc	.+2      	; 0x3c3e <Keypad_Sleep+0x2c>
    3c3c:	53 c0       	rjmp	.+166    	; 0x3ce4 <Keypad_Sleep+0xd2>
    3c3e:	24 c0       	rjmp	.+72     	; 0x3c88 <Keypad_Sleep+0x76>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8FLOAT	);
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	28 2f       	mov	r18, r24
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	c9 01       	movw	r24, r18
    3c48:	88 0f       	add	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	82 0f       	add	r24, r18
    3c4e:	93 1f       	adc	r25, r19
    3c50:	fc 01       	movw	r30, r24
    3c52:	ef 50       	subi	r30, 0x0F	; 15
    3c54:	fe 4f       	sbci	r31, 0xFE	; 254
    3c56:	40 81       	ld	r20, Z
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	28 2f       	mov	r18, r24
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	c9 01       	movw	r24, r18
    3c60:	88 0f       	add	r24, r24
    3c62:	99 1f       	adc	r25, r25
    3c64:	82 0f       	add	r24, r18
    3c66:	93 1f       	adc	r25, r19
    3c68:	fc 01       	movw	r30, r24
    3c6a:	ee 50       	subi	r30, 0x0E	; 14
    3c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6e:	90 81       	ld	r25, Z
    3c70:	84 2f       	mov	r24, r20
    3c72:	69 2f       	mov	r22, r25
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3c7a:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_enuErrorState != ES_OK  )	break;
    3c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7e:	88 23       	and	r24, r24
    3c80:	41 f4       	brne	.+16     	; 0x3c92 <Keypad_Sleep+0x80>
	ES_t Local_enuErrorState = ES_NOK ;
	u8 Local_u8Iter=0 ;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	8f 5f       	subi	r24, 0xFF	; 255
    3c86:	89 83       	std	Y+1, r24	; 0x01
    3c88:	90 91 d7 01 	lds	r25, 0x01D7
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	89 17       	cp	r24, r25
    3c90:	b8 f2       	brcs	.-82     	; 0x3c40 <Keypad_Sleep+0x2e>
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8FLOAT	);

			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
    3c92:	8a 81       	ldd	r24, Y+2	; 0x02
    3c94:	88 23       	and	r24, r24
    3c96:	41 f5       	brne	.+80     	; 0x3ce8 <Keypad_Sleep+0xd6>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3c98:	19 82       	std	Y+1, r1	; 0x01
    3c9a:	1e c0       	rjmp	.+60     	; 0x3cd8 <Keypad_Sleep+0xc6>
			{
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8LOW );
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	88 2f       	mov	r24, r24
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	88 0f       	add	r24, r24
    3ca4:	99 1f       	adc	r25, r25
    3ca6:	fc 01       	movw	r30, r24
    3ca8:	e7 51       	subi	r30, 0x17	; 23
    3caa:	fe 4f       	sbci	r31, 0xFE	; 254
    3cac:	20 81       	ld	r18, Z
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	88 2f       	mov	r24, r24
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	88 0f       	add	r24, r24
    3cb6:	99 1f       	adc	r25, r25
    3cb8:	fc 01       	movw	r30, r24
    3cba:	e6 51       	subi	r30, 0x16	; 22
    3cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3cbe:	90 81       	ld	r25, Z
    3cc0:	82 2f       	mov	r24, r18
    3cc2:	69 2f       	mov	r22, r25
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3cca:	8a 83       	std	Y+2, r24	; 0x02

				if(Local_enuErrorState != ES_OK  )	break;
    3ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cce:	88 23       	and	r24, r24
    3cd0:	59 f4       	brne	.+22     	; 0x3ce8 <Keypad_Sleep+0xd6>
			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3cd2:	89 81       	ldd	r24, Y+1	; 0x01
    3cd4:	8f 5f       	subi	r24, 0xFF	; 255
    3cd6:	89 83       	std	Y+1, r24	; 0x01
    3cd8:	90 91 d8 01 	lds	r25, 0x01D8
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	89 17       	cp	r24, r25
    3ce0:	e8 f2       	brcs	.-70     	; 0x3c9c <Keypad_Sleep+0x8a>
    3ce2:	02 c0       	rjmp	.+4      	; 0x3ce8 <Keypad_Sleep+0xd6>

				if(Local_enuErrorState != ES_OK  )	break;
			}
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3ce4:	82 e0       	ldi	r24, 0x02	; 2
    3ce6:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;//DONE
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	cf 91       	pop	r28
    3cf0:	df 91       	pop	r29
    3cf2:	08 95       	ret

00003cf4 <Keypad_Awake>:

ES_t Keypad_Awake(void)
{
    3cf4:	df 93       	push	r29
    3cf6:	cf 93       	push	r28
    3cf8:	00 d0       	rcall	.+0      	; 0x3cfa <Keypad_Awake+0x6>
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter=0 ;
    3d02:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    3d04:	90 91 d7 01 	lds	r25, 0x01D7
    3d08:	80 91 d6 01 	lds	r24, 0x01D6
    3d0c:	89 17       	cp	r24, r25
    3d0e:	08 f4       	brcc	.+2      	; 0x3d12 <Keypad_Awake+0x1e>
    3d10:	66 c0       	rjmp	.+204    	; 0x3dde <Keypad_Awake+0xea>
    3d12:	90 91 d8 01 	lds	r25, 0x01D8
    3d16:	80 91 d6 01 	lds	r24, 0x01D6
    3d1a:	89 17       	cp	r24, r25
    3d1c:	08 f4       	brcc	.+2      	; 0x3d20 <Keypad_Awake+0x2c>
    3d1e:	5f c0       	rjmp	.+190    	; 0x3dde <Keypad_Awake+0xea>
    3d20:	30 c0       	rjmp	.+96     	; 0x3d82 <Keypad_Awake+0x8e>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState );
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	28 2f       	mov	r18, r24
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	c9 01       	movw	r24, r18
    3d2a:	88 0f       	add	r24, r24
    3d2c:	99 1f       	adc	r25, r25
    3d2e:	82 0f       	add	r24, r18
    3d30:	93 1f       	adc	r25, r19
    3d32:	fc 01       	movw	r30, r24
    3d34:	ef 50       	subi	r30, 0x0F	; 15
    3d36:	fe 4f       	sbci	r31, 0xFE	; 254
    3d38:	50 81       	ld	r21, Z
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	28 2f       	mov	r18, r24
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	c9 01       	movw	r24, r18
    3d42:	88 0f       	add	r24, r24
    3d44:	99 1f       	adc	r25, r25
    3d46:	82 0f       	add	r24, r18
    3d48:	93 1f       	adc	r25, r19
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	ee 50       	subi	r30, 0x0E	; 14
    3d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d50:	40 81       	ld	r20, Z
    3d52:	89 81       	ldd	r24, Y+1	; 0x01
    3d54:	28 2f       	mov	r18, r24
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	c9 01       	movw	r24, r18
    3d5a:	88 0f       	add	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	82 0f       	add	r24, r18
    3d60:	93 1f       	adc	r25, r19
    3d62:	fc 01       	movw	r30, r24
    3d64:	ed 50       	subi	r30, 0x0D	; 13
    3d66:	fe 4f       	sbci	r31, 0xFE	; 254
    3d68:	90 81       	ld	r25, Z
    3d6a:	85 2f       	mov	r24, r21
    3d6c:	64 2f       	mov	r22, r20
    3d6e:	49 2f       	mov	r20, r25
    3d70:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3d74:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_enuErrorState != ES_OK  )	break;
    3d76:	8a 81       	ldd	r24, Y+2	; 0x02
    3d78:	88 23       	and	r24, r24
    3d7a:	41 f4       	brne	.+16     	; 0x3d8c <Keypad_Awake+0x98>
	ES_t Local_enuErrorState = ES_NOK ;
	u8 Local_u8Iter=0 ;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	8f 5f       	subi	r24, 0xFF	; 255
    3d80:	89 83       	std	Y+1, r24	; 0x01
    3d82:	90 91 d7 01 	lds	r25, 0x01D7
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	89 17       	cp	r24, r25
    3d8a:	58 f2       	brcs	.-106    	; 0x3d22 <Keypad_Awake+0x2e>
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState );

			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
    3d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8e:	88 23       	and	r24, r24
    3d90:	41 f5       	brne	.+80     	; 0x3de2 <Keypad_Awake+0xee>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3d92:	19 82       	std	Y+1, r1	; 0x01
    3d94:	1e c0       	rjmp	.+60     	; 0x3dd2 <Keypad_Awake+0xde>
			{
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8HIGH );
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	88 2f       	mov	r24, r24
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	88 0f       	add	r24, r24
    3d9e:	99 1f       	adc	r25, r25
    3da0:	fc 01       	movw	r30, r24
    3da2:	e7 51       	subi	r30, 0x17	; 23
    3da4:	fe 4f       	sbci	r31, 0xFE	; 254
    3da6:	20 81       	ld	r18, Z
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	88 2f       	mov	r24, r24
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	88 0f       	add	r24, r24
    3db0:	99 1f       	adc	r25, r25
    3db2:	fc 01       	movw	r30, r24
    3db4:	e6 51       	subi	r30, 0x16	; 22
    3db6:	fe 4f       	sbci	r31, 0xFE	; 254
    3db8:	90 81       	ld	r25, Z
    3dba:	82 2f       	mov	r24, r18
    3dbc:	69 2f       	mov	r22, r25
    3dbe:	41 e0       	ldi	r20, 0x01	; 1
    3dc0:	0e 94 32 0b 	call	0x1664	; 0x1664 <DIO_enuSetPinValue>
    3dc4:	8a 83       	std	Y+2, r24	; 0x02

				if(Local_enuErrorState != ES_OK  )
    3dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc8:	88 23       	and	r24, r24
    3dca:	59 f4       	brne	.+22     	; 0x3de2 <Keypad_Awake+0xee>
			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	8f 5f       	subi	r24, 0xFF	; 255
    3dd0:	89 83       	std	Y+1, r24	; 0x01
    3dd2:	90 91 d8 01 	lds	r25, 0x01D8
    3dd6:	89 81       	ldd	r24, Y+1	; 0x01
    3dd8:	89 17       	cp	r24, r25
    3dda:	e8 f2       	brcs	.-70     	; 0x3d96 <Keypad_Awake+0xa2>
    3ddc:	02 c0       	rjmp	.+4      	; 0x3de2 <Keypad_Awake+0xee>
			}

		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3dde:	82 e0       	ldi	r24, 0x02	; 2
    3de0:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;//DONE
    3de2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	cf 91       	pop	r28
    3dea:	df 91       	pop	r29
    3dec:	08 95       	ret

00003dee <main>:
u8 Global_u8SetTemp = 27 ;


int
main(void)
{
    3dee:	df 93       	push	r29
    3df0:	cf 93       	push	r28
    3df2:	00 d0       	rcall	.+0      	; 0x3df4 <main+0x6>
    3df4:	0f 92       	push	r0
    3df6:	cd b7       	in	r28, 0x3d	; 61
    3df8:	de b7       	in	r29, 0x3e	; 62
//	ES_t  Local_enuErrorState ;
//	u8 Local_u8Key = KEYPAD_NOT_PRESSED ;
	u16 Local_u8ActTemp;

	if( HVAC_enuInit() == ES_OK )
    3dfa:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <HVAC_enuInit>
    3dfe:	88 23       	and	r24, r24
    3e00:	09 f0       	breq	.+2      	; 0x3e04 <main+0x16>
    3e02:	a2 c0       	rjmp	.+324    	; 0x3f48 <main+0x15a>
	{
		LD_enuSetState( HOT_LD , LD_ON);
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	61 e0       	ldi	r22, 0x01	; 1
    3e08:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
		if( HVAC_enuSetup() == ES_OK )
    3e0c:	0e 94 0b 21 	call	0x4216	; 0x4216 <HVAC_enuSetup>
    3e10:	88 23       	and	r24, r24
    3e12:	09 f0       	breq	.+2      	; 0x3e16 <main+0x28>
    3e14:	99 c0       	rjmp	.+306    	; 0x3f48 <main+0x15a>
		{
			for(;;)
			{
				if( Global_boolPower == TRUE)
    3e16:	80 91 ff 01 	lds	r24, 0x01FF
    3e1a:	88 23       	and	r24, r24
    3e1c:	09 f0       	breq	.+2      	; 0x3e20 <main+0x32>
    3e1e:	8c c0       	rjmp	.+280    	; 0x3f38 <main+0x14a>
				{
					if( Initial_Start == TRUE)
    3e20:	80 91 0d 02 	lds	r24, 0x020D
    3e24:	88 23       	and	r24, r24
    3e26:	11 f4       	brne	.+4      	; 0x3e2c <main+0x3e>
					{
						HVAC_Awake();
    3e28:	0e 94 64 21 	call	0x42c8	; 0x42c8 <HVAC_Awake>
					}
					if( Global_boolSetMode == TRUE)
    3e2c:	80 91 01 02 	lds	r24, 0x0201
    3e30:	88 23       	and	r24, r24
    3e32:	29 f4       	brne	.+10     	; 0x3e3e <main+0x50>
					{
						HVAC_SetTemp();
    3e34:	0e 94 00 23 	call	0x4600	; 0x4600 <HVAC_SetTemp>
						Global_boolSetMode = FALSE;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	80 93 01 02 	sts	0x0201, r24
					}

					ADC_enuStartConversion();
    3e3e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <ADC_enuStartConversion>
					while( Global_boolRead == FALSE);
    3e42:	80 91 00 02 	lds	r24, 0x0200
    3e46:	81 30       	cpi	r24, 0x01	; 1
    3e48:	e1 f3       	breq	.-8      	; 0x3e42 <main+0x54>
					Global_boolRead = FALSE;
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	80 93 00 02 	sts	0x0200, r24
					Local_u8ActTemp = Global_u16TempRead / (ADC_GAIN_FACTOR * TEMP_COEFFICENT) ;
    3e50:	80 91 0e 02 	lds	r24, 0x020E
    3e54:	90 91 0f 02 	lds	r25, 0x020F
    3e58:	2a e0       	ldi	r18, 0x0A	; 10
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	b9 01       	movw	r22, r18
    3e5e:	0e 94 01 24 	call	0x4802	; 0x4802 <__udivmodhi4>
    3e62:	cb 01       	movw	r24, r22
    3e64:	9a 83       	std	Y+2, r25	; 0x02
    3e66:	89 83       	std	Y+1, r24	; 0x01
					if( ABS_DIFF( Global_u16TempRead , Global_u16PrevRead ) >= ( ADC_GAIN_FACTOR * TEMP_COEFFICENT ) )
    3e68:	20 91 0e 02 	lds	r18, 0x020E
    3e6c:	30 91 0f 02 	lds	r19, 0x020F
    3e70:	80 91 10 02 	lds	r24, 0x0210
    3e74:	90 91 11 02 	lds	r25, 0x0211
    3e78:	28 17       	cp	r18, r24
    3e7a:	39 07       	cpc	r19, r25
    3e7c:	89 f0       	breq	.+34     	; 0x3ea0 <main+0xb2>
    3e7e:	80 91 0e 02 	lds	r24, 0x020E
    3e82:	90 91 0f 02 	lds	r25, 0x020F
    3e86:	20 91 10 02 	lds	r18, 0x0210
    3e8a:	30 91 11 02 	lds	r19, 0x0211
    3e8e:	82 1b       	sub	r24, r18
    3e90:	93 0b       	sbc	r25, r19
    3e92:	1b 82       	std	Y+3, r1	; 0x03
    3e94:	8a 30       	cpi	r24, 0x0A	; 10
    3e96:	91 05       	cpc	r25, r1
    3e98:	98 f0       	brcs	.+38     	; 0x3ec0 <main+0xd2>
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	8b 83       	std	Y+3, r24	; 0x03
    3e9e:	10 c0       	rjmp	.+32     	; 0x3ec0 <main+0xd2>
    3ea0:	80 91 10 02 	lds	r24, 0x0210
    3ea4:	90 91 11 02 	lds	r25, 0x0211
    3ea8:	20 91 0e 02 	lds	r18, 0x020E
    3eac:	30 91 0f 02 	lds	r19, 0x020F
    3eb0:	82 1b       	sub	r24, r18
    3eb2:	93 0b       	sbc	r25, r19
    3eb4:	1b 82       	std	Y+3, r1	; 0x03
    3eb6:	8a 30       	cpi	r24, 0x0A	; 10
    3eb8:	91 05       	cpc	r25, r1
    3eba:	10 f0       	brcs	.+4      	; 0x3ec0 <main+0xd2>
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	8b 83       	std	Y+3, r24	; 0x03
    3ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec2:	88 23       	and	r24, r24
    3ec4:	49 f1       	breq	.+82     	; 0x3f18 <main+0x12a>
					{
						DISPLAY_TEMPERATURE_MESSAGE;
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_enuWriteCommand>
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	63 e0       	ldi	r22, 0x03	; 3
    3ed0:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_enuGoToPosition>
    3ed4:	80 e6       	ldi	r24, 0x60	; 96
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_enuWriteString>
    3edc:	82 e0       	ldi	r24, 0x02	; 2
    3ede:	63 e0       	ldi	r22, 0x03	; 3
    3ee0:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_enuGoToPosition>
						LCD_enuWriteIntegerNum( (s32) Local_u8ActTemp );
    3ee4:	89 81       	ldd	r24, Y+1	; 0x01
    3ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee8:	cc 01       	movw	r24, r24
    3eea:	a0 e0       	ldi	r26, 0x00	; 0
    3eec:	b0 e0       	ldi	r27, 0x00	; 0
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_enuWriteIntegerNum>
						LCD_enuGoToPosition(2,12);
    3ef6:	82 e0       	ldi	r24, 0x02	; 2
    3ef8:	6c e0       	ldi	r22, 0x0C	; 12
    3efa:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_enuGoToPosition>
						if( CompressorStatus == ON)
    3efe:	80 91 fd 01 	lds	r24, 0x01FD
    3f02:	88 23       	and	r24, r24
    3f04:	29 f4       	brne	.+10     	; 0x3f10 <main+0x122>
						{
							LCD_enuWriteString("ON");
    3f06:	8c e6       	ldi	r24, 0x6C	; 108
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_enuWriteString>
    3f0e:	04 c0       	rjmp	.+8      	; 0x3f18 <main+0x12a>
						}
						else
						{
							LCD_enuWriteString("OFF");
    3f10:	8f e6       	ldi	r24, 0x6F	; 111
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_enuWriteString>
						}
					}
					Global_u16PrevRead = Global_u16TempRead;
    3f18:	80 91 0e 02 	lds	r24, 0x020E
    3f1c:	90 91 0f 02 	lds	r25, 0x020F
    3f20:	90 93 11 02 	sts	0x0211, r25
    3f24:	80 93 10 02 	sts	0x0210, r24
					HVAC_CheckTemperatureStatus( Local_u8ActTemp );
    3f28:	89 81       	ldd	r24, Y+1	; 0x01
    3f2a:	0e 94 8c 23 	call	0x4718	; 0x4718 <HVAC_CheckTemperatureStatus>
					HVAC_AdjustCompressorStatus();
    3f2e:	0e 94 da 23 	call	0x47b4	; 0x47b4 <HVAC_AdjustCompressorStatus>
					HVAC_StandByMode();
    3f32:	0e 94 64 22 	call	0x44c8	; 0x44c8 <HVAC_StandByMode>
    3f36:	6f cf       	rjmp	.-290    	; 0x3e16 <main+0x28>
				}
				else if ( Sleep_Mode == TRUE )
    3f38:	80 91 02 02 	lds	r24, 0x0202
    3f3c:	88 23       	and	r24, r24
    3f3e:	09 f0       	breq	.+2      	; 0x3f42 <main+0x154>
    3f40:	6a cf       	rjmp	.-300    	; 0x3e16 <main+0x28>
				{
					HVAC_Sleep();
    3f42:	0e 94 ba 21 	call	0x4374	; 0x4374 <HVAC_Sleep>
    3f46:	67 cf       	rjmp	.-306    	; 0x3e16 <main+0x28>
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
		}
	}

}
    3f4c:	0f 90       	pop	r0
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	cf 91       	pop	r28
    3f54:	df 91       	pop	r29
    3f56:	08 95       	ret

00003f58 <HVAC_enuInit>:

ES_t HVAC_enuInit(void)
{
    3f58:	df 93       	push	r29
    3f5a:	cf 93       	push	r28
    3f5c:	cd b7       	in	r28, 0x3d	; 61
    3f5e:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
    3f60:	0e 94 3a 0a 	call	0x1474	; 0x1474 <DIO_enuInit>
	EXTI_enuInit();
    3f64:	0e 94 86 06 	call	0xd0c	; 0xd0c <EXTI_enuInit>
	EXTI_enuEnableInterrupt(INT0);
    3f68:	8d e3       	ldi	r24, 0x3D	; 61
    3f6a:	0e 94 3b 08 	call	0x1076	; 0x1076 <EXTI_enuEnableInterrupt>
	ADC_enuInit();
    3f6e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ADC_enuInit>
	GIE_enuEnable();
    3f72:	0e 94 74 06 	call	0xce8	; 0xce8 <GIE_enuEnable>

	LCD_enuInit();
    3f76:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_enuInit>
	Keypad_enuInit();
    3f7a:	0e 94 bd 1b 	call	0x377a	; 0x377a <Keypad_enuInit>
	Switch_enuInit();
    3f7e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <Switch_enuInit>
	LD_enuInit();
    3f82:	0e 94 8d 12 	call	0x251a	; 0x251a <LD_enuInit>
	LM35_enuInit();
    3f86:	0e 94 47 12 	call	0x248e	; 0x248e <LM35_enuInit>

	return ES_OK;
    3f8a:	80 e0       	ldi	r24, 0x00	; 0
}
    3f8c:	cf 91       	pop	r28
    3f8e:	df 91       	pop	r29
    3f90:	08 95       	ret

00003f92 <ADC_vidISR>:

void ADC_vidISR(void)
{
    3f92:	df 93       	push	r29
    3f94:	cf 93       	push	r28
    3f96:	cd b7       	in	r28, 0x3d	; 61
    3f98:	de b7       	in	r29, 0x3e	; 62
	ADC_enuRead( &Global_u16TempRead );
    3f9a:	8e e0       	ldi	r24, 0x0E	; 14
    3f9c:	92 e0       	ldi	r25, 0x02	; 2
    3f9e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <ADC_enuRead>
	Global_boolRead = TRUE;
    3fa2:	10 92 00 02 	sts	0x0200, r1
}
    3fa6:	cf 91       	pop	r28
    3fa8:	df 91       	pop	r29
    3faa:	08 95       	ret

00003fac <EXTI_vidISR_INT0>:

void EXTI_vidISR_INT0(void) /////Need to be completed
{
    3fac:	df 93       	push	r29
    3fae:	cf 93       	push	r28
    3fb0:	cd b7       	in	r28, 0x3d	; 61
    3fb2:	de b7       	in	r29, 0x3e	; 62
    3fb4:	6d 97       	sbiw	r28, 0x1d	; 29
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	f8 94       	cli
    3fba:	de bf       	out	0x3e, r29	; 62
    3fbc:	0f be       	out	0x3f, r0	; 63
    3fbe:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyValue = SWITCH_UNPRESSED;
    3fc0:	8f e6       	ldi	r24, 0x6F	; 111
    3fc2:	8d 8f       	std	Y+29, r24	; 0x1d

	if( Switch_enuGetPressed( POWER_SWITCH , &Local_u8KeyValue) == ES_OK)
    3fc4:	9e 01       	movw	r18, r28
    3fc6:	23 5e       	subi	r18, 0xE3	; 227
    3fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3fca:	8b ec       	ldi	r24, 0xCB	; 203
    3fcc:	b9 01       	movw	r22, r18
    3fce:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <Switch_enuGetPressed>
    3fd2:	88 23       	and	r24, r24
    3fd4:	09 f0       	breq	.+2      	; 0x3fd8 <EXTI_vidISR_INT0+0x2c>
    3fd6:	16 c1       	rjmp	.+556    	; 0x4204 <EXTI_vidISR_INT0+0x258>
	{
		if( Local_u8KeyValue ==  POWER_SWITCH_PRESSED )
    3fd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fda:	81 30       	cpi	r24, 0x01	; 1
    3fdc:	09 f0       	breq	.+2      	; 0x3fe0 <EXTI_vidISR_INT0+0x34>
    3fde:	12 c1       	rjmp	.+548    	; 0x4204 <EXTI_vidISR_INT0+0x258>
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	a0 e2       	ldi	r26, 0x20	; 32
    3fe6:	b1 e4       	ldi	r27, 0x41	; 65
    3fe8:	89 8f       	std	Y+25, r24	; 0x19
    3fea:	9a 8f       	std	Y+26, r25	; 0x1a
    3fec:	ab 8f       	std	Y+27, r26	; 0x1b
    3fee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ff2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	4a e7       	ldi	r20, 0x7A	; 122
    3ffe:	55 e4       	ldi	r21, 0x45	; 69
    4000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	8d 8b       	std	Y+21, r24	; 0x15
    400a:	9e 8b       	std	Y+22, r25	; 0x16
    400c:	af 8b       	std	Y+23, r26	; 0x17
    400e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4010:	6d 89       	ldd	r22, Y+21	; 0x15
    4012:	7e 89       	ldd	r23, Y+22	; 0x16
    4014:	8f 89       	ldd	r24, Y+23	; 0x17
    4016:	98 8d       	ldd	r25, Y+24	; 0x18
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	40 e8       	ldi	r20, 0x80	; 128
    401e:	5f e3       	ldi	r21, 0x3F	; 63
    4020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4024:	88 23       	and	r24, r24
    4026:	2c f4       	brge	.+10     	; 0x4032 <EXTI_vidISR_INT0+0x86>
		__ticks = 1;
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	9c 8b       	std	Y+20, r25	; 0x14
    402e:	8b 8b       	std	Y+19, r24	; 0x13
    4030:	3f c0       	rjmp	.+126    	; 0x40b0 <EXTI_vidISR_INT0+0x104>
	else if (__tmp > 65535)
    4032:	6d 89       	ldd	r22, Y+21	; 0x15
    4034:	7e 89       	ldd	r23, Y+22	; 0x16
    4036:	8f 89       	ldd	r24, Y+23	; 0x17
    4038:	98 8d       	ldd	r25, Y+24	; 0x18
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	3f ef       	ldi	r19, 0xFF	; 255
    403e:	4f e7       	ldi	r20, 0x7F	; 127
    4040:	57 e4       	ldi	r21, 0x47	; 71
    4042:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4046:	18 16       	cp	r1, r24
    4048:	4c f5       	brge	.+82     	; 0x409c <EXTI_vidISR_INT0+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    404a:	69 8d       	ldd	r22, Y+25	; 0x19
    404c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    404e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4050:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	40 e2       	ldi	r20, 0x20	; 32
    4058:	51 e4       	ldi	r21, 0x41	; 65
    405a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	bc 01       	movw	r22, r24
    4064:	cd 01       	movw	r24, r26
    4066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	9c 8b       	std	Y+20, r25	; 0x14
    4070:	8b 8b       	std	Y+19, r24	; 0x13
    4072:	0f c0       	rjmp	.+30     	; 0x4092 <EXTI_vidISR_INT0+0xe6>
    4074:	80 e9       	ldi	r24, 0x90	; 144
    4076:	91 e0       	ldi	r25, 0x01	; 1
    4078:	9a 8b       	std	Y+18, r25	; 0x12
    407a:	89 8b       	std	Y+17, r24	; 0x11
    407c:	89 89       	ldd	r24, Y+17	; 0x11
    407e:	9a 89       	ldd	r25, Y+18	; 0x12
    4080:	01 97       	sbiw	r24, 0x01	; 1
    4082:	f1 f7       	brne	.-4      	; 0x4080 <EXTI_vidISR_INT0+0xd4>
    4084:	9a 8b       	std	Y+18, r25	; 0x12
    4086:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4088:	8b 89       	ldd	r24, Y+19	; 0x13
    408a:	9c 89       	ldd	r25, Y+20	; 0x14
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	9c 8b       	std	Y+20, r25	; 0x14
    4090:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4092:	8b 89       	ldd	r24, Y+19	; 0x13
    4094:	9c 89       	ldd	r25, Y+20	; 0x14
    4096:	00 97       	sbiw	r24, 0x00	; 0
    4098:	69 f7       	brne	.-38     	; 0x4074 <EXTI_vidISR_INT0+0xc8>
    409a:	14 c0       	rjmp	.+40     	; 0x40c4 <EXTI_vidISR_INT0+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    409c:	6d 89       	ldd	r22, Y+21	; 0x15
    409e:	7e 89       	ldd	r23, Y+22	; 0x16
    40a0:	8f 89       	ldd	r24, Y+23	; 0x17
    40a2:	98 8d       	ldd	r25, Y+24	; 0x18
    40a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	9c 8b       	std	Y+20, r25	; 0x14
    40ae:	8b 8b       	std	Y+19, r24	; 0x13
    40b0:	8b 89       	ldd	r24, Y+19	; 0x13
    40b2:	9c 89       	ldd	r25, Y+20	; 0x14
    40b4:	98 8b       	std	Y+16, r25	; 0x10
    40b6:	8f 87       	std	Y+15, r24	; 0x0f
    40b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ba:	98 89       	ldd	r25, Y+16	; 0x10
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	f1 f7       	brne	.-4      	; 0x40bc <EXTI_vidISR_INT0+0x110>
    40c0:	98 8b       	std	Y+16, r25	; 0x10
    40c2:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms( SWITCH_BOUNCE_DELAY );
			if( Switch_enuGetPressed( POWER_SWITCH , &Local_u8KeyValue) == ES_OK)
    40c4:	9e 01       	movw	r18, r28
    40c6:	23 5e       	subi	r18, 0xE3	; 227
    40c8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ca:	8b ec       	ldi	r24, 0xCB	; 203
    40cc:	b9 01       	movw	r22, r18
    40ce:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <Switch_enuGetPressed>
    40d2:	88 23       	and	r24, r24
    40d4:	09 f0       	breq	.+2      	; 0x40d8 <EXTI_vidISR_INT0+0x12c>
    40d6:	96 c0       	rjmp	.+300    	; 0x4204 <EXTI_vidISR_INT0+0x258>
			{
				if( (Local_u8KeyValue ==  POWER_SWITCH_PRESSED)  && ( Global_boolPower == FALSE) )
    40d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40da:	81 30       	cpi	r24, 0x01	; 1
    40dc:	49 f4       	brne	.+18     	; 0x40f0 <EXTI_vidISR_INT0+0x144>
    40de:	80 91 ff 01 	lds	r24, 0x01FF
    40e2:	81 30       	cpi	r24, 0x01	; 1
    40e4:	29 f4       	brne	.+10     	; 0x40f0 <EXTI_vidISR_INT0+0x144>
				{
					Global_boolPower = TRUE;
    40e6:	10 92 ff 01 	sts	0x01FF, r1
					Initial_Start = TRUE;
    40ea:	10 92 0d 02 	sts	0x020D, r1
    40ee:	8a c0       	rjmp	.+276    	; 0x4204 <EXTI_vidISR_INT0+0x258>
				}
				else if( Local_u8KeyValue ==  POWER_SWITCH_PRESSED )
    40f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40f2:	81 30       	cpi	r24, 0x01	; 1
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <EXTI_vidISR_INT0+0x14c>
    40f6:	86 c0       	rjmp	.+268    	; 0x4204 <EXTI_vidISR_INT0+0x258>
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	aa e7       	ldi	r26, 0x7A	; 122
    40fe:	b4 e4       	ldi	r27, 0x44	; 68
    4100:	8b 87       	std	Y+11, r24	; 0x0b
    4102:	9c 87       	std	Y+12, r25	; 0x0c
    4104:	ad 87       	std	Y+13, r26	; 0x0d
    4106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4108:	6b 85       	ldd	r22, Y+11	; 0x0b
    410a:	7c 85       	ldd	r23, Y+12	; 0x0c
    410c:	8d 85       	ldd	r24, Y+13	; 0x0d
    410e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4110:	20 e0       	ldi	r18, 0x00	; 0
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	4a e7       	ldi	r20, 0x7A	; 122
    4116:	55 e4       	ldi	r21, 0x45	; 69
    4118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	8f 83       	std	Y+7, r24	; 0x07
    4122:	98 87       	std	Y+8, r25	; 0x08
    4124:	a9 87       	std	Y+9, r26	; 0x09
    4126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4128:	6f 81       	ldd	r22, Y+7	; 0x07
    412a:	78 85       	ldd	r23, Y+8	; 0x08
    412c:	89 85       	ldd	r24, Y+9	; 0x09
    412e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	40 e8       	ldi	r20, 0x80	; 128
    4136:	5f e3       	ldi	r21, 0x3F	; 63
    4138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    413c:	88 23       	and	r24, r24
    413e:	2c f4       	brge	.+10     	; 0x414a <EXTI_vidISR_INT0+0x19e>
		__ticks = 1;
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	9e 83       	std	Y+6, r25	; 0x06
    4146:	8d 83       	std	Y+5, r24	; 0x05
    4148:	3f c0       	rjmp	.+126    	; 0x41c8 <EXTI_vidISR_INT0+0x21c>
	else if (__tmp > 65535)
    414a:	6f 81       	ldd	r22, Y+7	; 0x07
    414c:	78 85       	ldd	r23, Y+8	; 0x08
    414e:	89 85       	ldd	r24, Y+9	; 0x09
    4150:	9a 85       	ldd	r25, Y+10	; 0x0a
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	3f ef       	ldi	r19, 0xFF	; 255
    4156:	4f e7       	ldi	r20, 0x7F	; 127
    4158:	57 e4       	ldi	r21, 0x47	; 71
    415a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    415e:	18 16       	cp	r1, r24
    4160:	4c f5       	brge	.+82     	; 0x41b4 <EXTI_vidISR_INT0+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4162:	6b 85       	ldd	r22, Y+11	; 0x0b
    4164:	7c 85       	ldd	r23, Y+12	; 0x0c
    4166:	8d 85       	ldd	r24, Y+13	; 0x0d
    4168:	9e 85       	ldd	r25, Y+14	; 0x0e
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	40 e2       	ldi	r20, 0x20	; 32
    4170:	51 e4       	ldi	r21, 0x41	; 65
    4172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	bc 01       	movw	r22, r24
    417c:	cd 01       	movw	r24, r26
    417e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	9e 83       	std	Y+6, r25	; 0x06
    4188:	8d 83       	std	Y+5, r24	; 0x05
    418a:	0f c0       	rjmp	.+30     	; 0x41aa <EXTI_vidISR_INT0+0x1fe>
    418c:	80 e9       	ldi	r24, 0x90	; 144
    418e:	91 e0       	ldi	r25, 0x01	; 1
    4190:	9c 83       	std	Y+4, r25	; 0x04
    4192:	8b 83       	std	Y+3, r24	; 0x03
    4194:	8b 81       	ldd	r24, Y+3	; 0x03
    4196:	9c 81       	ldd	r25, Y+4	; 0x04
    4198:	01 97       	sbiw	r24, 0x01	; 1
    419a:	f1 f7       	brne	.-4      	; 0x4198 <EXTI_vidISR_INT0+0x1ec>
    419c:	9c 83       	std	Y+4, r25	; 0x04
    419e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a0:	8d 81       	ldd	r24, Y+5	; 0x05
    41a2:	9e 81       	ldd	r25, Y+6	; 0x06
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	9e 83       	std	Y+6, r25	; 0x06
    41a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41aa:	8d 81       	ldd	r24, Y+5	; 0x05
    41ac:	9e 81       	ldd	r25, Y+6	; 0x06
    41ae:	00 97       	sbiw	r24, 0x00	; 0
    41b0:	69 f7       	brne	.-38     	; 0x418c <EXTI_vidISR_INT0+0x1e0>
    41b2:	14 c0       	rjmp	.+40     	; 0x41dc <EXTI_vidISR_INT0+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b4:	6f 81       	ldd	r22, Y+7	; 0x07
    41b6:	78 85       	ldd	r23, Y+8	; 0x08
    41b8:	89 85       	ldd	r24, Y+9	; 0x09
    41ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    41bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	9e 83       	std	Y+6, r25	; 0x06
    41c6:	8d 83       	std	Y+5, r24	; 0x05
    41c8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ca:	9e 81       	ldd	r25, Y+6	; 0x06
    41cc:	9a 83       	std	Y+2, r25	; 0x02
    41ce:	89 83       	std	Y+1, r24	; 0x01
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	9a 81       	ldd	r25, Y+2	; 0x02
    41d4:	01 97       	sbiw	r24, 0x01	; 1
    41d6:	f1 f7       	brne	.-4      	; 0x41d4 <EXTI_vidISR_INT0+0x228>
    41d8:	9a 83       	std	Y+2, r25	; 0x02
    41da:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms( SWITCH_BOUNCE_DELAY * 100 );
					if( Switch_enuGetPressed( POWER_SWITCH , &Local_u8KeyValue) == ES_OK)
    41dc:	9e 01       	movw	r18, r28
    41de:	23 5e       	subi	r18, 0xE3	; 227
    41e0:	3f 4f       	sbci	r19, 0xFF	; 255
    41e2:	8b ec       	ldi	r24, 0xCB	; 203
    41e4:	b9 01       	movw	r22, r18
    41e6:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <Switch_enuGetPressed>
    41ea:	88 23       	and	r24, r24
    41ec:	31 f4       	brne	.+12     	; 0x41fa <EXTI_vidISR_INT0+0x24e>
					{
						if( Local_u8KeyValue ==  POWER_SWITCH_PRESSED )
    41ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41f0:	81 30       	cpi	r24, 0x01	; 1
    41f2:	41 f4       	brne	.+16     	; 0x4204 <EXTI_vidISR_INT0+0x258>
						{
							Global_boolSetMode = TRUE ;
    41f4:	10 92 01 02 	sts	0x0201, r1
    41f8:	05 c0       	rjmp	.+10     	; 0x4204 <EXTI_vidISR_INT0+0x258>
						}
					}
					else
					{
							Global_boolPower = FALSE ;
    41fa:	81 e0       	ldi	r24, 0x01	; 1
    41fc:	80 93 ff 01 	sts	0x01FF, r24
							Sleep_Mode = TRUE;
    4200:	10 92 02 02 	sts	0x0202, r1
				}
			}

		}
	}
}
    4204:	6d 96       	adiw	r28, 0x1d	; 29
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	f8 94       	cli
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	cd bf       	out	0x3d, r28	; 61
    4210:	cf 91       	pop	r28
    4212:	df 91       	pop	r29
    4214:	08 95       	ret

00004216 <HVAC_enuSetup>:



ES_t HVAC_enuSetup(void)
{
    4216:	df 93       	push	r29
    4218:	cf 93       	push	r28
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
    421e:	2b 97       	sbiw	r28, 0x0b	; 11
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[9];
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter = 0 ;
    422e:	19 82       	std	Y+1, r1	; 0x01

	//LD_enuSetState( HOT_LD , LD_ON);

	Local_AenuErrorState[0] = ADC_enuDisable();
    4230:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <ADC_enuDisable>
    4234:	8b 83       	std	Y+3, r24	; 0x03
	Local_AenuErrorState[1] = ADC_enuDisableAutoTrigger();
    4236:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <ADC_enuDisableAutoTrigger>
    423a:	8c 83       	std	Y+4, r24	; 0x04
	Local_AenuErrorState[2] = ADC_enuCallBack ( ADC_vidISR );
    423c:	89 ec       	ldi	r24, 0xC9	; 201
    423e:	9f e1       	ldi	r25, 0x1F	; 31
    4240:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <ADC_enuCallBack>
    4244:	8d 83       	std	Y+5, r24	; 0x05
	Local_AenuErrorState[3] = ADC_enuEnableInterrupt();
    4246:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <ADC_enuEnableInterrupt>
    424a:	8e 83       	std	Y+6, r24	; 0x06
	Local_AenuErrorState[4] = ADC_enuEnable();
    424c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <ADC_enuEnable>
    4250:	8f 83       	std	Y+7, r24	; 0x07
	Local_AenuErrorState[5] = ADC_enuStartConversion();
    4252:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <ADC_enuStartConversion>
    4256:	88 87       	std	Y+8, r24	; 0x08
	Local_AenuErrorState[6] = EXTI_enuCallBack( EXTI_vidISR_INT0 , INT0);
    4258:	86 ed       	ldi	r24, 0xD6	; 214
    425a:	9f e1       	ldi	r25, 0x1F	; 31
    425c:	6d e3       	ldi	r22, 0x3D	; 61
    425e:	0e 94 10 0a 	call	0x1420	; 0x1420 <EXTI_enuCallBack>
    4262:	89 87       	std	Y+9, r24	; 0x09
	Local_AenuErrorState[7] = LCD_enuWriteCommand(0x0C);
    4264:	8c e0       	ldi	r24, 0x0C	; 12
    4266:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_enuWriteCommand>
    426a:	8a 87       	std	Y+10, r24	; 0x0a
	Local_AenuErrorState[8] = ADC_enuStartConversion();
    426c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <ADC_enuStartConversion>
    4270:	8b 87       	std	Y+11, r24	; 0x0b

	Global_u16PrevRead = Global_u16TempRead;
    4272:	80 91 0e 02 	lds	r24, 0x020E
    4276:	90 91 0f 02 	lds	r25, 0x020F
    427a:	90 93 11 02 	sts	0x0211, r25
    427e:	80 93 10 02 	sts	0x0210, r24
	Global_boolRead = FALSE ;
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	80 93 00 02 	sts	0x0200, r24
    4288:	03 c0       	rjmp	.+6      	; 0x4290 <HVAC_enuSetup+0x7a>

	for(; ( Local_u8Iter < 9 ) && (Local_AenuErrorState[Local_u8Iter] == ES_OK) ; Local_u8Iter++);
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	8f 5f       	subi	r24, 0xFF	; 255
    428e:	89 83       	std	Y+1, r24	; 0x01
    4290:	89 81       	ldd	r24, Y+1	; 0x01
    4292:	89 30       	cpi	r24, 0x09	; 9
    4294:	58 f4       	brcc	.+22     	; 0x42ac <HVAC_enuSetup+0x96>
    4296:	89 81       	ldd	r24, Y+1	; 0x01
    4298:	28 2f       	mov	r18, r24
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	ce 01       	movw	r24, r28
    429e:	03 96       	adiw	r24, 0x03	; 3
    42a0:	fc 01       	movw	r30, r24
    42a2:	e2 0f       	add	r30, r18
    42a4:	f3 1f       	adc	r31, r19
    42a6:	80 81       	ld	r24, Z
    42a8:	88 23       	and	r24, r24
    42aa:	79 f3       	breq	.-34     	; 0x428a <HVAC_enuSetup+0x74>

	if( Local_u8Iter == 9 ) Local_enuErrorState = ES_OK ;
    42ac:	89 81       	ldd	r24, Y+1	; 0x01
    42ae:	89 30       	cpi	r24, 0x09	; 9
    42b0:	09 f4       	brne	.+2      	; 0x42b4 <HVAC_enuSetup+0x9e>
    42b2:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    42b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    42b6:	2b 96       	adiw	r28, 0x0b	; 11
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
    42c2:	cf 91       	pop	r28
    42c4:	df 91       	pop	r29
    42c6:	08 95       	ret

000042c8 <HVAC_Awake>:

void HVAC_Awake(void)
{
    42c8:	df 93       	push	r29
    42ca:	cf 93       	push	r28
    42cc:	cd b7       	in	r28, 0x3d	; 61
    42ce:	de b7       	in	r29, 0x3e	; 62
	DISPLAY_INIT_MESSAGE;
    42d0:	8c e0       	ldi	r24, 0x0C	; 12
    42d2:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_enuWriteCommand>
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_enuWriteCommand>
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	66 e0       	ldi	r22, 0x06	; 6
    42e0:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_enuGoToPosition>
    42e4:	83 e7       	ldi	r24, 0x73	; 115
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_enuWriteString>
	ADC_enuEnable();
    42ec:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <ADC_enuEnable>
	ADC_enuStartConversion();
    42f0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <ADC_enuStartConversion>
	ADC_enuPollingRead(&Global_u16TempRead);
    42f4:	8e e0       	ldi	r24, 0x0E	; 14
    42f6:	92 e0       	ldi	r25, 0x02	; 2
    42f8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <ADC_enuPollingRead>
	ADC_enuStartConversion();
    42fc:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <ADC_enuStartConversion>
	ADC_enuPollingRead(&Global_u16TempRead);
    4300:	8e e0       	ldi	r24, 0x0E	; 14
    4302:	92 e0       	ldi	r25, 0x02	; 2
    4304:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <ADC_enuPollingRead>
	Global_u16PrevRead = Global_u16TempRead;
    4308:	80 91 0e 02 	lds	r24, 0x020E
    430c:	90 91 0f 02 	lds	r25, 0x020F
    4310:	90 93 11 02 	sts	0x0211, r25
    4314:	80 93 10 02 	sts	0x0210, r24
	DISPLAY_TEMPERATURE_MESSAGE;
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_enuWriteCommand>
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	63 e0       	ldi	r22, 0x03	; 3
    4322:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_enuGoToPosition>
    4326:	80 e6       	ldi	r24, 0x60	; 96
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_enuWriteString>
    432e:	82 e0       	ldi	r24, 0x02	; 2
    4330:	63 e0       	ldi	r22, 0x03	; 3
    4332:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_enuGoToPosition>
	LCD_enuWriteIntegerNum( (s32) ( Global_u16TempRead / (ADC_GAIN_FACTOR * TEMP_COEFFICENT) ) );
    4336:	80 91 0e 02 	lds	r24, 0x020E
    433a:	90 91 0f 02 	lds	r25, 0x020F
    433e:	2a e0       	ldi	r18, 0x0A	; 10
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	b9 01       	movw	r22, r18
    4344:	0e 94 01 24 	call	0x4802	; 0x4802 <__udivmodhi4>
    4348:	cb 01       	movw	r24, r22
    434a:	cc 01       	movw	r24, r24
    434c:	a0 e0       	ldi	r26, 0x00	; 0
    434e:	b0 e0       	ldi	r27, 0x00	; 0
    4350:	bc 01       	movw	r22, r24
    4352:	cd 01       	movw	r24, r26
    4354:	0e 94 dd 17 	call	0x2fba	; 0x2fba <LCD_enuWriteIntegerNum>
	LCD_enuGoToPosition(2,12);
    4358:	82 e0       	ldi	r24, 0x02	; 2
    435a:	6c e0       	ldi	r22, 0x0C	; 12
    435c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_enuGoToPosition>
	LCD_enuWriteString("OFF");
    4360:	8f e6       	ldi	r24, 0x6F	; 111
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_enuWriteString>
	Initial_Start = FALSE ;
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	80 93 0d 02 	sts	0x020D, r24
}
    436e:	cf 91       	pop	r28
    4370:	df 91       	pop	r29
    4372:	08 95       	ret

00004374 <HVAC_Sleep>:
void HVAC_Sleep(void)
{
    4374:	df 93       	push	r29
    4376:	cf 93       	push	r28
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
    437c:	2e 97       	sbiw	r28, 0x0e	; 14
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
	DISPLAY_CLOSE_MESSAGE;
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_enuWriteCommand>
    438e:	82 e0       	ldi	r24, 0x02	; 2
    4390:	63 e0       	ldi	r22, 0x03	; 3
    4392:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <LCD_enuGoToPosition>
    4396:	89 e7       	ldi	r24, 0x79	; 121
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_enuWriteString>
	CompressorStatus = OFF;
    439e:	81 e0       	ldi	r24, 0x01	; 1
    43a0:	80 93 fd 01 	sts	0x01FD, r24
	LD_enuSetState( HOT_LD , LD_OFF);
    43a4:	80 e0       	ldi	r24, 0x00	; 0
    43a6:	60 e0       	ldi	r22, 0x00	; 0
    43a8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
	LD_enuSetState( NORM_LD , LD_OFF);
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	60 e0       	ldi	r22, 0x00	; 0
    43b0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
	LD_enuSetState( COLD_LD , LD_OFF);
    43b4:	82 e0       	ldi	r24, 0x02	; 2
    43b6:	60 e0       	ldi	r22, 0x00	; 0
    43b8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
	TemperatureStatus = NORMAL ;
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	80 93 fe 01 	sts	0x01FE, r24
	ADC_enuDisable();
    43c2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <ADC_enuDisable>
    43c6:	80 e0       	ldi	r24, 0x00	; 0
    43c8:	90 e4       	ldi	r25, 0x40	; 64
    43ca:	ac e9       	ldi	r26, 0x9C	; 156
    43cc:	b5 e4       	ldi	r27, 0x45	; 69
    43ce:	8b 87       	std	Y+11, r24	; 0x0b
    43d0:	9c 87       	std	Y+12, r25	; 0x0c
    43d2:	ad 87       	std	Y+13, r26	; 0x0d
    43d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    43d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    43da:	8d 85       	ldd	r24, Y+13	; 0x0d
    43dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    43de:	20 e0       	ldi	r18, 0x00	; 0
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	4a e7       	ldi	r20, 0x7A	; 122
    43e4:	55 e4       	ldi	r21, 0x45	; 69
    43e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ea:	dc 01       	movw	r26, r24
    43ec:	cb 01       	movw	r24, r22
    43ee:	8f 83       	std	Y+7, r24	; 0x07
    43f0:	98 87       	std	Y+8, r25	; 0x08
    43f2:	a9 87       	std	Y+9, r26	; 0x09
    43f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43f6:	6f 81       	ldd	r22, Y+7	; 0x07
    43f8:	78 85       	ldd	r23, Y+8	; 0x08
    43fa:	89 85       	ldd	r24, Y+9	; 0x09
    43fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    43fe:	20 e0       	ldi	r18, 0x00	; 0
    4400:	30 e0       	ldi	r19, 0x00	; 0
    4402:	40 e8       	ldi	r20, 0x80	; 128
    4404:	5f e3       	ldi	r21, 0x3F	; 63
    4406:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    440a:	88 23       	and	r24, r24
    440c:	2c f4       	brge	.+10     	; 0x4418 <HVAC_Sleep+0xa4>
		__ticks = 1;
    440e:	81 e0       	ldi	r24, 0x01	; 1
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	9e 83       	std	Y+6, r25	; 0x06
    4414:	8d 83       	std	Y+5, r24	; 0x05
    4416:	3f c0       	rjmp	.+126    	; 0x4496 <HVAC_Sleep+0x122>
	else if (__tmp > 65535)
    4418:	6f 81       	ldd	r22, Y+7	; 0x07
    441a:	78 85       	ldd	r23, Y+8	; 0x08
    441c:	89 85       	ldd	r24, Y+9	; 0x09
    441e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	3f ef       	ldi	r19, 0xFF	; 255
    4424:	4f e7       	ldi	r20, 0x7F	; 127
    4426:	57 e4       	ldi	r21, 0x47	; 71
    4428:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    442c:	18 16       	cp	r1, r24
    442e:	4c f5       	brge	.+82     	; 0x4482 <HVAC_Sleep+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4430:	6b 85       	ldd	r22, Y+11	; 0x0b
    4432:	7c 85       	ldd	r23, Y+12	; 0x0c
    4434:	8d 85       	ldd	r24, Y+13	; 0x0d
    4436:	9e 85       	ldd	r25, Y+14	; 0x0e
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	40 e2       	ldi	r20, 0x20	; 32
    443e:	51 e4       	ldi	r21, 0x41	; 65
    4440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	bc 01       	movw	r22, r24
    444a:	cd 01       	movw	r24, r26
    444c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	9e 83       	std	Y+6, r25	; 0x06
    4456:	8d 83       	std	Y+5, r24	; 0x05
    4458:	0f c0       	rjmp	.+30     	; 0x4478 <HVAC_Sleep+0x104>
    445a:	80 e9       	ldi	r24, 0x90	; 144
    445c:	91 e0       	ldi	r25, 0x01	; 1
    445e:	9c 83       	std	Y+4, r25	; 0x04
    4460:	8b 83       	std	Y+3, r24	; 0x03
    4462:	8b 81       	ldd	r24, Y+3	; 0x03
    4464:	9c 81       	ldd	r25, Y+4	; 0x04
    4466:	01 97       	sbiw	r24, 0x01	; 1
    4468:	f1 f7       	brne	.-4      	; 0x4466 <HVAC_Sleep+0xf2>
    446a:	9c 83       	std	Y+4, r25	; 0x04
    446c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    446e:	8d 81       	ldd	r24, Y+5	; 0x05
    4470:	9e 81       	ldd	r25, Y+6	; 0x06
    4472:	01 97       	sbiw	r24, 0x01	; 1
    4474:	9e 83       	std	Y+6, r25	; 0x06
    4476:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4478:	8d 81       	ldd	r24, Y+5	; 0x05
    447a:	9e 81       	ldd	r25, Y+6	; 0x06
    447c:	00 97       	sbiw	r24, 0x00	; 0
    447e:	69 f7       	brne	.-38     	; 0x445a <HVAC_Sleep+0xe6>
    4480:	14 c0       	rjmp	.+40     	; 0x44aa <HVAC_Sleep+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4482:	6f 81       	ldd	r22, Y+7	; 0x07
    4484:	78 85       	ldd	r23, Y+8	; 0x08
    4486:	89 85       	ldd	r24, Y+9	; 0x09
    4488:	9a 85       	ldd	r25, Y+10	; 0x0a
    448a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    448e:	dc 01       	movw	r26, r24
    4490:	cb 01       	movw	r24, r22
    4492:	9e 83       	std	Y+6, r25	; 0x06
    4494:	8d 83       	std	Y+5, r24	; 0x05
    4496:	8d 81       	ldd	r24, Y+5	; 0x05
    4498:	9e 81       	ldd	r25, Y+6	; 0x06
    449a:	9a 83       	std	Y+2, r25	; 0x02
    449c:	89 83       	std	Y+1, r24	; 0x01
    449e:	89 81       	ldd	r24, Y+1	; 0x01
    44a0:	9a 81       	ldd	r25, Y+2	; 0x02
    44a2:	01 97       	sbiw	r24, 0x01	; 1
    44a4:	f1 f7       	brne	.-4      	; 0x44a2 <HVAC_Sleep+0x12e>
    44a6:	9a 83       	std	Y+2, r25	; 0x02
    44a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
	LCD_enuWriteCommand(0x8);
    44aa:	88 e0       	ldi	r24, 0x08	; 8
    44ac:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_enuWriteCommand>
	Sleep_Mode = FALSE;
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	80 93 02 02 	sts	0x0202, r24
}
    44b6:	2e 96       	adiw	r28, 0x0e	; 14
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	f8 94       	cli
    44bc:	de bf       	out	0x3e, r29	; 62
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	cd bf       	out	0x3d, r28	; 61
    44c2:	cf 91       	pop	r28
    44c4:	df 91       	pop	r29
    44c6:	08 95       	ret

000044c8 <HVAC_StandByMode>:

void HVAC_StandByMode(void)
{
    44c8:	df 93       	push	r29
    44ca:	cf 93       	push	r28
    44cc:	cd b7       	in	r28, 0x3d	; 61
    44ce:	de b7       	in	r29, 0x3e	; 62
    44d0:	60 97       	sbiw	r28, 0x10	; 16
    44d2:	0f b6       	in	r0, 0x3f	; 63
    44d4:	f8 94       	cli
    44d6:	de bf       	out	0x3e, r29	; 62
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	cd bf       	out	0x3d, r28	; 61
	for(u16 Local_u16Iter = 0 ; Local_u16Iter < 6000 ; Local_u16Iter++)
    44dc:	18 8a       	std	Y+16, r1	; 0x10
    44de:	1f 86       	std	Y+15, r1	; 0x0f
    44e0:	7f c0       	rjmp	.+254    	; 0x45e0 <HVAC_StandByMode+0x118>
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	a0 e2       	ldi	r26, 0x20	; 32
    44e8:	b1 e4       	ldi	r27, 0x41	; 65
    44ea:	8b 87       	std	Y+11, r24	; 0x0b
    44ec:	9c 87       	std	Y+12, r25	; 0x0c
    44ee:	ad 87       	std	Y+13, r26	; 0x0d
    44f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    44f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    44f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    44f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    44fa:	20 e0       	ldi	r18, 0x00	; 0
    44fc:	30 e0       	ldi	r19, 0x00	; 0
    44fe:	4a e7       	ldi	r20, 0x7A	; 122
    4500:	55 e4       	ldi	r21, 0x45	; 69
    4502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4506:	dc 01       	movw	r26, r24
    4508:	cb 01       	movw	r24, r22
    450a:	8f 83       	std	Y+7, r24	; 0x07
    450c:	98 87       	std	Y+8, r25	; 0x08
    450e:	a9 87       	std	Y+9, r26	; 0x09
    4510:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4512:	6f 81       	ldd	r22, Y+7	; 0x07
    4514:	78 85       	ldd	r23, Y+8	; 0x08
    4516:	89 85       	ldd	r24, Y+9	; 0x09
    4518:	9a 85       	ldd	r25, Y+10	; 0x0a
    451a:	20 e0       	ldi	r18, 0x00	; 0
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	40 e8       	ldi	r20, 0x80	; 128
    4520:	5f e3       	ldi	r21, 0x3F	; 63
    4522:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4526:	88 23       	and	r24, r24
    4528:	2c f4       	brge	.+10     	; 0x4534 <HVAC_StandByMode+0x6c>
		__ticks = 1;
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	9e 83       	std	Y+6, r25	; 0x06
    4530:	8d 83       	std	Y+5, r24	; 0x05
    4532:	3f c0       	rjmp	.+126    	; 0x45b2 <HVAC_StandByMode+0xea>
	else if (__tmp > 65535)
    4534:	6f 81       	ldd	r22, Y+7	; 0x07
    4536:	78 85       	ldd	r23, Y+8	; 0x08
    4538:	89 85       	ldd	r24, Y+9	; 0x09
    453a:	9a 85       	ldd	r25, Y+10	; 0x0a
    453c:	20 e0       	ldi	r18, 0x00	; 0
    453e:	3f ef       	ldi	r19, 0xFF	; 255
    4540:	4f e7       	ldi	r20, 0x7F	; 127
    4542:	57 e4       	ldi	r21, 0x47	; 71
    4544:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4548:	18 16       	cp	r1, r24
    454a:	4c f5       	brge	.+82     	; 0x459e <HVAC_StandByMode+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    454c:	6b 85       	ldd	r22, Y+11	; 0x0b
    454e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4550:	8d 85       	ldd	r24, Y+13	; 0x0d
    4552:	9e 85       	ldd	r25, Y+14	; 0x0e
    4554:	20 e0       	ldi	r18, 0x00	; 0
    4556:	30 e0       	ldi	r19, 0x00	; 0
    4558:	40 e2       	ldi	r20, 0x20	; 32
    455a:	51 e4       	ldi	r21, 0x41	; 65
    455c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4560:	dc 01       	movw	r26, r24
    4562:	cb 01       	movw	r24, r22
    4564:	bc 01       	movw	r22, r24
    4566:	cd 01       	movw	r24, r26
    4568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    456c:	dc 01       	movw	r26, r24
    456e:	cb 01       	movw	r24, r22
    4570:	9e 83       	std	Y+6, r25	; 0x06
    4572:	8d 83       	std	Y+5, r24	; 0x05
    4574:	0f c0       	rjmp	.+30     	; 0x4594 <HVAC_StandByMode+0xcc>
    4576:	80 e9       	ldi	r24, 0x90	; 144
    4578:	91 e0       	ldi	r25, 0x01	; 1
    457a:	9c 83       	std	Y+4, r25	; 0x04
    457c:	8b 83       	std	Y+3, r24	; 0x03
    457e:	8b 81       	ldd	r24, Y+3	; 0x03
    4580:	9c 81       	ldd	r25, Y+4	; 0x04
    4582:	01 97       	sbiw	r24, 0x01	; 1
    4584:	f1 f7       	brne	.-4      	; 0x4582 <HVAC_StandByMode+0xba>
    4586:	9c 83       	std	Y+4, r25	; 0x04
    4588:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    458a:	8d 81       	ldd	r24, Y+5	; 0x05
    458c:	9e 81       	ldd	r25, Y+6	; 0x06
    458e:	01 97       	sbiw	r24, 0x01	; 1
    4590:	9e 83       	std	Y+6, r25	; 0x06
    4592:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4594:	8d 81       	ldd	r24, Y+5	; 0x05
    4596:	9e 81       	ldd	r25, Y+6	; 0x06
    4598:	00 97       	sbiw	r24, 0x00	; 0
    459a:	69 f7       	brne	.-38     	; 0x4576 <HVAC_StandByMode+0xae>
    459c:	14 c0       	rjmp	.+40     	; 0x45c6 <HVAC_StandByMode+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    459e:	6f 81       	ldd	r22, Y+7	; 0x07
    45a0:	78 85       	ldd	r23, Y+8	; 0x08
    45a2:	89 85       	ldd	r24, Y+9	; 0x09
    45a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45aa:	dc 01       	movw	r26, r24
    45ac:	cb 01       	movw	r24, r22
    45ae:	9e 83       	std	Y+6, r25	; 0x06
    45b0:	8d 83       	std	Y+5, r24	; 0x05
    45b2:	8d 81       	ldd	r24, Y+5	; 0x05
    45b4:	9e 81       	ldd	r25, Y+6	; 0x06
    45b6:	9a 83       	std	Y+2, r25	; 0x02
    45b8:	89 83       	std	Y+1, r24	; 0x01
    45ba:	89 81       	ldd	r24, Y+1	; 0x01
    45bc:	9a 81       	ldd	r25, Y+2	; 0x02
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	f1 f7       	brne	.-4      	; 0x45be <HVAC_StandByMode+0xf6>
    45c2:	9a 83       	std	Y+2, r25	; 0x02
    45c4:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms( SWITCH_BOUNCE_DELAY);
		if( Global_boolPower == FALSE || Global_boolSetMode == TRUE ) break;
    45c6:	80 91 ff 01 	lds	r24, 0x01FF
    45ca:	81 30       	cpi	r24, 0x01	; 1
    45cc:	81 f0       	breq	.+32     	; 0x45ee <HVAC_StandByMode+0x126>
    45ce:	80 91 01 02 	lds	r24, 0x0201
    45d2:	88 23       	and	r24, r24
    45d4:	61 f0       	breq	.+24     	; 0x45ee <HVAC_StandByMode+0x126>
	Sleep_Mode = FALSE;
}

void HVAC_StandByMode(void)
{
	for(u16 Local_u16Iter = 0 ; Local_u16Iter < 6000 ; Local_u16Iter++)
    45d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    45d8:	98 89       	ldd	r25, Y+16	; 0x10
    45da:	01 96       	adiw	r24, 0x01	; 1
    45dc:	98 8b       	std	Y+16, r25	; 0x10
    45de:	8f 87       	std	Y+15, r24	; 0x0f
    45e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    45e2:	98 89       	ldd	r25, Y+16	; 0x10
    45e4:	27 e1       	ldi	r18, 0x17	; 23
    45e6:	80 37       	cpi	r24, 0x70	; 112
    45e8:	92 07       	cpc	r25, r18
    45ea:	08 f4       	brcc	.+2      	; 0x45ee <HVAC_StandByMode+0x126>
    45ec:	7a cf       	rjmp	.-268    	; 0x44e2 <HVAC_StandByMode+0x1a>
	{
		_delay_ms( SWITCH_BOUNCE_DELAY);
		if( Global_boolPower == FALSE || Global_boolSetMode == TRUE ) break;
	}
}
    45ee:	60 96       	adiw	r28, 0x10	; 16
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	cf 91       	pop	r28
    45fc:	df 91       	pop	r29
    45fe:	08 95       	ret

00004600 <HVAC_SetTemp>:



void HVAC_SetTemp(void)
{
    4600:	df 93       	push	r29
    4602:	cf 93       	push	r28
    4604:	cd b7       	in	r28, 0x3d	; 61
    4606:	de b7       	in	r29, 0x3e	; 62
    4608:	2e 97       	sbiw	r28, 0x0e	; 14
    460a:	0f b6       	in	r0, 0x3f	; 63
    460c:	f8 94       	cli
    460e:	de bf       	out	0x3e, r29	; 62
    4610:	0f be       	out	0x3f, r0	; 63
    4612:	cd bf       	out	0x3d, r28	; 61
	LCD_enuWriteCommand(0x01);
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <LCD_enuWriteCommand>
	LCD_enuWriteString("Set Mode");
    461a:	85 e8       	ldi	r24, 0x85	; 133
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_enuWriteString>
    4622:	80 e0       	ldi	r24, 0x00	; 0
    4624:	90 e4       	ldi	r25, 0x40	; 64
    4626:	ac e9       	ldi	r26, 0x9C	; 156
    4628:	b5 e4       	ldi	r27, 0x45	; 69
    462a:	8b 87       	std	Y+11, r24	; 0x0b
    462c:	9c 87       	std	Y+12, r25	; 0x0c
    462e:	ad 87       	std	Y+13, r26	; 0x0d
    4630:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4632:	6b 85       	ldd	r22, Y+11	; 0x0b
    4634:	7c 85       	ldd	r23, Y+12	; 0x0c
    4636:	8d 85       	ldd	r24, Y+13	; 0x0d
    4638:	9e 85       	ldd	r25, Y+14	; 0x0e
    463a:	20 e0       	ldi	r18, 0x00	; 0
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	4a e7       	ldi	r20, 0x7A	; 122
    4640:	55 e4       	ldi	r21, 0x45	; 69
    4642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4646:	dc 01       	movw	r26, r24
    4648:	cb 01       	movw	r24, r22
    464a:	8f 83       	std	Y+7, r24	; 0x07
    464c:	98 87       	std	Y+8, r25	; 0x08
    464e:	a9 87       	std	Y+9, r26	; 0x09
    4650:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4652:	6f 81       	ldd	r22, Y+7	; 0x07
    4654:	78 85       	ldd	r23, Y+8	; 0x08
    4656:	89 85       	ldd	r24, Y+9	; 0x09
    4658:	9a 85       	ldd	r25, Y+10	; 0x0a
    465a:	20 e0       	ldi	r18, 0x00	; 0
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	40 e8       	ldi	r20, 0x80	; 128
    4660:	5f e3       	ldi	r21, 0x3F	; 63
    4662:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4666:	88 23       	and	r24, r24
    4668:	2c f4       	brge	.+10     	; 0x4674 <HVAC_SetTemp+0x74>
		__ticks = 1;
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	9e 83       	std	Y+6, r25	; 0x06
    4670:	8d 83       	std	Y+5, r24	; 0x05
    4672:	3f c0       	rjmp	.+126    	; 0x46f2 <HVAC_SetTemp+0xf2>
	else if (__tmp > 65535)
    4674:	6f 81       	ldd	r22, Y+7	; 0x07
    4676:	78 85       	ldd	r23, Y+8	; 0x08
    4678:	89 85       	ldd	r24, Y+9	; 0x09
    467a:	9a 85       	ldd	r25, Y+10	; 0x0a
    467c:	20 e0       	ldi	r18, 0x00	; 0
    467e:	3f ef       	ldi	r19, 0xFF	; 255
    4680:	4f e7       	ldi	r20, 0x7F	; 127
    4682:	57 e4       	ldi	r21, 0x47	; 71
    4684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4688:	18 16       	cp	r1, r24
    468a:	4c f5       	brge	.+82     	; 0x46de <HVAC_SetTemp+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    468c:	6b 85       	ldd	r22, Y+11	; 0x0b
    468e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4690:	8d 85       	ldd	r24, Y+13	; 0x0d
    4692:	9e 85       	ldd	r25, Y+14	; 0x0e
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	40 e2       	ldi	r20, 0x20	; 32
    469a:	51 e4       	ldi	r21, 0x41	; 65
    469c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	bc 01       	movw	r22, r24
    46a6:	cd 01       	movw	r24, r26
    46a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ac:	dc 01       	movw	r26, r24
    46ae:	cb 01       	movw	r24, r22
    46b0:	9e 83       	std	Y+6, r25	; 0x06
    46b2:	8d 83       	std	Y+5, r24	; 0x05
    46b4:	0f c0       	rjmp	.+30     	; 0x46d4 <HVAC_SetTemp+0xd4>
    46b6:	80 e9       	ldi	r24, 0x90	; 144
    46b8:	91 e0       	ldi	r25, 0x01	; 1
    46ba:	9c 83       	std	Y+4, r25	; 0x04
    46bc:	8b 83       	std	Y+3, r24	; 0x03
    46be:	8b 81       	ldd	r24, Y+3	; 0x03
    46c0:	9c 81       	ldd	r25, Y+4	; 0x04
    46c2:	01 97       	sbiw	r24, 0x01	; 1
    46c4:	f1 f7       	brne	.-4      	; 0x46c2 <HVAC_SetTemp+0xc2>
    46c6:	9c 83       	std	Y+4, r25	; 0x04
    46c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ca:	8d 81       	ldd	r24, Y+5	; 0x05
    46cc:	9e 81       	ldd	r25, Y+6	; 0x06
    46ce:	01 97       	sbiw	r24, 0x01	; 1
    46d0:	9e 83       	std	Y+6, r25	; 0x06
    46d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46d4:	8d 81       	ldd	r24, Y+5	; 0x05
    46d6:	9e 81       	ldd	r25, Y+6	; 0x06
    46d8:	00 97       	sbiw	r24, 0x00	; 0
    46da:	69 f7       	brne	.-38     	; 0x46b6 <HVAC_SetTemp+0xb6>
    46dc:	14 c0       	rjmp	.+40     	; 0x4706 <HVAC_SetTemp+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46de:	6f 81       	ldd	r22, Y+7	; 0x07
    46e0:	78 85       	ldd	r23, Y+8	; 0x08
    46e2:	89 85       	ldd	r24, Y+9	; 0x09
    46e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ea:	dc 01       	movw	r26, r24
    46ec:	cb 01       	movw	r24, r22
    46ee:	9e 83       	std	Y+6, r25	; 0x06
    46f0:	8d 83       	std	Y+5, r24	; 0x05
    46f2:	8d 81       	ldd	r24, Y+5	; 0x05
    46f4:	9e 81       	ldd	r25, Y+6	; 0x06
    46f6:	9a 83       	std	Y+2, r25	; 0x02
    46f8:	89 83       	std	Y+1, r24	; 0x01
    46fa:	89 81       	ldd	r24, Y+1	; 0x01
    46fc:	9a 81       	ldd	r25, Y+2	; 0x02
    46fe:	01 97       	sbiw	r24, 0x01	; 1
    4700:	f1 f7       	brne	.-4      	; 0x46fe <HVAC_SetTemp+0xfe>
    4702:	9a 83       	std	Y+2, r25	; 0x02
    4704:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
}
    4706:	2e 96       	adiw	r28, 0x0e	; 14
    4708:	0f b6       	in	r0, 0x3f	; 63
    470a:	f8 94       	cli
    470c:	de bf       	out	0x3e, r29	; 62
    470e:	0f be       	out	0x3f, r0	; 63
    4710:	cd bf       	out	0x3d, r28	; 61
    4712:	cf 91       	pop	r28
    4714:	df 91       	pop	r29
    4716:	08 95       	ret

00004718 <HVAC_CheckTemperatureStatus>:


void HVAC_CheckTemperatureStatus( u8 Copy_u8ActTempValue )
{
    4718:	df 93       	push	r29
    471a:	cf 93       	push	r28
    471c:	0f 92       	push	r0
    471e:	cd b7       	in	r28, 0x3d	; 61
    4720:	de b7       	in	r29, 0x3e	; 62
    4722:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_u8ActTempValue > (Global_u8SetTemp + TEMP_TOLERANCE) )
    4724:	89 81       	ldd	r24, Y+1	; 0x01
    4726:	28 2f       	mov	r18, r24
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	80 91 03 02 	lds	r24, 0x0203
    472e:	88 2f       	mov	r24, r24
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	02 96       	adiw	r24, 0x02	; 2
    4734:	82 17       	cp	r24, r18
    4736:	93 07       	cpc	r25, r19
    4738:	84 f4       	brge	.+32     	; 0x475a <HVAC_CheckTemperatureStatus+0x42>
	{
		TemperatureStatus = HOT ;
    473a:	82 e0       	ldi	r24, 0x02	; 2
    473c:	80 93 fe 01 	sts	0x01FE, r24
		LD_enuSetState( NORM_LD , LD_OFF);
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	60 e0       	ldi	r22, 0x00	; 0
    4744:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
		LD_enuSetState( COLD_LD , LD_OFF);
    4748:	82 e0       	ldi	r24, 0x02	; 2
    474a:	60 e0       	ldi	r22, 0x00	; 0
    474c:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
		LD_enuSetState( HOT_LD , LD_ON);
    4750:	80 e0       	ldi	r24, 0x00	; 0
    4752:	61 e0       	ldi	r22, 0x01	; 1
    4754:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
    4758:	29 c0       	rjmp	.+82     	; 0x47ac <HVAC_CheckTemperatureStatus+0x94>
	}
	else if( Copy_u8ActTempValue < (Global_u8SetTemp - TEMP_TOLERANCE) )
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	28 2f       	mov	r18, r24
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	80 91 03 02 	lds	r24, 0x0203
    4764:	88 2f       	mov	r24, r24
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	02 97       	sbiw	r24, 0x02	; 2
    476a:	28 17       	cp	r18, r24
    476c:	39 07       	cpc	r19, r25
    476e:	7c f4       	brge	.+30     	; 0x478e <HVAC_CheckTemperatureStatus+0x76>
	{
		TemperatureStatus = COLD ;
    4770:	10 92 fe 01 	sts	0x01FE, r1
		LD_enuSetState( HOT_LD , LD_OFF);
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	60 e0       	ldi	r22, 0x00	; 0
    4778:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
		LD_enuSetState( NORM_LD , LD_OFF);
    477c:	81 e0       	ldi	r24, 0x01	; 1
    477e:	60 e0       	ldi	r22, 0x00	; 0
    4780:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
		LD_enuSetState( COLD_LD , LD_ON);
    4784:	82 e0       	ldi	r24, 0x02	; 2
    4786:	61 e0       	ldi	r22, 0x01	; 1
    4788:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
    478c:	0f c0       	rjmp	.+30     	; 0x47ac <HVAC_CheckTemperatureStatus+0x94>
	}
	else
	{
		TemperatureStatus = NORMAL ;
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	80 93 fe 01 	sts	0x01FE, r24
		LD_enuSetState( HOT_LD , LD_OFF);
    4794:	80 e0       	ldi	r24, 0x00	; 0
    4796:	60 e0       	ldi	r22, 0x00	; 0
    4798:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
		LD_enuSetState( COLD_LD , LD_OFF);
    479c:	82 e0       	ldi	r24, 0x02	; 2
    479e:	60 e0       	ldi	r22, 0x00	; 0
    47a0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
		LD_enuSetState( NORM_LD , LD_ON);
    47a4:	81 e0       	ldi	r24, 0x01	; 1
    47a6:	61 e0       	ldi	r22, 0x01	; 1
    47a8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LD_enuSetState>
	}
}
    47ac:	0f 90       	pop	r0
    47ae:	cf 91       	pop	r28
    47b0:	df 91       	pop	r29
    47b2:	08 95       	ret

000047b4 <HVAC_AdjustCompressorStatus>:

void HVAC_AdjustCompressorStatus(void)
{
    47b4:	df 93       	push	r29
    47b6:	cf 93       	push	r28
    47b8:	00 d0       	rcall	.+0      	; 0x47ba <HVAC_AdjustCompressorStatus+0x6>
    47ba:	cd b7       	in	r28, 0x3d	; 61
    47bc:	de b7       	in	r29, 0x3e	; 62
	switch( CompressorStatus)
    47be:	80 91 fd 01 	lds	r24, 0x01FD
    47c2:	28 2f       	mov	r18, r24
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	3a 83       	std	Y+2, r19	; 0x02
    47c8:	29 83       	std	Y+1, r18	; 0x01
    47ca:	89 81       	ldd	r24, Y+1	; 0x01
    47cc:	9a 81       	ldd	r25, Y+2	; 0x02
    47ce:	00 97       	sbiw	r24, 0x00	; 0
    47d0:	61 f0       	breq	.+24     	; 0x47ea <HVAC_AdjustCompressorStatus+0x36>
    47d2:	29 81       	ldd	r18, Y+1	; 0x01
    47d4:	3a 81       	ldd	r19, Y+2	; 0x02
    47d6:	21 30       	cpi	r18, 0x01	; 1
    47d8:	31 05       	cpc	r19, r1
    47da:	71 f4       	brne	.+28     	; 0x47f8 <HVAC_AdjustCompressorStatus+0x44>
	{
		case OFF	:	if(TemperatureStatus == HOT) CompressorStatus = ON ;
    47dc:	80 91 fe 01 	lds	r24, 0x01FE
    47e0:	82 30       	cpi	r24, 0x02	; 2
    47e2:	51 f4       	brne	.+20     	; 0x47f8 <HVAC_AdjustCompressorStatus+0x44>
    47e4:	10 92 fd 01 	sts	0x01FD, r1
    47e8:	07 c0       	rjmp	.+14     	; 0x47f8 <HVAC_AdjustCompressorStatus+0x44>
						break;
		case ON		:	if(TemperatureStatus == COLD) CompressorStatus = OFF ;
    47ea:	80 91 fe 01 	lds	r24, 0x01FE
    47ee:	88 23       	and	r24, r24
    47f0:	19 f4       	brne	.+6      	; 0x47f8 <HVAC_AdjustCompressorStatus+0x44>
    47f2:	81 e0       	ldi	r24, 0x01	; 1
    47f4:	80 93 fd 01 	sts	0x01FD, r24
							break;
	}
}
    47f8:	0f 90       	pop	r0
    47fa:	0f 90       	pop	r0
    47fc:	cf 91       	pop	r28
    47fe:	df 91       	pop	r29
    4800:	08 95       	ret

00004802 <__udivmodhi4>:
    4802:	aa 1b       	sub	r26, r26
    4804:	bb 1b       	sub	r27, r27
    4806:	51 e1       	ldi	r21, 0x11	; 17
    4808:	07 c0       	rjmp	.+14     	; 0x4818 <__udivmodhi4_ep>

0000480a <__udivmodhi4_loop>:
    480a:	aa 1f       	adc	r26, r26
    480c:	bb 1f       	adc	r27, r27
    480e:	a6 17       	cp	r26, r22
    4810:	b7 07       	cpc	r27, r23
    4812:	10 f0       	brcs	.+4      	; 0x4818 <__udivmodhi4_ep>
    4814:	a6 1b       	sub	r26, r22
    4816:	b7 0b       	sbc	r27, r23

00004818 <__udivmodhi4_ep>:
    4818:	88 1f       	adc	r24, r24
    481a:	99 1f       	adc	r25, r25
    481c:	5a 95       	dec	r21
    481e:	a9 f7       	brne	.-22     	; 0x480a <__udivmodhi4_loop>
    4820:	80 95       	com	r24
    4822:	90 95       	com	r25
    4824:	bc 01       	movw	r22, r24
    4826:	cd 01       	movw	r24, r26
    4828:	08 95       	ret

0000482a <__divmodhi4>:
    482a:	97 fb       	bst	r25, 7
    482c:	09 2e       	mov	r0, r25
    482e:	07 26       	eor	r0, r23
    4830:	0a d0       	rcall	.+20     	; 0x4846 <__divmodhi4_neg1>
    4832:	77 fd       	sbrc	r23, 7
    4834:	04 d0       	rcall	.+8      	; 0x483e <__divmodhi4_neg2>
    4836:	e5 df       	rcall	.-54     	; 0x4802 <__udivmodhi4>
    4838:	06 d0       	rcall	.+12     	; 0x4846 <__divmodhi4_neg1>
    483a:	00 20       	and	r0, r0
    483c:	1a f4       	brpl	.+6      	; 0x4844 <__divmodhi4_exit>

0000483e <__divmodhi4_neg2>:
    483e:	70 95       	com	r23
    4840:	61 95       	neg	r22
    4842:	7f 4f       	sbci	r23, 0xFF	; 255

00004844 <__divmodhi4_exit>:
    4844:	08 95       	ret

00004846 <__divmodhi4_neg1>:
    4846:	f6 f7       	brtc	.-4      	; 0x4844 <__divmodhi4_exit>
    4848:	90 95       	com	r25
    484a:	81 95       	neg	r24
    484c:	9f 4f       	sbci	r25, 0xFF	; 255
    484e:	08 95       	ret

00004850 <__udivmodsi4>:
    4850:	a1 e2       	ldi	r26, 0x21	; 33
    4852:	1a 2e       	mov	r1, r26
    4854:	aa 1b       	sub	r26, r26
    4856:	bb 1b       	sub	r27, r27
    4858:	fd 01       	movw	r30, r26
    485a:	0d c0       	rjmp	.+26     	; 0x4876 <__udivmodsi4_ep>

0000485c <__udivmodsi4_loop>:
    485c:	aa 1f       	adc	r26, r26
    485e:	bb 1f       	adc	r27, r27
    4860:	ee 1f       	adc	r30, r30
    4862:	ff 1f       	adc	r31, r31
    4864:	a2 17       	cp	r26, r18
    4866:	b3 07       	cpc	r27, r19
    4868:	e4 07       	cpc	r30, r20
    486a:	f5 07       	cpc	r31, r21
    486c:	20 f0       	brcs	.+8      	; 0x4876 <__udivmodsi4_ep>
    486e:	a2 1b       	sub	r26, r18
    4870:	b3 0b       	sbc	r27, r19
    4872:	e4 0b       	sbc	r30, r20
    4874:	f5 0b       	sbc	r31, r21

00004876 <__udivmodsi4_ep>:
    4876:	66 1f       	adc	r22, r22
    4878:	77 1f       	adc	r23, r23
    487a:	88 1f       	adc	r24, r24
    487c:	99 1f       	adc	r25, r25
    487e:	1a 94       	dec	r1
    4880:	69 f7       	brne	.-38     	; 0x485c <__udivmodsi4_loop>
    4882:	60 95       	com	r22
    4884:	70 95       	com	r23
    4886:	80 95       	com	r24
    4888:	90 95       	com	r25
    488a:	9b 01       	movw	r18, r22
    488c:	ac 01       	movw	r20, r24
    488e:	bd 01       	movw	r22, r26
    4890:	cf 01       	movw	r24, r30
    4892:	08 95       	ret

00004894 <__divmodsi4>:
    4894:	97 fb       	bst	r25, 7
    4896:	09 2e       	mov	r0, r25
    4898:	05 26       	eor	r0, r21
    489a:	0e d0       	rcall	.+28     	; 0x48b8 <__divmodsi4_neg1>
    489c:	57 fd       	sbrc	r21, 7
    489e:	04 d0       	rcall	.+8      	; 0x48a8 <__divmodsi4_neg2>
    48a0:	d7 df       	rcall	.-82     	; 0x4850 <__udivmodsi4>
    48a2:	0a d0       	rcall	.+20     	; 0x48b8 <__divmodsi4_neg1>
    48a4:	00 1c       	adc	r0, r0
    48a6:	38 f4       	brcc	.+14     	; 0x48b6 <__divmodsi4_exit>

000048a8 <__divmodsi4_neg2>:
    48a8:	50 95       	com	r21
    48aa:	40 95       	com	r20
    48ac:	30 95       	com	r19
    48ae:	21 95       	neg	r18
    48b0:	3f 4f       	sbci	r19, 0xFF	; 255
    48b2:	4f 4f       	sbci	r20, 0xFF	; 255
    48b4:	5f 4f       	sbci	r21, 0xFF	; 255

000048b6 <__divmodsi4_exit>:
    48b6:	08 95       	ret

000048b8 <__divmodsi4_neg1>:
    48b8:	f6 f7       	brtc	.-4      	; 0x48b6 <__divmodsi4_exit>
    48ba:	90 95       	com	r25
    48bc:	80 95       	com	r24
    48be:	70 95       	com	r23
    48c0:	61 95       	neg	r22
    48c2:	7f 4f       	sbci	r23, 0xFF	; 255
    48c4:	8f 4f       	sbci	r24, 0xFF	; 255
    48c6:	9f 4f       	sbci	r25, 0xFF	; 255
    48c8:	08 95       	ret

000048ca <__prologue_saves__>:
    48ca:	2f 92       	push	r2
    48cc:	3f 92       	push	r3
    48ce:	4f 92       	push	r4
    48d0:	5f 92       	push	r5
    48d2:	6f 92       	push	r6
    48d4:	7f 92       	push	r7
    48d6:	8f 92       	push	r8
    48d8:	9f 92       	push	r9
    48da:	af 92       	push	r10
    48dc:	bf 92       	push	r11
    48de:	cf 92       	push	r12
    48e0:	df 92       	push	r13
    48e2:	ef 92       	push	r14
    48e4:	ff 92       	push	r15
    48e6:	0f 93       	push	r16
    48e8:	1f 93       	push	r17
    48ea:	cf 93       	push	r28
    48ec:	df 93       	push	r29
    48ee:	cd b7       	in	r28, 0x3d	; 61
    48f0:	de b7       	in	r29, 0x3e	; 62
    48f2:	ca 1b       	sub	r28, r26
    48f4:	db 0b       	sbc	r29, r27
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	f8 94       	cli
    48fa:	de bf       	out	0x3e, r29	; 62
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	cd bf       	out	0x3d, r28	; 61
    4900:	09 94       	ijmp

00004902 <__epilogue_restores__>:
    4902:	2a 88       	ldd	r2, Y+18	; 0x12
    4904:	39 88       	ldd	r3, Y+17	; 0x11
    4906:	48 88       	ldd	r4, Y+16	; 0x10
    4908:	5f 84       	ldd	r5, Y+15	; 0x0f
    490a:	6e 84       	ldd	r6, Y+14	; 0x0e
    490c:	7d 84       	ldd	r7, Y+13	; 0x0d
    490e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4910:	9b 84       	ldd	r9, Y+11	; 0x0b
    4912:	aa 84       	ldd	r10, Y+10	; 0x0a
    4914:	b9 84       	ldd	r11, Y+9	; 0x09
    4916:	c8 84       	ldd	r12, Y+8	; 0x08
    4918:	df 80       	ldd	r13, Y+7	; 0x07
    491a:	ee 80       	ldd	r14, Y+6	; 0x06
    491c:	fd 80       	ldd	r15, Y+5	; 0x05
    491e:	0c 81       	ldd	r16, Y+4	; 0x04
    4920:	1b 81       	ldd	r17, Y+3	; 0x03
    4922:	aa 81       	ldd	r26, Y+2	; 0x02
    4924:	b9 81       	ldd	r27, Y+1	; 0x01
    4926:	ce 0f       	add	r28, r30
    4928:	d1 1d       	adc	r29, r1
    492a:	0f b6       	in	r0, 0x3f	; 63
    492c:	f8 94       	cli
    492e:	de bf       	out	0x3e, r29	; 62
    4930:	0f be       	out	0x3f, r0	; 63
    4932:	cd bf       	out	0x3d, r28	; 61
    4934:	ed 01       	movw	r28, r26
    4936:	08 95       	ret

00004938 <_exit>:
    4938:	f8 94       	cli

0000493a <__stop_program>:
    493a:	ff cf       	rjmp	.-2      	; 0x493a <__stop_program>


ATmega32_Maddi_503.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  000050c4  00005158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001fe  008001fe  000052f6  2**0
                  ALLOC
  3 .stab         000066e4  00000000  00000000  000052f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000029d3  00000000  00000000  0000b9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000e3af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000e52f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000e702  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00010711  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00011881  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00012884  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00012a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00012ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__vector_1>
       8:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__vector_2>
       c:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 30       	cpi	r26, 0x09	; 9
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <main>
      8a:	0c 94 60 28 	jmp	0x50c0	; 0x50c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 29 28 	jmp	0x5052	; 0x5052 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e8       	ldi	r26, 0x8E	; 142
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 45 28 	jmp	0x508a	; 0x508a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 35 28 	jmp	0x506a	; 0x506a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 35 28 	jmp	0x506a	; 0x506a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 29 28 	jmp	0x5052	; 0x5052 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e8       	ldi	r24, 0x8E	; 142
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 45 28 	jmp	0x508a	; 0x508a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 35 28 	jmp	0x506a	; 0x506a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 35 28 	jmp	0x506a	; 0x506a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 35 28 	jmp	0x506a	; 0x506a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 39 28 	jmp	0x5072	; 0x5072 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 55 28 	jmp	0x50aa	; 0x50aa <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 31 28 	jmp	0x5062	; 0x5062 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 4d 28 	jmp	0x509a	; 0x509a <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ea 56       	subi	r30, 0x6A	; 106
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GIE_enuInit>:

#include "..\..\Libraries\stdTypes.h"
#include "..\..\Libraries\errorState.h"

ES_t GIE_enuInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
     cde:	f8 94       	cli

	return ES_OK;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
}
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <GIE_enuEnable>:

ES_t GIE_enuEnable(void)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62

	asm("SEI");
     cf0:	78 94       	sei
	return ES_OK;
     cf2:	80 e0       	ldi	r24, 0x00	; 0
}
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
     d02:	f8 94       	cli
	return ES_OK;
     d04:	80 e0       	ldi	r24, 0x00	; 0
}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <EXTI_enuInit>:

extern 	EXTI_t EXTI_AstrEXTI_Config[EXTI_NUM] ;


ES_t EXTI_enuInit(void)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	2e 97       	sbiw	r28, 0x0e	; 14
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	93 c1       	rjmp	.+806    	; 0x104e <EXTI_enuInit+0x342>
	{
		if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT0 )						/********************************************************************/
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	c9 01       	movw	r24, r18
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	82 0f       	add	r24, r18
     d36:	93 1f       	adc	r25, r19
     d38:	fc 01       	movw	r30, r24
     d3a:	e7 56       	subi	r30, 0x67	; 103
     d3c:	fe 4f       	sbci	r31, 0xFE	; 254
     d3e:	80 81       	ld	r24, Z
     d40:	8d 33       	cpi	r24, 0x3D	; 61
     d42:	09 f0       	breq	.+2      	; 0xd46 <EXTI_enuInit+0x3a>
     d44:	82 c0       	rjmp	.+260    	; 0xe4a <EXTI_enuInit+0x13e>
		{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	TWO_BITS_MASK	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
     d46:	a5 e5       	ldi	r26, 0x55	; 85
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e5       	ldi	r30, 0x55	; 85
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	8c 7f       	andi	r24, 0xFC	; 252
     d52:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	c9 01       	movw	r24, r18
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	82 0f       	add	r24, r18
     d62:	93 1f       	adc	r25, r19
     d64:	fc 01       	movw	r30, r24
     d66:	e9 56       	subi	r30, 0x69	; 105
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	80 81       	ld	r24, Z
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3e 87       	std	Y+14, r19	; 0x0e
     d72:	2d 87       	std	Y+13, r18	; 0x0d
     d74:	8d 85       	ldd	r24, Y+13	; 0x0d
     d76:	9e 85       	ldd	r25, Y+14	; 0x0e
     d78:	88 33       	cpi	r24, 0x38	; 56
     d7a:	91 05       	cpc	r25, r1
     d7c:	b1 f0       	breq	.+44     	; 0xdaa <EXTI_enuInit+0x9e>
     d7e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d80:	3e 85       	ldd	r19, Y+14	; 0x0e
     d82:	29 33       	cpi	r18, 0x39	; 57
     d84:	31 05       	cpc	r19, r1
     d86:	34 f4       	brge	.+12     	; 0xd94 <EXTI_enuInit+0x88>
     d88:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d8c:	87 33       	cpi	r24, 0x37	; 55
     d8e:	91 05       	cpc	r25, r1
     d90:	31 f1       	breq	.+76     	; 0xdde <EXTI_enuInit+0xd2>
     d92:	23 c0       	rjmp	.+70     	; 0xdda <EXTI_enuInit+0xce>
     d94:	2d 85       	ldd	r18, Y+13	; 0x0d
     d96:	3e 85       	ldd	r19, Y+14	; 0x0e
     d98:	29 33       	cpi	r18, 0x39	; 57
     d9a:	31 05       	cpc	r19, r1
     d9c:	71 f0       	breq	.+28     	; 0xdba <EXTI_enuInit+0xae>
     d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     da0:	9e 85       	ldd	r25, Y+14	; 0x0e
     da2:	8a 33       	cpi	r24, 0x3A	; 58
     da4:	91 05       	cpc	r25, r1
     da6:	89 f0       	breq	.+34     	; 0xdca <EXTI_enuInit+0xbe>
     da8:	18 c0       	rjmp	.+48     	; 0xdda <EXTI_enuInit+0xce>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC00_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
     daa:	a5 e5       	ldi	r26, 0x55	; 85
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e5 e5       	ldi	r30, 0x55	; 85
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	81 60       	ori	r24, 0x01	; 1
     db6:	8c 93       	st	X, r24
     db8:	12 c0       	rjmp	.+36     	; 0xdde <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC01_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
     dba:	a5 e5       	ldi	r26, 0x55	; 85
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e5 e5       	ldi	r30, 0x55	; 85
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	8c 93       	st	X, r24
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC00_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
     dca:	a5 e5       	ldi	r26, 0x55	; 85
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e5 e5       	ldi	r30, 0x55	; 85
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	83 60       	ori	r24, 0x03	; 3
     dd6:	8c 93       	st	X, r24
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <EXTI_enuInit+0xd2>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	09 f4       	brne	.+2      	; 0xde6 <EXTI_enuInit+0xda>
     de4:	3a c1       	rjmp	.+628    	; 0x105a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT0	mode		*/
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	c9 01       	movw	r24, r18
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	82 0f       	add	r24, r18
     df4:	93 1f       	adc	r25, r19
     df6:	fc 01       	movw	r30, r24
     df8:	e8 56       	subi	r30, 0x68	; 104
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	80 81       	ld	r24, Z
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	3c 87       	std	Y+12, r19	; 0x0c
     e04:	2b 87       	std	Y+11, r18	; 0x0b
     e06:	8b 85       	ldd	r24, Y+11	; 0x0b
     e08:	9c 85       	ldd	r25, Y+12	; 0x0c
     e0a:	8b 33       	cpi	r24, 0x3B	; 59
     e0c:	91 05       	cpc	r25, r1
     e0e:	31 f0       	breq	.+12     	; 0xe1c <EXTI_enuInit+0x110>
     e10:	2b 85       	ldd	r18, Y+11	; 0x0b
     e12:	3c 85       	ldd	r19, Y+12	; 0x0c
     e14:	2c 33       	cpi	r18, 0x3C	; 60
     e16:	31 05       	cpc	r19, r1
     e18:	49 f0       	breq	.+18     	; 0xe2c <EXTI_enuInit+0x120>
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <EXTI_enuInit+0x130>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE0_BIT	);	/*			ENABLE INTERRUPT		*/
     e1c:	ab e5       	ldi	r26, 0x5B	; 91
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	eb e5       	ldi	r30, 0x5B	; 91
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 64       	ori	r24, 0x40	; 64
     e28:	8c 93       	st	X, r24
     e2a:	0a c0       	rjmp	.+20     	; 0xe40 <EXTI_enuInit+0x134>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE0_BIT	);	/*			DISABLE INTERRUPT		*/
     e2c:	ab e5       	ldi	r26, 0x5B	; 91
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	eb e5       	ldi	r30, 0x5B	; 91
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8f 7b       	andi	r24, 0xBF	; 191
     e38:	8c 93       	st	X, r24
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <EXTI_enuInit+0x134>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	09 f4       	brne	.+2      	; 0xe48 <EXTI_enuInit+0x13c>
     e46:	09 c1       	rjmp	.+530    	; 0x105a <EXTI_enuInit+0x34e>
     e48:	ff c0       	rjmp	.+510    	; 0x1048 <EXTI_enuInit+0x33c>
		}

		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT1 )				/********************************************************************/
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	c9 01       	movw	r24, r18
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	82 0f       	add	r24, r18
     e58:	93 1f       	adc	r25, r19
     e5a:	fc 01       	movw	r30, r24
     e5c:	e7 56       	subi	r30, 0x67	; 103
     e5e:	fe 4f       	sbci	r31, 0xFE	; 254
     e60:	80 81       	ld	r24, Z
     e62:	8e 33       	cpi	r24, 0x3E	; 62
     e64:	09 f0       	breq	.+2      	; 0xe68 <EXTI_enuInit+0x15c>
     e66:	7e c0       	rjmp	.+252    	; 0xf64 <EXTI_enuInit+0x258>
		{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	TWO_BITS_MASK	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
     e68:	a5 e5       	ldi	r26, 0x55	; 85
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e5       	ldi	r30, 0x55	; 85
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	83 7f       	andi	r24, 0xF3	; 243
     e74:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	c9 01       	movw	r24, r18
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	82 0f       	add	r24, r18
     e84:	93 1f       	adc	r25, r19
     e86:	fc 01       	movw	r30, r24
     e88:	e9 56       	subi	r30, 0x69	; 105
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	80 81       	ld	r24, Z
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3a 87       	std	Y+10, r19	; 0x0a
     e94:	29 87       	std	Y+9, r18	; 0x09
     e96:	89 85       	ldd	r24, Y+9	; 0x09
     e98:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9a:	88 33       	cpi	r24, 0x38	; 56
     e9c:	91 05       	cpc	r25, r1
     e9e:	b1 f0       	breq	.+44     	; 0xecc <EXTI_enuInit+0x1c0>
     ea0:	29 85       	ldd	r18, Y+9	; 0x09
     ea2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ea4:	29 33       	cpi	r18, 0x39	; 57
     ea6:	31 05       	cpc	r19, r1
     ea8:	34 f4       	brge	.+12     	; 0xeb6 <EXTI_enuInit+0x1aa>
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	87 33       	cpi	r24, 0x37	; 55
     eb0:	91 05       	cpc	r25, r1
     eb2:	31 f1       	breq	.+76     	; 0xf00 <EXTI_enuInit+0x1f4>
     eb4:	23 c0       	rjmp	.+70     	; 0xefc <EXTI_enuInit+0x1f0>
     eb6:	29 85       	ldd	r18, Y+9	; 0x09
     eb8:	3a 85       	ldd	r19, Y+10	; 0x0a
     eba:	29 33       	cpi	r18, 0x39	; 57
     ebc:	31 05       	cpc	r19, r1
     ebe:	71 f0       	breq	.+28     	; 0xedc <EXTI_enuInit+0x1d0>
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	8a 33       	cpi	r24, 0x3A	; 58
     ec6:	91 05       	cpc	r25, r1
     ec8:	89 f0       	breq	.+34     	; 0xeec <EXTI_enuInit+0x1e0>
     eca:	18 c0       	rjmp	.+48     	; 0xefc <EXTI_enuInit+0x1f0>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC10_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
     ecc:	a5 e5       	ldi	r26, 0x55	; 85
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e5       	ldi	r30, 0x55	; 85
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	8c 93       	st	X, r24
     eda:	12 c0       	rjmp	.+36     	; 0xf00 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC11_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
     edc:	a5 e5       	ldi	r26, 0x55	; 85
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e5       	ldi	r30, 0x55	; 85
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	88 60       	ori	r24, 0x08	; 8
     ee8:	8c 93       	st	X, r24
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC10_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
     eec:	a5 e5       	ldi	r26, 0x55	; 85
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e5 e5       	ldi	r30, 0x55	; 85
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8c 60       	ori	r24, 0x0C	; 12
     ef8:	8c 93       	st	X, r24
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <EXTI_enuInit+0x1f4>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	09 f4       	brne	.+2      	; 0xf08 <EXTI_enuInit+0x1fc>
     f06:	a9 c0       	rjmp	.+338    	; 0x105a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT1	mode		*/
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	c9 01       	movw	r24, r18
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	fc 01       	movw	r30, r24
     f1a:	e8 56       	subi	r30, 0x68	; 104
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	80 81       	ld	r24, Z
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	38 87       	std	Y+8, r19	; 0x08
     f26:	2f 83       	std	Y+7, r18	; 0x07
     f28:	8f 81       	ldd	r24, Y+7	; 0x07
     f2a:	98 85       	ldd	r25, Y+8	; 0x08
     f2c:	8b 33       	cpi	r24, 0x3B	; 59
     f2e:	91 05       	cpc	r25, r1
     f30:	31 f0       	breq	.+12     	; 0xf3e <EXTI_enuInit+0x232>
     f32:	2f 81       	ldd	r18, Y+7	; 0x07
     f34:	38 85       	ldd	r19, Y+8	; 0x08
     f36:	2c 33       	cpi	r18, 0x3C	; 60
     f38:	31 05       	cpc	r19, r1
     f3a:	49 f0       	breq	.+18     	; 0xf4e <EXTI_enuInit+0x242>
     f3c:	10 c0       	rjmp	.+32     	; 0xf5e <EXTI_enuInit+0x252>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE1_BIT	);	/*			ENABLE INTERRUPT		*/
     f3e:	ab e5       	ldi	r26, 0x5B	; 91
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	eb e5       	ldi	r30, 0x5B	; 91
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 68       	ori	r24, 0x80	; 128
     f4a:	8c 93       	st	X, r24
     f4c:	7d c0       	rjmp	.+250    	; 0x1048 <EXTI_enuInit+0x33c>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE1_BIT	);	/*			DISABLE INTERRUPT		*/
     f4e:	ab e5       	ldi	r26, 0x5B	; 91
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	eb e5       	ldi	r30, 0x5B	; 91
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	8c 93       	st	X, r24
     f5c:	75 c0       	rjmp	.+234    	; 0x1048 <EXTI_enuInit+0x33c>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	72 c0       	rjmp	.+228    	; 0x1048 <EXTI_enuInit+0x33c>
			}
		}
		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT2 )				/********************************************************************/
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	c9 01       	movw	r24, r18
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	82 0f       	add	r24, r18
     f72:	93 1f       	adc	r25, r19
     f74:	fc 01       	movw	r30, r24
     f76:	e7 56       	subi	r30, 0x67	; 103
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	80 81       	ld	r24, Z
     f7c:	8f 33       	cpi	r24, 0x3F	; 63
     f7e:	09 f0       	breq	.+2      	; 0xf82 <EXTI_enuInit+0x276>
     f80:	61 c0       	rjmp	.+194    	; 0x1044 <EXTI_enuInit+0x338>
		{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/********************************************************************/
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	c9 01       	movw	r24, r18
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	fc 01       	movw	r30, r24
     f94:	e9 56       	subi	r30, 0x69	; 105
     f96:	fe 4f       	sbci	r31, 0xFE	; 254
     f98:	80 81       	ld	r24, Z
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	3e 83       	std	Y+6, r19	; 0x06
     fa0:	2d 83       	std	Y+5, r18	; 0x05
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	89 33       	cpi	r24, 0x39	; 57
     fa8:	91 05       	cpc	r25, r1
     faa:	31 f0       	breq	.+12     	; 0xfb8 <EXTI_enuInit+0x2ac>
     fac:	2d 81       	ldd	r18, Y+5	; 0x05
     fae:	3e 81       	ldd	r19, Y+6	; 0x06
     fb0:	2a 33       	cpi	r18, 0x3A	; 58
     fb2:	31 05       	cpc	r19, r1
     fb4:	49 f0       	breq	.+18     	; 0xfc8 <EXTI_enuInit+0x2bc>
     fb6:	10 c0       	rjmp	.+32     	; 0xfd8 <EXTI_enuInit+0x2cc>
			{																		/*																	*/
				case	FALLING_EDGE:	MCUCSR &= ~(BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
     fb8:	a4 e5       	ldi	r26, 0x54	; 84
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e4 e5       	ldi	r30, 0x54	; 84
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 7b       	andi	r24, 0xBF	; 191
     fc4:	8c 93       	st	X, r24
     fc6:	0a c0       	rjmp	.+20     	; 0xfdc <EXTI_enuInit+0x2d0>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCSR |=  (BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
     fc8:	a4 e5       	ldi	r26, 0x54	; 84
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e4 e5       	ldi	r30, 0x54	; 84
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	8c 93       	st	X, r24
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <EXTI_enuInit+0x2d0>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	82 30       	cpi	r24, 0x02	; 2
     fe0:	e1 f1       	breq	.+120    	; 0x105a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT2	mode		*/
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	c9 01       	movw	r24, r18
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	fc 01       	movw	r30, r24
     ff4:	e8 56       	subi	r30, 0x68	; 104
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	80 81       	ld	r24, Z
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3c 83       	std	Y+4, r19	; 0x04
    1000:	2b 83       	std	Y+3, r18	; 0x03
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	8b 33       	cpi	r24, 0x3B	; 59
    1008:	91 05       	cpc	r25, r1
    100a:	31 f0       	breq	.+12     	; 0x1018 <EXTI_enuInit+0x30c>
    100c:	2b 81       	ldd	r18, Y+3	; 0x03
    100e:	3c 81       	ldd	r19, Y+4	; 0x04
    1010:	2c 33       	cpi	r18, 0x3C	; 60
    1012:	31 05       	cpc	r19, r1
    1014:	49 f0       	breq	.+18     	; 0x1028 <EXTI_enuInit+0x31c>
    1016:	10 c0       	rjmp	.+32     	; 0x1038 <EXTI_enuInit+0x32c>
			{																		/************************************/
				case	INTERRUPT	:	GICR |=  (	BIT_MASK	<<	PIE2_BIT	);	/*			ENABLE INTERRUPT		*/
    1018:	ab e5       	ldi	r26, 0x5B	; 91
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	eb e5       	ldi	r30, 0x5B	; 91
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 62       	ori	r24, 0x20	; 32
    1024:	8c 93       	st	X, r24
    1026:	0a c0       	rjmp	.+20     	; 0x103c <EXTI_enuInit+0x330>
										break;										/*									*/
				case	POLLING		:	GICR &=~ (	BIT_MASK	<<	PIE2_BIT	);	/*			DISABLE INTERRUPT		*/
    1028:	ab e5       	ldi	r26, 0x5B	; 91
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	eb e5       	ldi	r30, 0x5B	; 91
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8f 7d       	andi	r24, 0xDF	; 223
    1034:	8c 93       	st	X, r24
    1036:	02 c0       	rjmp	.+4      	; 0x103c <EXTI_enuInit+0x330>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	61 f0       	breq	.+24     	; 0x105a <EXTI_enuInit+0x34e>
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <EXTI_enuInit+0x33c>
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	8a 83       	std	Y+2, r24	; 0x02

ES_t EXTI_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	90 91 96 01 	lds	r25, 0x0196
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	89 17       	cp	r24, r25
    1056:	08 f4       	brcc	.+2      	; 0x105a <EXTI_enuInit+0x34e>
    1058:	67 ce       	rjmp	.-818    	; 0xd28 <EXTI_enuInit+0x1c>
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
		}
		else Local_enuErrorState = ES_OUT_RANGE;
	}
	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	09 f0       	breq	.+2      	; 0x1062 <EXTI_enuInit+0x356>
    1060:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1064:	2e 96       	adiw	r28, 0x0e	; 14
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt( u8 Copy_u8IntNum )
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <EXTI_enuEnableInterrupt+0x6>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	8d 33       	cpi	r24, 0x3D	; 61
    108a:	41 f4       	brne	.+16     	; 0x109c <EXTI_enuEnableInterrupt+0x26>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE0_BIT	);							/*			ENABLE INT0			*/
    108c:	ab e5       	ldi	r26, 0x5B	; 91
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	eb e5       	ldi	r30, 0x5B	; 91
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	80 64       	ori	r24, 0x40	; 64
    1098:	8c 93       	st	X, r24
    109a:	18 c0       	rjmp	.+48     	; 0x10cc <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	8e 33       	cpi	r24, 0x3E	; 62
    10a0:	41 f4       	brne	.+16     	; 0x10b2 <EXTI_enuEnableInterrupt+0x3c>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE1_BIT	);							/*			ENABLE INT1			*/
    10a2:	ab e5       	ldi	r26, 0x5B	; 91
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	eb e5       	ldi	r30, 0x5B	; 91
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	80 68       	ori	r24, 0x80	; 128
    10ae:	8c 93       	st	X, r24
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	8f 33       	cpi	r24, 0x3F	; 63
    10b6:	41 f4       	brne	.+16     	; 0x10c8 <EXTI_enuEnableInterrupt+0x52>
	{																		/********************************/
		GICR |=  (	BIT_MASK	<<	PIE2_BIT	);							/*			ENABLE INT2			*/
    10b8:	ab e5       	ldi	r26, 0x5B	; 91
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	eb e5       	ldi	r30, 0x5B	; 91
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	80 62       	ori	r24, 0x20	; 32
    10c4:	8c 93       	st	X, r24
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <EXTI_enuEnableInterrupt+0x5e>
    10d2:	19 82       	std	Y+1, r1	; 0x01


	return Local_enuErrorState ;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <EXTI_enuDisableInterrupt>:

ES_t EXTI_enuDisableInterrupt( u8 Copy_u8IntNum )
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <EXTI_enuDisableInterrupt+0x6>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	8d 33       	cpi	r24, 0x3D	; 61
    10f4:	41 f4       	brne	.+16     	; 0x1106 <EXTI_enuDisableInterrupt+0x26>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE0_BIT	);							/*			DISABLE INT0		*/
    10f6:	ab e5       	ldi	r26, 0x5B	; 91
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	eb e5       	ldi	r30, 0x5B	; 91
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8f 7b       	andi	r24, 0xBF	; 191
    1102:	8c 93       	st	X, r24
    1104:	18 c0       	rjmp	.+48     	; 0x1136 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	8e 33       	cpi	r24, 0x3E	; 62
    110a:	41 f4       	brne	.+16     	; 0x111c <EXTI_enuDisableInterrupt+0x3c>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE1_BIT	);							/*			DISABLE INT1		*/
    110c:	ab e5       	ldi	r26, 0x5B	; 91
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	eb e5       	ldi	r30, 0x5B	; 91
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8f 77       	andi	r24, 0x7F	; 127
    1118:	8c 93       	st	X, r24
    111a:	0d c0       	rjmp	.+26     	; 0x1136 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	8f 33       	cpi	r24, 0x3F	; 63
    1120:	41 f4       	brne	.+16     	; 0x1132 <EXTI_enuDisableInterrupt+0x52>
	{																		/********************************/
		GICR &= ~(	BIT_MASK	<<	PIE2_BIT	);							/*			DISABLE INT2		*/
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7d       	andi	r24, 0xDF	; 223
    112e:	8c 93       	st	X, r24
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	09 f0       	breq	.+2      	; 0x113e <EXTI_enuDisableInterrupt+0x5e>
    113c:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel( u8 Copy_u8IntNum , u8 Copy_u8SenseLevel )
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	29 97       	sbiw	r28, 0x09	; 9
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	8a 83       	std	Y+2, r24	; 0x02
    1160:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01


	if( Copy_u8IntNum == INT0 )													/********************************************************************/
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	8d 33       	cpi	r24, 0x3D	; 61
    116a:	09 f0       	breq	.+2      	; 0x116e <EXTI_enuSetSenseLevel+0x24>
    116c:	43 c0       	rjmp	.+134    	; 0x11f4 <EXTI_enuSetSenseLevel+0xaa>
	{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	TWO_BITS_MASK	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
    116e:	a5 e5       	ldi	r26, 0x55	; 85
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e5 e5       	ldi	r30, 0x55	; 85
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8c 7f       	andi	r24, 0xFC	; 252
    117a:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	39 87       	std	Y+9, r19	; 0x09
    1184:	28 87       	std	Y+8, r18	; 0x08
    1186:	88 85       	ldd	r24, Y+8	; 0x08
    1188:	99 85       	ldd	r25, Y+9	; 0x09
    118a:	88 33       	cpi	r24, 0x38	; 56
    118c:	91 05       	cpc	r25, r1
    118e:	b9 f0       	breq	.+46     	; 0x11be <EXTI_enuSetSenseLevel+0x74>
    1190:	28 85       	ldd	r18, Y+8	; 0x08
    1192:	39 85       	ldd	r19, Y+9	; 0x09
    1194:	29 33       	cpi	r18, 0x39	; 57
    1196:	31 05       	cpc	r19, r1
    1198:	3c f4       	brge	.+14     	; 0x11a8 <EXTI_enuSetSenseLevel+0x5e>
    119a:	88 85       	ldd	r24, Y+8	; 0x08
    119c:	99 85       	ldd	r25, Y+9	; 0x09
    119e:	87 33       	cpi	r24, 0x37	; 55
    11a0:	91 05       	cpc	r25, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <EXTI_enuSetSenseLevel+0x5c>
    11a4:	96 c0       	rjmp	.+300    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
    11a6:	23 c0       	rjmp	.+70     	; 0x11ee <EXTI_enuSetSenseLevel+0xa4>
    11a8:	28 85       	ldd	r18, Y+8	; 0x08
    11aa:	39 85       	ldd	r19, Y+9	; 0x09
    11ac:	29 33       	cpi	r18, 0x39	; 57
    11ae:	31 05       	cpc	r19, r1
    11b0:	71 f0       	breq	.+28     	; 0x11ce <EXTI_enuSetSenseLevel+0x84>
    11b2:	88 85       	ldd	r24, Y+8	; 0x08
    11b4:	99 85       	ldd	r25, Y+9	; 0x09
    11b6:	8a 33       	cpi	r24, 0x3A	; 58
    11b8:	91 05       	cpc	r25, r1
    11ba:	89 f0       	breq	.+34     	; 0x11de <EXTI_enuSetSenseLevel+0x94>
    11bc:	18 c0       	rjmp	.+48     	; 0x11ee <EXTI_enuSetSenseLevel+0xa4>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC00_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    11be:	a5 e5       	ldi	r26, 0x55	; 85
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e5       	ldi	r30, 0x55	; 85
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	81 60       	ori	r24, 0x01	; 1
    11ca:	8c 93       	st	X, r24
    11cc:	82 c0       	rjmp	.+260    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC01_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
    11ce:	a5 e5       	ldi	r26, 0x55	; 85
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e5       	ldi	r30, 0x55	; 85
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	8c 93       	st	X, r24
    11dc:	7a c0       	rjmp	.+244    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC00_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
    11de:	a5 e5       	ldi	r26, 0x55	; 85
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e5       	ldi	r30, 0x55	; 85
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	83 60       	ori	r24, 0x03	; 3
    11ea:	8c 93       	st	X, r24
    11ec:	72 c0       	rjmp	.+228    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	6f c0       	rjmp	.+222    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
		}
	}

	else if( Copy_u8IntNum == INT1 )											/********************************************************************/
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	8e 33       	cpi	r24, 0x3E	; 62
    11f8:	09 f0       	breq	.+2      	; 0x11fc <EXTI_enuSetSenseLevel+0xb2>
    11fa:	43 c0       	rjmp	.+134    	; 0x1282 <EXTI_enuSetSenseLevel+0x138>
	{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	TWO_BITS_MASK	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
    11fc:	a5 e5       	ldi	r26, 0x55	; 85
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e5 e5       	ldi	r30, 0x55	; 85
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	83 7f       	andi	r24, 0xF3	; 243
    1208:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3f 83       	std	Y+7, r19	; 0x07
    1212:	2e 83       	std	Y+6, r18	; 0x06
    1214:	8e 81       	ldd	r24, Y+6	; 0x06
    1216:	9f 81       	ldd	r25, Y+7	; 0x07
    1218:	88 33       	cpi	r24, 0x38	; 56
    121a:	91 05       	cpc	r25, r1
    121c:	b9 f0       	breq	.+46     	; 0x124c <EXTI_enuSetSenseLevel+0x102>
    121e:	2e 81       	ldd	r18, Y+6	; 0x06
    1220:	3f 81       	ldd	r19, Y+7	; 0x07
    1222:	29 33       	cpi	r18, 0x39	; 57
    1224:	31 05       	cpc	r19, r1
    1226:	3c f4       	brge	.+14     	; 0x1236 <EXTI_enuSetSenseLevel+0xec>
    1228:	8e 81       	ldd	r24, Y+6	; 0x06
    122a:	9f 81       	ldd	r25, Y+7	; 0x07
    122c:	87 33       	cpi	r24, 0x37	; 55
    122e:	91 05       	cpc	r25, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <EXTI_enuSetSenseLevel+0xea>
    1232:	4f c0       	rjmp	.+158    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
    1234:	23 c0       	rjmp	.+70     	; 0x127c <EXTI_enuSetSenseLevel+0x132>
    1236:	2e 81       	ldd	r18, Y+6	; 0x06
    1238:	3f 81       	ldd	r19, Y+7	; 0x07
    123a:	29 33       	cpi	r18, 0x39	; 57
    123c:	31 05       	cpc	r19, r1
    123e:	71 f0       	breq	.+28     	; 0x125c <EXTI_enuSetSenseLevel+0x112>
    1240:	8e 81       	ldd	r24, Y+6	; 0x06
    1242:	9f 81       	ldd	r25, Y+7	; 0x07
    1244:	8a 33       	cpi	r24, 0x3A	; 58
    1246:	91 05       	cpc	r25, r1
    1248:	89 f0       	breq	.+34     	; 0x126c <EXTI_enuSetSenseLevel+0x122>
    124a:	18 c0       	rjmp	.+48     	; 0x127c <EXTI_enuSetSenseLevel+0x132>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	MCUCR |= (	BIT_MASK	<<	ISC10_BIT	);	/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    124c:	a5 e5       	ldi	r26, 0x55	; 85
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e5       	ldi	r30, 0x55	; 85
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	84 60       	ori	r24, 0x04	; 4
    1258:	8c 93       	st	X, r24
    125a:	3b c0       	rjmp	.+118    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	MCUCR |= (	BIT_MASK	<<	ISC11_BIT	);	/*		Setting them to '10' for Falling Edge Sense Choice			*/
    125c:	a5 e5       	ldi	r26, 0x55	; 85
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e5       	ldi	r30, 0x55	; 85
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	88 60       	ori	r24, 0x08	; 8
    1268:	8c 93       	st	X, r24
    126a:	33 c0       	rjmp	.+102    	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCR |= (TWO_BITS_MASK	<<	ISC10_BIT	);	/*		Setting them to '11' for Rising Edge Sense Choice			*/
    126c:	a5 e5       	ldi	r26, 0x55	; 85
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e5       	ldi	r30, 0x55	; 85
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	8c 60       	ori	r24, 0x0C	; 12
    1278:	8c 93       	st	X, r24
    127a:	2b c0       	rjmp	.+86     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	28 c0       	rjmp	.+80     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else if( Copy_u8IntNum == INT2 )											/********************************************************************/
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	8f 33       	cpi	r24, 0x3F	; 63
    1286:	19 f5       	brne	.+70     	; 0x12ce <EXTI_enuSetSenseLevel+0x184>
	{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
		switch( Copy_u8SenseLevel )												/********************************************************************/
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3d 83       	std	Y+5, r19	; 0x05
    1290:	2c 83       	std	Y+4, r18	; 0x04
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	89 33       	cpi	r24, 0x39	; 57
    1298:	91 05       	cpc	r25, r1
    129a:	31 f0       	breq	.+12     	; 0x12a8 <EXTI_enuSetSenseLevel+0x15e>
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	3d 81       	ldd	r19, Y+5	; 0x05
    12a0:	2a 33       	cpi	r18, 0x3A	; 58
    12a2:	31 05       	cpc	r19, r1
    12a4:	49 f0       	breq	.+18     	; 0x12b8 <EXTI_enuSetSenseLevel+0x16e>
    12a6:	10 c0       	rjmp	.+32     	; 0x12c8 <EXTI_enuSetSenseLevel+0x17e>
		{																		/*																	*/
			case	FALLING_EDGE:	MCUCSR &= ~(BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
    12a8:	a4 e5       	ldi	r26, 0x54	; 84
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e4 e5       	ldi	r30, 0x54	; 84
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 7b       	andi	r24, 0xBF	; 191
    12b4:	8c 93       	st	X, r24
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCSR |=  (BIT_MASK	<<	ISC2_BIT	);	/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
    12b8:	a4 e5       	ldi	r26, 0x54	; 84
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e4 e5       	ldi	r30, 0x54	; 84
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 64       	ori	r24, 0x40	; 64
    12c4:	8c 93       	st	X, r24
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	09 f0       	breq	.+2      	; 0x12da <EXTI_enuSetSenseLevel+0x190>
    12d8:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    12da:	89 81       	ldd	r24, Y+1	; 0x01
}
    12dc:	29 96       	adiw	r28, 0x09	; 9
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <__vector_1>:
void __vector_2(void)__attribute__((signal));	//ISR	INT1
void __vector_3(void)__attribute__((signal));	//ISR	INT2


void __vector_1(void)
{
    12ee:	1f 92       	push	r1
    12f0:	0f 92       	push	r0
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	0f 92       	push	r0
    12f6:	11 24       	eor	r1, r1
    12f8:	2f 93       	push	r18
    12fa:	3f 93       	push	r19
    12fc:	4f 93       	push	r20
    12fe:	5f 93       	push	r21
    1300:	6f 93       	push	r22
    1302:	7f 93       	push	r23
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
    1308:	af 93       	push	r26
    130a:	bf 93       	push	r27
    130c:	ef 93       	push	r30
    130e:	ff 93       	push	r31
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[0] != NULL)
    1318:	80 91 fe 01 	lds	r24, 0x01FE
    131c:	90 91 ff 01 	lds	r25, 0x01FF
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	29 f0       	breq	.+10     	; 0x132e <__vector_1+0x40>
	{
		EXTI_ApFunction_AppFun[0]();
    1324:	e0 91 fe 01 	lds	r30, 0x01FE
    1328:	f0 91 ff 01 	lds	r31, 0x01FF
    132c:	09 95       	icall
	}
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <__vector_2>:
void __vector_2(void)
{
    1354:	1f 92       	push	r1
    1356:	0f 92       	push	r0
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	0f 92       	push	r0
    135c:	11 24       	eor	r1, r1
    135e:	2f 93       	push	r18
    1360:	3f 93       	push	r19
    1362:	4f 93       	push	r20
    1364:	5f 93       	push	r21
    1366:	6f 93       	push	r22
    1368:	7f 93       	push	r23
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
    136e:	af 93       	push	r26
    1370:	bf 93       	push	r27
    1372:	ef 93       	push	r30
    1374:	ff 93       	push	r31
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[1] != NULL)
    137e:	80 91 00 02 	lds	r24, 0x0200
    1382:	90 91 01 02 	lds	r25, 0x0201
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	29 f0       	breq	.+10     	; 0x1394 <__vector_2+0x40>
	{
		EXTI_ApFunction_AppFun[1]();
    138a:	e0 91 00 02 	lds	r30, 0x0200
    138e:	f0 91 01 02 	lds	r31, 0x0201
    1392:	09 95       	icall
	}
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	1f 90       	pop	r1
    13b8:	18 95       	reti

000013ba <__vector_3>:
void __vector_3(void)
{
    13ba:	1f 92       	push	r1
    13bc:	0f 92       	push	r0
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	0f 92       	push	r0
    13c2:	11 24       	eor	r1, r1
    13c4:	2f 93       	push	r18
    13c6:	3f 93       	push	r19
    13c8:	4f 93       	push	r20
    13ca:	5f 93       	push	r21
    13cc:	6f 93       	push	r22
    13ce:	7f 93       	push	r23
    13d0:	8f 93       	push	r24
    13d2:	9f 93       	push	r25
    13d4:	af 93       	push	r26
    13d6:	bf 93       	push	r27
    13d8:	ef 93       	push	r30
    13da:	ff 93       	push	r31
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[2] != NULL)
    13e4:	80 91 02 02 	lds	r24, 0x0202
    13e8:	90 91 03 02 	lds	r25, 0x0203
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	29 f0       	breq	.+10     	; 0x13fa <__vector_3+0x40>
	{
		EXTI_ApFunction_AppFun[2]();
    13f0:	e0 91 02 02 	lds	r30, 0x0202
    13f4:	f0 91 03 02 	lds	r31, 0x0203
    13f8:	09 95       	icall
	}
}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	ff 91       	pop	r31
    1400:	ef 91       	pop	r30
    1402:	bf 91       	pop	r27
    1404:	af 91       	pop	r26
    1406:	9f 91       	pop	r25
    1408:	8f 91       	pop	r24
    140a:	7f 91       	pop	r23
    140c:	6f 91       	pop	r22
    140e:	5f 91       	pop	r21
    1410:	4f 91       	pop	r20
    1412:	3f 91       	pop	r19
    1414:	2f 91       	pop	r18
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	0f 90       	pop	r0
    141c:	1f 90       	pop	r1
    141e:	18 95       	reti

00001420 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack( void (*Copy_pAppFunction)() , u8 Copy_u8IntNum)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <EXTI_enuCallBack+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <EXTI_enuCallBack+0x8>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	9b 83       	std	Y+3, r25	; 0x03
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pAppFunction != NULL)
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	9b 81       	ldd	r25, Y+3	; 0x03
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	89 f0       	breq	.+34     	; 0x1460 <EXTI_enuCallBack+0x40>
	{
		EXTI_ApFunction_AppFun[(Copy_u8IntNum -= INT0)] =  Copy_pAppFunction ;
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	8d 53       	subi	r24, 0x3D	; 61
    1442:	8c 83       	std	Y+4, r24	; 0x04
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	2a 81       	ldd	r18, Y+2	; 0x02
    144c:	3b 81       	ldd	r19, Y+3	; 0x03
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	fc 01       	movw	r30, r24
    1454:	e2 50       	subi	r30, 0x02	; 2
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	31 83       	std	Z+1, r19	; 0x01
    145a:	20 83       	st	Z, r18
		Local_enuErrorState = ES_OK;
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <EXTI_enuCallBack+0x44>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    147e:	19 82       	std	Y+1, r1	; 0x01

	//

	return Local_enuErrorState ;
    1480:	89 81       	ldd	r24, Y+1	; 0x01
}
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_enuSetPinDirection+0x6>
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_enuSetPinDirection+0x8>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <DIO_enuSetPinDirection+0xa>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	8a 83       	std	Y+2, r24	; 0x02
    149a:	6b 83       	std	Y+3, r22	; 0x03
    149c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <DIO_enuSetPinDirection+0x20>
    14a8:	d0 c0       	rjmp	.+416    	; 0x164a <DIO_enuSetPinDirection+0x1c0>
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	88 30       	cpi	r24, 0x08	; 8
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <DIO_enuSetPinDirection+0x28>
    14b0:	cc c0       	rjmp	.+408    	; 0x164a <DIO_enuSetPinDirection+0x1c0>
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	82 30       	cpi	r24, 0x02	; 2
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <DIO_enuSetPinDirection+0x30>
    14b8:	c8 c0       	rjmp	.+400    	; 0x164a <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT )
	{
		switch (Copy_u8GroupID)
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3e 83       	std	Y+6, r19	; 0x06
    14c2:	2d 83       	std	Y+5, r18	; 0x05
    14c4:	6d 81       	ldd	r22, Y+5	; 0x05
    14c6:	7e 81       	ldd	r23, Y+6	; 0x06
    14c8:	61 30       	cpi	r22, 0x01	; 1
    14ca:	71 05       	cpc	r23, r1
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <DIO_enuSetPinDirection+0x46>
    14ce:	41 c0       	rjmp	.+130    	; 0x1552 <DIO_enuSetPinDirection+0xc8>
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	82 30       	cpi	r24, 0x02	; 2
    14d6:	91 05       	cpc	r25, r1
    14d8:	34 f4       	brge	.+12     	; 0x14e6 <DIO_enuSetPinDirection+0x5c>
    14da:	2d 81       	ldd	r18, Y+5	; 0x05
    14dc:	3e 81       	ldd	r19, Y+6	; 0x06
    14de:	21 15       	cp	r18, r1
    14e0:	31 05       	cpc	r19, r1
    14e2:	71 f0       	breq	.+28     	; 0x1500 <DIO_enuSetPinDirection+0x76>
    14e4:	b0 c0       	rjmp	.+352    	; 0x1646 <DIO_enuSetPinDirection+0x1bc>
    14e6:	6d 81       	ldd	r22, Y+5	; 0x05
    14e8:	7e 81       	ldd	r23, Y+6	; 0x06
    14ea:	62 30       	cpi	r22, 0x02	; 2
    14ec:	71 05       	cpc	r23, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <DIO_enuSetPinDirection+0x68>
    14f0:	59 c0       	rjmp	.+178    	; 0x15a4 <DIO_enuSetPinDirection+0x11a>
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	91 05       	cpc	r25, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <DIO_enuSetPinDirection+0x74>
    14fc:	7c c0       	rjmp	.+248    	; 0x15f6 <DIO_enuSetPinDirection+0x16c>
    14fe:	a3 c0       	rjmp	.+326    	; 0x1646 <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    1500:	aa e3       	ldi	r26, 0x3A	; 58
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	ea e3       	ldi	r30, 0x3A	; 58
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_enuSetPinDirection+0x92>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	2a 95       	dec	r18
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_enuSetPinDirection+0x8e>
    1520:	80 95       	com	r24
    1522:	84 23       	and	r24, r20
    1524:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction <<   Copy_u8PinID );
    1526:	aa e3       	ldi	r26, 0x3A	; 58
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	b9 01       	movw	r22, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_enuSetPinDirection+0xbc>
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	8a 95       	dec	r24
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_enuSetPinDirection+0xb8>
    154a:	cb 01       	movw	r24, r22
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	7a c0       	rjmp	.+244    	; 0x1646 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    1552:	a7 e3       	ldi	r26, 0x37	; 55
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e7 e3       	ldi	r30, 0x37	; 55
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_enuSetPinDirection+0xe4>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	2a 95       	dec	r18
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_enuSetPinDirection+0xe0>
    1572:	80 95       	com	r24
    1574:	84 23       	and	r24, r20
    1576:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction <<   Copy_u8PinID );
    1578:	a7 e3       	ldi	r26, 0x37	; 55
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e7 e3       	ldi	r30, 0x37	; 55
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	88 2f       	mov	r24, r24
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	b9 01       	movw	r22, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_enuSetPinDirection+0x10e>
    1594:	66 0f       	add	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	8a 95       	dec	r24
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_enuSetPinDirection+0x10a>
    159c:	cb 01       	movw	r24, r22
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	51 c0       	rjmp	.+162    	; 0x1646 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    15a4:	a4 e3       	ldi	r26, 0x34	; 52
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e4 e3       	ldi	r30, 0x34	; 52
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_enuSetPinDirection+0x136>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	2a 95       	dec	r18
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_enuSetPinDirection+0x132>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction <<   Copy_u8PinID );
    15ca:	a4 e3       	ldi	r26, 0x34	; 52
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e4 e3       	ldi	r30, 0x34	; 52
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	b9 01       	movw	r22, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_enuSetPinDirection+0x160>
    15e6:	66 0f       	add	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	8a 95       	dec	r24
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_enuSetPinDirection+0x15c>
    15ee:	cb 01       	movw	r24, r22
    15f0:	84 2b       	or	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	28 c0       	rjmp	.+80     	; 0x1646 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
    15f6:	a1 e3       	ldi	r26, 0x31	; 49
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e1 e3       	ldi	r30, 0x31	; 49
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_enuSetPinDirection+0x188>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	2a 95       	dec	r18
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_enuSetPinDirection+0x184>
    1616:	80 95       	com	r24
    1618:	84 23       	and	r24, r20
    161a:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction <<   Copy_u8PinID );
    161c:	a1 e3       	ldi	r26, 0x31	; 49
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e1 e3       	ldi	r30, 0x31	; 49
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	b9 01       	movw	r22, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_enuSetPinDirection+0x1b2>
    1638:	66 0f       	add	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	8a 95       	dec	r24
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_enuSetPinDirection+0x1ae>
    1640:	cb 01       	movw	r24, r22
    1642:	84 2b       	or	r24, r20
    1644:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1646:	19 82       	std	Y+1, r1	; 0x01
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1650:	26 96       	adiw	r28, 0x06	; 6
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <DIO_enuSetPinValue+0x6>
    1668:	00 d0       	rcall	.+0      	; 0x166a <DIO_enuSetPinValue+0x8>
    166a:	00 d0       	rcall	.+0      	; 0x166c <DIO_enuSetPinValue+0xa>
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	8a 83       	std	Y+2, r24	; 0x02
    1672:	6b 83       	std	Y+3, r22	; 0x03
    1674:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	08 f0       	brcs	.+2      	; 0x1682 <DIO_enuSetPinValue+0x20>
    1680:	d3 c0       	rjmp	.+422    	; 0x1828 <DIO_enuSetPinValue+0x1c6>
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	88 30       	cpi	r24, 0x08	; 8
    1686:	08 f0       	brcs	.+2      	; 0x168a <DIO_enuSetPinValue+0x28>
    1688:	cf c0       	rjmp	.+414    	; 0x1828 <DIO_enuSetPinValue+0x1c6>
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	20 f0       	brcs	.+8      	; 0x1698 <DIO_enuSetPinValue+0x36>
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	82 30       	cpi	r24, 0x02	; 2
    1694:	08 f0       	brcs	.+2      	; 0x1698 <DIO_enuSetPinValue+0x36>
    1696:	c8 c0       	rjmp	.+400    	; 0x1828 <DIO_enuSetPinValue+0x1c6>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ) )
	{
		switch (Copy_u8GroupID)
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3e 83       	std	Y+6, r19	; 0x06
    16a0:	2d 83       	std	Y+5, r18	; 0x05
    16a2:	6d 81       	ldd	r22, Y+5	; 0x05
    16a4:	7e 81       	ldd	r23, Y+6	; 0x06
    16a6:	61 30       	cpi	r22, 0x01	; 1
    16a8:	71 05       	cpc	r23, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <DIO_enuSetPinValue+0x4c>
    16ac:	41 c0       	rjmp	.+130    	; 0x1730 <DIO_enuSetPinValue+0xce>
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	91 05       	cpc	r25, r1
    16b6:	34 f4       	brge	.+12     	; 0x16c4 <DIO_enuSetPinValue+0x62>
    16b8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ba:	3e 81       	ldd	r19, Y+6	; 0x06
    16bc:	21 15       	cp	r18, r1
    16be:	31 05       	cpc	r19, r1
    16c0:	71 f0       	breq	.+28     	; 0x16de <DIO_enuSetPinValue+0x7c>
    16c2:	b0 c0       	rjmp	.+352    	; 0x1824 <DIO_enuSetPinValue+0x1c2>
    16c4:	6d 81       	ldd	r22, Y+5	; 0x05
    16c6:	7e 81       	ldd	r23, Y+6	; 0x06
    16c8:	62 30       	cpi	r22, 0x02	; 2
    16ca:	71 05       	cpc	r23, r1
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <DIO_enuSetPinValue+0x6e>
    16ce:	59 c0       	rjmp	.+178    	; 0x1782 <DIO_enuSetPinValue+0x120>
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	83 30       	cpi	r24, 0x03	; 3
    16d6:	91 05       	cpc	r25, r1
    16d8:	09 f4       	brne	.+2      	; 0x16dc <DIO_enuSetPinValue+0x7a>
    16da:	7c c0       	rjmp	.+248    	; 0x17d4 <DIO_enuSetPinValue+0x172>
    16dc:	a3 c0       	rjmp	.+326    	; 0x1824 <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    16de:	ab e3       	ldi	r26, 0x3B	; 59
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	eb e3       	ldi	r30, 0x3B	; 59
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	48 2f       	mov	r20, r24
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_enuSetPinValue+0x98>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	2a 95       	dec	r18
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_enuSetPinValue+0x94>
    16fe:	80 95       	com	r24
    1700:	84 23       	and	r24, r20
    1702:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value <<   Copy_u8PinID );
    1704:	ab e3       	ldi	r26, 0x3B	; 59
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	88 2f       	mov	r24, r24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	b9 01       	movw	r22, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <DIO_enuSetPinValue+0xc2>
    1720:	66 0f       	add	r22, r22
    1722:	77 1f       	adc	r23, r23
    1724:	8a 95       	dec	r24
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <DIO_enuSetPinValue+0xbe>
    1728:	cb 01       	movw	r24, r22
    172a:	84 2b       	or	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	7a c0       	rjmp	.+244    	; 0x1824 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    1730:	a8 e3       	ldi	r26, 0x38	; 56
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e8 e3       	ldi	r30, 0x38	; 56
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_enuSetPinValue+0xea>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	2a 95       	dec	r18
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_enuSetPinValue+0xe6>
    1750:	80 95       	com	r24
    1752:	84 23       	and	r24, r20
    1754:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value <<   Copy_u8PinID );
    1756:	a8 e3       	ldi	r26, 0x38	; 56
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e8 e3       	ldi	r30, 0x38	; 56
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	b9 01       	movw	r22, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <DIO_enuSetPinValue+0x114>
    1772:	66 0f       	add	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	8a 95       	dec	r24
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <DIO_enuSetPinValue+0x110>
    177a:	cb 01       	movw	r24, r22
    177c:	84 2b       	or	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	51 c0       	rjmp	.+162    	; 0x1824 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    1782:	a5 e3       	ldi	r26, 0x35	; 53
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e5 e3       	ldi	r30, 0x35	; 53
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_enuSetPinValue+0x13c>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	2a 95       	dec	r18
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <DIO_enuSetPinValue+0x138>
    17a2:	80 95       	com	r24
    17a4:	84 23       	and	r24, r20
    17a6:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value <<   Copy_u8PinID );
    17a8:	a5 e3       	ldi	r26, 0x35	; 53
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e3       	ldi	r30, 0x35	; 53
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	b9 01       	movw	r22, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_enuSetPinValue+0x166>
    17c4:	66 0f       	add	r22, r22
    17c6:	77 1f       	adc	r23, r23
    17c8:	8a 95       	dec	r24
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_enuSetPinValue+0x162>
    17cc:	cb 01       	movw	r24, r22
    17ce:	84 2b       	or	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	28 c0       	rjmp	.+80     	; 0x1824 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    17d4:	a2 e3       	ldi	r26, 0x32	; 50
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e2 e3       	ldi	r30, 0x32	; 50
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_enuSetPinValue+0x18e>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	2a 95       	dec	r18
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_enuSetPinValue+0x18a>
    17f4:	80 95       	com	r24
    17f6:	84 23       	and	r24, r20
    17f8:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value <<   Copy_u8PinID );
    17fa:	a2 e3       	ldi	r26, 0x32	; 50
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e2 e3       	ldi	r30, 0x32	; 50
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	b9 01       	movw	r22, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_enuSetPinValue+0x1b8>
    1816:	66 0f       	add	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	8a 95       	dec	r24
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_enuSetPinValue+0x1b4>
    181e:	cb 01       	movw	r24, r22
    1820:	84 2b       	or	r24, r20
    1822:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    182c:	89 81       	ldd	r24, Y+1	; 0x01
}
    182e:	26 96       	adiw	r28, 0x06	; 6
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <DIO_enuTogglePinValue+0x6>
    1846:	00 d0       	rcall	.+0      	; 0x1848 <DIO_enuTogglePinValue+0x8>
    1848:	0f 92       	push	r0
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	84 30       	cpi	r24, 0x04	; 4
    185a:	08 f0       	brcs	.+2      	; 0x185e <DIO_enuTogglePinValue+0x1e>
    185c:	74 c0       	rjmp	.+232    	; 0x1946 <DIO_enuTogglePinValue+0x106>
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 30       	cpi	r24, 0x08	; 8
    1862:	08 f0       	brcs	.+2      	; 0x1866 <DIO_enuTogglePinValue+0x26>
    1864:	70 c0       	rjmp	.+224    	; 0x1946 <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	3d 83       	std	Y+5, r19	; 0x05
    186e:	2c 83       	std	Y+4, r18	; 0x04
    1870:	8c 81       	ldd	r24, Y+4	; 0x04
    1872:	9d 81       	ldd	r25, Y+5	; 0x05
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	91 05       	cpc	r25, r1
    1878:	49 f1       	breq	.+82     	; 0x18cc <DIO_enuTogglePinValue+0x8c>
    187a:	2c 81       	ldd	r18, Y+4	; 0x04
    187c:	3d 81       	ldd	r19, Y+5	; 0x05
    187e:	22 30       	cpi	r18, 0x02	; 2
    1880:	31 05       	cpc	r19, r1
    1882:	2c f4       	brge	.+10     	; 0x188e <DIO_enuTogglePinValue+0x4e>
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	9d 81       	ldd	r25, Y+5	; 0x05
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	61 f0       	breq	.+24     	; 0x18a4 <DIO_enuTogglePinValue+0x64>
    188c:	5a c0       	rjmp	.+180    	; 0x1942 <DIO_enuTogglePinValue+0x102>
    188e:	2c 81       	ldd	r18, Y+4	; 0x04
    1890:	3d 81       	ldd	r19, Y+5	; 0x05
    1892:	22 30       	cpi	r18, 0x02	; 2
    1894:	31 05       	cpc	r19, r1
    1896:	71 f1       	breq	.+92     	; 0x18f4 <DIO_enuTogglePinValue+0xb4>
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	83 30       	cpi	r24, 0x03	; 3
    189e:	91 05       	cpc	r25, r1
    18a0:	e9 f1       	breq	.+122    	; 0x191c <DIO_enuTogglePinValue+0xdc>
    18a2:	4f c0       	rjmp	.+158    	; 0x1942 <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    18a4:	ab e3       	ldi	r26, 0x3B	; 59
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	eb e3       	ldi	r30, 0x3B	; 59
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <DIO_enuTogglePinValue+0x82>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <DIO_enuTogglePinValue+0x7e>
    18c6:	84 27       	eor	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	3b c0       	rjmp	.+118    	; 0x1942 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    18cc:	a8 e3       	ldi	r26, 0x38	; 56
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e8 e3       	ldi	r30, 0x38	; 56
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 2e       	mov	r0, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_enuTogglePinValue+0xaa>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	0a 94       	dec	r0
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_enuTogglePinValue+0xa6>
    18ee:	84 27       	eor	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	27 c0       	rjmp	.+78     	; 0x1942 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    18f4:	a5 e3       	ldi	r26, 0x35	; 53
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e3       	ldi	r30, 0x35	; 53
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_enuTogglePinValue+0xd2>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_enuTogglePinValue+0xce>
    1916:	84 27       	eor	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	13 c0       	rjmp	.+38     	; 0x1942 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    191c:	a2 e3       	ldi	r26, 0x32	; 50
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e2 e3       	ldi	r30, 0x32	; 50
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 2e       	mov	r0, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <DIO_enuTogglePinValue+0xfa>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	0a 94       	dec	r0
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <DIO_enuTogglePinValue+0xf6>
    193e:	84 27       	eor	r24, r20
    1940:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1942:	19 82       	std	Y+1, r1	; 0x01
    1944:	02 c0       	rjmp	.+4      	; 0x194a <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    194a:	89 81       	ldd	r24, Y+1	; 0x01
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 *Copy_pu8Value)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	27 97       	sbiw	r28, 0x07	; 7
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	6b 83       	std	Y+3, r22	; 0x03
    1974:	5d 83       	std	Y+5, r21	; 0x05
    1976:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	09 f4       	brne	.+2      	; 0x1986 <DIO_enuGetPinValue+0x2a>
    1984:	7d c0       	rjmp	.+250    	; 0x1a80 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	84 30       	cpi	r24, 0x04	; 4
    198a:	08 f0       	brcs	.+2      	; 0x198e <DIO_enuGetPinValue+0x32>
    198c:	76 c0       	rjmp	.+236    	; 0x1a7a <DIO_enuGetPinValue+0x11e>
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	88 30       	cpi	r24, 0x08	; 8
    1992:	08 f0       	brcs	.+2      	; 0x1996 <DIO_enuGetPinValue+0x3a>
    1994:	72 c0       	rjmp	.+228    	; 0x1a7a <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	3f 83       	std	Y+7, r19	; 0x07
    199e:	2e 83       	std	Y+6, r18	; 0x06
    19a0:	4e 81       	ldd	r20, Y+6	; 0x06
    19a2:	5f 81       	ldd	r21, Y+7	; 0x07
    19a4:	41 30       	cpi	r20, 0x01	; 1
    19a6:	51 05       	cpc	r21, r1
    19a8:	59 f1       	breq	.+86     	; 0x1a00 <DIO_enuGetPinValue+0xa4>
    19aa:	8e 81       	ldd	r24, Y+6	; 0x06
    19ac:	9f 81       	ldd	r25, Y+7	; 0x07
    19ae:	82 30       	cpi	r24, 0x02	; 2
    19b0:	91 05       	cpc	r25, r1
    19b2:	34 f4       	brge	.+12     	; 0x19c0 <DIO_enuGetPinValue+0x64>
    19b4:	2e 81       	ldd	r18, Y+6	; 0x06
    19b6:	3f 81       	ldd	r19, Y+7	; 0x07
    19b8:	21 15       	cp	r18, r1
    19ba:	31 05       	cpc	r19, r1
    19bc:	69 f0       	breq	.+26     	; 0x19d8 <DIO_enuGetPinValue+0x7c>
    19be:	5b c0       	rjmp	.+182    	; 0x1a76 <DIO_enuGetPinValue+0x11a>
    19c0:	4e 81       	ldd	r20, Y+6	; 0x06
    19c2:	5f 81       	ldd	r21, Y+7	; 0x07
    19c4:	42 30       	cpi	r20, 0x02	; 2
    19c6:	51 05       	cpc	r21, r1
    19c8:	79 f1       	breq	.+94     	; 0x1a28 <DIO_enuGetPinValue+0xcc>
    19ca:	8e 81       	ldd	r24, Y+6	; 0x06
    19cc:	9f 81       	ldd	r25, Y+7	; 0x07
    19ce:	83 30       	cpi	r24, 0x03	; 3
    19d0:	91 05       	cpc	r25, r1
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <DIO_enuGetPinValue+0x7a>
    19d4:	3d c0       	rjmp	.+122    	; 0x1a50 <DIO_enuGetPinValue+0xf4>
    19d6:	4f c0       	rjmp	.+158    	; 0x1a76 <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( ( PINA >> Copy_u8PinID ) & DIO_BIT_MASK );
    19d8:	e9 e3       	ldi	r30, 0x39	; 57
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a9 01       	movw	r20, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_enuGetPinValue+0x94>
    19ec:	55 95       	asr	r21
    19ee:	47 95       	ror	r20
    19f0:	8a 95       	dec	r24
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_enuGetPinValue+0x90>
    19f4:	ca 01       	movw	r24, r20
    19f6:	81 70       	andi	r24, 0x01	; 1
    19f8:	ec 81       	ldd	r30, Y+4	; 0x04
    19fa:	fd 81       	ldd	r31, Y+5	; 0x05
    19fc:	80 83       	st	Z, r24
    19fe:	3b c0       	rjmp	.+118    	; 0x1a76 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( ( PINB >> Copy_u8PinID ) & DIO_BIT_MASK );
    1a00:	e6 e3       	ldi	r30, 0x36	; 54
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a9 01       	movw	r20, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_enuGetPinValue+0xbc>
    1a14:	55 95       	asr	r21
    1a16:	47 95       	ror	r20
    1a18:	8a 95       	dec	r24
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <DIO_enuGetPinValue+0xb8>
    1a1c:	ca 01       	movw	r24, r20
    1a1e:	81 70       	andi	r24, 0x01	; 1
    1a20:	ec 81       	ldd	r30, Y+4	; 0x04
    1a22:	fd 81       	ldd	r31, Y+5	; 0x05
    1a24:	80 83       	st	Z, r24
    1a26:	27 c0       	rjmp	.+78     	; 0x1a76 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( ( PINC >> Copy_u8PinID ) & DIO_BIT_MASK );
    1a28:	e3 e3       	ldi	r30, 0x33	; 51
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	a9 01       	movw	r20, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <DIO_enuGetPinValue+0xe4>
    1a3c:	55 95       	asr	r21
    1a3e:	47 95       	ror	r20
    1a40:	8a 95       	dec	r24
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <DIO_enuGetPinValue+0xe0>
    1a44:	ca 01       	movw	r24, r20
    1a46:	81 70       	andi	r24, 0x01	; 1
    1a48:	ec 81       	ldd	r30, Y+4	; 0x04
    1a4a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a4c:	80 83       	st	Z, r24
    1a4e:	13 c0       	rjmp	.+38     	; 0x1a76 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( ( PIND >> Copy_u8PinID ) & DIO_BIT_MASK );
    1a50:	e0 e3       	ldi	r30, 0x30	; 48
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a9 01       	movw	r20, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <DIO_enuGetPinValue+0x10c>
    1a64:	55 95       	asr	r21
    1a66:	47 95       	ror	r20
    1a68:	8a 95       	dec	r24
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <DIO_enuGetPinValue+0x108>
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	81 70       	andi	r24, 0x01	; 1
    1a70:	ec 81       	ldd	r30, Y+4	; 0x04
    1a72:	fd 81       	ldd	r31, Y+5	; 0x05
    1a74:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1a76:	19 82       	std	Y+1, r1	; 0x01
    1a78:	05 c0       	rjmp	.+10     	; 0x1a84 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a86:	27 96       	adiw	r28, 0x07	; 7
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <ADC_enuInit>:

static void(*ADC_pFunISRFun)(void) =NULL;


ES_t ADC_enuInit(void)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	0f 92       	push	r0
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	89 83       	std	Y+1, r24	; 0x01

	//////////////////////////////////
	// 	Setting Prescalar Factor	//
	//////////////////////////////////
	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    1aa6:	a6 e2       	ldi	r26, 0x26	; 38
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e6 e2       	ldi	r30, 0x26	; 38
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	88 7f       	andi	r24, 0xF8	; 248
    1ab2:	8c 93       	st	X, r24
#if ( ADC_PRES >= PRES_2 && ADC_PRES <= PRES_128 )
	ADCSRA |= ( (ADC_PRES - PRES_0 ) << ADC_PRE_SCALAR_BITS );
    1ab4:	a6 e2       	ldi	r26, 0x26	; 38
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e6 e2       	ldi	r30, 0x26	; 38
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	86 60       	ori	r24, 0x06	; 6
    1ac0:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	// Setting Reference Voltage	//
	//////////////////////////////////
	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    1ac2:	a7 e2       	ldi	r26, 0x27	; 39
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e7 e2       	ldi	r30, 0x27	; 39
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8f 73       	andi	r24, 0x3F	; 63
    1ace:	8c 93       	st	X, r24
#if ( ADC_VREF >= AREF_REF && ADC_VREF <= INTERNAL_REF )
	ADMUX |= ( (ADC_VREF - AREF_REF) << ADC_REF_SEL_BITS);
    1ad0:	a7 e2       	ldi	r26, 0x27	; 39
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e7 e2       	ldi	r30, 0x27	; 39
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	80 64       	ori	r24, 0x40	; 64
    1adc:	8c 93       	st	X, r24

	//////////////////////////////////////
	// Setting Output Adjust Direction	//
	//////////////////////////////////////
#if ( ADC_ADJUST == RIGHT_ADJUST )
	ADMUX &= ~(BIT_MASK << ADLAR_BIT);
    1ade:	a7 e2       	ldi	r26, 0x27	; 39
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e7 e2       	ldi	r30, 0x27	; 39
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8f 7d       	andi	r24, 0xDF	; 223
    1aea:	8c 93       	st	X, r24
#endif

	//////////////////////////////////////
	//	 Selecting Initial Channel		//
	//////////////////////////////////////
	ADMUX &= ~(ADC_CH_SEL_BITS_MASK);
    1aec:	a7 e2       	ldi	r26, 0x27	; 39
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e7 e2       	ldi	r30, 0x27	; 39
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	80 7e       	andi	r24, 0xE0	; 224
    1af8:	8c 93       	st	X, r24
#if ( ADC_INIT_CHANNEL >= CH_00 && ADC_INIT_CHANNEL <= CH_31 )
	ADMUX |= ( (ADC_INIT_CHANNEL - CH_00) << ADC_CH_SEL_BITS );
    1afa:	a7 e2       	ldi	r26, 0x27	; 39
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e7 e2       	ldi	r30, 0x27	; 39
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	89 60       	ori	r24, 0x09	; 9
    1b06:	8c 93       	st	X, r24
	//	 Setting ADC Interrupt Mode		//
	//////////////////////////////////////
#if ( ADC_INTERRUPT_MODE == ADC_POLLING )
	ADCSRA &= ~(BIT_MASK << ADC_INT_ENABLE_BIT);
#elif ( ADC_INTERRUPT_MODE == ADC_INTERRUPT )
	ADCSRA |= ( BIT_MASK << ADC_INT_ENABLE_BIT);
    1b08:	a6 e2       	ldi	r26, 0x26	; 38
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e6 e2       	ldi	r30, 0x26	; 38
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	88 60       	ori	r24, 0x08	; 8
    1b14:	8c 93       	st	X, r24
	///////////////////////////////////
	// Selecting ADC Trigger  Source //
	///////////////////////////////////
#if ( ADC_TRIGGER_SOURCE >= FREE_RUNNING && ADC_TRIGGER_SOURCE <= TIMER1_CAPT_EVENT )

	SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    1b16:	a0 e5       	ldi	r26, 0x50	; 80
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e0 e5       	ldi	r30, 0x50	; 80
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	88 7f       	andi	r24, 0xF8	; 248
    1b22:	8c 93       	st	X, r24

	SFIOR |= ( (ADC_INIT_CHANNEL - FREE_RUNNING) << ADC_TRIGGER_SEL_BITS );
    1b24:	a0 e5       	ldi	r26, 0x50	; 80
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e0 e5       	ldi	r30, 0x50	; 80
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	87 6e       	ori	r24, 0xE7	; 231
    1b30:	8c 93       	st	X, r24
	//////////////////////////////////
	// Selecting ADC Trigger Mode	//
	//////////////////////////////////
#if ( ADC_TRIGGER_MODE == AUTO_TRIGGER || ADC_TRIGGER_MODE == SINGLE_TRIGGER )

	ADCSRA &= ~(BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT);
    1b32:	a6 e2       	ldi	r26, 0x26	; 38
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e6 e2       	ldi	r30, 0x26	; 38
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8f 7d       	andi	r24, 0xDF	; 223
    1b3e:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	//	 ENABLE ADC Peripheral		//
	//////////////////////////////////
	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
    1b40:	a6 e2       	ldi	r26, 0x26	; 38
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e6 e2       	ldi	r30, 0x26	; 38
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 68       	ori	r24, 0x80	; 128
    1b4c:	8c 93       	st	X, r24

	if( Local_enuErrorState != ES_OUT_RANGE)
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <ADC_enuInit+0xbe>
		Local_enuErrorState = ES_OK ;
    1b54:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <ADC_enuSetPreScalar>:

ES_t ADC_enuSetPreScalar(u8 Copy_u8PreScalarID)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <ADC_enuSetPreScalar+0x6>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    1b70:	a6 e2       	ldi	r26, 0x26	; 38
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e6 e2       	ldi	r30, 0x26	; 38
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 7f       	andi	r24, 0xF8	; 248
    1b7c:	8c 93       	st	X, r24

	if ( Copy_u8PreScalarID >= PRES_2 && Copy_u8PreScalarID <= PRES_128 )
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	89 37       	cpi	r24, 0x79	; 121
    1b82:	78 f0       	brcs	.+30     	; 0x1ba2 <ADC_enuSetPreScalar+0x42>
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	88 23       	and	r24, r24
    1b88:	64 f0       	brlt	.+24     	; 0x1ba2 <ADC_enuSetPreScalar+0x42>
	{
		ADCSRA |= ( (Copy_u8PreScalarID - PRES_0 ) << ADC_PRE_SCALAR_BITS );
    1b8a:	a6 e2       	ldi	r26, 0x26	; 38
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e6 e2       	ldi	r30, 0x26	; 38
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	98 2f       	mov	r25, r24
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	88 57       	subi	r24, 0x78	; 120
    1b9a:	89 2b       	or	r24, r25
    1b9c:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1b9e:	19 82       	std	Y+1, r1	; 0x01
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <ADC_enuSetPreScalar+0x46>
	}
	else
		Local_enuErrorState = ES_OUT_RANGE;
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <ADC_enuSetRefVolt>:

ES_t ADC_enuSetRefVolt(u8 Copy_u8RefVoltID)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <ADC_enuSetRefVolt+0x6>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    1bc2:	a7 e2       	ldi	r26, 0x27	; 39
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e7 e2       	ldi	r30, 0x27	; 39
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	8f 73       	andi	r24, 0x3F	; 63
    1bce:	8c 93       	st	X, r24

	if ( Copy_u8RefVoltID >= AREF_REF && Copy_u8RefVoltID <= INTERNAL_REF )
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	88 23       	and	r24, r24
    1bd4:	dc f4       	brge	.+54     	; 0x1c0c <ADC_enuSetRefVolt+0x5a>
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	83 38       	cpi	r24, 0x83	; 131
    1bda:	c0 f4       	brcc	.+48     	; 0x1c0c <ADC_enuSetRefVolt+0x5a>
	{
		ADMUX |= ( (Copy_u8RefVoltID - AREF_REF) << ADC_REF_SEL_BITS);
    1bdc:	a7 e2       	ldi	r26, 0x27	; 39
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e7 e2       	ldi	r30, 0x27	; 39
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	28 2f       	mov	r18, r24
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	80 58       	subi	r24, 0x80	; 128
    1bf0:	90 40       	sbci	r25, 0x00	; 0
    1bf2:	00 24       	eor	r0, r0
    1bf4:	96 95       	lsr	r25
    1bf6:	87 95       	ror	r24
    1bf8:	07 94       	ror	r0
    1bfa:	96 95       	lsr	r25
    1bfc:	87 95       	ror	r24
    1bfe:	07 94       	ror	r0
    1c00:	98 2f       	mov	r25, r24
    1c02:	80 2d       	mov	r24, r0
    1c04:	82 2b       	or	r24, r18
    1c06:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1c08:	19 82       	std	Y+1, r1	; 0x01
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <ADC_enuSetRefVolt+0x5e>
	}
	else
		Local_enuErrorState = ES_OUT_RANGE;
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <ADC_enuSelectChannel>:


ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <ADC_enuSelectChannel+0x6>
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ChannelID >= CH_00 && Copy_u8ChannelID <= CH_31 )
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	85 38       	cpi	r24, 0x85	; 133
    1c30:	a0 f0       	brcs	.+40     	; 0x1c5a <ADC_enuSelectChannel+0x3e>
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	85 3a       	cpi	r24, 0xA5	; 165
    1c36:	88 f4       	brcc	.+34     	; 0x1c5a <ADC_enuSelectChannel+0x3e>
	{
		ADMUX &= ~( ADC_CH_SEL_BITS_MASK);
    1c38:	a7 e2       	ldi	r26, 0x27	; 39
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e7 e2       	ldi	r30, 0x27	; 39
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 7e       	andi	r24, 0xE0	; 224
    1c44:	8c 93       	st	X, r24
		ADMUX |= (Copy_u8ChannelID << ADC_CH_SEL_BITS);
    1c46:	a7 e2       	ldi	r26, 0x27	; 39
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e7 e2       	ldi	r30, 0x27	; 39
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	90 81       	ld	r25, Z
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	89 2b       	or	r24, r25
    1c54:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK ;
    1c56:	19 82       	std	Y+1, r1	; 0x01
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <ADC_enuSelectChannel+0x42>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62

	ADCSRA |= (BIT_MASK << ADC_START_CONVERSION_BIT );
    1c72:	a6 e2       	ldi	r26, 0x26	; 38
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e6 e2       	ldi	r30, 0x26	; 38
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 64       	ori	r24, 0x40	; 64
    1c7e:	8c 93       	st	X, r24

	return ES_OK;
    1c80:	80 e0       	ldi	r24, 0x00	; 0
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <ADC_enuEnableAutoTrigger>:

ES_t ADC_enuEnableAutoTrigger(u8 Copy_u8TriggerSource)
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <ADC_enuEnableAutoTrigger+0x6>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8TriggerSource >= FREE_RUNNING && Copy_u8TriggerSource <= TIMER1_CAPT_EVENT )
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	87 3a       	cpi	r24, 0xA7	; 167
    1c9c:	08 f1       	brcs	.+66     	; 0x1ce0 <ADC_enuEnableAutoTrigger+0x58>
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	8f 3a       	cpi	r24, 0xAF	; 175
    1ca2:	f0 f4       	brcc	.+60     	; 0x1ce0 <ADC_enuEnableAutoTrigger+0x58>
	{
		ADCSRA &= (BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );
    1ca4:	a6 e2       	ldi	r26, 0x26	; 38
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e6 e2       	ldi	r30, 0x26	; 38
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	80 72       	andi	r24, 0x20	; 32
    1cb0:	8c 93       	st	X, r24

		SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    1cb2:	a0 e5       	ldi	r26, 0x50	; 80
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e0 e5       	ldi	r30, 0x50	; 80
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	88 7f       	andi	r24, 0xF8	; 248
    1cbe:	8c 93       	st	X, r24
		SFIOR |= ( (ADC_INIT_CHANNEL - FREE_RUNNING ) << ADC_TRIGGER_SEL_BITS );
    1cc0:	a0 e5       	ldi	r26, 0x50	; 80
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e0 e5       	ldi	r30, 0x50	; 80
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	87 6e       	ori	r24, 0xE7	; 231
    1ccc:	8c 93       	st	X, r24

		ADCSRA |= (BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );
    1cce:	a6 e2       	ldi	r26, 0x26	; 38
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e6 e2       	ldi	r30, 0x26	; 38
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 62       	ori	r24, 0x20	; 32
    1cda:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1cdc:	19 82       	std	Y+1, r1	; 0x01
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <ADC_enuEnableAutoTrigger+0x5c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <ADC_enuDisableAutoTrigger>:

ES_t ADC_enuDisableAutoTrigger(void)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~(BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );
    1cf8:	a6 e2       	ldi	r26, 0x26	; 38
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e6 e2       	ldi	r30, 0x26	; 38
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8f 7d       	andi	r24, 0xDF	; 223
    1d04:	8c 93       	st	X, r24

	return ES_OK;
    1d06:	80 e0       	ldi	r24, 0x00	; 0
}
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <ADC_enuRead>:


ES_t ADC_enuRead(u16 *Copy_u16ADC_Value)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <ADC_enuRead+0x6>
    1d14:	0f 92       	push	r0
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	9b 83       	std	Y+3, r25	; 0x03
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u16ADC_Value != NULL)
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	9b 81       	ldd	r25, Y+3	; 0x03
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	e1 f0       	breq	.+56     	; 0x1d62 <ADC_enuRead+0x54>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u16ADC_Value  = ADCL;
    1d2a:	e4 e2       	ldi	r30, 0x24	; 36
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	ea 81       	ldd	r30, Y+2	; 0x02
    1d36:	fb 81       	ldd	r31, Y+3	; 0x03
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	80 83       	st	Z, r24
			*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );
    1d3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d40:	20 81       	ld	r18, Z
    1d42:	31 81       	ldd	r19, Z+1	; 0x01
    1d44:	e5 e2       	ldi	r30, 0x25	; 37
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	98 2f       	mov	r25, r24
    1d50:	88 27       	eor	r24, r24
    1d52:	82 2b       	or	r24, r18
    1d54:	93 2b       	or	r25, r19
    1d56:	ea 81       	ldd	r30, Y+2	; 0x02
    1d58:	fb 81       	ldd	r31, Y+3	; 0x03
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	80 83       	st	Z, r24

			#warning "ADC_enuRead(u16*): Optimumt Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

		#endif

		Local_enuErrorState = ES_OK ;
    1d5e:	19 82       	std	Y+1, r1	; 0x01
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <ADC_enuRead+0x58>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    1d62:	83 e0       	ldi	r24, 0x03	; 3
    1d64:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <ADC_enuReadHigh>:

ES_t ADC_enuReadHigh(u8 *Copy_u8ADC_Value)

{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <ADC_enuReadHigh+0x6>
    1d7a:	0f 92       	push	r0
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	9b 83       	std	Y+3, r25	; 0x03
    1d82:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ADC_Value != NULL)
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	01 f1       	breq	.+64     	; 0x1dd0 <ADC_enuReadHigh+0x5c>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u8ADC_Value  = ( ADCL >> 2 );
    1d90:	e4 e2       	ldi	r30, 0x24	; 36
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	86 95       	lsr	r24
    1d98:	86 95       	lsr	r24
    1d9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d9e:	80 83       	st	Z, r24
			*Copy_u8ADC_Value |= ( ADCH << 6 );
    1da0:	ea 81       	ldd	r30, Y+2	; 0x02
    1da2:	fb 81       	ldd	r31, Y+3	; 0x03
    1da4:	80 81       	ld	r24, Z
    1da6:	28 2f       	mov	r18, r24
    1da8:	e5 e2       	ldi	r30, 0x25	; 37
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	00 24       	eor	r0, r0
    1db4:	96 95       	lsr	r25
    1db6:	87 95       	ror	r24
    1db8:	07 94       	ror	r0
    1dba:	96 95       	lsr	r25
    1dbc:	87 95       	ror	r24
    1dbe:	07 94       	ror	r0
    1dc0:	98 2f       	mov	r25, r24
    1dc2:	80 2d       	mov	r24, r0
    1dc4:	82 2b       	or	r24, r18
    1dc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1dc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dca:	80 83       	st	Z, r24

			*Copy_u8ADC_Value = ADCH ;

		#endif

		Local_enuErrorState = ES_OK ;
    1dcc:	19 82       	std	Y+1, r1	; 0x01
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <ADC_enuReadHigh+0x60>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <ADC_enuPollingRead>:

ES_t ADC_enuPollingRead(u16 *Copy_u16ADC_Value)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <ADC_enuPollingRead+0x6>
    1de8:	0f 92       	push	r0
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9b 83       	std	Y+3, r25	; 0x03
    1df0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	89 83       	std	Y+1, r24	; 0x01

	while( !( ( ADCSRA >> ADC_INT_FLAG_BIT ) & BIT_MASK ) );
    1df6:	e6 e2       	ldi	r30, 0x26	; 38
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	82 95       	swap	r24
    1dfe:	8f 70       	andi	r24, 0x0F	; 15
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	81 70       	andi	r24, 0x01	; 1
    1e06:	90 70       	andi	r25, 0x00	; 0
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	a9 f3       	breq	.-22     	; 0x1df6 <ADC_enuPollingRead+0x14>

	if( Copy_u16ADC_Value != NULL)
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	e1 f0       	breq	.+56     	; 0x1e4c <ADC_enuPollingRead+0x6a>
	{
#if ( ADC_ADJUST == RIGHT_ADJUST)

		*Copy_u16ADC_Value  = ADCL;
    1e14:	e4 e2       	ldi	r30, 0x24	; 36
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e20:	fb 81       	ldd	r31, Y+3	; 0x03
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );
    1e26:	ea 81       	ldd	r30, Y+2	; 0x02
    1e28:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2a:	20 81       	ld	r18, Z
    1e2c:	31 81       	ldd	r19, Z+1	; 0x01
    1e2e:	e5 e2       	ldi	r30, 0x25	; 37
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	98 2f       	mov	r25, r24
    1e3a:	88 27       	eor	r24, r24
    1e3c:	82 2b       	or	r24, r18
    1e3e:	93 2b       	or	r25, r19
    1e40:	ea 81       	ldd	r30, Y+2	; 0x02
    1e42:	fb 81       	ldd	r31, Y+3	; 0x03
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 2 );

		#warning "ADC_enuRead(u16*): Optimum Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

#endif
		Local_enuErrorState = ES_OK ;
    1e48:	19 82       	std	Y+1, r1	; 0x01
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <ADC_enuPollingRead+0x6e>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (BIT_MASK << ADC_INT_FLAG_BIT );
    1e50:	a6 e2       	ldi	r26, 0x26	; 38
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e6 e2       	ldi	r30, 0x26	; 38
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 61       	ori	r24, 0x10	; 16
    1e5c:	8c 93       	st	X, r24

	return Local_enuErrorState;
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <ADC_enuPollingReadHigh>:

ES_t ADC_enuPollingReadHigh(u8 *Copy_u8ADC_Value)

{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <ADC_enuPollingReadHigh+0x6>
    1e72:	0f 92       	push	r0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	9b 83       	std	Y+3, r25	; 0x03
    1e7a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	89 83       	std	Y+1, r24	; 0x01

	while( !( ( ADCSRA >> ADC_INT_FLAG_BIT ) & BIT_MASK ) );
    1e80:	e6 e2       	ldi	r30, 0x26	; 38
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	82 95       	swap	r24
    1e88:	8f 70       	andi	r24, 0x0F	; 15
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	81 70       	andi	r24, 0x01	; 1
    1e90:	90 70       	andi	r25, 0x00	; 0
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	a9 f3       	breq	.-22     	; 0x1e80 <ADC_enuPollingReadHigh+0x14>

	if( Copy_u8ADC_Value != NULL)
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	01 f1       	breq	.+64     	; 0x1ede <ADC_enuPollingReadHigh+0x72>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u8ADC_Value  = ( ADCL >> 2 );
    1e9e:	e4 e2       	ldi	r30, 0x24	; 36
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	86 95       	lsr	r24
    1ea6:	86 95       	lsr	r24
    1ea8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eaa:	fb 81       	ldd	r31, Y+3	; 0x03
    1eac:	80 83       	st	Z, r24
			*Copy_u8ADC_Value |= ( ADCH << 6 );
    1eae:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb0:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb2:	80 81       	ld	r24, Z
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	e5 e2       	ldi	r30, 0x25	; 37
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	00 24       	eor	r0, r0
    1ec2:	96 95       	lsr	r25
    1ec4:	87 95       	ror	r24
    1ec6:	07 94       	ror	r0
    1ec8:	96 95       	lsr	r25
    1eca:	87 95       	ror	r24
    1ecc:	07 94       	ror	r0
    1ece:	98 2f       	mov	r25, r24
    1ed0:	80 2d       	mov	r24, r0
    1ed2:	82 2b       	or	r24, r18
    1ed4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ed8:	80 83       	st	Z, r24

			*Copy_u8ADC_Value = ADCH ;

		#endif

		Local_enuErrorState = ES_OK ;
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <ADC_enuPollingReadHigh+0x76>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA |= (BIT_MASK << ADC_INT_FLAG_BIT );
    1ee2:	a6 e2       	ldi	r26, 0x26	; 38
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e6 e2       	ldi	r30, 0x26	; 38
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	80 61       	ori	r24, 0x10	; 16
    1eee:	8c 93       	st	X, r24

	return Local_enuErrorState;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <ADC_enuCallBack>:


ES_t ADC_enuCallBack(void ( *Copy_pFunAppFun )(void))
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <ADC_enuCallBack+0x6>
    1f04:	0f 92       	push	r0
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	9b 83       	std	Y+3, r25	; 0x03
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pFunAppFun != NULL)
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	9b 81       	ldd	r25, Y+3	; 0x03
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	41 f0       	breq	.+16     	; 0x1f2a <ADC_enuCallBack+0x2c>
	{
		ADC_pFunISRFun = Copy_pFunAppFun;
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1e:	90 93 05 02 	sts	0x0205, r25
    1f22:	80 93 04 02 	sts	0x0204, r24
		Local_enuErrorState = ES_OK;
    1f26:	19 82       	std	Y+1, r1	; 0x01
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <ADC_enuCallBack+0x30>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    1f2a:	83 e0       	ldi	r24, 0x03	; 3
    1f2c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62

	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
    1f44:	a6 e2       	ldi	r26, 0x26	; 38
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e6 e2       	ldi	r30, 0x26	; 38
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	80 68       	ori	r24, 0x80	; 128
    1f50:	8c 93       	st	X, r24
	return ES_OK;
    1f52:	80 e0       	ldi	r24, 0x00	; 0
}
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <ADC_enuDisable>:

ES_t ADC_enuDisable(void)

{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~( BIT_MASK << ADC_ENABLE_BIT );
    1f62:	a6 e2       	ldi	r26, 0x26	; 38
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e6 e2       	ldi	r30, 0x26	; 38
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8f 77       	andi	r24, 0x7F	; 127
    1f6e:	8c 93       	st	X, r24
	return ES_OK;
    1f70:	80 e0       	ldi	r24, 0x00	; 0
}
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
    1f80:	a6 e2       	ldi	r26, 0x26	; 38
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e6 e2       	ldi	r30, 0x26	; 38
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	80 68       	ori	r24, 0x80	; 128
    1f8c:	8c 93       	st	X, r24
	return ES_OK;
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
}
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~( BIT_MASK << ADC_ENABLE_BIT );
    1f9e:	a6 e2       	ldi	r26, 0x26	; 38
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e6 e2       	ldi	r30, 0x26	; 38
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	8f 77       	andi	r24, 0x7F	; 127
    1faa:	8c 93       	st	X, r24
	return ES_OK;
    1fac:	80 e0       	ldi	r24, 0x00	; 0
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <__vector_16>:


void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    1fb4:	1f 92       	push	r1
    1fb6:	0f 92       	push	r0
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	0f 92       	push	r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	2f 93       	push	r18
    1fc0:	3f 93       	push	r19
    1fc2:	4f 93       	push	r20
    1fc4:	5f 93       	push	r21
    1fc6:	6f 93       	push	r22
    1fc8:	7f 93       	push	r23
    1fca:	8f 93       	push	r24
    1fcc:	9f 93       	push	r25
    1fce:	af 93       	push	r26
    1fd0:	bf 93       	push	r27
    1fd2:	ef 93       	push	r30
    1fd4:	ff 93       	push	r31
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pFunISRFun != NULL)
    1fde:	80 91 04 02 	lds	r24, 0x0204
    1fe2:	90 91 05 02 	lds	r25, 0x0205
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	29 f0       	breq	.+10     	; 0x1ff4 <__vector_16+0x40>
		ADC_pFunISRFun();
    1fea:	e0 91 04 02 	lds	r30, 0x0204
    1fee:	f0 91 05 02 	lds	r31, 0x0205
    1ff2:	09 95       	icall
}
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	ff 91       	pop	r31
    1ffa:	ef 91       	pop	r30
    1ffc:	bf 91       	pop	r27
    1ffe:	af 91       	pop	r26
    2000:	9f 91       	pop	r25
    2002:	8f 91       	pop	r24
    2004:	7f 91       	pop	r23
    2006:	6f 91       	pop	r22
    2008:	5f 91       	pop	r21
    200a:	4f 91       	pop	r20
    200c:	3f 91       	pop	r19
    200e:	2f 91       	pop	r18
    2010:	0f 90       	pop	r0
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	0f 90       	pop	r0
    2016:	1f 90       	pop	r1
    2018:	18 95       	reti

0000201a <Switch_enuInit>:
extern u8 Switch_u8SwitchesMaxNum ;
extern Switch_t Switch[];


ES_t Switch_enuInit(void)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	00 d0       	rcall	.+0      	; 0x2020 <Switch_enuInit+0x6>
    2020:	00 d0       	rcall	.+0      	; 0x2022 <Switch_enuInit+0x8>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	8a 83       	std	Y+2, r24	; 0x02
    202a:	51 c0       	rjmp	.+162    	; 0x20ce <Switch_enuInit+0xb4>

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
	{
		Local_enuAerror[0] = DIO_enuSetPinDirection	(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , DIO_u8INPUT);
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	c9 01       	movw	r24, r18
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	82 0f       	add	r24, r18
    203a:	93 1f       	adc	r25, r19
    203c:	fc 01       	movw	r30, r24
    203e:	ef 55       	subi	r30, 0x5F	; 95
    2040:	fe 4f       	sbci	r31, 0xFE	; 254
    2042:	40 81       	ld	r20, Z
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	c9 01       	movw	r24, r18
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	82 0f       	add	r24, r18
    2052:	93 1f       	adc	r25, r19
    2054:	fc 01       	movw	r30, r24
    2056:	ee 55       	subi	r30, 0x5E	; 94
    2058:	fe 4f       	sbci	r31, 0xFE	; 254
    205a:	90 81       	ld	r25, Z
    205c:	84 2f       	mov	r24, r20
    205e:	69 2f       	mov	r22, r25
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
    2066:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	c9 01       	movw	r24, r18
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	82 0f       	add	r24, r18
    2076:	93 1f       	adc	r25, r19
    2078:	fc 01       	movw	r30, r24
    207a:	ef 55       	subi	r30, 0x5F	; 95
    207c:	fe 4f       	sbci	r31, 0xFE	; 254
    207e:	50 81       	ld	r21, Z
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	c9 01       	movw	r24, r18
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	82 0f       	add	r24, r18
    208e:	93 1f       	adc	r25, r19
    2090:	fc 01       	movw	r30, r24
    2092:	ee 55       	subi	r30, 0x5E	; 94
    2094:	fe 4f       	sbci	r31, 0xFE	; 254
    2096:	40 81       	ld	r20, Z
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	c9 01       	movw	r24, r18
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	82 0f       	add	r24, r18
    20a6:	93 1f       	adc	r25, r19
    20a8:	fc 01       	movw	r30, r24
    20aa:	ed 55       	subi	r30, 0x5D	; 93
    20ac:	fe 4f       	sbci	r31, 0xFE	; 254
    20ae:	90 81       	ld	r25, Z
    20b0:	85 2f       	mov	r24, r21
    20b2:	64 2f       	mov	r22, r20
    20b4:	49 2f       	mov	r20, r25
    20b6:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    20ba:	8c 83       	std	Y+4, r24	; 0x04

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	88 23       	and	r24, r24
    20c0:	61 f4       	brne	.+24     	; 0x20da <Switch_enuInit+0xc0>
    20c2:	8c 81       	ldd	r24, Y+4	; 0x04
    20c4:	88 23       	and	r24, r24
    20c6:	49 f4       	brne	.+18     	; 0x20da <Switch_enuInit+0xc0>

ES_t Switch_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	90 91 a0 01 	lds	r25, 0x01A0
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	89 17       	cp	r24, r25
    20d6:	08 f4       	brcc	.+2      	; 0x20da <Switch_enuInit+0xc0>
    20d8:	a9 cf       	rjmp	.-174    	; 0x202c <Switch_enuInit+0x12>
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
	}

	if (Local_enuAerror[0] == ES_OK && Local_enuAerror[1] == ES_OK)
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	88 23       	and	r24, r24
    20de:	21 f4       	brne	.+8      	; 0x20e8 <Switch_enuInit+0xce>
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	88 23       	and	r24, r24
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <Switch_enuInit+0xce>
		Local_enuErrorState = ES_OK;
    20e6:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <Switch_enuGetPressed>:

ES_t Switch_enuGetPressed (u8 Copy_u8SwitchNum ,u8 *Copy_pu8SwitchValue)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <Switch_enuGetPressed+0x6>
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <Switch_enuGetPressed+0x8>
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	8a 83       	std	Y+2, r24	; 0x02
    2106:	7c 83       	std	Y+4, r23	; 0x04
    2108:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	89 83       	std	Y+1, r24	; 0x01


	if( (Copy_u8SwitchNum -= SWITCH_ZERO) < Switch_u8SwitchesMaxNum )
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	89 5c       	subi	r24, 0xC9	; 201
    2112:	8a 83       	std	Y+2, r24	; 0x02
    2114:	90 91 a0 01 	lds	r25, 0x01A0
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	89 17       	cp	r24, r25
    211c:	08 f5       	brcc	.+66     	; 0x2160 <Switch_enuGetPressed+0x68>
	{
		Local_enuErrorState =  DIO_enuGetPinValue(Switch[Copy_u8SwitchNum].sw_Grp , Switch[Copy_u8SwitchNum].sw_Pin , Copy_pu8SwitchValue ) ;
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	c9 01       	movw	r24, r18
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	82 0f       	add	r24, r18
    212c:	93 1f       	adc	r25, r19
    212e:	fc 01       	movw	r30, r24
    2130:	ef 55       	subi	r30, 0x5F	; 95
    2132:	fe 4f       	sbci	r31, 0xFE	; 254
    2134:	40 81       	ld	r20, Z
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	c9 01       	movw	r24, r18
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	82 0f       	add	r24, r18
    2144:	93 1f       	adc	r25, r19
    2146:	fc 01       	movw	r30, r24
    2148:	ee 55       	subi	r30, 0x5E	; 94
    214a:	fe 4f       	sbci	r31, 0xFE	; 254
    214c:	90 81       	ld	r25, Z
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	84 2f       	mov	r24, r20
    2154:	69 2f       	mov	r22, r25
    2156:	a9 01       	movw	r20, r18
    2158:	0e 94 ae 0c 	call	0x195c	; 0x195c <DIO_enuGetPinValue>
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <Switch_enuGetPressed+0x6c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    2164:	89 81       	ldd	r24, Y+1	; 0x01
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <SevSeg_enuInit>:
extern u8 ModuleValuePins;
extern u8 ModuleControlPins;
extern SSegModule_t SSegModule[];

ES_t SevSeg_enuInit(void)
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	00 d0       	rcall	.+0      	; 0x217a <SevSeg_enuInit+0x6>
    217a:	00 d0       	rcall	.+0      	; 0x217c <SevSeg_enuInit+0x8>
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    2184:	8b e0       	ldi	r24, 0x0B	; 11
    2186:	8b 83       	std	Y+3, r24	; 0x03
    2188:	bc c0       	rjmp	.+376    	; 0x2302 <SevSeg_enuInit+0x18e>
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	8b 50       	subi	r24, 0x0B	; 11
    218e:	8a 83       	std	Y+2, r24	; 0x02
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    2190:	19 82       	std	Y+1, r1	; 0x01
    2192:	3a c0       	rjmp	.+116    	; 0x2208 <SevSeg_enuInit+0x94>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	48 2f       	mov	r20, r24
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	c9 01       	movw	r24, r18
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	82 1b       	sub	r24, r18
    21b0:	93 0b       	sbc	r25, r19
    21b2:	84 0f       	add	r24, r20
    21b4:	95 1f       	adc	r25, r21
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	fc 01       	movw	r30, r24
    21bc:	e3 55       	subi	r30, 0x53	; 83
    21be:	fe 4f       	sbci	r31, 0xFE	; 254
    21c0:	60 81       	ld	r22, Z
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	48 2f       	mov	r20, r24
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	c9 01       	movw	r24, r18
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	82 1b       	sub	r24, r18
    21de:	93 0b       	sbc	r25, r19
    21e0:	84 0f       	add	r24, r20
    21e2:	95 1f       	adc	r25, r21
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	fc 01       	movw	r30, r24
    21ea:	e2 55       	subi	r30, 0x52	; 82
    21ec:	fe 4f       	sbci	r31, 0xFE	; 254
    21ee:	90 81       	ld	r25, Z
    21f0:	86 2f       	mov	r24, r22
    21f2:	69 2f       	mov	r22, r25
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
    21fa:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    21fc:	8c 81       	ldd	r24, Y+4	; 0x04
    21fe:	88 23       	and	r24, r24
    2200:	41 f4       	brne	.+16     	; 0x2212 <SevSeg_enuInit+0x9e>
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	90 91 ab 01 	lds	r25, 0x01AB
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	89 17       	cp	r24, r25
    2210:	08 f2       	brcs	.-126    	; 0x2194 <SevSeg_enuInit+0x20>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
		if( Local_enuErrorState == ES_OK)
    2212:	8c 81       	ldd	r24, Y+4	; 0x04
    2214:	88 23       	and	r24, r24
    2216:	61 f5       	brne	.+88     	; 0x2270 <SevSeg_enuInit+0xfc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	88 2f       	mov	r24, r24
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9c 01       	movw	r18, r24
    2220:	22 0f       	add	r18, r18
    2222:	33 1f       	adc	r19, r19
    2224:	c9 01       	movw	r24, r18
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	82 1b       	sub	r24, r18
    2234:	93 0b       	sbc	r25, r19
    2236:	fc 01       	movw	r30, r24
    2238:	eb 54       	subi	r30, 0x4B	; 75
    223a:	fe 4f       	sbci	r31, 0xFE	; 254
    223c:	40 81       	ld	r20, Z
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9c 01       	movw	r18, r24
    2246:	22 0f       	add	r18, r18
    2248:	33 1f       	adc	r19, r19
    224a:	c9 01       	movw	r24, r18
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	82 1b       	sub	r24, r18
    225a:	93 0b       	sbc	r25, r19
    225c:	fc 01       	movw	r30, r24
    225e:	ea 54       	subi	r30, 0x4A	; 74
    2260:	fe 4f       	sbci	r31, 0xFE	; 254
    2262:	90 81       	ld	r25, Z
    2264:	84 2f       	mov	r24, r20
    2266:	69 2f       	mov	r22, r25
    2268:	41 e0       	ldi	r20, 0x01	; 1
    226a:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
    226e:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    2270:	19 82       	std	Y+1, r1	; 0x01
    2272:	3b c0       	rjmp	.+118    	; 0x22ea <SevSeg_enuInit+0x176>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	48 2f       	mov	r20, r24
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	c9 01       	movw	r24, r18
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	82 1b       	sub	r24, r18
    2290:	93 0b       	sbc	r25, r19
    2292:	84 0f       	add	r24, r20
    2294:	95 1f       	adc	r25, r21
    2296:	05 96       	adiw	r24, 0x05	; 5
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	fc 01       	movw	r30, r24
    229e:	e3 55       	subi	r30, 0x53	; 83
    22a0:	fe 4f       	sbci	r31, 0xFE	; 254
    22a2:	60 81       	ld	r22, Z
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	48 2f       	mov	r20, r24
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	c9 01       	movw	r24, r18
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	82 1b       	sub	r24, r18
    22c0:	93 0b       	sbc	r25, r19
    22c2:	84 0f       	add	r24, r20
    22c4:	95 1f       	adc	r25, r21
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	fc 01       	movw	r30, r24
    22cc:	e8 54       	subi	r30, 0x48	; 72
    22ce:	fe 4f       	sbci	r31, 0xFE	; 254
    22d0:	90 81       	ld	r25, Z
    22d2:	86 2f       	mov	r24, r22
    22d4:	69 2f       	mov	r22, r25
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
    22dc:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    22de:	8c 81       	ldd	r24, Y+4	; 0x04
    22e0:	88 23       	and	r24, r24
    22e2:	61 f4       	brne	.+24     	; 0x22fc <SevSeg_enuInit+0x188>
		if( Local_enuErrorState == ES_OK)
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	8f 5f       	subi	r24, 0xFF	; 255
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	8c 81       	ldd	r24, Y+4	; 0x04
    22ec:	88 23       	and	r24, r24
    22ee:	31 f4       	brne	.+12     	; 0x22fc <SevSeg_enuInit+0x188>
    22f0:	90 91 ac 01 	lds	r25, 0x01AC
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	89 17       	cp	r24, r25
    22f8:	08 f4       	brcc	.+2      	; 0x22fc <SevSeg_enuInit+0x188>
    22fa:	bc cf       	rjmp	.-136    	; 0x2274 <SevSeg_enuInit+0x100>
ES_t SevSeg_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	8f 5f       	subi	r24, 0xFF	; 255
    2300:	8b 83       	std	Y+3, r24	; 0x03
    2302:	90 91 aa 01 	lds	r25, 0x01AA
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	98 17       	cp	r25, r24
    230a:	08 f0       	brcs	.+2      	; 0x230e <SevSeg_enuInit+0x19a>
    230c:	3e cf       	rjmp	.-388    	; 0x218a <SevSeg_enuInit+0x16>
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
	}

	return Local_enuErrorState ;//DONE
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <SevSeg_enuSetDigitValue>:
ES_t SevSeg_enuSetDigitValue(u8 Copy_u8ModuleNum , u8 Copy_u8SevSegDigitValue)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <SevSeg_enuSetDigitValue+0x6>
    2324:	00 d0       	rcall	.+0      	; 0x2326 <SevSeg_enuSetDigitValue+0x8>
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	8b 83       	std	Y+3, r24	; 0x03
    232c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK ;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	8b 50       	subi	r24, 0x0B	; 11
    2336:	8b 83       	std	Y+3, r24	; 0x03
    2338:	90 91 aa 01 	lds	r25, 0x01AA
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	89 17       	cp	r24, r25
    2340:	08 f0       	brcs	.+2      	; 0x2344 <SevSeg_enuSetDigitValue+0x26>
    2342:	59 c0       	rjmp	.+178    	; 0x23f6 <SevSeg_enuSetDigitValue+0xd8>
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
    2344:	8c 81       	ldd	r24, Y+4	; 0x04
    2346:	8a 30       	cpi	r24, 0x0A	; 10
    2348:	08 f0       	brcs	.+2      	; 0x234c <SevSeg_enuSetDigitValue+0x2e>
    234a:	52 c0       	rjmp	.+164    	; 0x23f0 <SevSeg_enuSetDigitValue+0xd2>
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    234c:	19 82       	std	Y+1, r1	; 0x01
    234e:	49 c0       	rjmp	.+146    	; 0x23e2 <SevSeg_enuSetDigitValue+0xc4>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputGrp ,
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	48 2f       	mov	r20, r24
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	c9 01       	movw	r24, r18
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	82 1b       	sub	r24, r18
    236c:	93 0b       	sbc	r25, r19
    236e:	84 0f       	add	r24, r20
    2370:	95 1f       	adc	r25, r21
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	fc 01       	movw	r30, r24
    2378:	e3 55       	subi	r30, 0x53	; 83
    237a:	fe 4f       	sbci	r31, 0xFE	; 254
    237c:	60 81       	ld	r22, Z
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	48 2f       	mov	r20, r24
    2388:	50 e0       	ldi	r21, 0x00	; 0
    238a:	c9 01       	movw	r24, r18
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	82 1b       	sub	r24, r18
    239a:	93 0b       	sbc	r25, r19
    239c:	84 0f       	add	r24, r20
    239e:	95 1f       	adc	r25, r21
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	fc 01       	movw	r30, r24
    23a6:	e2 55       	subi	r30, 0x52	; 82
    23a8:	fe 4f       	sbci	r31, 0xFE	; 254
    23aa:	40 81       	ld	r20, Z
    23ac:	8c 81       	ldd	r24, Y+4	; 0x04
    23ae:	28 2f       	mov	r18, r24
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	f9 01       	movw	r30, r18
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <SevSeg_enuSetDigitValue+0xa2>
    23bc:	f5 95       	asr	r31
    23be:	e7 95       	ror	r30
    23c0:	8a 95       	dec	r24
    23c2:	e2 f7       	brpl	.-8      	; 0x23bc <SevSeg_enuSetDigitValue+0x9e>
    23c4:	cf 01       	movw	r24, r30
    23c6:	98 2f       	mov	r25, r24
    23c8:	91 70       	andi	r25, 0x01	; 1
    23ca:	86 2f       	mov	r24, r22
    23cc:	64 2f       	mov	r22, r20
    23ce:	49 2f       	mov	r20, r25
    23d0:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    23d4:	8a 83       	std	Y+2, r24	; 0x02
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	88 23       	and	r24, r24
    23da:	79 f4       	brne	.+30     	; 0x23fa <SevSeg_enuSetDigitValue+0xdc>

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	8f 5f       	subi	r24, 0xFF	; 255
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	90 91 ab 01 	lds	r25, 0x01AB
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	89 17       	cp	r24, r25
    23ea:	08 f4       	brcc	.+2      	; 0x23ee <SevSeg_enuSetDigitValue+0xd0>
    23ec:	b1 cf       	rjmp	.-158    	; 0x2350 <SevSeg_enuSetDigitValue+0x32>
    23ee:	05 c0       	rjmp	.+10     	; 0x23fa <SevSeg_enuSetDigitValue+0xdc>
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    23f0:	82 e0       	ldi	r24, 0x02	; 2
    23f2:	8a 83       	std	Y+2, r24	; 0x02
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <SevSeg_enuSetDigitValue+0xdc>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    23f6:	82 e0       	ldi	r24, 0x02	; 2
    23f8:	8a 83       	std	Y+2, r24	; 0x02


	return Local_enuErrorState ;//DONE
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <SevSeg_enuSetDIPValue>:

ES_t SevSeg_enuSetDIPValue(u8 Copy_u8ModuleNum ,u8 Copy_u8SevSegDIPValue)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <SevSeg_enuSetDIPValue+0x6>
    2410:	0f 92       	push	r0
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	8a 83       	std	Y+2, r24	; 0x02
    2418:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	8b 50       	subi	r24, 0x0B	; 11
    2422:	8a 83       	std	Y+2, r24	; 0x02
    2424:	90 91 aa 01 	lds	r25, 0x01AA
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	89 17       	cp	r24, r25
    242c:	b0 f5       	brcc	.+108    	; 0x249a <SevSeg_enuSetDIPValue+0x90>
	{
		if( Copy_u8SevSegDIPValue == DIP_ON ||Copy_u8SevSegDIPValue == DIP_OFF )
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	19 f0       	breq	.+6      	; 0x243a <SevSeg_enuSetDIPValue+0x30>
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	88 23       	and	r24, r24
    2438:	69 f5       	brne	.+90     	; 0x2494 <SevSeg_enuSetDIPValue+0x8a>
		{
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].DIP_Conf.InputGrp ,
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	88 2f       	mov	r24, r24
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9c 01       	movw	r18, r24
    2442:	22 0f       	add	r18, r18
    2444:	33 1f       	adc	r19, r19
    2446:	c9 01       	movw	r24, r18
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	82 1b       	sub	r24, r18
    2456:	93 0b       	sbc	r25, r19
    2458:	fc 01       	movw	r30, r24
    245a:	eb 54       	subi	r30, 0x4B	; 75
    245c:	fe 4f       	sbci	r31, 0xFE	; 254
    245e:	40 81       	ld	r20, Z
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9c 01       	movw	r18, r24
    2468:	22 0f       	add	r18, r18
    246a:	33 1f       	adc	r19, r19
    246c:	c9 01       	movw	r24, r18
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	82 1b       	sub	r24, r18
    247c:	93 0b       	sbc	r25, r19
    247e:	fc 01       	movw	r30, r24
    2480:	ea 54       	subi	r30, 0x4A	; 74
    2482:	fe 4f       	sbci	r31, 0xFE	; 254
    2484:	90 81       	ld	r25, Z
    2486:	84 2f       	mov	r24, r20
    2488:	69 2f       	mov	r22, r25
    248a:	4b 81       	ldd	r20, Y+3	; 0x03
    248c:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	05 c0       	rjmp	.+10     	; 0x249e <SevSeg_enuSetDIPValue+0x94>
														SSegModule[Copy_u8ModuleNum].DIP_Conf.InputPin  , Copy_u8SevSegDIPValue );
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	02 c0       	rjmp	.+4      	; 0x249e <SevSeg_enuSetDIPValue+0x94>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    249a:	82 e0       	ldi	r24, 0x02	; 2
    249c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    249e:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	08 95       	ret

000024ac <SevSeg_enuFrameDelay>:

ES_t SevSeg_enuFrameDelay(u8 Copy_u8SevSegTotalModules, u8 *Copy_pu8SevSegModuleDelay)
{
    24ac:	df 93       	push	r29
    24ae:	cf 93       	push	r28
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <SevSeg_enuFrameDelay+0x6>
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <SevSeg_enuFrameDelay+0x8>
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	8a 83       	std	Y+2, r24	; 0x02
    24ba:	7c 83       	std	Y+4, r23	; 0x04
    24bc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8SevSegTotalModules <= SevSeg_u8MaxModules)
    24c2:	90 91 aa 01 	lds	r25, 0x01AA
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	98 17       	cp	r25, r24
    24ca:	98 f0       	brcs	.+38     	; 0x24f2 <SevSeg_enuFrameDelay+0x46>
	{

		*Copy_pu8SevSegModuleDelay = SevSeg_u8MODULE_DELAY( Copy_u8SevSegTotalModules );
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	ac 01       	movw	r20, r24
    24d4:	4d 5e       	subi	r20, 0xED	; 237
    24d6:	5f 4f       	sbci	r21, 0xFF	; 255
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	ca 01       	movw	r24, r20
    24e0:	b9 01       	movw	r22, r18
    24e2:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <__divmodhi4>
    24e6:	cb 01       	movw	r24, r22
    24e8:	eb 81       	ldd	r30, Y+3	; 0x03
    24ea:	fc 81       	ldd	r31, Y+4	; 0x04
    24ec:	80 83       	st	Z, r24

		Local_enuErrorState=ES_OK;
    24ee:	19 82       	std	Y+1, r1	; 0x01
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <SevSeg_enuFrameDelay+0x4a>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <SevSeg_enuModuleControl>:

ES_t SevSeg_enuModuleControl(u8 Copy_u8SevSegModuleNum , u8 Copy_u8SevSegModuleStatus)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	27 97       	sbiw	r28, 0x07	; 7
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	8c 83       	std	Y+4, r24	; 0x04
    251c:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Output;

	if( Copy_u8SevSegModuleStatus == MODULE_DISABLE || Copy_u8SevSegModuleStatus == MODULE_ENABLE )
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	8d 30       	cpi	r24, 0x0D	; 13
    2526:	21 f0       	breq	.+8      	; 0x2530 <SevSeg_enuModuleControl+0x2a>
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	8e 30       	cpi	r24, 0x0E	; 14
    252c:	09 f0       	breq	.+2      	; 0x2530 <SevSeg_enuModuleControl+0x2a>
    252e:	64 c0       	rjmp	.+200    	; 0x25f8 <SevSeg_enuModuleControl+0xf2>
	{
		if( (Copy_u8SevSegModuleNum -= MODULE_1)< SevSeg_u8MaxModules )
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	8b 50       	subi	r24, 0x0B	; 11
    2534:	8c 83       	std	Y+4, r24	; 0x04
    2536:	90 91 aa 01 	lds	r25, 0x01AA
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	89 17       	cp	r24, r25
    253e:	08 f0       	brcs	.+2      	; 0x2542 <SevSeg_enuModuleControl+0x3c>
    2540:	58 c0       	rjmp	.+176    	; 0x25f2 <SevSeg_enuModuleControl+0xec>
		{
			switch( Copy_u8SevSegModuleStatus )
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	3f 83       	std	Y+7, r19	; 0x07
    254a:	2e 83       	std	Y+6, r18	; 0x06
    254c:	8e 81       	ldd	r24, Y+6	; 0x06
    254e:	9f 81       	ldd	r25, Y+7	; 0x07
    2550:	8d 30       	cpi	r24, 0x0D	; 13
    2552:	91 05       	cpc	r25, r1
    2554:	31 f0       	breq	.+12     	; 0x2562 <SevSeg_enuModuleControl+0x5c>
    2556:	2e 81       	ldd	r18, Y+6	; 0x06
    2558:	3f 81       	ldd	r19, Y+7	; 0x07
    255a:	2e 30       	cpi	r18, 0x0E	; 14
    255c:	31 05       	cpc	r19, r1
    255e:	19 f0       	breq	.+6      	; 0x2566 <SevSeg_enuModuleControl+0x60>
    2560:	04 c0       	rjmp	.+8      	; 0x256a <SevSeg_enuModuleControl+0x64>
			{
				case MODULE_DISABLE : Local_u8Output = DIO_u8LOW;
    2562:	1a 82       	std	Y+2, r1	; 0x02
    2564:	02 c0       	rjmp	.+4      	; 0x256a <SevSeg_enuModuleControl+0x64>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	8a 83       	std	Y+2, r24	; 0x02
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    256a:	19 82       	std	Y+1, r1	; 0x01
    256c:	3b c0       	rjmp	.+118    	; 0x25e4 <SevSeg_enuModuleControl+0xde>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    256e:	8c 81       	ldd	r24, Y+4	; 0x04
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	48 2f       	mov	r20, r24
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	c9 01       	movw	r24, r18
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	88 0f       	add	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	82 1b       	sub	r24, r18
    258a:	93 0b       	sbc	r25, r19
    258c:	84 0f       	add	r24, r20
    258e:	95 1f       	adc	r25, r21
    2590:	05 96       	adiw	r24, 0x05	; 5
    2592:	88 0f       	add	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	fc 01       	movw	r30, r24
    2598:	e3 55       	subi	r30, 0x53	; 83
    259a:	fe 4f       	sbci	r31, 0xFE	; 254
    259c:	60 81       	ld	r22, Z
    259e:	8c 81       	ldd	r24, Y+4	; 0x04
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	48 2f       	mov	r20, r24
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	c9 01       	movw	r24, r18
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	88 0f       	add	r24, r24
    25b6:	99 1f       	adc	r25, r25
    25b8:	82 1b       	sub	r24, r18
    25ba:	93 0b       	sbc	r25, r19
    25bc:	84 0f       	add	r24, r20
    25be:	95 1f       	adc	r25, r21
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	fc 01       	movw	r30, r24
    25c6:	e8 54       	subi	r30, 0x48	; 72
    25c8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ca:	90 81       	ld	r25, Z
    25cc:	86 2f       	mov	r24, r22
    25ce:	69 2f       	mov	r22, r25
    25d0:	4a 81       	ldd	r20, Y+2	; 0x02
    25d2:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    25d6:	8b 83       	std	Y+3, r24	; 0x03
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	88 23       	and	r24, r24
    25dc:	79 f4       	brne	.+30     	; 0x25fc <SevSeg_enuModuleControl+0xf6>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	90 91 ac 01 	lds	r25, 0x01AC
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	89 17       	cp	r24, r25
    25ec:	08 f4       	brcc	.+2      	; 0x25f0 <SevSeg_enuModuleControl+0xea>
    25ee:	bf cf       	rjmp	.-130    	; 0x256e <SevSeg_enuModuleControl+0x68>
    25f0:	05 c0       	rjmp	.+10     	; 0x25fc <SevSeg_enuModuleControl+0xf6>
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else	Local_enuErrorState = ES_OUT_RANGE;
    25f2:	82 e0       	ldi	r24, 0x02	; 2
    25f4:	8b 83       	std	Y+3, r24	; 0x03
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <SevSeg_enuModuleControl+0xf6>
	}
	else	Local_enuErrorState = ES_OUT_RANGE;
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;//DONE
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    25fe:	27 96       	adiw	r28, 0x07	; 7
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <LM35_enuInit>:
#include "..\..\MCAL\DIO\DIO_int.h"

#include "LM35_config.h"

ES_t LM35_enuInit(void)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	00 d0       	rcall	.+0      	; 0x2616 <LM35_enuInit+0x6>
    2616:	0f 92       	push	r0
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[2];
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	89 83       	std	Y+1, r24	; 0x01

	Local_AenuErrorState[0] = DIO_enuSetPinDirection( VSS_GRP , VSS_PIN , DIO_u8OUTPUT);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
    262a:	8a 83       	std	Y+2, r24	; 0x02
	Local_AenuErrorState[1] = DIO_enuSetPinValue( VSS_GRP , VSS_PIN , DIO_u8HIGH);
    262c:	82 e0       	ldi	r24, 0x02	; 2
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	41 e0       	ldi	r20, 0x01	; 1
    2632:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2636:	8b 83       	std	Y+3, r24	; 0x03

	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	88 23       	and	r24, r24
    263c:	09 f5       	brne	.+66     	; 0x2680 <LM35_enuInit+0x70>
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	88 23       	and	r24, r24
    2642:	f1 f4       	brne	.+60     	; 0x2680 <LM35_enuInit+0x70>
	{
		Local_AenuErrorState[0] = DIO_enuSetPinDirection( GROUND_GRP , GROUND_PIN , DIO_u8OUTPUT );
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
    264e:	8a 83       	std	Y+2, r24	; 0x02
		Local_AenuErrorState[1] = DIO_enuSetPinValue( GROUND_GRP , GROUND_PIN , DIO_u8LOW);
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    265a:	8b 83       	std	Y+3, r24	; 0x03

		if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	88 23       	and	r24, r24
    2660:	79 f4       	brne	.+30     	; 0x2680 <LM35_enuInit+0x70>
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	88 23       	and	r24, r24
    2666:	61 f4       	brne	.+24     	; 0x2680 <LM35_enuInit+0x70>
		{
			Local_AenuErrorState[0] = DIO_enuSetPinDirection( TEMP_VALUE_GRP , TEMP_VALUE_PIN , DIO_u8INPUT );
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
    2672:	8a 83       	std	Y+2, r24	; 0x02
			Local_AenuErrorState[1] = DIO_enuSetPinValue( TEMP_VALUE_GRP , TEMP_VALUE_PIN , TEMP_VALUE_STATE );
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	60 e0       	ldi	r22, 0x00	; 0
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    267e:	8b 83       	std	Y+3, r24	; 0x03
		}

	}

	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	88 23       	and	r24, r24
    2684:	21 f4       	brne	.+8      	; 0x268e <LM35_enuInit+0x7e>
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	88 23       	and	r24, r24
    268a:	09 f4       	brne	.+2      	; 0x268e <LM35_enuInit+0x7e>
		Local_enuErrorState = ES_OK;
    268c:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    268e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <LD_enuInit>:
extern u8 LD_u8LD_MaxNum;
extern LD_t LD[];


ES_t LD_enuInit(void)
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <LD_enuInit+0x6>
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <LD_enuInit+0x8>
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    26ac:	19 82       	std	Y+1, r1	; 0x01
    26ae:	39 c0       	rjmp	.+114    	; 0x2722 <LD_enuInit+0x86>
	{
		Local_AenuStatus[0] = DIO_enuSetPinDirection( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , DIO_u8OUTPUT);
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	fc 01       	movw	r30, r24
    26bc:	e6 53       	subi	r30, 0x36	; 54
    26be:	fe 4f       	sbci	r31, 0xFE	; 254
    26c0:	20 81       	ld	r18, Z
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	fc 01       	movw	r30, r24
    26ce:	e5 53       	subi	r30, 0x35	; 53
    26d0:	fe 4f       	sbci	r31, 0xFE	; 254
    26d2:	90 81       	ld	r25, Z
    26d4:	82 2f       	mov	r24, r18
    26d6:	69 2f       	mov	r22, r25
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
    26de:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	fc 01       	movw	r30, r24
    26ec:	e6 53       	subi	r30, 0x36	; 54
    26ee:	fe 4f       	sbci	r31, 0xFE	; 254
    26f0:	20 81       	ld	r18, Z
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	88 2f       	mov	r24, r24
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	fc 01       	movw	r30, r24
    26fe:	e5 53       	subi	r30, 0x35	; 53
    2700:	fe 4f       	sbci	r31, 0xFE	; 254
    2702:	90 81       	ld	r25, Z
    2704:	82 2f       	mov	r24, r18
    2706:	69 2f       	mov	r22, r25
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    270e:	8c 83       	std	Y+4, r24	; 0x04

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	88 23       	and	r24, r24
    2714:	59 f4       	brne	.+22     	; 0x272c <LD_enuInit+0x90>
    2716:	8c 81       	ldd	r24, Y+4	; 0x04
    2718:	88 23       	and	r24, r24
    271a:	41 f4       	brne	.+16     	; 0x272c <LD_enuInit+0x90>

ES_t LD_enuInit(void)
{
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	8f 5f       	subi	r24, 0xFF	; 255
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	90 91 c9 01 	lds	r25, 0x01C9
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	89 17       	cp	r24, r25
    272a:	10 f2       	brcs	.-124    	; 0x26b0 <LD_enuInit+0x14>
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
	}

	if(Local_AenuStatus[0] == ES_OK && Local_AenuStatus[1] == ES_OK)
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	88 23       	and	r24, r24
    2730:	21 f4       	brne	.+8      	; 0x273a <LD_enuInit+0x9e>
    2732:	8c 81       	ldd	r24, Y+4	; 0x04
    2734:	88 23       	and	r24, r24
    2736:	09 f4       	brne	.+2      	; 0x273a <LD_enuInit+0x9e>
		Local_enuErrorStatus = ES_OK;
    2738:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorStatus;
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <LD_enuSetState>:

ES_t LD_enuSetState(u8 Copy_u8LD_Num ,u8 Copy_u8LDSetValue)
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	00 d0       	rcall	.+0      	; 0x2750 <LD_enuSetState+0x6>
    2750:	0f 92       	push	r0
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	8a 83       	std	Y+2, r24	; 0x02
    2758:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK ;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	89 83       	std	Y+1, r24	; 0x01

	if( ( Copy_u8LD_Num -= LD_ZERO ) < LD_u8LD_MaxNum)
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	8e 51       	subi	r24, 0x1E	; 30
    2762:	8a 83       	std	Y+2, r24	; 0x02
    2764:	90 91 c9 01 	lds	r25, 0x01C9
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	89 17       	cp	r24, r25
    276c:	10 f5       	brcc	.+68     	; 0x27b2 <LD_enuSetState+0x68>
	{
		if( Copy_u8LDSetValue == LD_u8ON || Copy_u8LDSetValue == LD_u8OFF )
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	19 f0       	breq	.+6      	; 0x277a <LD_enuSetState+0x30>
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	88 23       	and	r24, r24
    2778:	c9 f4       	brne	.+50     	; 0x27ac <LD_enuSetState+0x62>
		{
			Local_enuErrorStatus = DIO_enuSetPinValue(LD[Copy_u8LD_Num].LD_Grp , LD[Copy_u8LD_Num].LD_Pin , Copy_u8LDSetValue);
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	fc 01       	movw	r30, r24
    2786:	e6 53       	subi	r30, 0x36	; 54
    2788:	fe 4f       	sbci	r31, 0xFE	; 254
    278a:	20 81       	ld	r18, Z
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	fc 01       	movw	r30, r24
    2798:	e5 53       	subi	r30, 0x35	; 53
    279a:	fe 4f       	sbci	r31, 0xFE	; 254
    279c:	90 81       	ld	r25, Z
    279e:	82 2f       	mov	r24, r18
    27a0:	69 2f       	mov	r22, r25
    27a2:	4b 81       	ldd	r20, Y+3	; 0x03
    27a4:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	05 c0       	rjmp	.+10     	; 0x27b6 <LD_enuSetState+0x6c>
		}
		else Local_enuErrorStatus = ES_OUT_RANGE;
    27ac:	82 e0       	ldi	r24, 0x02	; 2
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <LD_enuSetState+0x6c>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    27b2:	82 e0       	ldi	r24, 0x02	; 2
    27b4:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <LCD_enuInit>:
#include "LCD_priv.h"

#include <util/delay.h>

ES_t LCD_enuInit(void)
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	ab 97       	sbiw	r28, 0x2b	; 43
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	8b a7       	std	Y+43, r24	; 0x2b
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a0 ef       	ldi	r26, 0xF0	; 240
    27e2:	b1 e4       	ldi	r27, 0x41	; 65
    27e4:	8f a3       	std	Y+39, r24	; 0x27
    27e6:	98 a7       	std	Y+40, r25	; 0x28
    27e8:	a9 a7       	std	Y+41, r26	; 0x29
    27ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ec:	6f a1       	ldd	r22, Y+39	; 0x27
    27ee:	78 a5       	ldd	r23, Y+40	; 0x28
    27f0:	89 a5       	ldd	r24, Y+41	; 0x29
    27f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	4a e7       	ldi	r20, 0x7A	; 122
    27fa:	55 e4       	ldi	r21, 0x45	; 69
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	8b a3       	std	Y+35, r24	; 0x23
    2806:	9c a3       	std	Y+36, r25	; 0x24
    2808:	ad a3       	std	Y+37, r26	; 0x25
    280a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    280c:	6b a1       	ldd	r22, Y+35	; 0x23
    280e:	7c a1       	ldd	r23, Y+36	; 0x24
    2810:	8d a1       	ldd	r24, Y+37	; 0x25
    2812:	9e a1       	ldd	r25, Y+38	; 0x26
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e8       	ldi	r20, 0x80	; 128
    281a:	5f e3       	ldi	r21, 0x3F	; 63
    281c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2820:	88 23       	and	r24, r24
    2822:	2c f4       	brge	.+10     	; 0x282e <LCD_enuInit+0x6a>
		__ticks = 1;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	9a a3       	std	Y+34, r25	; 0x22
    282a:	89 a3       	std	Y+33, r24	; 0x21
    282c:	3f c0       	rjmp	.+126    	; 0x28ac <LCD_enuInit+0xe8>
	else if (__tmp > 65535)
    282e:	6b a1       	ldd	r22, Y+35	; 0x23
    2830:	7c a1       	ldd	r23, Y+36	; 0x24
    2832:	8d a1       	ldd	r24, Y+37	; 0x25
    2834:	9e a1       	ldd	r25, Y+38	; 0x26
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	3f ef       	ldi	r19, 0xFF	; 255
    283a:	4f e7       	ldi	r20, 0x7F	; 127
    283c:	57 e4       	ldi	r21, 0x47	; 71
    283e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2842:	18 16       	cp	r1, r24
    2844:	4c f5       	brge	.+82     	; 0x2898 <LCD_enuInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2846:	6f a1       	ldd	r22, Y+39	; 0x27
    2848:	78 a5       	ldd	r23, Y+40	; 0x28
    284a:	89 a5       	ldd	r24, Y+41	; 0x29
    284c:	9a a5       	ldd	r25, Y+42	; 0x2a
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e2       	ldi	r20, 0x20	; 32
    2854:	51 e4       	ldi	r21, 0x41	; 65
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	9a a3       	std	Y+34, r25	; 0x22
    286c:	89 a3       	std	Y+33, r24	; 0x21
    286e:	0f c0       	rjmp	.+30     	; 0x288e <LCD_enuInit+0xca>
    2870:	80 e9       	ldi	r24, 0x90	; 144
    2872:	91 e0       	ldi	r25, 0x01	; 1
    2874:	98 a3       	std	Y+32, r25	; 0x20
    2876:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2878:	8f 8d       	ldd	r24, Y+31	; 0x1f
    287a:	98 a1       	ldd	r25, Y+32	; 0x20
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <LCD_enuInit+0xb8>
    2880:	98 a3       	std	Y+32, r25	; 0x20
    2882:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2884:	89 a1       	ldd	r24, Y+33	; 0x21
    2886:	9a a1       	ldd	r25, Y+34	; 0x22
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	9a a3       	std	Y+34, r25	; 0x22
    288c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288e:	89 a1       	ldd	r24, Y+33	; 0x21
    2890:	9a a1       	ldd	r25, Y+34	; 0x22
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	69 f7       	brne	.-38     	; 0x2870 <LCD_enuInit+0xac>
    2896:	14 c0       	rjmp	.+40     	; 0x28c0 <LCD_enuInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2898:	6b a1       	ldd	r22, Y+35	; 0x23
    289a:	7c a1       	ldd	r23, Y+36	; 0x24
    289c:	8d a1       	ldd	r24, Y+37	; 0x25
    289e:	9e a1       	ldd	r25, Y+38	; 0x26
    28a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	9a a3       	std	Y+34, r25	; 0x22
    28aa:	89 a3       	std	Y+33, r24	; 0x21
    28ac:	89 a1       	ldd	r24, Y+33	; 0x21
    28ae:	9a a1       	ldd	r25, Y+34	; 0x22
    28b0:	9e 8f       	std	Y+30, r25	; 0x1e
    28b2:	8d 8f       	std	Y+29, r24	; 0x1d
    28b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <LCD_enuInit+0xf4>
    28bc:	9e 8f       	std	Y+30, r25	; 0x1e
    28be:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);

	DIO_enuSetPinDirection(RS_GRP , RS_PIN , DIO_u8OUTPUT);
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	61 e0       	ldi	r22, 0x01	; 1
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
#if RW_GRP != NC && RW_PIN != NC
	DIO_enuSetPinDirection(RW_GRP , RW_PIN , DIO_u8OUTPUT);
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	62 e0       	ldi	r22, 0x02	; 2
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
#endif
	DIO_enuSetPinDirection(EN_GRP , EN_PIN , DIO_u8OUTPUT);
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	63 e0       	ldi	r22, 0x03	; 3
    28d8:	41 e0       	ldi	r20, 0x01	; 1
    28da:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP , D7_PIN , DIO_u8OUTPUT);
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	67 e0       	ldi	r22, 0x07	; 7
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP , D6_PIN , DIO_u8OUTPUT);
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	66 e0       	ldi	r22, 0x06	; 6
    28ec:	41 e0       	ldi	r20, 0x01	; 1
    28ee:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP , D5_PIN , DIO_u8OUTPUT);
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	65 e0       	ldi	r22, 0x05	; 5
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP , D4_PIN , DIO_u8OUTPUT);
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	64 e0       	ldi	r22, 0x04	; 4
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch( 0x38 );

#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(D7_GRP , D7_PIN , DIO_u8LOW);
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	67 e0       	ldi	r22, 0x07	; 7
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , DIO_u8LOW);
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	66 e0       	ldi	r22, 0x06	; 6
    2914:	40 e0       	ldi	r20, 0x00	; 0
    2916:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , DIO_u8HIGH);
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	65 e0       	ldi	r22, 0x05	; 5
    291e:	41 e0       	ldi	r20, 0x01	; 1
    2920:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , DIO_u8LOW);
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	64 e0       	ldi	r22, 0x04	; 4
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	63 e0       	ldi	r22, 0x03	; 3
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a0 e8       	ldi	r26, 0x80	; 128
    293e:	bf e3       	ldi	r27, 0x3F	; 63
    2940:	89 8f       	std	Y+25, r24	; 0x19
    2942:	9a 8f       	std	Y+26, r25	; 0x1a
    2944:	ab 8f       	std	Y+27, r26	; 0x1b
    2946:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2948:	69 8d       	ldd	r22, Y+25	; 0x19
    294a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    294c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    294e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	4a e7       	ldi	r20, 0x7A	; 122
    2956:	55 e4       	ldi	r21, 0x45	; 69
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	8d 8b       	std	Y+21, r24	; 0x15
    2962:	9e 8b       	std	Y+22, r25	; 0x16
    2964:	af 8b       	std	Y+23, r26	; 0x17
    2966:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2968:	6d 89       	ldd	r22, Y+21	; 0x15
    296a:	7e 89       	ldd	r23, Y+22	; 0x16
    296c:	8f 89       	ldd	r24, Y+23	; 0x17
    296e:	98 8d       	ldd	r25, Y+24	; 0x18
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    297c:	88 23       	and	r24, r24
    297e:	2c f4       	brge	.+10     	; 0x298a <LCD_enuInit+0x1c6>
		__ticks = 1;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	9c 8b       	std	Y+20, r25	; 0x14
    2986:	8b 8b       	std	Y+19, r24	; 0x13
    2988:	3f c0       	rjmp	.+126    	; 0x2a08 <LCD_enuInit+0x244>
	else if (__tmp > 65535)
    298a:	6d 89       	ldd	r22, Y+21	; 0x15
    298c:	7e 89       	ldd	r23, Y+22	; 0x16
    298e:	8f 89       	ldd	r24, Y+23	; 0x17
    2990:	98 8d       	ldd	r25, Y+24	; 0x18
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	3f ef       	ldi	r19, 0xFF	; 255
    2996:	4f e7       	ldi	r20, 0x7F	; 127
    2998:	57 e4       	ldi	r21, 0x47	; 71
    299a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299e:	18 16       	cp	r1, r24
    29a0:	4c f5       	brge	.+82     	; 0x29f4 <LCD_enuInit+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a2:	69 8d       	ldd	r22, Y+25	; 0x19
    29a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	51 e4       	ldi	r21, 0x41	; 65
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	9c 8b       	std	Y+20, r25	; 0x14
    29c8:	8b 8b       	std	Y+19, r24	; 0x13
    29ca:	0f c0       	rjmp	.+30     	; 0x29ea <LCD_enuInit+0x226>
    29cc:	80 e9       	ldi	r24, 0x90	; 144
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	9a 8b       	std	Y+18, r25	; 0x12
    29d2:	89 8b       	std	Y+17, r24	; 0x11
    29d4:	89 89       	ldd	r24, Y+17	; 0x11
    29d6:	9a 89       	ldd	r25, Y+18	; 0x12
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <LCD_enuInit+0x214>
    29dc:	9a 8b       	std	Y+18, r25	; 0x12
    29de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e0:	8b 89       	ldd	r24, Y+19	; 0x13
    29e2:	9c 89       	ldd	r25, Y+20	; 0x14
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	9c 8b       	std	Y+20, r25	; 0x14
    29e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	8b 89       	ldd	r24, Y+19	; 0x13
    29ec:	9c 89       	ldd	r25, Y+20	; 0x14
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	69 f7       	brne	.-38     	; 0x29cc <LCD_enuInit+0x208>
    29f2:	14 c0       	rjmp	.+40     	; 0x2a1c <LCD_enuInit+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f4:	6d 89       	ldd	r22, Y+21	; 0x15
    29f6:	7e 89       	ldd	r23, Y+22	; 0x16
    29f8:	8f 89       	ldd	r24, Y+23	; 0x17
    29fa:	98 8d       	ldd	r25, Y+24	; 0x18
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9c 8b       	std	Y+20, r25	; 0x14
    2a06:	8b 8b       	std	Y+19, r24	; 0x13
    2a08:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0c:	98 8b       	std	Y+16, r25	; 0x10
    2a0e:	8f 87       	std	Y+15, r24	; 0x0f
    2a10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a12:	98 89       	ldd	r25, Y+16	; 0x10
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <LCD_enuInit+0x250>
    2a18:	98 8b       	std	Y+16, r25	; 0x10
    2a1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	63 e0       	ldi	r22, 0x03	; 3
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	a0 e8       	ldi	r26, 0x80	; 128
    2a2c:	b0 e4       	ldi	r27, 0x40	; 64
    2a2e:	8b 87       	std	Y+11, r24	; 0x0b
    2a30:	9c 87       	std	Y+12, r25	; 0x0c
    2a32:	ad 87       	std	Y+13, r26	; 0x0d
    2a34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4a e7       	ldi	r20, 0x7A	; 122
    2a44:	55 e4       	ldi	r21, 0x45	; 69
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8f 83       	std	Y+7, r24	; 0x07
    2a50:	98 87       	std	Y+8, r25	; 0x08
    2a52:	a9 87       	std	Y+9, r26	; 0x09
    2a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a56:	6f 81       	ldd	r22, Y+7	; 0x07
    2a58:	78 85       	ldd	r23, Y+8	; 0x08
    2a5a:	89 85       	ldd	r24, Y+9	; 0x09
    2a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	2c f4       	brge	.+10     	; 0x2a78 <LCD_enuInit+0x2b4>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9e 83       	std	Y+6, r25	; 0x06
    2a74:	8d 83       	std	Y+5, r24	; 0x05
    2a76:	3f c0       	rjmp	.+126    	; 0x2af6 <LCD_enuInit+0x332>
	else if (__tmp > 65535)
    2a78:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7a:	78 85       	ldd	r23, Y+8	; 0x08
    2a7c:	89 85       	ldd	r24, Y+9	; 0x09
    2a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	4f e7       	ldi	r20, 0x7F	; 127
    2a86:	57 e4       	ldi	r21, 0x47	; 71
    2a88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a8c:	18 16       	cp	r1, r24
    2a8e:	4c f5       	brge	.+82     	; 0x2ae2 <LCD_enuInit+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	40 e2       	ldi	r20, 0x20	; 32
    2a9e:	51 e4       	ldi	r21, 0x41	; 65
    2aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	bc 01       	movw	r22, r24
    2aaa:	cd 01       	movw	r24, r26
    2aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	9e 83       	std	Y+6, r25	; 0x06
    2ab6:	8d 83       	std	Y+5, r24	; 0x05
    2ab8:	0f c0       	rjmp	.+30     	; 0x2ad8 <LCD_enuInit+0x314>
    2aba:	80 e9       	ldi	r24, 0x90	; 144
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	9c 83       	std	Y+4, r25	; 0x04
    2ac0:	8b 83       	std	Y+3, r24	; 0x03
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac6:	01 97       	sbiw	r24, 0x01	; 1
    2ac8:	f1 f7       	brne	.-4      	; 0x2ac6 <LCD_enuInit+0x302>
    2aca:	9c 83       	std	Y+4, r25	; 0x04
    2acc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ace:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	9e 83       	std	Y+6, r25	; 0x06
    2ad6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	9e 81       	ldd	r25, Y+6	; 0x06
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	69 f7       	brne	.-38     	; 0x2aba <LCD_enuInit+0x2f6>
    2ae0:	14 c0       	rjmp	.+40     	; 0x2b0a <LCD_enuInit+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae4:	78 85       	ldd	r23, Y+8	; 0x08
    2ae6:	89 85       	ldd	r24, Y+9	; 0x09
    2ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	9e 83       	std	Y+6, r25	; 0x06
    2af4:	8d 83       	std	Y+5, r24	; 0x05
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
    2af8:	9e 81       	ldd	r25, Y+6	; 0x06
    2afa:	9a 83       	std	Y+2, r25	; 0x02
    2afc:	89 83       	std	Y+1, r24	; 0x01
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <LCD_enuInit+0x33e>
    2b06:	9a 83       	std	Y+2, r25	; 0x02
    2b08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	61 e0       	ldi	r22, 0x01	; 1
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x28 );
    2b14:	88 e2       	ldi	r24, 0x28	; 40
    2b16:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>

#endif

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	61 e0       	ldi	r22, 0x01	; 1
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x08 );//Display still OFF
    2b24:	88 e0       	ldi	r24, 0x08	; 8
    2b26:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	61 e0       	ldi	r22, 0x01	; 1
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x01 );//Clears Display Data
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	61 e0       	ldi	r22, 0x01	; 1
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x06 );
    2b44:	86 e0       	ldi	r24, 0x06	; 6
    2b46:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>



	return Local_enuErrorState = ES_OK; //////////////////////////////////////////////////NEEDS ADJUSTMENT for error handling
    2b4a:	1b a6       	std	Y+43, r1	; 0x2b
    2b4c:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    2b4e:	ab 96       	adiw	r28, 0x2b	; 43
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <LCD_enuWriteData+0x6>
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	61 e0       	ldi	r22, 0x01	; 1
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2b7a:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuWriteNLatch( Copy_u8Data );
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Cmnd)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <LCD_enuWriteCommand+0x6>
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	89 83       	std	Y+1, r24	; 0x01

	Local_enuErrorState = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	61 e0       	ldi	r22, 0x01	; 1
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2ba8:	89 83       	std	Y+1, r24	; 0x01
	LCD_enuWriteNLatch( Copy_u8Cmnd );
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>


	return Local_enuErrorState;
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	00 d0       	rcall	.+0      	; 0x2bc2 <LCD_enuWriteString+0x6>
    2bc2:	0f 92       	push	r0
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	9b 83       	std	Y+3, r25	; 0x03
    2bca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	11 c0       	rjmp	.+34     	; 0x2bf4 <LCD_enuWriteString+0x38>

	while (*Copy_pcString)
	{
		Local_enuErrorState = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	61 e0       	ldi	r22, 0x01	; 1
    2bd6:	41 e0       	ldi	r20, 0x01	; 1
    2bd8:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2bdc:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteNLatch( *Copy_pcString++ );
    2bde:	ea 81       	ldd	r30, Y+2	; 0x02
    2be0:	fb 81       	ldd	r31, Y+3	; 0x03
    2be2:	20 81       	ld	r18, Z
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	9b 81       	ldd	r25, Y+3	; 0x03
    2be8:	01 96       	adiw	r24, 0x01	; 1
    2bea:	9b 83       	std	Y+3, r25	; 0x03
    2bec:	8a 83       	std	Y+2, r24	; 0x02
    2bee:	82 2f       	mov	r24, r18
    2bf0:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
	ES_t Local_enuErrorState = ES_NOK;

	while (*Copy_pcString)
    2bf4:	ea 81       	ldd	r30, Y+2	; 0x02
    2bf6:	fb 81       	ldd	r31, Y+3	; 0x03
    2bf8:	80 81       	ld	r24, Z
    2bfa:	88 23       	and	r24, r24
    2bfc:	51 f7       	brne	.-44     	; 0x2bd2 <LCD_enuWriteString+0x16>
	{
		Local_enuErrorState = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch( *Copy_pcString++ );
	}

	return Local_enuErrorState;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <LCD_enuGoToPosition>:


ES_t LCD_enuGoToPosition(u8 Copy_u8Row , u8 Copy_u8Column)
{
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <LCD_enuGoToPosition+0x6>
    2c12:	0f 92       	push	r0
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	8a 83       	std	Y+2, r24	; 0x02
    2c1a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Row >= 1 && Copy_u8Row <=2 &&
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	88 23       	and	r24, r24
    2c24:	11 f1       	breq	.+68     	; 0x2c6a <LCD_enuGoToPosition+0x5e>
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	83 30       	cpi	r24, 0x03	; 3
    2c2a:	f8 f4       	brcc	.+62     	; 0x2c6a <LCD_enuGoToPosition+0x5e>
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	88 23       	and	r24, r24
    2c30:	e1 f0       	breq	.+56     	; 0x2c6a <LCD_enuGoToPosition+0x5e>
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	81 31       	cpi	r24, 0x11	; 17
    2c36:	c8 f4       	brcc	.+50     	; 0x2c6a <LCD_enuGoToPosition+0x5e>
			Copy_u8Column >=1 && Copy_u8Column <=16)
	{
		Local_enuErrorState = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	61 e0       	ldi	r22, 0x01	; 1
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2c42:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteNLatch( 0x80 + ( Copy_u8Row - 1 )*0x40 + ( Copy_u8Column - 1 ) );
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	88 2f       	mov	r24, r24
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	01 96       	adiw	r24, 0x01	; 1
    2c4c:	00 24       	eor	r0, r0
    2c4e:	96 95       	lsr	r25
    2c50:	87 95       	ror	r24
    2c52:	07 94       	ror	r0
    2c54:	96 95       	lsr	r25
    2c56:	87 95       	ror	r24
    2c58:	07 94       	ror	r0
    2c5a:	98 2f       	mov	r25, r24
    2c5c:	80 2d       	mov	r24, r0
    2c5e:	98 2f       	mov	r25, r24
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	89 0f       	add	r24, r25
    2c64:	81 50       	subi	r24, 0x01	; 1
    2c66:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
	}
	return Local_enuErrorState;
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch(u8 Copy_u8Byte)
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	e9 97       	sbiw	r28, 0x39	; 57
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	89 af       	std	Y+57, r24	; 0x39
#if RW_GRP != NC  && RW_PIN != NC
	DIO_enuSetPinValue(RW_GRP , RW_PIN , DIO_u8LOW);
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	62 e0       	ldi	r22, 0x02	; 2
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
#endif
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	63 e0       	ldi	r22, 0x03	; 3
    2c9c:	40 e0       	ldi	r20, 0x00	; 0
    2c9e:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
	_delay_ms(4);


#elif LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 7 )&1 ));
    2ca2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ca4:	98 2f       	mov	r25, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	99 27       	eor	r25, r25
    2caa:	99 1f       	adc	r25, r25
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	67 e0       	ldi	r22, 0x07	; 7
    2cb0:	49 2f       	mov	r20, r25
    2cb2:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 6 )&1 ));
    2cb6:	89 ad       	ldd	r24, Y+57	; 0x39
    2cb8:	82 95       	swap	r24
    2cba:	86 95       	lsr	r24
    2cbc:	86 95       	lsr	r24
    2cbe:	83 70       	andi	r24, 0x03	; 3
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	91 70       	andi	r25, 0x01	; 1
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	66 e0       	ldi	r22, 0x06	; 6
    2cc8:	49 2f       	mov	r20, r25
    2cca:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 5 )&1 ));
    2cce:	89 ad       	ldd	r24, Y+57	; 0x39
    2cd0:	82 95       	swap	r24
    2cd2:	86 95       	lsr	r24
    2cd4:	87 70       	andi	r24, 0x07	; 7
    2cd6:	98 2f       	mov	r25, r24
    2cd8:	91 70       	andi	r25, 0x01	; 1
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	65 e0       	ldi	r22, 0x05	; 5
    2cde:	49 2f       	mov	r20, r25
    2ce0:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 4 )&1 ));
    2ce4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ce6:	82 95       	swap	r24
    2ce8:	8f 70       	andi	r24, 0x0F	; 15
    2cea:	98 2f       	mov	r25, r24
    2cec:	91 70       	andi	r25, 0x01	; 1
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	64 e0       	ldi	r22, 0x04	; 4
    2cf2:	49 2f       	mov	r20, r25
    2cf4:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	63 e0       	ldi	r22, 0x03	; 3
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a0 e8       	ldi	r26, 0x80	; 128
    2d08:	bf e3       	ldi	r27, 0x3F	; 63
    2d0a:	8d ab       	std	Y+53, r24	; 0x35
    2d0c:	9e ab       	std	Y+54, r25	; 0x36
    2d0e:	af ab       	std	Y+55, r26	; 0x37
    2d10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d12:	6d a9       	ldd	r22, Y+53	; 0x35
    2d14:	7e a9       	ldd	r23, Y+54	; 0x36
    2d16:	8f a9       	ldd	r24, Y+55	; 0x37
    2d18:	98 ad       	ldd	r25, Y+56	; 0x38
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	4a e7       	ldi	r20, 0x7A	; 122
    2d20:	55 e4       	ldi	r21, 0x45	; 69
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	89 ab       	std	Y+49, r24	; 0x31
    2d2c:	9a ab       	std	Y+50, r25	; 0x32
    2d2e:	ab ab       	std	Y+51, r26	; 0x33
    2d30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d32:	69 a9       	ldd	r22, Y+49	; 0x31
    2d34:	7a a9       	ldd	r23, Y+50	; 0x32
    2d36:	8b a9       	ldd	r24, Y+51	; 0x33
    2d38:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e8       	ldi	r20, 0x80	; 128
    2d40:	5f e3       	ldi	r21, 0x3F	; 63
    2d42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d46:	88 23       	and	r24, r24
    2d48:	2c f4       	brge	.+10     	; 0x2d54 <LCD_enuWriteNLatch+0xdc>
		__ticks = 1;
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	98 ab       	std	Y+48, r25	; 0x30
    2d50:	8f a7       	std	Y+47, r24	; 0x2f
    2d52:	3f c0       	rjmp	.+126    	; 0x2dd2 <LCD_enuWriteNLatch+0x15a>
	else if (__tmp > 65535)
    2d54:	69 a9       	ldd	r22, Y+49	; 0x31
    2d56:	7a a9       	ldd	r23, Y+50	; 0x32
    2d58:	8b a9       	ldd	r24, Y+51	; 0x33
    2d5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	3f ef       	ldi	r19, 0xFF	; 255
    2d60:	4f e7       	ldi	r20, 0x7F	; 127
    2d62:	57 e4       	ldi	r21, 0x47	; 71
    2d64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d68:	18 16       	cp	r1, r24
    2d6a:	4c f5       	brge	.+82     	; 0x2dbe <LCD_enuWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6c:	6d a9       	ldd	r22, Y+53	; 0x35
    2d6e:	7e a9       	ldd	r23, Y+54	; 0x36
    2d70:	8f a9       	ldd	r24, Y+55	; 0x37
    2d72:	98 ad       	ldd	r25, Y+56	; 0x38
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e2       	ldi	r20, 0x20	; 32
    2d7a:	51 e4       	ldi	r21, 0x41	; 65
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	98 ab       	std	Y+48, r25	; 0x30
    2d92:	8f a7       	std	Y+47, r24	; 0x2f
    2d94:	0f c0       	rjmp	.+30     	; 0x2db4 <LCD_enuWriteNLatch+0x13c>
    2d96:	80 e9       	ldi	r24, 0x90	; 144
    2d98:	91 e0       	ldi	r25, 0x01	; 1
    2d9a:	9e a7       	std	Y+46, r25	; 0x2e
    2d9c:	8d a7       	std	Y+45, r24	; 0x2d
    2d9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2da0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <LCD_enuWriteNLatch+0x12a>
    2da6:	9e a7       	std	Y+46, r25	; 0x2e
    2da8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2daa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dac:	98 a9       	ldd	r25, Y+48	; 0x30
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	98 ab       	std	Y+48, r25	; 0x30
    2db2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2db6:	98 a9       	ldd	r25, Y+48	; 0x30
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	69 f7       	brne	.-38     	; 0x2d96 <LCD_enuWriteNLatch+0x11e>
    2dbc:	14 c0       	rjmp	.+40     	; 0x2de6 <LCD_enuWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	98 ab       	std	Y+48, r25	; 0x30
    2dd0:	8f a7       	std	Y+47, r24	; 0x2f
    2dd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dd4:	98 a9       	ldd	r25, Y+48	; 0x30
    2dd6:	9c a7       	std	Y+44, r25	; 0x2c
    2dd8:	8b a7       	std	Y+43, r24	; 0x2b
    2dda:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ddc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <LCD_enuWriteNLatch+0x166>
    2de2:	9c a7       	std	Y+44, r25	; 0x2c
    2de4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	63 e0       	ldi	r22, 0x03	; 3
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	a0 e8       	ldi	r26, 0x80	; 128
    2df6:	b0 e4       	ldi	r27, 0x40	; 64
    2df8:	8f a3       	std	Y+39, r24	; 0x27
    2dfa:	98 a7       	std	Y+40, r25	; 0x28
    2dfc:	a9 a7       	std	Y+41, r26	; 0x29
    2dfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e00:	6f a1       	ldd	r22, Y+39	; 0x27
    2e02:	78 a5       	ldd	r23, Y+40	; 0x28
    2e04:	89 a5       	ldd	r24, Y+41	; 0x29
    2e06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	4a e7       	ldi	r20, 0x7A	; 122
    2e0e:	55 e4       	ldi	r21, 0x45	; 69
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	8b a3       	std	Y+35, r24	; 0x23
    2e1a:	9c a3       	std	Y+36, r25	; 0x24
    2e1c:	ad a3       	std	Y+37, r26	; 0x25
    2e1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e20:	6b a1       	ldd	r22, Y+35	; 0x23
    2e22:	7c a1       	ldd	r23, Y+36	; 0x24
    2e24:	8d a1       	ldd	r24, Y+37	; 0x25
    2e26:	9e a1       	ldd	r25, Y+38	; 0x26
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e8       	ldi	r20, 0x80	; 128
    2e2e:	5f e3       	ldi	r21, 0x3F	; 63
    2e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e34:	88 23       	and	r24, r24
    2e36:	2c f4       	brge	.+10     	; 0x2e42 <LCD_enuWriteNLatch+0x1ca>
		__ticks = 1;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9a a3       	std	Y+34, r25	; 0x22
    2e3e:	89 a3       	std	Y+33, r24	; 0x21
    2e40:	3f c0       	rjmp	.+126    	; 0x2ec0 <LCD_enuWriteNLatch+0x248>
	else if (__tmp > 65535)
    2e42:	6b a1       	ldd	r22, Y+35	; 0x23
    2e44:	7c a1       	ldd	r23, Y+36	; 0x24
    2e46:	8d a1       	ldd	r24, Y+37	; 0x25
    2e48:	9e a1       	ldd	r25, Y+38	; 0x26
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	3f ef       	ldi	r19, 0xFF	; 255
    2e4e:	4f e7       	ldi	r20, 0x7F	; 127
    2e50:	57 e4       	ldi	r21, 0x47	; 71
    2e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e56:	18 16       	cp	r1, r24
    2e58:	4c f5       	brge	.+82     	; 0x2eac <LCD_enuWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	40 e2       	ldi	r20, 0x20	; 32
    2e68:	51 e4       	ldi	r21, 0x41	; 65
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	9a a3       	std	Y+34, r25	; 0x22
    2e80:	89 a3       	std	Y+33, r24	; 0x21
    2e82:	0f c0       	rjmp	.+30     	; 0x2ea2 <LCD_enuWriteNLatch+0x22a>
    2e84:	80 e9       	ldi	r24, 0x90	; 144
    2e86:	91 e0       	ldi	r25, 0x01	; 1
    2e88:	98 a3       	std	Y+32, r25	; 0x20
    2e8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2e8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e8e:	98 a1       	ldd	r25, Y+32	; 0x20
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <LCD_enuWriteNLatch+0x218>
    2e94:	98 a3       	std	Y+32, r25	; 0x20
    2e96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e98:	89 a1       	ldd	r24, Y+33	; 0x21
    2e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	9a a3       	std	Y+34, r25	; 0x22
    2ea0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea6:	00 97       	sbiw	r24, 0x00	; 0
    2ea8:	69 f7       	brne	.-38     	; 0x2e84 <LCD_enuWriteNLatch+0x20c>
    2eaa:	14 c0       	rjmp	.+40     	; 0x2ed4 <LCD_enuWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eac:	6b a1       	ldd	r22, Y+35	; 0x23
    2eae:	7c a1       	ldd	r23, Y+36	; 0x24
    2eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	9a a3       	std	Y+34, r25	; 0x22
    2ebe:	89 a3       	std	Y+33, r24	; 0x21
    2ec0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ec2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <LCD_enuWriteNLatch+0x254>
    2ed0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ed2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4);

	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 3 )&1 ));
    2ed4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ed6:	86 95       	lsr	r24
    2ed8:	86 95       	lsr	r24
    2eda:	86 95       	lsr	r24
    2edc:	98 2f       	mov	r25, r24
    2ede:	91 70       	andi	r25, 0x01	; 1
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	67 e0       	ldi	r22, 0x07	; 7
    2ee4:	49 2f       	mov	r20, r25
    2ee6:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 2 )&1 ));
    2eea:	89 ad       	ldd	r24, Y+57	; 0x39
    2eec:	86 95       	lsr	r24
    2eee:	86 95       	lsr	r24
    2ef0:	98 2f       	mov	r25, r24
    2ef2:	91 70       	andi	r25, 0x01	; 1
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	66 e0       	ldi	r22, 0x06	; 6
    2ef8:	49 2f       	mov	r20, r25
    2efa:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 1 )&1 ));
    2efe:	89 ad       	ldd	r24, Y+57	; 0x39
    2f00:	86 95       	lsr	r24
    2f02:	98 2f       	mov	r25, r24
    2f04:	91 70       	andi	r25, 0x01	; 1
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	65 e0       	ldi	r22, 0x05	; 5
    2f0a:	49 2f       	mov	r20, r25
    2f0c:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 0 )&1 ));
    2f10:	89 ad       	ldd	r24, Y+57	; 0x39
    2f12:	98 2f       	mov	r25, r24
    2f14:	91 70       	andi	r25, 0x01	; 1
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	64 e0       	ldi	r22, 0x04	; 4
    2f1a:	49 2f       	mov	r20, r25
    2f1c:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	63 e0       	ldi	r22, 0x03	; 3
    2f24:	41 e0       	ldi	r20, 0x01	; 1
    2f26:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	a0 e8       	ldi	r26, 0x80	; 128
    2f30:	bf e3       	ldi	r27, 0x3F	; 63
    2f32:	89 8f       	std	Y+25, r24	; 0x19
    2f34:	9a 8f       	std	Y+26, r25	; 0x1a
    2f36:	ab 8f       	std	Y+27, r26	; 0x1b
    2f38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	4a e7       	ldi	r20, 0x7A	; 122
    2f48:	55 e4       	ldi	r21, 0x45	; 69
    2f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	8d 8b       	std	Y+21, r24	; 0x15
    2f54:	9e 8b       	std	Y+22, r25	; 0x16
    2f56:	af 8b       	std	Y+23, r26	; 0x17
    2f58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f60:	98 8d       	ldd	r25, Y+24	; 0x18
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e8       	ldi	r20, 0x80	; 128
    2f68:	5f e3       	ldi	r21, 0x3F	; 63
    2f6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f6e:	88 23       	and	r24, r24
    2f70:	2c f4       	brge	.+10     	; 0x2f7c <LCD_enuWriteNLatch+0x304>
		__ticks = 1;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	9c 8b       	std	Y+20, r25	; 0x14
    2f78:	8b 8b       	std	Y+19, r24	; 0x13
    2f7a:	3f c0       	rjmp	.+126    	; 0x2ffa <LCD_enuWriteNLatch+0x382>
	else if (__tmp > 65535)
    2f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f80:	8f 89       	ldd	r24, Y+23	; 0x17
    2f82:	98 8d       	ldd	r25, Y+24	; 0x18
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	3f ef       	ldi	r19, 0xFF	; 255
    2f88:	4f e7       	ldi	r20, 0x7F	; 127
    2f8a:	57 e4       	ldi	r21, 0x47	; 71
    2f8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f90:	18 16       	cp	r1, r24
    2f92:	4c f5       	brge	.+82     	; 0x2fe6 <LCD_enuWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f94:	69 8d       	ldd	r22, Y+25	; 0x19
    2f96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	40 e2       	ldi	r20, 0x20	; 32
    2fa2:	51 e4       	ldi	r21, 0x41	; 65
    2fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9c 8b       	std	Y+20, r25	; 0x14
    2fba:	8b 8b       	std	Y+19, r24	; 0x13
    2fbc:	0f c0       	rjmp	.+30     	; 0x2fdc <LCD_enuWriteNLatch+0x364>
    2fbe:	80 e9       	ldi	r24, 0x90	; 144
    2fc0:	91 e0       	ldi	r25, 0x01	; 1
    2fc2:	9a 8b       	std	Y+18, r25	; 0x12
    2fc4:	89 8b       	std	Y+17, r24	; 0x11
    2fc6:	89 89       	ldd	r24, Y+17	; 0x11
    2fc8:	9a 89       	ldd	r25, Y+18	; 0x12
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	f1 f7       	brne	.-4      	; 0x2fca <LCD_enuWriteNLatch+0x352>
    2fce:	9a 8b       	std	Y+18, r25	; 0x12
    2fd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	9c 8b       	std	Y+20, r25	; 0x14
    2fda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fde:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	69 f7       	brne	.-38     	; 0x2fbe <LCD_enuWriteNLatch+0x346>
    2fe4:	14 c0       	rjmp	.+40     	; 0x300e <LCD_enuWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    2fea:	8f 89       	ldd	r24, Y+23	; 0x17
    2fec:	98 8d       	ldd	r25, Y+24	; 0x18
    2fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	9c 8b       	std	Y+20, r25	; 0x14
    2ff8:	8b 8b       	std	Y+19, r24	; 0x13
    2ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffe:	98 8b       	std	Y+16, r25	; 0x10
    3000:	8f 87       	std	Y+15, r24	; 0x0f
    3002:	8f 85       	ldd	r24, Y+15	; 0x0f
    3004:	98 89       	ldd	r25, Y+16	; 0x10
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <LCD_enuWriteNLatch+0x38e>
    300a:	98 8b       	std	Y+16, r25	; 0x10
    300c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	63 e0       	ldi	r22, 0x03	; 3
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	a0 e8       	ldi	r26, 0x80	; 128
    301e:	b0 e4       	ldi	r27, 0x40	; 64
    3020:	8b 87       	std	Y+11, r24	; 0x0b
    3022:	9c 87       	std	Y+12, r25	; 0x0c
    3024:	ad 87       	std	Y+13, r26	; 0x0d
    3026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3028:	6b 85       	ldd	r22, Y+11	; 0x0b
    302a:	7c 85       	ldd	r23, Y+12	; 0x0c
    302c:	8d 85       	ldd	r24, Y+13	; 0x0d
    302e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	4a e7       	ldi	r20, 0x7A	; 122
    3036:	55 e4       	ldi	r21, 0x45	; 69
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	8f 83       	std	Y+7, r24	; 0x07
    3042:	98 87       	std	Y+8, r25	; 0x08
    3044:	a9 87       	std	Y+9, r26	; 0x09
    3046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3048:	6f 81       	ldd	r22, Y+7	; 0x07
    304a:	78 85       	ldd	r23, Y+8	; 0x08
    304c:	89 85       	ldd	r24, Y+9	; 0x09
    304e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e8       	ldi	r20, 0x80	; 128
    3056:	5f e3       	ldi	r21, 0x3F	; 63
    3058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305c:	88 23       	and	r24, r24
    305e:	2c f4       	brge	.+10     	; 0x306a <LCD_enuWriteNLatch+0x3f2>
		__ticks = 1;
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	9e 83       	std	Y+6, r25	; 0x06
    3066:	8d 83       	std	Y+5, r24	; 0x05
    3068:	3f c0       	rjmp	.+126    	; 0x30e8 <LCD_enuWriteNLatch+0x470>
	else if (__tmp > 65535)
    306a:	6f 81       	ldd	r22, Y+7	; 0x07
    306c:	78 85       	ldd	r23, Y+8	; 0x08
    306e:	89 85       	ldd	r24, Y+9	; 0x09
    3070:	9a 85       	ldd	r25, Y+10	; 0x0a
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	3f ef       	ldi	r19, 0xFF	; 255
    3076:	4f e7       	ldi	r20, 0x7F	; 127
    3078:	57 e4       	ldi	r21, 0x47	; 71
    307a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    307e:	18 16       	cp	r1, r24
    3080:	4c f5       	brge	.+82     	; 0x30d4 <LCD_enuWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3082:	6b 85       	ldd	r22, Y+11	; 0x0b
    3084:	7c 85       	ldd	r23, Y+12	; 0x0c
    3086:	8d 85       	ldd	r24, Y+13	; 0x0d
    3088:	9e 85       	ldd	r25, Y+14	; 0x0e
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e2       	ldi	r20, 0x20	; 32
    3090:	51 e4       	ldi	r21, 0x41	; 65
    3092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	9e 83       	std	Y+6, r25	; 0x06
    30a8:	8d 83       	std	Y+5, r24	; 0x05
    30aa:	0f c0       	rjmp	.+30     	; 0x30ca <LCD_enuWriteNLatch+0x452>
    30ac:	80 e9       	ldi	r24, 0x90	; 144
    30ae:	91 e0       	ldi	r25, 0x01	; 1
    30b0:	9c 83       	std	Y+4, r25	; 0x04
    30b2:	8b 83       	std	Y+3, r24	; 0x03
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	9c 81       	ldd	r25, Y+4	; 0x04
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <LCD_enuWriteNLatch+0x440>
    30bc:	9c 83       	std	Y+4, r25	; 0x04
    30be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c0:	8d 81       	ldd	r24, Y+5	; 0x05
    30c2:	9e 81       	ldd	r25, Y+6	; 0x06
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ca:	8d 81       	ldd	r24, Y+5	; 0x05
    30cc:	9e 81       	ldd	r25, Y+6	; 0x06
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	69 f7       	brne	.-38     	; 0x30ac <LCD_enuWriteNLatch+0x434>
    30d2:	14 c0       	rjmp	.+40     	; 0x30fc <LCD_enuWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d4:	6f 81       	ldd	r22, Y+7	; 0x07
    30d6:	78 85       	ldd	r23, Y+8	; 0x08
    30d8:	89 85       	ldd	r24, Y+9	; 0x09
    30da:	9a 85       	ldd	r25, Y+10	; 0x0a
    30dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ea:	9e 81       	ldd	r25, Y+6	; 0x06
    30ec:	9a 83       	std	Y+2, r25	; 0x02
    30ee:	89 83       	std	Y+1, r24	; 0x01
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	9a 81       	ldd	r25, Y+2	; 0x02
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <LCD_enuWriteNLatch+0x47c>
    30f8:	9a 83       	std	Y+2, r25	; 0x02
    30fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);
#else
#error "LCD mode is wrong ya 7aywan"
#endif

	return ES_OK;
    30fc:	80 e0       	ldi	r24, 0x00	; 0
}
    30fe:	e9 96       	adiw	r28, 0x39	; 57
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <LCD_enuWriteIntegerNum>:

/*		ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)		*/
ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)
{
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	2d 97       	sbiw	r28, 0x0d	; 13
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	de bf       	out	0x3e, r29	; 62
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	cd bf       	out	0x3d, r28	; 61
    3124:	69 87       	std	Y+9, r22	; 0x09
    3126:	7a 87       	std	Y+10, r23	; 0x0a
    3128:	8b 87       	std	Y+11, r24	; 0x0b
    312a:	9c 87       	std	Y+12, r25	; 0x0c
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8DigitCounter = 1 ;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	8d 83       	std	Y+5, r24	; 0x05

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	61 e0       	ldi	r22, 0x01	; 1
    3138:	40 e0       	ldi	r20, 0x00	; 0
    313a:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    313e:	8f 83       	std	Y+7, r24	; 0x07
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    3140:	86 e0       	ldi	r24, 0x06	; 6
    3142:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    3146:	88 87       	std	Y+8, r24	; 0x08

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3148:	8f 81       	ldd	r24, Y+7	; 0x07
    314a:	88 23       	and	r24, r24
    314c:	09 f0       	breq	.+2      	; 0x3150 <LCD_enuWriteIntegerNum+0x40>
    314e:	eb c0       	rjmp	.+470    	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
    3150:	88 85       	ldd	r24, Y+8	; 0x08
    3152:	88 23       	and	r24, r24
    3154:	09 f0       	breq	.+2      	; 0x3158 <LCD_enuWriteIntegerNum+0x48>
    3156:	e7 c0       	rjmp	.+462    	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
	{
		if( Copy_s32Num < 0 )
    3158:	89 85       	ldd	r24, Y+9	; 0x09
    315a:	9a 85       	ldd	r25, Y+10	; 0x0a
    315c:	ab 85       	ldd	r26, Y+11	; 0x0b
    315e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3160:	bb 23       	and	r27, r27
    3162:	cc f4       	brge	.+50     	; 0x3196 <LCD_enuWriteIntegerNum+0x86>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	41 e0       	ldi	r20, 0x01	; 1
    316a:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    316e:	8f 83       	std	Y+7, r24	; 0x07
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    3170:	8d e2       	ldi	r24, 0x2D	; 45
    3172:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    3176:	88 87       	std	Y+8, r24	; 0x08
			Copy_s32Num = - Copy_s32Num;
    3178:	89 85       	ldd	r24, Y+9	; 0x09
    317a:	9a 85       	ldd	r25, Y+10	; 0x0a
    317c:	ab 85       	ldd	r26, Y+11	; 0x0b
    317e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3180:	b0 95       	com	r27
    3182:	a0 95       	com	r26
    3184:	90 95       	com	r25
    3186:	81 95       	neg	r24
    3188:	9f 4f       	sbci	r25, 0xFF	; 255
    318a:	af 4f       	sbci	r26, 0xFF	; 255
    318c:	bf 4f       	sbci	r27, 0xFF	; 255
    318e:	89 87       	std	Y+9, r24	; 0x09
    3190:	9a 87       	std	Y+10, r25	; 0x0a
    3192:	ab 87       	std	Y+11, r26	; 0x0b
    3194:	bc 87       	std	Y+12, r27	; 0x0c
		}

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3196:	8f 81       	ldd	r24, Y+7	; 0x07
    3198:	88 23       	and	r24, r24
    319a:	09 f0       	breq	.+2      	; 0x319e <LCD_enuWriteIntegerNum+0x8e>
    319c:	c4 c0       	rjmp	.+392    	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
    319e:	88 85       	ldd	r24, Y+8	; 0x08
    31a0:	88 23       	and	r24, r24
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <LCD_enuWriteIntegerNum+0x96>
    31a4:	c0 c0       	rjmp	.+384    	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
		{
			u32 Local_u32Number = Copy_s32Num;
    31a6:	89 85       	ldd	r24, Y+9	; 0x09
    31a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31aa:	ab 85       	ldd	r26, Y+11	; 0x0b
    31ac:	bc 85       	ldd	r27, Y+12	; 0x0c
    31ae:	89 83       	std	Y+1, r24	; 0x01
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	ab 83       	std	Y+3, r26	; 0x03
    31b4:	bc 83       	std	Y+4, r27	; 0x04
    31b6:	1c c0       	rjmp	.+56     	; 0x31f0 <LCD_enuWriteIntegerNum+0xe0>

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	61 e0       	ldi	r22, 0x01	; 1
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    31c2:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    31c4:	84 e1       	ldi	r24, 0x14	; 20
    31c6:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    31ca:	88 87       	std	Y+8, r24	; 0x08
				Local_u32Number /=10;
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
    31ce:	9a 81       	ldd	r25, Y+2	; 0x02
    31d0:	ab 81       	ldd	r26, Y+3	; 0x03
    31d2:	bc 81       	ldd	r27, Y+4	; 0x04
    31d4:	2a e0       	ldi	r18, 0x0A	; 10
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	bc 01       	movw	r22, r24
    31de:	cd 01       	movw	r24, r26
    31e0:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__udivmodsi4>
    31e4:	da 01       	movw	r26, r20
    31e6:	c9 01       	movw	r24, r18
    31e8:	89 83       	std	Y+1, r24	; 0x01
    31ea:	9a 83       	std	Y+2, r25	; 0x02
    31ec:	ab 83       	std	Y+3, r26	; 0x03
    31ee:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			u32 Local_u32Number = Copy_s32Num;

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	9a 81       	ldd	r25, Y+2	; 0x02
    31f4:	ab 81       	ldd	r26, Y+3	; 0x03
    31f6:	bc 81       	ldd	r27, Y+4	; 0x04
    31f8:	8b 30       	cpi	r24, 0x0B	; 11
    31fa:	91 05       	cpc	r25, r1
    31fc:	a1 05       	cpc	r26, r1
    31fe:	b1 05       	cpc	r27, r1
    3200:	30 f0       	brcs	.+12     	; 0x320e <LCD_enuWriteIntegerNum+0xfe>
    3202:	8f 81       	ldd	r24, Y+7	; 0x07
    3204:	88 23       	and	r24, r24
    3206:	19 f4       	brne	.+6      	; 0x320e <LCD_enuWriteIntegerNum+0xfe>
    3208:	88 85       	ldd	r24, Y+8	; 0x08
    320a:	88 23       	and	r24, r24
    320c:	a9 f2       	breq	.-86     	; 0x31b8 <LCD_enuWriteIntegerNum+0xa8>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    320e:	8f 81       	ldd	r24, Y+7	; 0x07
    3210:	88 23       	and	r24, r24
    3212:	09 f0       	breq	.+2      	; 0x3216 <LCD_enuWriteIntegerNum+0x106>
    3214:	88 c0       	rjmp	.+272    	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
    3216:	88 85       	ldd	r24, Y+8	; 0x08
    3218:	88 23       	and	r24, r24
    321a:	09 f0       	breq	.+2      	; 0x321e <LCD_enuWriteIntegerNum+0x10e>
    321c:	84 c0       	rjmp	.+264    	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	61 e0       	ldi	r22, 0x01	; 1
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3228:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    322a:	84 e0       	ldi	r24, 0x04	; 4
    322c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    3230:	88 87       	std	Y+8, r24	; 0x08

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3232:	8f 81       	ldd	r24, Y+7	; 0x07
    3234:	88 23       	and	r24, r24
    3236:	09 f0       	breq	.+2      	; 0x323a <LCD_enuWriteIntegerNum+0x12a>
    3238:	76 c0       	rjmp	.+236    	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
    323a:	88 85       	ldd	r24, Y+8	; 0x08
    323c:	88 23       	and	r24, r24
    323e:	09 f0       	breq	.+2      	; 0x3242 <LCD_enuWriteIntegerNum+0x132>
    3240:	72 c0       	rjmp	.+228    	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
    3242:	2d c0       	rjmp	.+90     	; 0x329e <LCD_enuWriteIntegerNum+0x18e>
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
					{
						Local_u8DigitCounter++;
    3244:	8d 81       	ldd	r24, Y+5	; 0x05
    3246:	8f 5f       	subi	r24, 0xFF	; 255
    3248:	8d 83       	std	Y+5, r24	; 0x05
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	61 e0       	ldi	r22, 0x01	; 1
    324e:	41 e0       	ldi	r20, 0x01	; 1
    3250:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3254:	8f 83       	std	Y+7, r24	; 0x07
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
    3256:	89 85       	ldd	r24, Y+9	; 0x09
    3258:	9a 85       	ldd	r25, Y+10	; 0x0a
    325a:	ab 85       	ldd	r26, Y+11	; 0x0b
    325c:	bc 85       	ldd	r27, Y+12	; 0x0c
    325e:	2a e0       	ldi	r18, 0x0A	; 10
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e0       	ldi	r20, 0x00	; 0
    3264:	50 e0       	ldi	r21, 0x00	; 0
    3266:	bc 01       	movw	r22, r24
    3268:	cd 01       	movw	r24, r26
    326a:	0e 94 0e 28 	call	0x501c	; 0x501c <__divmodsi4>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	80 5d       	subi	r24, 0xD0	; 208
    3274:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    3278:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
    327a:	89 85       	ldd	r24, Y+9	; 0x09
    327c:	9a 85       	ldd	r25, Y+10	; 0x0a
    327e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3280:	bc 85       	ldd	r27, Y+12	; 0x0c
    3282:	2a e0       	ldi	r18, 0x0A	; 10
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e0       	ldi	r20, 0x00	; 0
    3288:	50 e0       	ldi	r21, 0x00	; 0
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	0e 94 0e 28 	call	0x501c	; 0x501c <__divmodsi4>
    3292:	da 01       	movw	r26, r20
    3294:	c9 01       	movw	r24, r18
    3296:	89 87       	std	Y+9, r24	; 0x09
    3298:	9a 87       	std	Y+10, r25	; 0x0a
    329a:	ab 87       	std	Y+11, r26	; 0x0b
    329c:	bc 87       	std	Y+12, r27	; 0x0c
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    329e:	89 85       	ldd	r24, Y+9	; 0x09
    32a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    32a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	a1 05       	cpc	r26, r1
    32aa:	b1 05       	cpc	r27, r1
    32ac:	31 f0       	breq	.+12     	; 0x32ba <LCD_enuWriteIntegerNum+0x1aa>
    32ae:	8f 81       	ldd	r24, Y+7	; 0x07
    32b0:	88 23       	and	r24, r24
    32b2:	19 f4       	brne	.+6      	; 0x32ba <LCD_enuWriteIntegerNum+0x1aa>
    32b4:	88 85       	ldd	r24, Y+8	; 0x08
    32b6:	88 23       	and	r24, r24
    32b8:	29 f2       	breq	.-118    	; 0x3244 <LCD_enuWriteIntegerNum+0x134>
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    32ba:	8f 81       	ldd	r24, Y+7	; 0x07
    32bc:	88 23       	and	r24, r24
    32be:	99 f5       	brne	.+102    	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
    32c0:	88 85       	ldd	r24, Y+8	; 0x08
    32c2:	88 23       	and	r24, r24
    32c4:	81 f5       	brne	.+96     	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
    32c6:	0a c0       	rjmp	.+20     	; 0x32dc <LCD_enuWriteIntegerNum+0x1cc>
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	61 e0       	ldi	r22, 0x01	; 1
    32cc:	40 e0       	ldi	r20, 0x00	; 0
    32ce:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    32d2:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    32d4:	84 e1       	ldi	r24, 0x14	; 20
    32d6:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    32da:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
    32de:	8d 87       	std	Y+13, r24	; 0x0d
    32e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e2:	88 23       	and	r24, r24
    32e4:	11 f0       	breq	.+4      	; 0x32ea <LCD_enuWriteIntegerNum+0x1da>
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	8d 87       	std	Y+13, r24	; 0x0d
    32ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	81 50       	subi	r24, 0x01	; 1
    32f0:	8d 83       	std	Y+5, r24	; 0x05
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	89 27       	eor	r24, r25
    32f6:	88 23       	and	r24, r24
    32f8:	31 f4       	brne	.+12     	; 0x3306 <LCD_enuWriteIntegerNum+0x1f6>
    32fa:	8f 81       	ldd	r24, Y+7	; 0x07
    32fc:	88 23       	and	r24, r24
    32fe:	19 f4       	brne	.+6      	; 0x3306 <LCD_enuWriteIntegerNum+0x1f6>
    3300:	88 85       	ldd	r24, Y+8	; 0x08
    3302:	88 23       	and	r24, r24
    3304:	09 f3       	breq	.-62     	; 0x32c8 <LCD_enuWriteIntegerNum+0x1b8>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
						}

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3306:	8f 81       	ldd	r24, Y+7	; 0x07
    3308:	88 23       	and	r24, r24
    330a:	69 f4       	brne	.+26     	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
    330c:	88 85       	ldd	r24, Y+8	; 0x08
    330e:	88 23       	and	r24, r24
    3310:	51 f4       	brne	.+20     	; 0x3326 <LCD_enuWriteIntegerNum+0x216>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	61 e0       	ldi	r22, 0x01	; 1
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    331c:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    331e:	86 e0       	ldi	r24, 0x06	; 6
    3320:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    3324:	88 87       	std	Y+8, r24	; 0x08

			}

		}
	}
	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    3326:	8f 81       	ldd	r24, Y+7	; 0x07
    3328:	88 23       	and	r24, r24
    332a:	21 f4       	brne	.+8      	; 0x3334 <LCD_enuWriteIntegerNum+0x224>
    332c:	88 85       	ldd	r24, Y+8	; 0x08
    332e:	88 23       	and	r24, r24
    3330:	09 f4       	brne	.+2      	; 0x3334 <LCD_enuWriteIntegerNum+0x224>
			 	 Local_enuErrorState = ES_OK;
    3332:	1e 82       	std	Y+6, r1	; 0x06

	return (Local_enuErrorState = ES_OK);
    3334:	1e 82       	std	Y+6, r1	; 0x06
    3336:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3338:	2d 96       	adiw	r28, 0x0d	; 13
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	cf 91       	pop	r28
    3346:	df 91       	pop	r29
    3348:	08 95       	ret

0000334a <LCD_enuWriteFloatNum>:

/*		ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)		*/
ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)
{
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
    3352:	66 97       	sbiw	r28, 0x16	; 22
    3354:	0f b6       	in	r0, 0x3f	; 63
    3356:	f8 94       	cli
    3358:	de bf       	out	0x3e, r29	; 62
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	cd bf       	out	0x3d, r28	; 61
    335e:	69 8b       	std	Y+17, r22	; 0x11
    3360:	7a 8b       	std	Y+18, r23	; 0x12
    3362:	8b 8b       	std	Y+19, r24	; 0x13
    3364:	9c 8b       	std	Y+20, r25	; 0x14
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	8e 87       	std	Y+14, r24	; 0x0e

	u8 Local_u8DigitCounter = 0 ;
    336a:	1d 86       	std	Y+13, r1	; 0x0d
	u32 Local_u32Integer = 0 , Local_u32Number = 0;
    336c:	19 86       	std	Y+9, r1	; 0x09
    336e:	1a 86       	std	Y+10, r1	; 0x0a
    3370:	1b 86       	std	Y+11, r1	; 0x0b
    3372:	1c 86       	std	Y+12, r1	; 0x0c
    3374:	1d 82       	std	Y+5, r1	; 0x05
    3376:	1e 82       	std	Y+6, r1	; 0x06
    3378:	1f 82       	std	Y+7, r1	; 0x07
    337a:	18 86       	std	Y+8, r1	; 0x08
	f32 Local_f32_Fraction = 0.0 ;
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	a0 e0       	ldi	r26, 0x00	; 0
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	89 83       	std	Y+1, r24	; 0x01
    3386:	9a 83       	std	Y+2, r25	; 0x02
    3388:	ab 83       	std	Y+3, r26	; 0x03
    338a:	bc 83       	std	Y+4, r27	; 0x04

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	61 e0       	ldi	r22, 0x01	; 1
    3390:	40 e0       	ldi	r20, 0x00	; 0
    3392:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3396:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    3398:	86 e0       	ldi	r24, 0x06	; 6
    339a:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    339e:	88 8b       	std	Y+16, r24	; 0x10

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    33a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a2:	88 23       	and	r24, r24
    33a4:	09 f0       	breq	.+2      	; 0x33a8 <LCD_enuWriteFloatNum+0x5e>
    33a6:	8f c1       	rjmp	.+798    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    33a8:	88 89       	ldd	r24, Y+16	; 0x10
    33aa:	88 23       	and	r24, r24
    33ac:	09 f0       	breq	.+2      	; 0x33b0 <LCD_enuWriteFloatNum+0x66>
    33ae:	8b c1       	rjmp	.+790    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
	{
		if( Copy_f32Num < 0 )
    33b0:	69 89       	ldd	r22, Y+17	; 0x11
    33b2:	7a 89       	ldd	r23, Y+18	; 0x12
    33b4:	8b 89       	ldd	r24, Y+19	; 0x13
    33b6:	9c 89       	ldd	r25, Y+20	; 0x14
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e0       	ldi	r20, 0x00	; 0
    33be:	50 e0       	ldi	r21, 0x00	; 0
    33c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c4:	88 23       	and	r24, r24
    33c6:	9c f4       	brge	.+38     	; 0x33ee <LCD_enuWriteFloatNum+0xa4>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	61 e0       	ldi	r22, 0x01	; 1
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    33d2:	8f 87       	std	Y+15, r24	; 0x0f
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    33d4:	8d e2       	ldi	r24, 0x2D	; 45
    33d6:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    33da:	88 8b       	std	Y+16, r24	; 0x10
			Copy_f32Num = - Copy_f32Num;
    33dc:	89 89       	ldd	r24, Y+17	; 0x11
    33de:	9a 89       	ldd	r25, Y+18	; 0x12
    33e0:	ab 89       	ldd	r26, Y+19	; 0x13
    33e2:	bc 89       	ldd	r27, Y+20	; 0x14
    33e4:	b0 58       	subi	r27, 0x80	; 128
    33e6:	89 8b       	std	Y+17, r24	; 0x11
    33e8:	9a 8b       	std	Y+18, r25	; 0x12
    33ea:	ab 8b       	std	Y+19, r26	; 0x13
    33ec:	bc 8b       	std	Y+20, r27	; 0x14
		}

		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
    33ee:	69 89       	ldd	r22, Y+17	; 0x11
    33f0:	7a 89       	ldd	r23, Y+18	; 0x12
    33f2:	8b 89       	ldd	r24, Y+19	; 0x13
    33f4:	9c 89       	ldd	r25, Y+20	; 0x14
    33f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	8d 83       	std	Y+5, r24	; 0x05
    3400:	9e 83       	std	Y+6, r25	; 0x06
    3402:	af 83       	std	Y+7, r26	; 0x07
    3404:	b8 87       	std	Y+8, r27	; 0x08
    3406:	8d 81       	ldd	r24, Y+5	; 0x05
    3408:	9e 81       	ldd	r25, Y+6	; 0x06
    340a:	af 81       	ldd	r26, Y+7	; 0x07
    340c:	b8 85       	ldd	r27, Y+8	; 0x08
    340e:	89 87       	std	Y+9, r24	; 0x09
    3410:	9a 87       	std	Y+10, r25	; 0x0a
    3412:	ab 87       	std	Y+11, r26	; 0x0b
    3414:	bc 87       	std	Y+12, r27	; 0x0c
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;
    3416:	69 85       	ldd	r22, Y+9	; 0x09
    3418:	7a 85       	ldd	r23, Y+10	; 0x0a
    341a:	8b 85       	ldd	r24, Y+11	; 0x0b
    341c:	9c 85       	ldd	r25, Y+12	; 0x0c
    341e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3422:	9b 01       	movw	r18, r22
    3424:	ac 01       	movw	r20, r24
    3426:	69 89       	ldd	r22, Y+17	; 0x11
    3428:	7a 89       	ldd	r23, Y+18	; 0x12
    342a:	8b 89       	ldd	r24, Y+19	; 0x13
    342c:	9c 89       	ldd	r25, Y+20	; 0x14
    342e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	9a 83       	std	Y+2, r25	; 0x02
    343a:	ab 83       	std	Y+3, r26	; 0x03
    343c:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    343e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3440:	88 23       	and	r24, r24
    3442:	09 f0       	breq	.+2      	; 0x3446 <LCD_enuWriteFloatNum+0xfc>
    3444:	40 c1       	rjmp	.+640    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    3446:	88 89       	ldd	r24, Y+16	; 0x10
    3448:	88 23       	and	r24, r24
    344a:	09 f0       	breq	.+2      	; 0x344e <LCD_enuWriteFloatNum+0x104>
    344c:	3c c1       	rjmp	.+632    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    344e:	1c c0       	rjmp	.+56     	; 0x3488 <LCD_enuWriteFloatNum+0x13e>
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	61 e0       	ldi	r22, 0x01	; 1
    3454:	40 e0       	ldi	r20, 0x00	; 0
    3456:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    345a:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
    345c:	84 e1       	ldi	r24, 0x14	; 20
    345e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    3462:	8f 87       	std	Y+15, r24	; 0x0f
				Local_u32Number /=10;
    3464:	8d 81       	ldd	r24, Y+5	; 0x05
    3466:	9e 81       	ldd	r25, Y+6	; 0x06
    3468:	af 81       	ldd	r26, Y+7	; 0x07
    346a:	b8 85       	ldd	r27, Y+8	; 0x08
    346c:	2a e0       	ldi	r18, 0x0A	; 10
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	50 e0       	ldi	r21, 0x00	; 0
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__udivmodsi4>
    347c:	da 01       	movw	r26, r20
    347e:	c9 01       	movw	r24, r18
    3480:	8d 83       	std	Y+5, r24	; 0x05
    3482:	9e 83       	std	Y+6, r25	; 0x06
    3484:	af 83       	std	Y+7, r26	; 0x07
    3486:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
    348a:	9e 81       	ldd	r25, Y+6	; 0x06
    348c:	af 81       	ldd	r26, Y+7	; 0x07
    348e:	b8 85       	ldd	r27, Y+8	; 0x08
    3490:	8b 30       	cpi	r24, 0x0B	; 11
    3492:	91 05       	cpc	r25, r1
    3494:	a1 05       	cpc	r26, r1
    3496:	b1 05       	cpc	r27, r1
    3498:	30 f0       	brcs	.+12     	; 0x34a6 <LCD_enuWriteFloatNum+0x15c>
    349a:	8f 85       	ldd	r24, Y+15	; 0x0f
    349c:	88 23       	and	r24, r24
    349e:	19 f4       	brne	.+6      	; 0x34a6 <LCD_enuWriteFloatNum+0x15c>
    34a0:	88 89       	ldd	r24, Y+16	; 0x10
    34a2:	88 23       	and	r24, r24
    34a4:	a9 f2       	breq	.-86     	; 0x3450 <LCD_enuWriteFloatNum+0x106>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    34a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a8:	88 23       	and	r24, r24
    34aa:	09 f0       	breq	.+2      	; 0x34ae <LCD_enuWriteFloatNum+0x164>
    34ac:	0c c1       	rjmp	.+536    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    34ae:	88 89       	ldd	r24, Y+16	; 0x10
    34b0:	88 23       	and	r24, r24
    34b2:	09 f0       	breq	.+2      	; 0x34b6 <LCD_enuWriteFloatNum+0x16c>
    34b4:	08 c1       	rjmp	.+528    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	61 e0       	ldi	r22, 0x01	; 1
    34ba:	40 e0       	ldi	r20, 0x00	; 0
    34bc:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    34c0:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    34c2:	84 e0       	ldi	r24, 0x04	; 4
    34c4:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    34c8:	88 8b       	std	Y+16, r24	; 0x10

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    34ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    34cc:	88 23       	and	r24, r24
    34ce:	09 f0       	breq	.+2      	; 0x34d2 <LCD_enuWriteFloatNum+0x188>
    34d0:	fa c0       	rjmp	.+500    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    34d2:	88 89       	ldd	r24, Y+16	; 0x10
    34d4:	88 23       	and	r24, r24
    34d6:	09 f0       	breq	.+2      	; 0x34da <LCD_enuWriteFloatNum+0x190>
    34d8:	f6 c0       	rjmp	.+492    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
				{
					do
					{
						Local_u8DigitCounter++;
    34da:	8d 85       	ldd	r24, Y+13	; 0x0d
    34dc:	8f 5f       	subi	r24, 0xFF	; 255
    34de:	8d 87       	std	Y+13, r24	; 0x0d
						DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	61 e0       	ldi	r22, 0x01	; 1
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
						LCD_enuWriteNLatch(ZERO_ASCII + (Local_u32Integer % 10));
    34ea:	89 85       	ldd	r24, Y+9	; 0x09
    34ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ee:	ab 85       	ldd	r26, Y+11	; 0x0b
    34f0:	bc 85       	ldd	r27, Y+12	; 0x0c
    34f2:	2a e0       	ldi	r18, 0x0A	; 10
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e0       	ldi	r20, 0x00	; 0
    34f8:	50 e0       	ldi	r21, 0x00	; 0
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__udivmodsi4>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	80 5d       	subi	r24, 0xD0	; 208
    3508:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
						Local_u32Integer /= 10;
    350c:	89 85       	ldd	r24, Y+9	; 0x09
    350e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3510:	ab 85       	ldd	r26, Y+11	; 0x0b
    3512:	bc 85       	ldd	r27, Y+12	; 0x0c
    3514:	2a e0       	ldi	r18, 0x0A	; 10
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e0       	ldi	r20, 0x00	; 0
    351a:	50 e0       	ldi	r21, 0x00	; 0
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <__udivmodsi4>
    3524:	da 01       	movw	r26, r20
    3526:	c9 01       	movw	r24, r18
    3528:	89 87       	std	Y+9, r24	; 0x09
    352a:	9a 87       	std	Y+10, r25	; 0x0a
    352c:	ab 87       	std	Y+11, r26	; 0x0b
    352e:	bc 87       	std	Y+12, r27	; 0x0c
					}while(Local_u32Integer && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK);
    3530:	89 85       	ldd	r24, Y+9	; 0x09
    3532:	9a 85       	ldd	r25, Y+10	; 0x0a
    3534:	ab 85       	ldd	r26, Y+11	; 0x0b
    3536:	bc 85       	ldd	r27, Y+12	; 0x0c
    3538:	00 97       	sbiw	r24, 0x00	; 0
    353a:	a1 05       	cpc	r26, r1
    353c:	b1 05       	cpc	r27, r1
    353e:	31 f0       	breq	.+12     	; 0x354c <LCD_enuWriteFloatNum+0x202>
    3540:	8f 85       	ldd	r24, Y+15	; 0x0f
    3542:	88 23       	and	r24, r24
    3544:	19 f4       	brne	.+6      	; 0x354c <LCD_enuWriteFloatNum+0x202>
    3546:	88 89       	ldd	r24, Y+16	; 0x10
    3548:	88 23       	and	r24, r24
    354a:	39 f2       	breq	.-114    	; 0x34da <LCD_enuWriteFloatNum+0x190>

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    354c:	8f 85       	ldd	r24, Y+15	; 0x0f
    354e:	88 23       	and	r24, r24
    3550:	09 f0       	breq	.+2      	; 0x3554 <LCD_enuWriteFloatNum+0x20a>
    3552:	b9 c0       	rjmp	.+370    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    3554:	88 89       	ldd	r24, Y+16	; 0x10
    3556:	88 23       	and	r24, r24
    3558:	09 f0       	breq	.+2      	; 0x355c <LCD_enuWriteFloatNum+0x212>
    355a:	b5 c0       	rjmp	.+362    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
					{
						do
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	61 e0       	ldi	r22, 0x01	; 1
    3560:	40 e0       	ldi	r20, 0x00	; 0
    3562:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3566:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    3568:	84 e1       	ldi	r24, 0x14	; 20
    356a:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    356e:	88 8b       	std	Y+16, r24	; 0x10
						}while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK );
    3570:	8d 85       	ldd	r24, Y+13	; 0x0d
    3572:	8e 8b       	std	Y+22, r24	; 0x16
    3574:	9e 89       	ldd	r25, Y+22	; 0x16
    3576:	99 23       	and	r25, r25
    3578:	11 f0       	breq	.+4      	; 0x357e <LCD_enuWriteFloatNum+0x234>
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	8e 8b       	std	Y+22, r24	; 0x16
    357e:	9e 89       	ldd	r25, Y+22	; 0x16
    3580:	8d 85       	ldd	r24, Y+13	; 0x0d
    3582:	81 50       	subi	r24, 0x01	; 1
    3584:	8d 87       	std	Y+13, r24	; 0x0d
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	89 27       	eor	r24, r25
    358a:	88 23       	and	r24, r24
    358c:	31 f4       	brne	.+12     	; 0x359a <LCD_enuWriteFloatNum+0x250>
    358e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3590:	88 23       	and	r24, r24
    3592:	19 f4       	brne	.+6      	; 0x359a <LCD_enuWriteFloatNum+0x250>
    3594:	88 89       	ldd	r24, Y+16	; 0x10
    3596:	88 23       	and	r24, r24
    3598:	09 f3       	breq	.-62     	; 0x355c <LCD_enuWriteFloatNum+0x212>

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    359a:	8f 85       	ldd	r24, Y+15	; 0x0f
    359c:	88 23       	and	r24, r24
    359e:	09 f0       	breq	.+2      	; 0x35a2 <LCD_enuWriteFloatNum+0x258>
    35a0:	92 c0       	rjmp	.+292    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    35a2:	88 89       	ldd	r24, Y+16	; 0x10
    35a4:	88 23       	and	r24, r24
    35a6:	09 f0       	breq	.+2      	; 0x35aa <LCD_enuWriteFloatNum+0x260>
    35a8:	8e c0       	rjmp	.+284    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	61 e0       	ldi	r22, 0x01	; 1
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    35b4:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    35b6:	86 e0       	ldi	r24, 0x06	; 6
    35b8:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    35bc:	88 8b       	std	Y+16, r24	; 0x10

							if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    35be:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c0:	88 23       	and	r24, r24
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <LCD_enuWriteFloatNum+0x27c>
    35c4:	80 c0       	rjmp	.+256    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    35c6:	88 89       	ldd	r24, Y+16	; 0x10
    35c8:	88 23       	and	r24, r24
    35ca:	09 f0       	breq	.+2      	; 0x35ce <LCD_enuWriteFloatNum+0x284>
    35cc:	7c c0       	rjmp	.+248    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
							{
								if(Local_f32_Fraction > 0.0f)
    35ce:	69 81       	ldd	r22, Y+1	; 0x01
    35d0:	7a 81       	ldd	r23, Y+2	; 0x02
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	40 e0       	ldi	r20, 0x00	; 0
    35dc:	50 e0       	ldi	r21, 0x00	; 0
    35de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35e2:	18 16       	cp	r1, r24
    35e4:	54 f4       	brge	.+20     	; 0x35fa <LCD_enuWriteFloatNum+0x2b0>
								{
									Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	61 e0       	ldi	r22, 0x01	; 1
    35ea:	41 e0       	ldi	r20, 0x01	; 1
    35ec:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    35f0:	8f 87       	std	Y+15, r24	; 0x0f
									Local_enuStatus[1] = LCD_enuWriteNLatch(DOT);
    35f2:	8e e2       	ldi	r24, 0x2E	; 46
    35f4:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    35f8:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    35fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    35fc:	88 23       	and	r24, r24
    35fe:	09 f0       	breq	.+2      	; 0x3602 <LCD_enuWriteFloatNum+0x2b8>
    3600:	62 c0       	rjmp	.+196    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    3602:	88 89       	ldd	r24, Y+16	; 0x10
    3604:	88 23       	and	r24, r24
    3606:	09 f0       	breq	.+2      	; 0x360a <LCD_enuWriteFloatNum+0x2c0>
    3608:	5e c0       	rjmp	.+188    	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
								{
									Local_u8DigitCounter =0;
    360a:	1d 86       	std	Y+13, r1	; 0x0d
    360c:	3e c0       	rjmp	.+124    	; 0x368a <LCD_enuWriteFloatNum+0x340>
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
									{
										Local_u8DigitCounter++;
    360e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3610:	8f 5f       	subi	r24, 0xFF	; 255
    3612:	8d 87       	std	Y+13, r24	; 0x0d
										Local_f32_Fraction *= 10.0;
    3614:	69 81       	ldd	r22, Y+1	; 0x01
    3616:	7a 81       	ldd	r23, Y+2	; 0x02
    3618:	8b 81       	ldd	r24, Y+3	; 0x03
    361a:	9c 81       	ldd	r25, Y+4	; 0x04
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e2       	ldi	r20, 0x20	; 32
    3622:	51 e4       	ldi	r21, 0x41	; 65
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	89 83       	std	Y+1, r24	; 0x01
    362e:	9a 83       	std	Y+2, r25	; 0x02
    3630:	ab 83       	std	Y+3, r26	; 0x03
    3632:	bc 83       	std	Y+4, r27	; 0x04
										Local_u32Integer = (u32) Local_f32_Fraction;
    3634:	69 81       	ldd	r22, Y+1	; 0x01
    3636:	7a 81       	ldd	r23, Y+2	; 0x02
    3638:	8b 81       	ldd	r24, Y+3	; 0x03
    363a:	9c 81       	ldd	r25, Y+4	; 0x04
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	89 87       	std	Y+9, r24	; 0x09
    3646:	9a 87       	std	Y+10, r25	; 0x0a
    3648:	ab 87       	std	Y+11, r26	; 0x0b
    364a:	bc 87       	std	Y+12, r27	; 0x0c
										Local_f32_Fraction -= Local_u32Integer;
    364c:	69 85       	ldd	r22, Y+9	; 0x09
    364e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3650:	8b 85       	ldd	r24, Y+11	; 0x0b
    3652:	9c 85       	ldd	r25, Y+12	; 0x0c
    3654:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3658:	9b 01       	movw	r18, r22
    365a:	ac 01       	movw	r20, r24
    365c:	69 81       	ldd	r22, Y+1	; 0x01
    365e:	7a 81       	ldd	r23, Y+2	; 0x02
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	9c 81       	ldd	r25, Y+4	; 0x04
    3664:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	ab 83       	std	Y+3, r26	; 0x03
    3672:	bc 83       	std	Y+4, r27	; 0x04
										Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	61 e0       	ldi	r22, 0x01	; 1
    3678:	41 e0       	ldi	r20, 0x01	; 1
    367a:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    367e:	8f 87       	std	Y+15, r24	; 0x0f
										Local_enuStatus[1] = LCD_enuWriteNLatch((ZERO_ASCII + Local_u32Integer));
    3680:	89 85       	ldd	r24, Y+9	; 0x09
    3682:	80 5d       	subi	r24, 0xD0	; 208
    3684:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    3688:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
								{
									Local_u8DigitCounter =0;
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    368a:	1d 8a       	std	Y+21, r1	; 0x15
    368c:	69 81       	ldd	r22, Y+1	; 0x01
    368e:	7a 81       	ldd	r23, Y+2	; 0x02
    3690:	8b 81       	ldd	r24, Y+3	; 0x03
    3692:	9c 81       	ldd	r25, Y+4	; 0x04
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	40 e0       	ldi	r20, 0x00	; 0
    369a:	50 e0       	ldi	r21, 0x00	; 0
    369c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36a0:	18 16       	cp	r1, r24
    36a2:	14 f4       	brge	.+4      	; 0x36a8 <LCD_enuWriteFloatNum+0x35e>
    36a4:	91 e0       	ldi	r25, 0x01	; 1
    36a6:	9d 8b       	std	Y+21, r25	; 0x15
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	9d 89       	ldd	r25, Y+21	; 0x15
    36ac:	89 27       	eor	r24, r25
    36ae:	88 23       	and	r24, r24
    36b0:	51 f4       	brne	.+20     	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    36b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b4:	86 30       	cpi	r24, 0x06	; 6
    36b6:	38 f4       	brcc	.+14     	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    36b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ba:	88 23       	and	r24, r24
    36bc:	21 f4       	brne	.+8      	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    36be:	88 89       	ldd	r24, Y+16	; 0x10
    36c0:	88 23       	and	r24, r24
    36c2:	09 f4       	brne	.+2      	; 0x36c6 <LCD_enuWriteFloatNum+0x37c>
    36c4:	a4 cf       	rjmp	.-184    	; 0x360e <LCD_enuWriteFloatNum+0x2c4>
				}
			}
		}
	}

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    36c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c8:	88 23       	and	r24, r24
    36ca:	21 f4       	brne	.+8      	; 0x36d4 <LCD_enuWriteFloatNum+0x38a>
    36cc:	88 89       	ldd	r24, Y+16	; 0x10
    36ce:	88 23       	and	r24, r24
    36d0:	09 f4       	brne	.+2      	; 0x36d4 <LCD_enuWriteFloatNum+0x38a>
		 	 Local_enuErrorState = ES_OK;
    36d2:	1e 86       	std	Y+14, r1	; 0x0e

	return Local_enuErrorState ;
    36d4:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    36d6:	66 96       	adiw	r28, 0x16	; 22
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	cf 91       	pop	r28
    36e4:	df 91       	pop	r29
    36e6:	08 95       	ret

000036e8 <LCD_enuWriteExtraPattern>:

/*		ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)		*/
ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)
{
    36e8:	df 93       	push	r29
    36ea:	cf 93       	push	r28
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	2b 97       	sbiw	r28, 0x0b	; 11
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	9e 83       	std	Y+6, r25	; 0x06
    36fe:	8d 83       	std	Y+5, r24	; 0x05
    3700:	6f 83       	std	Y+7, r22	; 0x07
    3702:	48 87       	std	Y+8, r20	; 0x08
    3704:	29 87       	std	Y+9, r18	; 0x09

	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
    370a:	88 85       	ldd	r24, Y+8	; 0x08
    370c:	85 36       	cpi	r24, 0x65	; 101
    370e:	08 f4       	brcc	.+2      	; 0x3712 <LCD_enuWriteExtraPattern+0x2a>
    3710:	52 c0       	rjmp	.+164    	; 0x37b6 <LCD_enuWriteExtraPattern+0xce>
    3712:	88 85       	ldd	r24, Y+8	; 0x08
    3714:	8d 36       	cpi	r24, 0x6D	; 109
    3716:	08 f0       	brcs	.+2      	; 0x371a <LCD_enuWriteExtraPattern+0x32>
    3718:	4e c0       	rjmp	.+156    	; 0x37b6 <LCD_enuWriteExtraPattern+0xce>
    371a:	88 85       	ldd	r24, Y+8	; 0x08
    371c:	28 2f       	mov	r18, r24
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	8f 81       	ldd	r24, Y+7	; 0x07
    3722:	88 2f       	mov	r24, r24
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	82 0f       	add	r24, r18
    3728:	93 1f       	adc	r25, r19
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	8d 36       	cpi	r24, 0x6D	; 109
    372e:	91 05       	cpc	r25, r1
    3730:	0c f0       	brlt	.+2      	; 0x3734 <LCD_enuWriteExtraPattern+0x4c>
    3732:	41 c0       	rjmp	.+130    	; 0x37b6 <LCD_enuWriteExtraPattern+0xce>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	61 e0       	ldi	r22, 0x01	; 1
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    373e:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));
    3740:	88 85       	ldd	r24, Y+8	; 0x08
    3742:	88 2f       	mov	r24, r24
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	8d 55       	subi	r24, 0x5D	; 93
    3748:	90 40       	sbci	r25, 0x00	; 0
    374a:	88 0f       	add	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	88 0f       	add	r24, r24
    3750:	99 1f       	adc	r25, r25
    3752:	88 0f       	add	r24, r24
    3754:	99 1f       	adc	r25, r25
    3756:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    375a:	8c 83       	std	Y+4, r24	; 0x04

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    375c:	19 82       	std	Y+1, r1	; 0x01
    375e:	15 c0       	rjmp	.+42     	; 0x378a <LCD_enuWriteExtraPattern+0xa2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	61 e0       	ldi	r22, 0x01	; 1
    3764:	41 e0       	ldi	r20, 0x01	; 1
    3766:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    376a:	8b 83       	std	Y+3, r24	; 0x03
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	28 2f       	mov	r18, r24
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	8d 81       	ldd	r24, Y+5	; 0x05
    3774:	9e 81       	ldd	r25, Y+6	; 0x06
    3776:	fc 01       	movw	r30, r24
    3778:	e2 0f       	add	r30, r18
    377a:	f3 1f       	adc	r31, r19
    377c:	80 81       	ld	r24, Z
    377e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    3782:	8c 83       	std	Y+4, r24	; 0x04
	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	8f 5f       	subi	r24, 0xFF	; 255
    3788:	89 83       	std	Y+1, r24	; 0x01
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	28 2f       	mov	r18, r24
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	8f 81       	ldd	r24, Y+7	; 0x07
    3792:	88 2f       	mov	r24, r24
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	88 0f       	add	r24, r24
    3798:	99 1f       	adc	r25, r25
    379a:	88 0f       	add	r24, r24
    379c:	99 1f       	adc	r25, r25
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	28 17       	cp	r18, r24
    37a4:	39 07       	cpc	r19, r25
    37a6:	4c f4       	brge	.+18     	; 0x37ba <LCD_enuWriteExtraPattern+0xd2>
    37a8:	8b 81       	ldd	r24, Y+3	; 0x03
    37aa:	88 23       	and	r24, r24
    37ac:	31 f4       	brne	.+12     	; 0x37ba <LCD_enuWriteExtraPattern+0xd2>
    37ae:	8c 81       	ldd	r24, Y+4	; 0x04
    37b0:	88 23       	and	r24, r24
    37b2:	b1 f2       	breq	.-84     	; 0x3760 <LCD_enuWriteExtraPattern+0x78>
    37b4:	02 c0       	rjmp	.+4      	; 0x37ba <LCD_enuWriteExtraPattern+0xd2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    37b6:	82 e0       	ldi	r24, 0x02	; 2
    37b8:	8a 83       	std	Y+2, r24	; 0x02

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    37ba:	8a 81       	ldd	r24, Y+2	; 0x02
    37bc:	82 30       	cpi	r24, 0x02	; 2
    37be:	71 f1       	breq	.+92     	; 0x381c <LCD_enuWriteExtraPattern+0x134>
    37c0:	8b 81       	ldd	r24, Y+3	; 0x03
    37c2:	88 23       	and	r24, r24
    37c4:	59 f5       	brne	.+86     	; 0x381c <LCD_enuWriteExtraPattern+0x134>
    37c6:	8c 81       	ldd	r24, Y+4	; 0x04
    37c8:	88 23       	and	r24, r24
    37ca:	41 f5       	brne	.+80     	; 0x381c <LCD_enuWriteExtraPattern+0x134>
	{
		if(Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT || Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT )
    37cc:	89 85       	ldd	r24, Y+9	; 0x09
    37ce:	8e 36       	cpi	r24, 0x6E	; 110
    37d0:	19 f0       	breq	.+6      	; 0x37d8 <LCD_enuWriteExtraPattern+0xf0>
    37d2:	89 85       	ldd	r24, Y+9	; 0x09
    37d4:	8e 36       	cpi	r24, 0x6E	; 110
    37d6:	01 f5       	brne	.+64     	; 0x3818 <LCD_enuWriteExtraPattern+0x130>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	61 e0       	ldi	r22, 0x01	; 1
    37dc:	40 e0       	ldi	r20, 0x00	; 0
    37de:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    37e2:	8b 83       	std	Y+3, r24	; 0x03

			switch(Copy_u8DisplayDirection)
    37e4:	89 85       	ldd	r24, Y+9	; 0x09
    37e6:	28 2f       	mov	r18, r24
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	3b 87       	std	Y+11, r19	; 0x0b
    37ec:	2a 87       	std	Y+10, r18	; 0x0a
    37ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    37f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    37f2:	8e 36       	cpi	r24, 0x6E	; 110
    37f4:	91 05       	cpc	r25, r1
    37f6:	31 f0       	breq	.+12     	; 0x3804 <LCD_enuWriteExtraPattern+0x11c>
    37f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    37fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    37fc:	2f 36       	cpi	r18, 0x6F	; 111
    37fe:	31 05       	cpc	r19, r1
    3800:	31 f0       	breq	.+12     	; 0x380e <LCD_enuWriteExtraPattern+0x126>
    3802:	0c c0       	rjmp	.+24     	; 0x381c <LCD_enuWriteExtraPattern+0x134>
			{
				case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    3804:	86 e0       	ldi	r24, 0x06	; 6
    3806:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    380a:	8c 83       	std	Y+4, r24	; 0x04
    380c:	07 c0       	rjmp	.+14     	; 0x381c <LCD_enuWriteExtraPattern+0x134>
												break;
				case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    380e:	84 e0       	ldi	r24, 0x04	; 4
    3810:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    3814:	8c 83       	std	Y+4, r24	; 0x04
    3816:	02 c0       	rjmp	.+4      	; 0x381c <LCD_enuWriteExtraPattern+0x134>
												break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    3818:	82 e0       	ldi	r24, 0x02	; 2
    381a:	8a 83       	std	Y+2, r24	; 0x02
	}

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    381c:	8a 81       	ldd	r24, Y+2	; 0x02
    381e:	82 30       	cpi	r24, 0x02	; 2
    3820:	39 f0       	breq	.+14     	; 0x3830 <LCD_enuWriteExtraPattern+0x148>
    3822:	8b 81       	ldd	r24, Y+3	; 0x03
    3824:	88 23       	and	r24, r24
    3826:	21 f4       	brne	.+8      	; 0x3830 <LCD_enuWriteExtraPattern+0x148>
    3828:	8c 81       	ldd	r24, Y+4	; 0x04
    382a:	88 23       	and	r24, r24
    382c:	09 f4       	brne	.+2      	; 0x3830 <LCD_enuWriteExtraPattern+0x148>
	 	 Local_enuErrorState = ES_OK;
    382e:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState;
    3830:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3832:	2b 96       	adiw	r28, 0x0b	; 11
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	cf 91       	pop	r28
    3840:	df 91       	pop	r29
    3842:	08 95       	ret

00003844 <LCD_enuSetTextDirection>:

ES_t LCD_enuSetTextDirection(u8 Copy_u8Direction)
{
    3844:	df 93       	push	r29
    3846:	cf 93       	push	r28
    3848:	00 d0       	rcall	.+0      	; 0x384a <LCD_enuSetTextDirection+0x6>
    384a:	00 d0       	rcall	.+0      	; 0x384c <LCD_enuSetTextDirection+0x8>
    384c:	00 d0       	rcall	.+0      	; 0x384e <LCD_enuSetTextDirection+0xa>
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Direction == DISPLAY_DIR_RIGHT || Copy_u8Direction == DISPLAY_DIR_RIGHT )
    3858:	8c 81       	ldd	r24, Y+4	; 0x04
    385a:	8e 36       	cpi	r24, 0x6E	; 110
    385c:	19 f0       	breq	.+6      	; 0x3864 <LCD_enuSetTextDirection+0x20>
    385e:	8c 81       	ldd	r24, Y+4	; 0x04
    3860:	8e 36       	cpi	r24, 0x6E	; 110
    3862:	01 f5       	brne	.+64     	; 0x38a4 <LCD_enuSetTextDirection+0x60>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	61 e0       	ldi	r22, 0x01	; 1
    3868:	40 e0       	ldi	r20, 0x00	; 0
    386a:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    386e:	8a 83       	std	Y+2, r24	; 0x02

		switch(Copy_u8Direction)
    3870:	8c 81       	ldd	r24, Y+4	; 0x04
    3872:	28 2f       	mov	r18, r24
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	3e 83       	std	Y+6, r19	; 0x06
    3878:	2d 83       	std	Y+5, r18	; 0x05
    387a:	8d 81       	ldd	r24, Y+5	; 0x05
    387c:	9e 81       	ldd	r25, Y+6	; 0x06
    387e:	8e 36       	cpi	r24, 0x6E	; 110
    3880:	91 05       	cpc	r25, r1
    3882:	31 f0       	breq	.+12     	; 0x3890 <LCD_enuSetTextDirection+0x4c>
    3884:	2d 81       	ldd	r18, Y+5	; 0x05
    3886:	3e 81       	ldd	r19, Y+6	; 0x06
    3888:	2f 36       	cpi	r18, 0x6F	; 111
    388a:	31 05       	cpc	r19, r1
    388c:	31 f0       	breq	.+12     	; 0x389a <LCD_enuSetTextDirection+0x56>
    388e:	0c c0       	rjmp	.+24     	; 0x38a8 <LCD_enuSetTextDirection+0x64>
		{
			case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    3890:	86 e0       	ldi	r24, 0x06	; 6
    3892:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    3896:	8b 83       	std	Y+3, r24	; 0x03
    3898:	07 c0       	rjmp	.+14     	; 0x38a8 <LCD_enuSetTextDirection+0x64>
											break;
			case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    389a:	84 e0       	ldi	r24, 0x04	; 4
    389c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <LCD_enuWriteNLatch>
    38a0:	8b 83       	std	Y+3, r24	; 0x03
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <LCD_enuSetTextDirection+0x64>
											break;
		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    38a4:	82 e0       	ldi	r24, 0x02	; 2
    38a6:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    38a8:	89 81       	ldd	r24, Y+1	; 0x01
    38aa:	82 30       	cpi	r24, 0x02	; 2
    38ac:	39 f0       	breq	.+14     	; 0x38bc <LCD_enuSetTextDirection+0x78>
    38ae:	8a 81       	ldd	r24, Y+2	; 0x02
    38b0:	88 23       	and	r24, r24
    38b2:	21 f4       	brne	.+8      	; 0x38bc <LCD_enuSetTextDirection+0x78>
    38b4:	8b 81       	ldd	r24, Y+3	; 0x03
    38b6:	88 23       	and	r24, r24
    38b8:	09 f4       	brne	.+2      	; 0x38bc <LCD_enuSetTextDirection+0x78>
		 	 Local_enuErrorState = ES_OK;
    38ba:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    38be:	26 96       	adiw	r28, 0x06	; 6
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <Keypad_enuInit>:
extern u8 Kpad_u8KeyValues[];
extern KP_Output_t KeyPadCols[];
extern KP_Input_t KeyPadRows[];

ES_t Keypad_enuInit(void)
{
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	00 d0       	rcall	.+0      	; 0x38d6 <Keypad_enuInit+0x6>
    38d6:	00 d0       	rcall	.+0      	; 0x38d8 <Keypad_enuInit+0x8>
    38d8:	0f 92       	push	r0
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Iter=0 , Local_u8Flag = 0;
    38e2:	1a 82       	std	Y+2, r1	; 0x02
    38e4:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    38e6:	90 91 d1 01 	lds	r25, 0x01D1
    38ea:	80 91 d0 01 	lds	r24, 0x01D0
    38ee:	89 17       	cp	r24, r25
    38f0:	08 f4       	brcc	.+2      	; 0x38f4 <Keypad_enuInit+0x24>
    38f2:	af c0       	rjmp	.+350    	; 0x3a52 <Keypad_enuInit+0x182>
    38f4:	90 91 d2 01 	lds	r25, 0x01D2
    38f8:	80 91 d0 01 	lds	r24, 0x01D0
    38fc:	89 17       	cp	r24, r25
    38fe:	08 f4       	brcc	.+2      	; 0x3902 <Keypad_enuInit+0x32>
    3900:	a8 c0       	rjmp	.+336    	; 0x3a52 <Keypad_enuInit+0x182>
    3902:	54 c0       	rjmp	.+168    	; 0x39ac <Keypad_enuInit+0xdc>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8INPUT	);
    3904:	8a 81       	ldd	r24, Y+2	; 0x02
    3906:	28 2f       	mov	r18, r24
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	c9 01       	movw	r24, r18
    390c:	88 0f       	add	r24, r24
    390e:	99 1f       	adc	r25, r25
    3910:	82 0f       	add	r24, r18
    3912:	93 1f       	adc	r25, r19
    3914:	fc 01       	movw	r30, r24
    3916:	e5 51       	subi	r30, 0x15	; 21
    3918:	fe 4f       	sbci	r31, 0xFE	; 254
    391a:	40 81       	ld	r20, Z
    391c:	8a 81       	ldd	r24, Y+2	; 0x02
    391e:	28 2f       	mov	r18, r24
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	c9 01       	movw	r24, r18
    3924:	88 0f       	add	r24, r24
    3926:	99 1f       	adc	r25, r25
    3928:	82 0f       	add	r24, r18
    392a:	93 1f       	adc	r25, r19
    392c:	fc 01       	movw	r30, r24
    392e:	e4 51       	subi	r30, 0x14	; 20
    3930:	fe 4f       	sbci	r31, 0xFE	; 254
    3932:	90 81       	ld	r25, Z
    3934:	84 2f       	mov	r24, r20
    3936:	69 2f       	mov	r22, r25
    3938:	40 e0       	ldi	r20, 0x00	; 0
    393a:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
    393e:	8c 83       	std	Y+4, r24	; 0x04
			Local_enuError[1] = DIO_enuSetPinValue		( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState	);
    3940:	8a 81       	ldd	r24, Y+2	; 0x02
    3942:	28 2f       	mov	r18, r24
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	c9 01       	movw	r24, r18
    3948:	88 0f       	add	r24, r24
    394a:	99 1f       	adc	r25, r25
    394c:	82 0f       	add	r24, r18
    394e:	93 1f       	adc	r25, r19
    3950:	fc 01       	movw	r30, r24
    3952:	e5 51       	subi	r30, 0x15	; 21
    3954:	fe 4f       	sbci	r31, 0xFE	; 254
    3956:	50 81       	ld	r21, Z
    3958:	8a 81       	ldd	r24, Y+2	; 0x02
    395a:	28 2f       	mov	r18, r24
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	c9 01       	movw	r24, r18
    3960:	88 0f       	add	r24, r24
    3962:	99 1f       	adc	r25, r25
    3964:	82 0f       	add	r24, r18
    3966:	93 1f       	adc	r25, r19
    3968:	fc 01       	movw	r30, r24
    396a:	e4 51       	subi	r30, 0x14	; 20
    396c:	fe 4f       	sbci	r31, 0xFE	; 254
    396e:	40 81       	ld	r20, Z
    3970:	8a 81       	ldd	r24, Y+2	; 0x02
    3972:	28 2f       	mov	r18, r24
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	c9 01       	movw	r24, r18
    3978:	88 0f       	add	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	82 0f       	add	r24, r18
    397e:	93 1f       	adc	r25, r19
    3980:	fc 01       	movw	r30, r24
    3982:	e3 51       	subi	r30, 0x13	; 19
    3984:	fe 4f       	sbci	r31, 0xFE	; 254
    3986:	90 81       	ld	r25, Z
    3988:	85 2f       	mov	r24, r21
    398a:	64 2f       	mov	r22, r20
    398c:	49 2f       	mov	r20, r25
    398e:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3992:	8d 83       	std	Y+5, r24	; 0x05

			if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    3994:	8c 81       	ldd	r24, Y+4	; 0x04
    3996:	88 23       	and	r24, r24
    3998:	19 f4       	brne	.+6      	; 0x39a0 <Keypad_enuInit+0xd0>
    399a:	8d 81       	ldd	r24, Y+5	; 0x05
    399c:	88 23       	and	r24, r24
    399e:	19 f0       	breq	.+6      	; 0x39a6 <Keypad_enuInit+0xd6>
			{
				Local_u8Flag = 1;
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	89 83       	std	Y+1, r24	; 0x01
    39a4:	09 c0       	rjmp	.+18     	; 0x39b8 <Keypad_enuInit+0xe8>
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
	u8 Local_u8Iter=0 , Local_u8Flag = 0;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    39a6:	8a 81       	ldd	r24, Y+2	; 0x02
    39a8:	8f 5f       	subi	r24, 0xFF	; 255
    39aa:	8a 83       	std	Y+2, r24	; 0x02
    39ac:	90 91 d1 01 	lds	r25, 0x01D1
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	89 17       	cp	r24, r25
    39b4:	08 f4       	brcc	.+2      	; 0x39b8 <Keypad_enuInit+0xe8>
    39b6:	a6 cf       	rjmp	.-180    	; 0x3904 <Keypad_enuInit+0x34>
			{
				Local_u8Flag = 1;
				break;
			}
		}
		if(!Local_u8Flag)
    39b8:	89 81       	ldd	r24, Y+1	; 0x01
    39ba:	88 23       	and	r24, r24
    39bc:	09 f0       	breq	.+2      	; 0x39c0 <Keypad_enuInit+0xf0>
    39be:	44 c0       	rjmp	.+136    	; 0x3a48 <Keypad_enuInit+0x178>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    39c0:	1a 82       	std	Y+2, r1	; 0x02
    39c2:	3c c0       	rjmp	.+120    	; 0x3a3c <Keypad_enuInit+0x16c>
			{
				Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8OUTPUT );
    39c4:	8a 81       	ldd	r24, Y+2	; 0x02
    39c6:	88 2f       	mov	r24, r24
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	fc 01       	movw	r30, r24
    39d0:	ed 51       	subi	r30, 0x1D	; 29
    39d2:	fe 4f       	sbci	r31, 0xFE	; 254
    39d4:	20 81       	ld	r18, Z
    39d6:	8a 81       	ldd	r24, Y+2	; 0x02
    39d8:	88 2f       	mov	r24, r24
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	fc 01       	movw	r30, r24
    39e2:	ec 51       	subi	r30, 0x1C	; 28
    39e4:	fe 4f       	sbci	r31, 0xFE	; 254
    39e6:	90 81       	ld	r25, Z
    39e8:	82 2f       	mov	r24, r18
    39ea:	69 2f       	mov	r22, r25
    39ec:	41 e0       	ldi	r20, 0x01	; 1
    39ee:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_enuSetPinDirection>
    39f2:	8c 83       	std	Y+4, r24	; 0x04
				Local_enuError[1] = DIO_enuSetPinValue		( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8HIGH	 );
    39f4:	8a 81       	ldd	r24, Y+2	; 0x02
    39f6:	88 2f       	mov	r24, r24
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	88 0f       	add	r24, r24
    39fc:	99 1f       	adc	r25, r25
    39fe:	fc 01       	movw	r30, r24
    3a00:	ed 51       	subi	r30, 0x1D	; 29
    3a02:	fe 4f       	sbci	r31, 0xFE	; 254
    3a04:	20 81       	ld	r18, Z
    3a06:	8a 81       	ldd	r24, Y+2	; 0x02
    3a08:	88 2f       	mov	r24, r24
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	88 0f       	add	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	fc 01       	movw	r30, r24
    3a12:	ec 51       	subi	r30, 0x1C	; 28
    3a14:	fe 4f       	sbci	r31, 0xFE	; 254
    3a16:	90 81       	ld	r25, Z
    3a18:	82 2f       	mov	r24, r18
    3a1a:	69 2f       	mov	r22, r25
    3a1c:	41 e0       	ldi	r20, 0x01	; 1
    3a1e:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3a22:	8d 83       	std	Y+5, r24	; 0x05

				if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    3a24:	8c 81       	ldd	r24, Y+4	; 0x04
    3a26:	88 23       	and	r24, r24
    3a28:	19 f4       	brne	.+6      	; 0x3a30 <Keypad_enuInit+0x160>
    3a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2c:	88 23       	and	r24, r24
    3a2e:	19 f0       	breq	.+6      	; 0x3a36 <Keypad_enuInit+0x166>
				{
					Local_u8Flag = 1;
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	89 83       	std	Y+1, r24	; 0x01
    3a34:	09 c0       	rjmp	.+18     	; 0x3a48 <Keypad_enuInit+0x178>
				break;
			}
		}
		if(!Local_u8Flag)
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3a36:	8a 81       	ldd	r24, Y+2	; 0x02
    3a38:	8f 5f       	subi	r24, 0xFF	; 255
    3a3a:	8a 83       	std	Y+2, r24	; 0x02
    3a3c:	90 91 d2 01 	lds	r25, 0x01D2
    3a40:	8a 81       	ldd	r24, Y+2	; 0x02
    3a42:	89 17       	cp	r24, r25
    3a44:	08 f4       	brcc	.+2      	; 0x3a48 <Keypad_enuInit+0x178>
    3a46:	be cf       	rjmp	.-132    	; 0x39c4 <Keypad_enuInit+0xf4>
					Local_u8Flag = 1;
					break;
				}
			}
		}
		if( !Local_u8Flag )
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	88 23       	and	r24, r24
    3a4c:	21 f4       	brne	.+8      	; 0x3a56 <Keypad_enuInit+0x186>
			Local_enuErrorState = ES_OK;
    3a4e:	1b 82       	std	Y+3, r1	; 0x03
    3a50:	02 c0       	rjmp	.+4      	; 0x3a56 <Keypad_enuInit+0x186>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3a52:	82 e0       	ldi	r24, 0x02	; 2
    3a54:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState;//DONE
    3a56:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	cf 91       	pop	r28
    3a64:	df 91       	pop	r29
    3a66:	08 95       	ret

00003a68 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)

{
    3a68:	df 93       	push	r29
    3a6a:	cf 93       	push	r28
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	65 97       	sbiw	r28, 0x15	; 21
    3a72:	0f b6       	in	r0, 0x3f	; 63
    3a74:	f8 94       	cli
    3a76:	de bf       	out	0x3e, r29	; 62
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	cd bf       	out	0x3d, r28	; 61
    3a7c:	9d 8b       	std	Y+21, r25	; 0x15
    3a7e:	8c 8b       	std	Y+20, r24	; 0x14
	ES_t Local_enuErrorState = ES_NOK;
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	8a 8b       	std	Y+18, r24	; 0x12

	if (Copy_pu8KeyValue != NULL)
    3a84:	8c 89       	ldd	r24, Y+20	; 0x14
    3a86:	9d 89       	ldd	r25, Y+21	; 0x15
    3a88:	00 97       	sbiw	r24, 0x00	; 0
    3a8a:	09 f4       	brne	.+2      	; 0x3a8e <Keypad_enuGetPressedKey+0x26>
    3a8c:	61 c1       	rjmp	.+706    	; 0x3d50 <Keypad_enuGetPressedKey+0x2e8>
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	8b 8b       	std	Y+19, r24	; 0x13
    3a92:	19 8a       	std	Y+17, r1	; 0x11

		*Copy_pu8KeyValue = 0xff;
    3a94:	ec 89       	ldd	r30, Y+20	; 0x14
    3a96:	fd 89       	ldd	r31, Y+21	; 0x15
    3a98:	8f ef       	ldi	r24, 0xFF	; 255
    3a9a:	80 83       	st	Z, r24

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    3a9c:	18 8a       	std	Y+16, r1	; 0x10
    3a9e:	51 c1       	rjmp	.+674    	; 0x3d42 <Keypad_enuGetPressedKey+0x2da>
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );
    3aa0:	88 89       	ldd	r24, Y+16	; 0x10
    3aa2:	88 2f       	mov	r24, r24
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	88 0f       	add	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	fc 01       	movw	r30, r24
    3aac:	ed 51       	subi	r30, 0x1D	; 29
    3aae:	fe 4f       	sbci	r31, 0xFE	; 254
    3ab0:	20 81       	ld	r18, Z
    3ab2:	88 89       	ldd	r24, Y+16	; 0x10
    3ab4:	88 2f       	mov	r24, r24
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	88 0f       	add	r24, r24
    3aba:	99 1f       	adc	r25, r25
    3abc:	fc 01       	movw	r30, r24
    3abe:	ec 51       	subi	r30, 0x1C	; 28
    3ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac2:	90 81       	ld	r25, Z
    3ac4:	82 2f       	mov	r24, r18
    3ac6:	69 2f       	mov	r22, r25
    3ac8:	40 e0       	ldi	r20, 0x00	; 0
    3aca:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3ace:	8a 8b       	std	Y+18, r24	; 0x12

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    3ad0:	1f 86       	std	Y+15, r1	; 0x0f
    3ad2:	0d c1       	rjmp	.+538    	; 0x3cee <Keypad_enuGetPressedKey+0x286>
			{
				Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    3ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad6:	28 2f       	mov	r18, r24
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	c9 01       	movw	r24, r18
    3adc:	88 0f       	add	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	82 0f       	add	r24, r18
    3ae2:	93 1f       	adc	r25, r19
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	e5 51       	subi	r30, 0x15	; 21
    3ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aea:	40 81       	ld	r20, Z
    3aec:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aee:	28 2f       	mov	r18, r24
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	c9 01       	movw	r24, r18
    3af4:	88 0f       	add	r24, r24
    3af6:	99 1f       	adc	r25, r25
    3af8:	82 0f       	add	r24, r18
    3afa:	93 1f       	adc	r25, r19
    3afc:	fc 01       	movw	r30, r24
    3afe:	e4 51       	subi	r30, 0x14	; 20
    3b00:	fe 4f       	sbci	r31, 0xFE	; 254
    3b02:	90 81       	ld	r25, Z
    3b04:	9e 01       	movw	r18, r28
    3b06:	2d 5e       	subi	r18, 0xED	; 237
    3b08:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0a:	84 2f       	mov	r24, r20
    3b0c:	69 2f       	mov	r22, r25
    3b0e:	a9 01       	movw	r20, r18
    3b10:	0e 94 ae 0c 	call	0x195c	; 0x195c <DIO_enuGetPinValue>
    3b14:	8a 8b       	std	Y+18, r24	; 0x12

				if( (Local_u8RowValue == DIO_u8LOW) && ( Local_enuErrorState == ES_OK) )
    3b16:	8b 89       	ldd	r24, Y+19	; 0x13
    3b18:	88 23       	and	r24, r24
    3b1a:	09 f0       	breq	.+2      	; 0x3b1e <Keypad_enuGetPressedKey+0xb6>
    3b1c:	e5 c0       	rjmp	.+458    	; 0x3ce8 <Keypad_enuGetPressedKey+0x280>
    3b1e:	8a 89       	ldd	r24, Y+18	; 0x12
    3b20:	88 23       	and	r24, r24
    3b22:	09 f0       	breq	.+2      	; 0x3b26 <Keypad_enuGetPressedKey+0xbe>
    3b24:	e1 c0       	rjmp	.+450    	; 0x3ce8 <Keypad_enuGetPressedKey+0x280>
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	a0 e4       	ldi	r26, 0x40	; 64
    3b2c:	b0 e4       	ldi	r27, 0x40	; 64
    3b2e:	8b 87       	std	Y+11, r24	; 0x0b
    3b30:	9c 87       	std	Y+12, r25	; 0x0c
    3b32:	ad 87       	std	Y+13, r26	; 0x0d
    3b34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	4a e7       	ldi	r20, 0x7A	; 122
    3b44:	55 e4       	ldi	r21, 0x45	; 69
    3b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	8f 83       	std	Y+7, r24	; 0x07
    3b50:	98 87       	std	Y+8, r25	; 0x08
    3b52:	a9 87       	std	Y+9, r26	; 0x09
    3b54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b56:	6f 81       	ldd	r22, Y+7	; 0x07
    3b58:	78 85       	ldd	r23, Y+8	; 0x08
    3b5a:	89 85       	ldd	r24, Y+9	; 0x09
    3b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e8       	ldi	r20, 0x80	; 128
    3b64:	5f e3       	ldi	r21, 0x3F	; 63
    3b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b6a:	88 23       	and	r24, r24
    3b6c:	2c f4       	brge	.+10     	; 0x3b78 <Keypad_enuGetPressedKey+0x110>
		__ticks = 1;
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	9e 83       	std	Y+6, r25	; 0x06
    3b74:	8d 83       	std	Y+5, r24	; 0x05
    3b76:	3f c0       	rjmp	.+126    	; 0x3bf6 <Keypad_enuGetPressedKey+0x18e>
	else if (__tmp > 65535)
    3b78:	6f 81       	ldd	r22, Y+7	; 0x07
    3b7a:	78 85       	ldd	r23, Y+8	; 0x08
    3b7c:	89 85       	ldd	r24, Y+9	; 0x09
    3b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	3f ef       	ldi	r19, 0xFF	; 255
    3b84:	4f e7       	ldi	r20, 0x7F	; 127
    3b86:	57 e4       	ldi	r21, 0x47	; 71
    3b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b8c:	18 16       	cp	r1, r24
    3b8e:	4c f5       	brge	.+82     	; 0x3be2 <Keypad_enuGetPressedKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	40 e2       	ldi	r20, 0x20	; 32
    3b9e:	51 e4       	ldi	r21, 0x41	; 65
    3ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	bc 01       	movw	r22, r24
    3baa:	cd 01       	movw	r24, r26
    3bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	9e 83       	std	Y+6, r25	; 0x06
    3bb6:	8d 83       	std	Y+5, r24	; 0x05
    3bb8:	0f c0       	rjmp	.+30     	; 0x3bd8 <Keypad_enuGetPressedKey+0x170>
    3bba:	80 e9       	ldi	r24, 0x90	; 144
    3bbc:	91 e0       	ldi	r25, 0x01	; 1
    3bbe:	9c 83       	std	Y+4, r25	; 0x04
    3bc0:	8b 83       	std	Y+3, r24	; 0x03
    3bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	f1 f7       	brne	.-4      	; 0x3bc6 <Keypad_enuGetPressedKey+0x15e>
    3bca:	9c 83       	std	Y+4, r25	; 0x04
    3bcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bce:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	9e 83       	std	Y+6, r25	; 0x06
    3bd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bda:	9e 81       	ldd	r25, Y+6	; 0x06
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	69 f7       	brne	.-38     	; 0x3bba <Keypad_enuGetPressedKey+0x152>
    3be0:	14 c0       	rjmp	.+40     	; 0x3c0a <Keypad_enuGetPressedKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be2:	6f 81       	ldd	r22, Y+7	; 0x07
    3be4:	78 85       	ldd	r23, Y+8	; 0x08
    3be6:	89 85       	ldd	r24, Y+9	; 0x09
    3be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	9e 83       	std	Y+6, r25	; 0x06
    3bf4:	8d 83       	std	Y+5, r24	; 0x05
    3bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfa:	9a 83       	std	Y+2, r25	; 0x02
    3bfc:	89 83       	std	Y+1, r24	; 0x01
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	9a 81       	ldd	r25, Y+2	; 0x02
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	f1 f7       	brne	.-4      	; 0x3c02 <Keypad_enuGetPressedKey+0x19a>
    3c06:	9a 83       	std	Y+2, r25	; 0x02
    3c08:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(KEYPAD_BOUNCE_DELAY);
					Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    3c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c0c:	28 2f       	mov	r18, r24
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	c9 01       	movw	r24, r18
    3c12:	88 0f       	add	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	82 0f       	add	r24, r18
    3c18:	93 1f       	adc	r25, r19
    3c1a:	fc 01       	movw	r30, r24
    3c1c:	e5 51       	subi	r30, 0x15	; 21
    3c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c20:	40 81       	ld	r20, Z
    3c22:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c24:	28 2f       	mov	r18, r24
    3c26:	30 e0       	ldi	r19, 0x00	; 0
    3c28:	c9 01       	movw	r24, r18
    3c2a:	88 0f       	add	r24, r24
    3c2c:	99 1f       	adc	r25, r25
    3c2e:	82 0f       	add	r24, r18
    3c30:	93 1f       	adc	r25, r19
    3c32:	fc 01       	movw	r30, r24
    3c34:	e4 51       	subi	r30, 0x14	; 20
    3c36:	fe 4f       	sbci	r31, 0xFE	; 254
    3c38:	90 81       	ld	r25, Z
    3c3a:	9e 01       	movw	r18, r28
    3c3c:	2d 5e       	subi	r18, 0xED	; 237
    3c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c40:	84 2f       	mov	r24, r20
    3c42:	69 2f       	mov	r22, r25
    3c44:	a9 01       	movw	r20, r18
    3c46:	0e 94 ae 0c 	call	0x195c	; 0x195c <DIO_enuGetPinValue>
    3c4a:	8a 8b       	std	Y+18, r24	; 0x12

					if( Local_enuErrorState == ES_OK  && Local_u8RowValue == DIO_u8LOW )
    3c4c:	8a 89       	ldd	r24, Y+18	; 0x12
    3c4e:	88 23       	and	r24, r24
    3c50:	09 f0       	breq	.+2      	; 0x3c54 <Keypad_enuGetPressedKey+0x1ec>
    3c52:	4a c0       	rjmp	.+148    	; 0x3ce8 <Keypad_enuGetPressedKey+0x280>
    3c54:	8b 89       	ldd	r24, Y+19	; 0x13
    3c56:	88 23       	and	r24, r24
    3c58:	09 f0       	breq	.+2      	; 0x3c5c <Keypad_enuGetPressedKey+0x1f4>
    3c5a:	46 c0       	rjmp	.+140    	; 0x3ce8 <Keypad_enuGetPressedKey+0x280>
					{
						Local_u8Pressed = 1 ;
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	89 8b       	std	Y+17, r24	; 0x11
						*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];
    3c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c62:	28 2f       	mov	r18, r24
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	80 91 d2 01 	lds	r24, 0x01D2
    3c6a:	88 2f       	mov	r24, r24
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	a9 01       	movw	r20, r18
    3c70:	48 9f       	mul	r20, r24
    3c72:	90 01       	movw	r18, r0
    3c74:	49 9f       	mul	r20, r25
    3c76:	30 0d       	add	r19, r0
    3c78:	58 9f       	mul	r21, r24
    3c7a:	30 0d       	add	r19, r0
    3c7c:	11 24       	eor	r1, r1
    3c7e:	88 89       	ldd	r24, Y+16	; 0x10
    3c80:	88 2f       	mov	r24, r24
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	82 0f       	add	r24, r18
    3c86:	93 1f       	adc	r25, r19
    3c88:	fc 01       	movw	r30, r24
    3c8a:	ed 52       	subi	r30, 0x2D	; 45
    3c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c8e:	80 81       	ld	r24, Z
    3c90:	ec 89       	ldd	r30, Y+20	; 0x14
    3c92:	fd 89       	ldd	r31, Y+21	; 0x15
    3c94:	80 83       	st	Z, r24
    3c96:	21 c0       	rjmp	.+66     	; 0x3cda <Keypad_enuGetPressedKey+0x272>

						while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
						{
							Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    3c98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c9a:	28 2f       	mov	r18, r24
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	c9 01       	movw	r24, r18
    3ca0:	88 0f       	add	r24, r24
    3ca2:	99 1f       	adc	r25, r25
    3ca4:	82 0f       	add	r24, r18
    3ca6:	93 1f       	adc	r25, r19
    3ca8:	fc 01       	movw	r30, r24
    3caa:	e5 51       	subi	r30, 0x15	; 21
    3cac:	fe 4f       	sbci	r31, 0xFE	; 254
    3cae:	40 81       	ld	r20, Z
    3cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	c9 01       	movw	r24, r18
    3cb8:	88 0f       	add	r24, r24
    3cba:	99 1f       	adc	r25, r25
    3cbc:	82 0f       	add	r24, r18
    3cbe:	93 1f       	adc	r25, r19
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	e4 51       	subi	r30, 0x14	; 20
    3cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc6:	90 81       	ld	r25, Z
    3cc8:	9e 01       	movw	r18, r28
    3cca:	2d 5e       	subi	r18, 0xED	; 237
    3ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cce:	84 2f       	mov	r24, r20
    3cd0:	69 2f       	mov	r22, r25
    3cd2:	a9 01       	movw	r20, r18
    3cd4:	0e 94 ae 0c 	call	0x195c	; 0x195c <DIO_enuGetPinValue>
    3cd8:	8a 8b       	std	Y+18, r24	; 0x12
					if( Local_enuErrorState == ES_OK  && Local_u8RowValue == DIO_u8LOW )
					{
						Local_u8Pressed = 1 ;
						*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];

						while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
    3cda:	8b 89       	ldd	r24, Y+19	; 0x13
    3cdc:	88 23       	and	r24, r24
    3cde:	81 f4       	brne	.+32     	; 0x3d00 <Keypad_enuGetPressedKey+0x298>
    3ce0:	8a 89       	ldd	r24, Y+18	; 0x12
    3ce2:	88 23       	and	r24, r24
    3ce4:	c9 f2       	breq	.-78     	; 0x3c98 <Keypad_enuGetPressedKey+0x230>
    3ce6:	0c c0       	rjmp	.+24     	; 0x3d00 <Keypad_enuGetPressedKey+0x298>

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    3ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cea:	8f 5f       	subi	r24, 0xFF	; 255
    3cec:	8f 87       	std	Y+15, r24	; 0x0f
    3cee:	8a 89       	ldd	r24, Y+18	; 0x12
    3cf0:	88 23       	and	r24, r24
    3cf2:	31 f4       	brne	.+12     	; 0x3d00 <Keypad_enuGetPressedKey+0x298>
    3cf4:	90 91 d1 01 	lds	r25, 0x01D1
    3cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cfa:	89 17       	cp	r24, r25
    3cfc:	08 f4       	brcc	.+2      	; 0x3d00 <Keypad_enuGetPressedKey+0x298>
    3cfe:	ea ce       	rjmp	.-556    	; 0x3ad4 <Keypad_enuGetPressedKey+0x6c>
						break;
					}
				}
			}

			if( (Local_u8Pressed == 1) || (Local_enuErrorState != ES_OK) )
    3d00:	89 89       	ldd	r24, Y+17	; 0x11
    3d02:	81 30       	cpi	r24, 0x01	; 1
    3d04:	39 f1       	breq	.+78     	; 0x3d54 <Keypad_enuGetPressedKey+0x2ec>
    3d06:	8a 89       	ldd	r24, Y+18	; 0x12
    3d08:	88 23       	and	r24, r24
    3d0a:	21 f5       	brne	.+72     	; 0x3d54 <Keypad_enuGetPressedKey+0x2ec>
				break;
			else
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
    3d0c:	88 89       	ldd	r24, Y+16	; 0x10
    3d0e:	88 2f       	mov	r24, r24
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	88 0f       	add	r24, r24
    3d14:	99 1f       	adc	r25, r25
    3d16:	fc 01       	movw	r30, r24
    3d18:	ed 51       	subi	r30, 0x1D	; 29
    3d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d1c:	20 81       	ld	r18, Z
    3d1e:	88 89       	ldd	r24, Y+16	; 0x10
    3d20:	88 2f       	mov	r24, r24
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	88 0f       	add	r24, r24
    3d26:	99 1f       	adc	r25, r25
    3d28:	fc 01       	movw	r30, r24
    3d2a:	ec 51       	subi	r30, 0x1C	; 28
    3d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d2e:	90 81       	ld	r25, Z
    3d30:	82 2f       	mov	r24, r18
    3d32:	69 2f       	mov	r22, r25
    3d34:	41 e0       	ldi	r20, 0x01	; 1
    3d36:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3d3a:	8a 8b       	std	Y+18, r24	; 0x12
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;

		*Copy_pu8KeyValue = 0xff;

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    3d3c:	88 89       	ldd	r24, Y+16	; 0x10
    3d3e:	8f 5f       	subi	r24, 0xFF	; 255
    3d40:	88 8b       	std	Y+16, r24	; 0x10
    3d42:	90 91 d2 01 	lds	r25, 0x01D2
    3d46:	88 89       	ldd	r24, Y+16	; 0x10
    3d48:	89 17       	cp	r24, r25
    3d4a:	08 f4       	brcc	.+2      	; 0x3d4e <Keypad_enuGetPressedKey+0x2e6>
    3d4c:	a9 ce       	rjmp	.-686    	; 0x3aa0 <Keypad_enuGetPressedKey+0x38>
    3d4e:	02 c0       	rjmp	.+4      	; 0x3d54 <Keypad_enuGetPressedKey+0x2ec>
				break;
			else
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
		}
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    3d50:	83 e0       	ldi	r24, 0x03	; 3
    3d52:	8a 8b       	std	Y+18, r24	; 0x12

	return Local_enuErrorState;//DONE
    3d54:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3d56:	65 96       	adiw	r28, 0x15	; 21
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	f8 94       	cli
    3d5c:	de bf       	out	0x3e, r29	; 62
    3d5e:	0f be       	out	0x3f, r0	; 63
    3d60:	cd bf       	out	0x3d, r28	; 61
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	08 95       	ret

00003d68 <Keypad_Sleep>:

ES_t Keypad_Sleep(void)
{
    3d68:	df 93       	push	r29
    3d6a:	cf 93       	push	r28
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <Keypad_Sleep+0x6>
    3d6e:	cd b7       	in	r28, 0x3d	; 61
    3d70:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter=0 ;
    3d76:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    3d78:	90 91 d1 01 	lds	r25, 0x01D1
    3d7c:	80 91 d0 01 	lds	r24, 0x01D0
    3d80:	89 17       	cp	r24, r25
    3d82:	08 f4       	brcc	.+2      	; 0x3d86 <Keypad_Sleep+0x1e>
    3d84:	5a c0       	rjmp	.+180    	; 0x3e3a <Keypad_Sleep+0xd2>
    3d86:	90 91 d2 01 	lds	r25, 0x01D2
    3d8a:	80 91 d0 01 	lds	r24, 0x01D0
    3d8e:	89 17       	cp	r24, r25
    3d90:	08 f4       	brcc	.+2      	; 0x3d94 <Keypad_Sleep+0x2c>
    3d92:	53 c0       	rjmp	.+166    	; 0x3e3a <Keypad_Sleep+0xd2>
    3d94:	24 c0       	rjmp	.+72     	; 0x3dde <Keypad_Sleep+0x76>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8FLOAT	);
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	28 2f       	mov	r18, r24
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	c9 01       	movw	r24, r18
    3d9e:	88 0f       	add	r24, r24
    3da0:	99 1f       	adc	r25, r25
    3da2:	82 0f       	add	r24, r18
    3da4:	93 1f       	adc	r25, r19
    3da6:	fc 01       	movw	r30, r24
    3da8:	e5 51       	subi	r30, 0x15	; 21
    3daa:	fe 4f       	sbci	r31, 0xFE	; 254
    3dac:	40 81       	ld	r20, Z
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
    3db0:	28 2f       	mov	r18, r24
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	c9 01       	movw	r24, r18
    3db6:	88 0f       	add	r24, r24
    3db8:	99 1f       	adc	r25, r25
    3dba:	82 0f       	add	r24, r18
    3dbc:	93 1f       	adc	r25, r19
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	e4 51       	subi	r30, 0x14	; 20
    3dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc4:	90 81       	ld	r25, Z
    3dc6:	84 2f       	mov	r24, r20
    3dc8:	69 2f       	mov	r22, r25
    3dca:	40 e0       	ldi	r20, 0x00	; 0
    3dcc:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3dd0:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_enuErrorState != ES_OK  )	break;
    3dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd4:	88 23       	and	r24, r24
    3dd6:	41 f4       	brne	.+16     	; 0x3de8 <Keypad_Sleep+0x80>
	ES_t Local_enuErrorState = ES_NOK ;
	u8 Local_u8Iter=0 ;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	8f 5f       	subi	r24, 0xFF	; 255
    3ddc:	89 83       	std	Y+1, r24	; 0x01
    3dde:	90 91 d1 01 	lds	r25, 0x01D1
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	89 17       	cp	r24, r25
    3de6:	b8 f2       	brcs	.-82     	; 0x3d96 <Keypad_Sleep+0x2e>
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8FLOAT	);

			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
    3de8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dea:	88 23       	and	r24, r24
    3dec:	41 f5       	brne	.+80     	; 0x3e3e <Keypad_Sleep+0xd6>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3dee:	19 82       	std	Y+1, r1	; 0x01
    3df0:	1e c0       	rjmp	.+60     	; 0x3e2e <Keypad_Sleep+0xc6>
			{
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8LOW );
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	88 2f       	mov	r24, r24
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	88 0f       	add	r24, r24
    3dfa:	99 1f       	adc	r25, r25
    3dfc:	fc 01       	movw	r30, r24
    3dfe:	ed 51       	subi	r30, 0x1D	; 29
    3e00:	fe 4f       	sbci	r31, 0xFE	; 254
    3e02:	20 81       	ld	r18, Z
    3e04:	89 81       	ldd	r24, Y+1	; 0x01
    3e06:	88 2f       	mov	r24, r24
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	88 0f       	add	r24, r24
    3e0c:	99 1f       	adc	r25, r25
    3e0e:	fc 01       	movw	r30, r24
    3e10:	ec 51       	subi	r30, 0x1C	; 28
    3e12:	fe 4f       	sbci	r31, 0xFE	; 254
    3e14:	90 81       	ld	r25, Z
    3e16:	82 2f       	mov	r24, r18
    3e18:	69 2f       	mov	r22, r25
    3e1a:	40 e0       	ldi	r20, 0x00	; 0
    3e1c:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3e20:	8a 83       	std	Y+2, r24	; 0x02

				if(Local_enuErrorState != ES_OK  )	break;
    3e22:	8a 81       	ldd	r24, Y+2	; 0x02
    3e24:	88 23       	and	r24, r24
    3e26:	59 f4       	brne	.+22     	; 0x3e3e <Keypad_Sleep+0xd6>
			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	8f 5f       	subi	r24, 0xFF	; 255
    3e2c:	89 83       	std	Y+1, r24	; 0x01
    3e2e:	90 91 d2 01 	lds	r25, 0x01D2
    3e32:	89 81       	ldd	r24, Y+1	; 0x01
    3e34:	89 17       	cp	r24, r25
    3e36:	e8 f2       	brcs	.-70     	; 0x3df2 <Keypad_Sleep+0x8a>
    3e38:	02 c0       	rjmp	.+4      	; 0x3e3e <Keypad_Sleep+0xd6>

				if(Local_enuErrorState != ES_OK  )	break;
			}
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3e3a:	82 e0       	ldi	r24, 0x02	; 2
    3e3c:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;//DONE
    3e3e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	cf 91       	pop	r28
    3e46:	df 91       	pop	r29
    3e48:	08 95       	ret

00003e4a <Keypad_Awake>:

ES_t Keypad_Awake(void)
{
    3e4a:	df 93       	push	r29
    3e4c:	cf 93       	push	r28
    3e4e:	00 d0       	rcall	.+0      	; 0x3e50 <Keypad_Awake+0x6>
    3e50:	cd b7       	in	r28, 0x3d	; 61
    3e52:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter=0 ;
    3e58:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    3e5a:	90 91 d1 01 	lds	r25, 0x01D1
    3e5e:	80 91 d0 01 	lds	r24, 0x01D0
    3e62:	89 17       	cp	r24, r25
    3e64:	08 f4       	brcc	.+2      	; 0x3e68 <Keypad_Awake+0x1e>
    3e66:	66 c0       	rjmp	.+204    	; 0x3f34 <Keypad_Awake+0xea>
    3e68:	90 91 d2 01 	lds	r25, 0x01D2
    3e6c:	80 91 d0 01 	lds	r24, 0x01D0
    3e70:	89 17       	cp	r24, r25
    3e72:	08 f4       	brcc	.+2      	; 0x3e76 <Keypad_Awake+0x2c>
    3e74:	5f c0       	rjmp	.+190    	; 0x3f34 <Keypad_Awake+0xea>
    3e76:	30 c0       	rjmp	.+96     	; 0x3ed8 <Keypad_Awake+0x8e>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState );
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	28 2f       	mov	r18, r24
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	c9 01       	movw	r24, r18
    3e80:	88 0f       	add	r24, r24
    3e82:	99 1f       	adc	r25, r25
    3e84:	82 0f       	add	r24, r18
    3e86:	93 1f       	adc	r25, r19
    3e88:	fc 01       	movw	r30, r24
    3e8a:	e5 51       	subi	r30, 0x15	; 21
    3e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e8e:	50 81       	ld	r21, Z
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	28 2f       	mov	r18, r24
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	c9 01       	movw	r24, r18
    3e98:	88 0f       	add	r24, r24
    3e9a:	99 1f       	adc	r25, r25
    3e9c:	82 0f       	add	r24, r18
    3e9e:	93 1f       	adc	r25, r19
    3ea0:	fc 01       	movw	r30, r24
    3ea2:	e4 51       	subi	r30, 0x14	; 20
    3ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ea6:	40 81       	ld	r20, Z
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	28 2f       	mov	r18, r24
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	c9 01       	movw	r24, r18
    3eb0:	88 0f       	add	r24, r24
    3eb2:	99 1f       	adc	r25, r25
    3eb4:	82 0f       	add	r24, r18
    3eb6:	93 1f       	adc	r25, r19
    3eb8:	fc 01       	movw	r30, r24
    3eba:	e3 51       	subi	r30, 0x13	; 19
    3ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebe:	90 81       	ld	r25, Z
    3ec0:	85 2f       	mov	r24, r21
    3ec2:	64 2f       	mov	r22, r20
    3ec4:	49 2f       	mov	r20, r25
    3ec6:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3eca:	8a 83       	std	Y+2, r24	; 0x02

			if(Local_enuErrorState != ES_OK  )	break;
    3ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ece:	88 23       	and	r24, r24
    3ed0:	41 f4       	brne	.+16     	; 0x3ee2 <Keypad_Awake+0x98>
	ES_t Local_enuErrorState = ES_NOK ;
	u8 Local_u8Iter=0 ;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    3ed2:	89 81       	ldd	r24, Y+1	; 0x01
    3ed4:	8f 5f       	subi	r24, 0xFF	; 255
    3ed6:	89 83       	std	Y+1, r24	; 0x01
    3ed8:	90 91 d1 01 	lds	r25, 0x01D1
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	89 17       	cp	r24, r25
    3ee0:	58 f2       	brcs	.-106    	; 0x3e78 <Keypad_Awake+0x2e>
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState );

			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
    3ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee4:	88 23       	and	r24, r24
    3ee6:	41 f5       	brne	.+80     	; 0x3f38 <Keypad_Awake+0xee>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3ee8:	19 82       	std	Y+1, r1	; 0x01
    3eea:	1e c0       	rjmp	.+60     	; 0x3f28 <Keypad_Awake+0xde>
			{
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8HIGH );
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	88 2f       	mov	r24, r24
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	88 0f       	add	r24, r24
    3ef4:	99 1f       	adc	r25, r25
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	ed 51       	subi	r30, 0x1D	; 29
    3efa:	fe 4f       	sbci	r31, 0xFE	; 254
    3efc:	20 81       	ld	r18, Z
    3efe:	89 81       	ldd	r24, Y+1	; 0x01
    3f00:	88 2f       	mov	r24, r24
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	88 0f       	add	r24, r24
    3f06:	99 1f       	adc	r25, r25
    3f08:	fc 01       	movw	r30, r24
    3f0a:	ec 51       	subi	r30, 0x1C	; 28
    3f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f0e:	90 81       	ld	r25, Z
    3f10:	82 2f       	mov	r24, r18
    3f12:	69 2f       	mov	r22, r25
    3f14:	41 e0       	ldi	r20, 0x01	; 1
    3f16:	0e 94 31 0b 	call	0x1662	; 0x1662 <DIO_enuSetPinValue>
    3f1a:	8a 83       	std	Y+2, r24	; 0x02

				if(Local_enuErrorState != ES_OK  )
    3f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1e:	88 23       	and	r24, r24
    3f20:	59 f4       	brne	.+22     	; 0x3f38 <Keypad_Awake+0xee>
			if(Local_enuErrorState != ES_OK  )	break;
		}

		if( Local_enuErrorState == ES_OK )
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    3f22:	89 81       	ldd	r24, Y+1	; 0x01
    3f24:	8f 5f       	subi	r24, 0xFF	; 255
    3f26:	89 83       	std	Y+1, r24	; 0x01
    3f28:	90 91 d2 01 	lds	r25, 0x01D2
    3f2c:	89 81       	ldd	r24, Y+1	; 0x01
    3f2e:	89 17       	cp	r24, r25
    3f30:	e8 f2       	brcs	.-70     	; 0x3eec <Keypad_Awake+0xa2>
    3f32:	02 c0       	rjmp	.+4      	; 0x3f38 <Keypad_Awake+0xee>
			}

		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    3f34:	82 e0       	ldi	r24, 0x02	; 2
    3f36:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;//DONE
    3f38:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f3a:	0f 90       	pop	r0
    3f3c:	0f 90       	pop	r0
    3f3e:	cf 91       	pop	r28
    3f40:	df 91       	pop	r29
    3f42:	08 95       	ret

00003f44 <main>:
u8 Global_u8SetTemp = 27 ;


int
main(void)
{
    3f44:	df 93       	push	r29
    3f46:	cf 93       	push	r28
    3f48:	00 d0       	rcall	.+0      	; 0x3f4a <main+0x6>
    3f4a:	00 d0       	rcall	.+0      	; 0x3f4c <main+0x8>
    3f4c:	00 d0       	rcall	.+0      	; 0x3f4e <main+0xa>
    3f4e:	cd b7       	in	r28, 0x3d	; 61
    3f50:	de b7       	in	r29, 0x3e	; 62
//	ES_t  Local_enuErrorState ;
//	u8 Local_u8Key = KEYPAD_NOT_PRESSED ;
	u16 Local_u16ActTemp , Local_u8DisplTemp = 25 ;
    3f52:	89 e1       	ldi	r24, 0x19	; 25
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	9c 83       	std	Y+4, r25	; 0x04
    3f58:	8b 83       	std	Y+3, r24	; 0x03
	OnOff_t Local_enuDisplComp = OFF , Local_enuSetDisplay = OFF;
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	8a 83       	std	Y+2, r24	; 0x02
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	89 83       	std	Y+1, r24	; 0x01

	if( HVAC_enuInit() == ES_OK )
    3f62:	0e 94 34 20 	call	0x4068	; 0x4068 <HVAC_enuInit>
    3f66:	88 23       	and	r24, r24
    3f68:	09 f0       	breq	.+2      	; 0x3f6c <main+0x28>
    3f6a:	73 c0       	rjmp	.+230    	; 0x4052 <main+0x10e>
	{
		if( HVAC_enuSetup() == ES_OK )
    3f6c:	0e 94 9c 21 	call	0x4338	; 0x4338 <HVAC_enuSetup>
    3f70:	88 23       	and	r24, r24
    3f72:	09 f0       	breq	.+2      	; 0x3f76 <main+0x32>
    3f74:	6e c0       	rjmp	.+220    	; 0x4052 <main+0x10e>
		{
			for(;;)
			{
				if( Global_boolPower == TRUE)
    3f76:	80 91 f9 01 	lds	r24, 0x01F9
    3f7a:	88 23       	and	r24, r24
    3f7c:	09 f0       	breq	.+2      	; 0x3f80 <main+0x3c>
    3f7e:	61 c0       	rjmp	.+194    	; 0x4042 <main+0xfe>
				{
					if( Initial_Start == TRUE)
    3f80:	80 91 08 02 	lds	r24, 0x0208
    3f84:	88 23       	and	r24, r24
    3f86:	29 f4       	brne	.+10     	; 0x3f92 <main+0x4e>
					{
						HVAC_Awake(&Local_u16ActTemp);
    3f88:	ce 01       	movw	r24, r28
    3f8a:	05 96       	adiw	r24, 0x05	; 5
    3f8c:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <HVAC_Awake>
						Local_enuSetDisplay = ON;
    3f90:	19 82       	std	Y+1, r1	; 0x01
					}
					if( Global_boolSetMode == TRUE)
    3f92:	80 91 fb 01 	lds	r24, 0x01FB
    3f96:	88 23       	and	r24, r24
    3f98:	19 f4       	brne	.+6      	; 0x3fa0 <main+0x5c>
					{
						HVAC_SetTemp();
    3f9a:	0e 94 c5 23 	call	0x478a	; 0x478a <HVAC_SetTemp>
						Local_enuSetDisplay = ON;
    3f9e:	19 82       	std	Y+1, r1	; 0x01
					}

					HVAC_CheckTemperatureStatus( Local_u16ActTemp );
    3fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa4:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <HVAC_CheckTemperatureStatus>
					HVAC_AdjustCompressorStatus();
    3fa8:	0e 94 40 27 	call	0x4e80	; 0x4e80 <HVAC_AdjustCompressorStatus>

					if( Local_u16ActTemp != Local_u8DisplTemp || Local_enuDisplComp != CompressorStatus || Local_enuSetDisplay == ON )
    3fac:	2d 81       	ldd	r18, Y+5	; 0x05
    3fae:	3e 81       	ldd	r19, Y+6	; 0x06
    3fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb4:	28 17       	cp	r18, r24
    3fb6:	39 07       	cpc	r19, r25
    3fb8:	41 f4       	brne	.+16     	; 0x3fca <main+0x86>
    3fba:	90 91 f7 01 	lds	r25, 0x01F7
    3fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc0:	89 17       	cp	r24, r25
    3fc2:	19 f4       	brne	.+6      	; 0x3fca <main+0x86>
    3fc4:	89 81       	ldd	r24, Y+1	; 0x01
    3fc6:	88 23       	and	r24, r24
    3fc8:	a9 f5       	brne	.+106    	; 0x4034 <main+0xf0>
					{
						DISPLAY_STATUS_MESSAGE( Local_u16ActTemp ) ;
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_enuWriteCommand>
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	63 e0       	ldi	r22, 0x03	; 3
    3fd4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_enuGoToPosition>
    3fd8:	80 e6       	ldi	r24, 0x60	; 96
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_enuWriteString>
    3fe0:	82 e0       	ldi	r24, 0x02	; 2
    3fe2:	63 e0       	ldi	r22, 0x03	; 3
    3fe4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_enuGoToPosition>
    3fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fea:	9e 81       	ldd	r25, Y+6	; 0x06
    3fec:	cc 01       	movw	r24, r24
    3fee:	a0 e0       	ldi	r26, 0x00	; 0
    3ff0:	b0 e0       	ldi	r27, 0x00	; 0
    3ff2:	bc 01       	movw	r22, r24
    3ff4:	cd 01       	movw	r24, r26
    3ff6:	0e 94 88 18 	call	0x3110	; 0x3110 <LCD_enuWriteIntegerNum>
    3ffa:	82 e0       	ldi	r24, 0x02	; 2
    3ffc:	6c e0       	ldi	r22, 0x0C	; 12
    3ffe:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_enuGoToPosition>
    4002:	80 91 f7 01 	lds	r24, 0x01F7
    4006:	88 23       	and	r24, r24
    4008:	29 f4       	brne	.+10     	; 0x4014 <main+0xd0>
    400a:	8c e6       	ldi	r24, 0x6C	; 108
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_enuWriteString>
    4012:	04 c0       	rjmp	.+8      	; 0x401c <main+0xd8>
    4014:	8f e6       	ldi	r24, 0x6F	; 111
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_enuWriteString>
						Local_u8DisplTemp = Local_u16ActTemp;
    401c:	8d 81       	ldd	r24, Y+5	; 0x05
    401e:	9e 81       	ldd	r25, Y+6	; 0x06
    4020:	9c 83       	std	Y+4, r25	; 0x04
    4022:	8b 83       	std	Y+3, r24	; 0x03
						Local_enuDisplComp = CompressorStatus;
    4024:	80 91 f7 01 	lds	r24, 0x01F7
    4028:	8a 83       	std	Y+2, r24	; 0x02
						if ( Local_enuSetDisplay == ON ) Local_enuSetDisplay = OFF;
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	88 23       	and	r24, r24
    402e:	11 f4       	brne	.+4      	; 0x4034 <main+0xf0>
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	89 83       	std	Y+1, r24	; 0x01
					}
					HVAC_StandByMode();
    4034:	0e 94 2a 23 	call	0x4654	; 0x4654 <HVAC_StandByMode>
					HVAC_UpdateReading(&Local_u16ActTemp);
    4038:	ce 01       	movw	r24, r28
    403a:	05 96       	adiw	r24, 0x05	; 5
    403c:	0e 94 67 27 	call	0x4ece	; 0x4ece <HVAC_UpdateReading>
    4040:	9a cf       	rjmp	.-204    	; 0x3f76 <main+0x32>
				}
				else if ( Sleep_Mode == TRUE )
    4042:	80 91 fc 01 	lds	r24, 0x01FC
    4046:	88 23       	and	r24, r24
    4048:	09 f0       	breq	.+2      	; 0x404c <main+0x108>
    404a:	95 cf       	rjmp	.-214    	; 0x3f76 <main+0x32>
				{
					HVAC_Sleep();
    404c:	0e 94 84 22 	call	0x4508	; 0x4508 <HVAC_Sleep>
    4050:	92 cf       	rjmp	.-220    	; 0x3f76 <main+0x32>
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
		}
	}

}
    4056:	26 96       	adiw	r28, 0x06	; 6
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61
    4062:	cf 91       	pop	r28
    4064:	df 91       	pop	r29
    4066:	08 95       	ret

00004068 <HVAC_enuInit>:

ES_t HVAC_enuInit(void)
{
    4068:	df 93       	push	r29
    406a:	cf 93       	push	r28
    406c:	cd b7       	in	r28, 0x3d	; 61
    406e:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
    4070:	0e 94 3a 0a 	call	0x1474	; 0x1474 <DIO_enuInit>
	EXTI_enuInit();
    4074:	0e 94 86 06 	call	0xd0c	; 0xd0c <EXTI_enuInit>
	EXTI_enuEnableInterrupt(INT0);
    4078:	8d e3       	ldi	r24, 0x3D	; 61
    407a:	0e 94 3b 08 	call	0x1076	; 0x1076 <EXTI_enuEnableInterrupt>
	ADC_enuInit();
    407e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <ADC_enuInit>
	GIE_enuEnable();
    4082:	0e 94 74 06 	call	0xce8	; 0xce8 <GIE_enuEnable>

	LCD_enuInit();
    4086:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <LCD_enuInit>
	Keypad_enuInit();
    408a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <Keypad_enuInit>
	Switch_enuInit();
    408e:	0e 94 0d 10 	call	0x201a	; 0x201a <Switch_enuInit>
	LD_enuInit();
    4092:	0e 94 4e 13 	call	0x269c	; 0x269c <LD_enuInit>
	LM35_enuInit();
    4096:	0e 94 08 13 	call	0x2610	; 0x2610 <LM35_enuInit>

	return ES_OK;
    409a:	80 e0       	ldi	r24, 0x00	; 0
}
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <ADC_vidISR>:

void ADC_vidISR(void)
{
    40a2:	df 93       	push	r29
    40a4:	cf 93       	push	r28
    40a6:	cd b7       	in	r28, 0x3d	; 61
    40a8:	de b7       	in	r29, 0x3e	; 62
	if( ADC_enuRead( &Global_u16TempRead ) == ES_OK )
    40aa:	86 e0       	ldi	r24, 0x06	; 6
    40ac:	92 e0       	ldi	r25, 0x02	; 2
    40ae:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <ADC_enuRead>
    40b2:	88 23       	and	r24, r24
    40b4:	11 f4       	brne	.+4      	; 0x40ba <ADC_vidISR+0x18>
		Global_boolRead = TRUE;
    40b6:	10 92 fa 01 	sts	0x01FA, r1
}
    40ba:	cf 91       	pop	r28
    40bc:	df 91       	pop	r29
    40be:	08 95       	ret

000040c0 <EXTI_vidISR_INT0>:

void EXTI_vidISR_INT0(void)
{
    40c0:	df 93       	push	r29
    40c2:	cf 93       	push	r28
    40c4:	cd b7       	in	r28, 0x3d	; 61
    40c6:	de b7       	in	r29, 0x3e	; 62
    40c8:	6d 97       	sbiw	r28, 0x1d	; 29
    40ca:	0f b6       	in	r0, 0x3f	; 63
    40cc:	f8 94       	cli
    40ce:	de bf       	out	0x3e, r29	; 62
    40d0:	0f be       	out	0x3f, r0	; 63
    40d2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyValue = SWITCH_UNPRESSED;
    40d4:	8f e0       	ldi	r24, 0x0F	; 15
    40d6:	8d 8f       	std	Y+29, r24	; 0x1d

	if( Switch_enuGetPressed( POWER_SWITCH , &Local_u8KeyValue) == ES_OK)
    40d8:	9e 01       	movw	r18, r28
    40da:	23 5e       	subi	r18, 0xE3	; 227
    40dc:	3f 4f       	sbci	r19, 0xFF	; 255
    40de:	8b ec       	ldi	r24, 0xCB	; 203
    40e0:	b9 01       	movw	r22, r18
    40e2:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <Switch_enuGetPressed>
    40e6:	88 23       	and	r24, r24
    40e8:	09 f0       	breq	.+2      	; 0x40ec <EXTI_vidISR_INT0+0x2c>
    40ea:	1d c1       	rjmp	.+570    	; 0x4326 <EXTI_vidISR_INT0+0x266>
	{
		if( ( Global_boolPower == FALSE) && (Local_u8KeyValue == POWER_SW_PRESSED ) )
    40ec:	80 91 f9 01 	lds	r24, 0x01F9
    40f0:	81 30       	cpi	r24, 0x01	; 1
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <EXTI_vidISR_INT0+0x36>
    40f4:	89 c0       	rjmp	.+274    	; 0x4208 <EXTI_vidISR_INT0+0x148>
    40f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40f8:	81 30       	cpi	r24, 0x01	; 1
    40fa:	09 f0       	breq	.+2      	; 0x40fe <EXTI_vidISR_INT0+0x3e>
    40fc:	85 c0       	rjmp	.+266    	; 0x4208 <EXTI_vidISR_INT0+0x148>
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	a0 e2       	ldi	r26, 0x20	; 32
    4104:	b1 e4       	ldi	r27, 0x41	; 65
    4106:	89 8f       	std	Y+25, r24	; 0x19
    4108:	9a 8f       	std	Y+26, r25	; 0x1a
    410a:	ab 8f       	std	Y+27, r26	; 0x1b
    410c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    410e:	69 8d       	ldd	r22, Y+25	; 0x19
    4110:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4114:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	4a e7       	ldi	r20, 0x7A	; 122
    411c:	55 e4       	ldi	r21, 0x45	; 69
    411e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	8d 8b       	std	Y+21, r24	; 0x15
    4128:	9e 8b       	std	Y+22, r25	; 0x16
    412a:	af 8b       	std	Y+23, r26	; 0x17
    412c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    412e:	6d 89       	ldd	r22, Y+21	; 0x15
    4130:	7e 89       	ldd	r23, Y+22	; 0x16
    4132:	8f 89       	ldd	r24, Y+23	; 0x17
    4134:	98 8d       	ldd	r25, Y+24	; 0x18
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	40 e8       	ldi	r20, 0x80	; 128
    413c:	5f e3       	ldi	r21, 0x3F	; 63
    413e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4142:	88 23       	and	r24, r24
    4144:	2c f4       	brge	.+10     	; 0x4150 <EXTI_vidISR_INT0+0x90>
		__ticks = 1;
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	9c 8b       	std	Y+20, r25	; 0x14
    414c:	8b 8b       	std	Y+19, r24	; 0x13
    414e:	3f c0       	rjmp	.+126    	; 0x41ce <EXTI_vidISR_INT0+0x10e>
	else if (__tmp > 65535)
    4150:	6d 89       	ldd	r22, Y+21	; 0x15
    4152:	7e 89       	ldd	r23, Y+22	; 0x16
    4154:	8f 89       	ldd	r24, Y+23	; 0x17
    4156:	98 8d       	ldd	r25, Y+24	; 0x18
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	3f ef       	ldi	r19, 0xFF	; 255
    415c:	4f e7       	ldi	r20, 0x7F	; 127
    415e:	57 e4       	ldi	r21, 0x47	; 71
    4160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4164:	18 16       	cp	r1, r24
    4166:	4c f5       	brge	.+82     	; 0x41ba <EXTI_vidISR_INT0+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4168:	69 8d       	ldd	r22, Y+25	; 0x19
    416a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    416c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    416e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	40 e2       	ldi	r20, 0x20	; 32
    4176:	51 e4       	ldi	r21, 0x41	; 65
    4178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	bc 01       	movw	r22, r24
    4182:	cd 01       	movw	r24, r26
    4184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	9c 8b       	std	Y+20, r25	; 0x14
    418e:	8b 8b       	std	Y+19, r24	; 0x13
    4190:	0f c0       	rjmp	.+30     	; 0x41b0 <EXTI_vidISR_INT0+0xf0>
    4192:	80 e9       	ldi	r24, 0x90	; 144
    4194:	91 e0       	ldi	r25, 0x01	; 1
    4196:	9a 8b       	std	Y+18, r25	; 0x12
    4198:	89 8b       	std	Y+17, r24	; 0x11
    419a:	89 89       	ldd	r24, Y+17	; 0x11
    419c:	9a 89       	ldd	r25, Y+18	; 0x12
    419e:	01 97       	sbiw	r24, 0x01	; 1
    41a0:	f1 f7       	brne	.-4      	; 0x419e <EXTI_vidISR_INT0+0xde>
    41a2:	9a 8b       	std	Y+18, r25	; 0x12
    41a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a6:	8b 89       	ldd	r24, Y+19	; 0x13
    41a8:	9c 89       	ldd	r25, Y+20	; 0x14
    41aa:	01 97       	sbiw	r24, 0x01	; 1
    41ac:	9c 8b       	std	Y+20, r25	; 0x14
    41ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b0:	8b 89       	ldd	r24, Y+19	; 0x13
    41b2:	9c 89       	ldd	r25, Y+20	; 0x14
    41b4:	00 97       	sbiw	r24, 0x00	; 0
    41b6:	69 f7       	brne	.-38     	; 0x4192 <EXTI_vidISR_INT0+0xd2>
    41b8:	14 c0       	rjmp	.+40     	; 0x41e2 <EXTI_vidISR_INT0+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41ba:	6d 89       	ldd	r22, Y+21	; 0x15
    41bc:	7e 89       	ldd	r23, Y+22	; 0x16
    41be:	8f 89       	ldd	r24, Y+23	; 0x17
    41c0:	98 8d       	ldd	r25, Y+24	; 0x18
    41c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	9c 8b       	std	Y+20, r25	; 0x14
    41cc:	8b 8b       	std	Y+19, r24	; 0x13
    41ce:	8b 89       	ldd	r24, Y+19	; 0x13
    41d0:	9c 89       	ldd	r25, Y+20	; 0x14
    41d2:	98 8b       	std	Y+16, r25	; 0x10
    41d4:	8f 87       	std	Y+15, r24	; 0x0f
    41d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41d8:	98 89       	ldd	r25, Y+16	; 0x10
    41da:	01 97       	sbiw	r24, 0x01	; 1
    41dc:	f1 f7       	brne	.-4      	; 0x41da <EXTI_vidISR_INT0+0x11a>
    41de:	98 8b       	std	Y+16, r25	; 0x10
    41e0:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms( SWITCH_BOUNCE_DELAY );
			if( Switch_enuGetPressed( POWER_SWITCH , &Local_u8KeyValue) == ES_OK )
    41e2:	9e 01       	movw	r18, r28
    41e4:	23 5e       	subi	r18, 0xE3	; 227
    41e6:	3f 4f       	sbci	r19, 0xFF	; 255
    41e8:	8b ec       	ldi	r24, 0xCB	; 203
    41ea:	b9 01       	movw	r22, r18
    41ec:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <Switch_enuGetPressed>
    41f0:	88 23       	and	r24, r24
    41f2:	09 f0       	breq	.+2      	; 0x41f6 <EXTI_vidISR_INT0+0x136>
    41f4:	98 c0       	rjmp	.+304    	; 0x4326 <EXTI_vidISR_INT0+0x266>
			{
				if( Local_u8KeyValue ==  POWER_SW_PRESSED )
    41f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41f8:	81 30       	cpi	r24, 0x01	; 1
    41fa:	09 f0       	breq	.+2      	; 0x41fe <EXTI_vidISR_INT0+0x13e>
    41fc:	94 c0       	rjmp	.+296    	; 0x4326 <EXTI_vidISR_INT0+0x266>
				{
					Global_boolPower = TRUE;
    41fe:	10 92 f9 01 	sts	0x01F9, r1
					Initial_Start = TRUE;
    4202:	10 92 08 02 	sts	0x0208, r1
    4206:	8f c0       	rjmp	.+286    	; 0x4326 <EXTI_vidISR_INT0+0x266>
				}
			}
		}
		else if( (Global_boolPower == TRUE) && (Local_u8KeyValue ==  POWER_SW_PRESSED ) )
    4208:	80 91 f9 01 	lds	r24, 0x01F9
    420c:	88 23       	and	r24, r24
    420e:	09 f0       	breq	.+2      	; 0x4212 <EXTI_vidISR_INT0+0x152>
    4210:	8a c0       	rjmp	.+276    	; 0x4326 <EXTI_vidISR_INT0+0x266>
    4212:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4214:	81 30       	cpi	r24, 0x01	; 1
    4216:	09 f0       	breq	.+2      	; 0x421a <EXTI_vidISR_INT0+0x15a>
    4218:	86 c0       	rjmp	.+268    	; 0x4326 <EXTI_vidISR_INT0+0x266>
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	aa ef       	ldi	r26, 0xFA	; 250
    4220:	b3 e4       	ldi	r27, 0x43	; 67
    4222:	8b 87       	std	Y+11, r24	; 0x0b
    4224:	9c 87       	std	Y+12, r25	; 0x0c
    4226:	ad 87       	std	Y+13, r26	; 0x0d
    4228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    422a:	6b 85       	ldd	r22, Y+11	; 0x0b
    422c:	7c 85       	ldd	r23, Y+12	; 0x0c
    422e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4230:	9e 85       	ldd	r25, Y+14	; 0x0e
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	4a e7       	ldi	r20, 0x7A	; 122
    4238:	55 e4       	ldi	r21, 0x45	; 69
    423a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	8f 83       	std	Y+7, r24	; 0x07
    4244:	98 87       	std	Y+8, r25	; 0x08
    4246:	a9 87       	std	Y+9, r26	; 0x09
    4248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    424a:	6f 81       	ldd	r22, Y+7	; 0x07
    424c:	78 85       	ldd	r23, Y+8	; 0x08
    424e:	89 85       	ldd	r24, Y+9	; 0x09
    4250:	9a 85       	ldd	r25, Y+10	; 0x0a
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	40 e8       	ldi	r20, 0x80	; 128
    4258:	5f e3       	ldi	r21, 0x3F	; 63
    425a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    425e:	88 23       	and	r24, r24
    4260:	2c f4       	brge	.+10     	; 0x426c <EXTI_vidISR_INT0+0x1ac>
		__ticks = 1;
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	9e 83       	std	Y+6, r25	; 0x06
    4268:	8d 83       	std	Y+5, r24	; 0x05
    426a:	3f c0       	rjmp	.+126    	; 0x42ea <EXTI_vidISR_INT0+0x22a>
	else if (__tmp > 65535)
    426c:	6f 81       	ldd	r22, Y+7	; 0x07
    426e:	78 85       	ldd	r23, Y+8	; 0x08
    4270:	89 85       	ldd	r24, Y+9	; 0x09
    4272:	9a 85       	ldd	r25, Y+10	; 0x0a
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	3f ef       	ldi	r19, 0xFF	; 255
    4278:	4f e7       	ldi	r20, 0x7F	; 127
    427a:	57 e4       	ldi	r21, 0x47	; 71
    427c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4280:	18 16       	cp	r1, r24
    4282:	4c f5       	brge	.+82     	; 0x42d6 <EXTI_vidISR_INT0+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4284:	6b 85       	ldd	r22, Y+11	; 0x0b
    4286:	7c 85       	ldd	r23, Y+12	; 0x0c
    4288:	8d 85       	ldd	r24, Y+13	; 0x0d
    428a:	9e 85       	ldd	r25, Y+14	; 0x0e
    428c:	20 e0       	ldi	r18, 0x00	; 0
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	40 e2       	ldi	r20, 0x20	; 32
    4292:	51 e4       	ldi	r21, 0x41	; 65
    4294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4298:	dc 01       	movw	r26, r24
    429a:	cb 01       	movw	r24, r22
    429c:	bc 01       	movw	r22, r24
    429e:	cd 01       	movw	r24, r26
    42a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a4:	dc 01       	movw	r26, r24
    42a6:	cb 01       	movw	r24, r22
    42a8:	9e 83       	std	Y+6, r25	; 0x06
    42aa:	8d 83       	std	Y+5, r24	; 0x05
    42ac:	0f c0       	rjmp	.+30     	; 0x42cc <EXTI_vidISR_INT0+0x20c>
    42ae:	80 e9       	ldi	r24, 0x90	; 144
    42b0:	91 e0       	ldi	r25, 0x01	; 1
    42b2:	9c 83       	std	Y+4, r25	; 0x04
    42b4:	8b 83       	std	Y+3, r24	; 0x03
    42b6:	8b 81       	ldd	r24, Y+3	; 0x03
    42b8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	f1 f7       	brne	.-4      	; 0x42ba <EXTI_vidISR_INT0+0x1fa>
    42be:	9c 83       	std	Y+4, r25	; 0x04
    42c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42c2:	8d 81       	ldd	r24, Y+5	; 0x05
    42c4:	9e 81       	ldd	r25, Y+6	; 0x06
    42c6:	01 97       	sbiw	r24, 0x01	; 1
    42c8:	9e 83       	std	Y+6, r25	; 0x06
    42ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42cc:	8d 81       	ldd	r24, Y+5	; 0x05
    42ce:	9e 81       	ldd	r25, Y+6	; 0x06
    42d0:	00 97       	sbiw	r24, 0x00	; 0
    42d2:	69 f7       	brne	.-38     	; 0x42ae <EXTI_vidISR_INT0+0x1ee>
    42d4:	14 c0       	rjmp	.+40     	; 0x42fe <EXTI_vidISR_INT0+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42d6:	6f 81       	ldd	r22, Y+7	; 0x07
    42d8:	78 85       	ldd	r23, Y+8	; 0x08
    42da:	89 85       	ldd	r24, Y+9	; 0x09
    42dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    42de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	9e 83       	std	Y+6, r25	; 0x06
    42e8:	8d 83       	std	Y+5, r24	; 0x05
    42ea:	8d 81       	ldd	r24, Y+5	; 0x05
    42ec:	9e 81       	ldd	r25, Y+6	; 0x06
    42ee:	9a 83       	std	Y+2, r25	; 0x02
    42f0:	89 83       	std	Y+1, r24	; 0x01
    42f2:	89 81       	ldd	r24, Y+1	; 0x01
    42f4:	9a 81       	ldd	r25, Y+2	; 0x02
    42f6:	01 97       	sbiw	r24, 0x01	; 1
    42f8:	f1 f7       	brne	.-4      	; 0x42f6 <EXTI_vidISR_INT0+0x236>
    42fa:	9a 83       	std	Y+2, r25	; 0x02
    42fc:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms( POWER_OFF_DELAY );
			if( Switch_enuGetPressed( POWER_SWITCH , &Local_u8KeyValue) == ES_OK )
    42fe:	9e 01       	movw	r18, r28
    4300:	23 5e       	subi	r18, 0xE3	; 227
    4302:	3f 4f       	sbci	r19, 0xFF	; 255
    4304:	8b ec       	ldi	r24, 0xCB	; 203
    4306:	b9 01       	movw	r22, r18
    4308:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <Switch_enuGetPressed>
    430c:	88 23       	and	r24, r24
    430e:	59 f4       	brne	.+22     	; 0x4326 <EXTI_vidISR_INT0+0x266>
			{
				if( Local_u8KeyValue ==  POWER_SW_PRESSED )
    4310:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4312:	81 30       	cpi	r24, 0x01	; 1
    4314:	31 f4       	brne	.+12     	; 0x4322 <EXTI_vidISR_INT0+0x262>
				{
					Global_boolPower = FALSE ;
    4316:	81 e0       	ldi	r24, 0x01	; 1
    4318:	80 93 f9 01 	sts	0x01F9, r24
					Sleep_Mode = TRUE;
    431c:	10 92 fc 01 	sts	0x01FC, r1
    4320:	02 c0       	rjmp	.+4      	; 0x4326 <EXTI_vidISR_INT0+0x266>
				}
				else
				{
					Global_boolSetMode = TRUE ;
    4322:	10 92 fb 01 	sts	0x01FB, r1
				}
			}
		}
	}
}
    4326:	6d 96       	adiw	r28, 0x1d	; 29
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	cf 91       	pop	r28
    4334:	df 91       	pop	r29
    4336:	08 95       	ret

00004338 <HVAC_enuSetup>:



ES_t HVAC_enuSetup(void)
{
    4338:	df 93       	push	r29
    433a:	cf 93       	push	r28
    433c:	cd b7       	in	r28, 0x3d	; 61
    433e:	de b7       	in	r29, 0x3e	; 62
    4340:	29 97       	sbiw	r28, 0x09	; 9
    4342:	0f b6       	in	r0, 0x3f	; 63
    4344:	f8 94       	cli
    4346:	de bf       	out	0x3e, r29	; 62
    4348:	0f be       	out	0x3f, r0	; 63
    434a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[7];
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter = 0 ;
    4350:	19 82       	std	Y+1, r1	; 0x01

	Local_AenuErrorState[0] = ADC_enuDisable();
    4352:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <ADC_enuDisable>
    4356:	8b 83       	std	Y+3, r24	; 0x03
	Local_AenuErrorState[1] = ADC_enuDisableAutoTrigger();
    4358:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <ADC_enuDisableAutoTrigger>
    435c:	8c 83       	std	Y+4, r24	; 0x04
	Local_AenuErrorState[2] = ADC_enuCallBack ( ADC_vidISR );
    435e:	81 e5       	ldi	r24, 0x51	; 81
    4360:	90 e2       	ldi	r25, 0x20	; 32
    4362:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <ADC_enuCallBack>
    4366:	8d 83       	std	Y+5, r24	; 0x05
	Local_AenuErrorState[3] = ADC_enuEnableInterrupt();
    4368:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <ADC_enuEnableInterrupt>
    436c:	8e 83       	std	Y+6, r24	; 0x06
	Local_AenuErrorState[4] = ADC_enuEnable();
    436e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <ADC_enuEnable>
    4372:	8f 83       	std	Y+7, r24	; 0x07
	Local_AenuErrorState[5] = EXTI_enuCallBack( EXTI_vidISR_INT0 , INT0);
    4374:	80 e6       	ldi	r24, 0x60	; 96
    4376:	90 e2       	ldi	r25, 0x20	; 32
    4378:	6d e3       	ldi	r22, 0x3D	; 61
    437a:	0e 94 10 0a 	call	0x1420	; 0x1420 <EXTI_enuCallBack>
    437e:	88 87       	std	Y+8, r24	; 0x08
	Local_AenuErrorState[6] = LCD_enuWriteCommand(0x0C);
    4380:	8c e0       	ldi	r24, 0x0C	; 12
    4382:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_enuWriteCommand>
    4386:	89 87       	std	Y+9, r24	; 0x09
    4388:	03 c0       	rjmp	.+6      	; 0x4390 <HVAC_enuSetup+0x58>

	for(; ( Local_u8Iter < 7 ) && (Local_AenuErrorState[Local_u8Iter] == ES_OK) ; Local_u8Iter++);
    438a:	89 81       	ldd	r24, Y+1	; 0x01
    438c:	8f 5f       	subi	r24, 0xFF	; 255
    438e:	89 83       	std	Y+1, r24	; 0x01
    4390:	89 81       	ldd	r24, Y+1	; 0x01
    4392:	87 30       	cpi	r24, 0x07	; 7
    4394:	58 f4       	brcc	.+22     	; 0x43ac <HVAC_enuSetup+0x74>
    4396:	89 81       	ldd	r24, Y+1	; 0x01
    4398:	28 2f       	mov	r18, r24
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	ce 01       	movw	r24, r28
    439e:	03 96       	adiw	r24, 0x03	; 3
    43a0:	fc 01       	movw	r30, r24
    43a2:	e2 0f       	add	r30, r18
    43a4:	f3 1f       	adc	r31, r19
    43a6:	80 81       	ld	r24, Z
    43a8:	88 23       	and	r24, r24
    43aa:	79 f3       	breq	.-34     	; 0x438a <HVAC_enuSetup+0x52>
	if( Local_u8Iter == 7 )
    43ac:	89 81       	ldd	r24, Y+1	; 0x01
    43ae:	87 30       	cpi	r24, 0x07	; 7
    43b0:	09 f4       	brne	.+2      	; 0x43b4 <HVAC_enuSetup+0x7c>
		Local_enuErrorState = ES_OK ;
    43b2:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    43b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    43b6:	29 96       	adiw	r28, 0x09	; 9
    43b8:	0f b6       	in	r0, 0x3f	; 63
    43ba:	f8 94       	cli
    43bc:	de bf       	out	0x3e, r29	; 62
    43be:	0f be       	out	0x3f, r0	; 63
    43c0:	cd bf       	out	0x3d, r28	; 61
    43c2:	cf 91       	pop	r28
    43c4:	df 91       	pop	r29
    43c6:	08 95       	ret

000043c8 <HVAC_Awake>:

void HVAC_Awake(u16 *Copy_u16AvgTempValue)
{
    43c8:	df 93       	push	r29
    43ca:	cf 93       	push	r28
    43cc:	cd b7       	in	r28, 0x3d	; 61
    43ce:	de b7       	in	r29, 0x3e	; 62
    43d0:	60 97       	sbiw	r28, 0x10	; 16
    43d2:	0f b6       	in	r0, 0x3f	; 63
    43d4:	f8 94       	cli
    43d6:	de bf       	out	0x3e, r29	; 62
    43d8:	0f be       	out	0x3f, r0	; 63
    43da:	cd bf       	out	0x3d, r28	; 61
    43dc:	98 8b       	std	Y+16, r25	; 0x10
    43de:	8f 87       	std	Y+15, r24	; 0x0f
	ADC_enuEnable();
    43e0:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <ADC_enuEnable>
	DISPLAY_INIT_MESSAGE;
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_enuWriteCommand>
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	66 e0       	ldi	r22, 0x06	; 6
    43ee:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_enuGoToPosition>
    43f2:	83 e7       	ldi	r24, 0x73	; 115
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_enuWriteString>
    43fa:	8c e0       	ldi	r24, 0x0C	; 12
    43fc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_enuWriteCommand>
	HVAC_UpdateReading( Copy_u16AvgTempValue );
    4400:	8f 85       	ldd	r24, Y+15	; 0x0f
    4402:	98 89       	ldd	r25, Y+16	; 0x10
    4404:	0e 94 67 27 	call	0x4ece	; 0x4ece <HVAC_UpdateReading>
	CompressorStatus = ON ;
    4408:	10 92 f7 01 	sts	0x01F7, r1
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	aa ef       	ldi	r26, 0xFA	; 250
    4412:	b4 e4       	ldi	r27, 0x44	; 68
    4414:	8b 87       	std	Y+11, r24	; 0x0b
    4416:	9c 87       	std	Y+12, r25	; 0x0c
    4418:	ad 87       	std	Y+13, r26	; 0x0d
    441a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    441c:	6b 85       	ldd	r22, Y+11	; 0x0b
    441e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4420:	8d 85       	ldd	r24, Y+13	; 0x0d
    4422:	9e 85       	ldd	r25, Y+14	; 0x0e
    4424:	20 e0       	ldi	r18, 0x00	; 0
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	4a e7       	ldi	r20, 0x7A	; 122
    442a:	55 e4       	ldi	r21, 0x45	; 69
    442c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	8f 83       	std	Y+7, r24	; 0x07
    4436:	98 87       	std	Y+8, r25	; 0x08
    4438:	a9 87       	std	Y+9, r26	; 0x09
    443a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    443c:	6f 81       	ldd	r22, Y+7	; 0x07
    443e:	78 85       	ldd	r23, Y+8	; 0x08
    4440:	89 85       	ldd	r24, Y+9	; 0x09
    4442:	9a 85       	ldd	r25, Y+10	; 0x0a
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	40 e8       	ldi	r20, 0x80	; 128
    444a:	5f e3       	ldi	r21, 0x3F	; 63
    444c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4450:	88 23       	and	r24, r24
    4452:	2c f4       	brge	.+10     	; 0x445e <HVAC_Awake+0x96>
		__ticks = 1;
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	9e 83       	std	Y+6, r25	; 0x06
    445a:	8d 83       	std	Y+5, r24	; 0x05
    445c:	3f c0       	rjmp	.+126    	; 0x44dc <HVAC_Awake+0x114>
	else if (__tmp > 65535)
    445e:	6f 81       	ldd	r22, Y+7	; 0x07
    4460:	78 85       	ldd	r23, Y+8	; 0x08
    4462:	89 85       	ldd	r24, Y+9	; 0x09
    4464:	9a 85       	ldd	r25, Y+10	; 0x0a
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	3f ef       	ldi	r19, 0xFF	; 255
    446a:	4f e7       	ldi	r20, 0x7F	; 127
    446c:	57 e4       	ldi	r21, 0x47	; 71
    446e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4472:	18 16       	cp	r1, r24
    4474:	4c f5       	brge	.+82     	; 0x44c8 <HVAC_Awake+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4476:	6b 85       	ldd	r22, Y+11	; 0x0b
    4478:	7c 85       	ldd	r23, Y+12	; 0x0c
    447a:	8d 85       	ldd	r24, Y+13	; 0x0d
    447c:	9e 85       	ldd	r25, Y+14	; 0x0e
    447e:	20 e0       	ldi	r18, 0x00	; 0
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	40 e2       	ldi	r20, 0x20	; 32
    4484:	51 e4       	ldi	r21, 0x41	; 65
    4486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	bc 01       	movw	r22, r24
    4490:	cd 01       	movw	r24, r26
    4492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	9e 83       	std	Y+6, r25	; 0x06
    449c:	8d 83       	std	Y+5, r24	; 0x05
    449e:	0f c0       	rjmp	.+30     	; 0x44be <HVAC_Awake+0xf6>
    44a0:	80 e9       	ldi	r24, 0x90	; 144
    44a2:	91 e0       	ldi	r25, 0x01	; 1
    44a4:	9c 83       	std	Y+4, r25	; 0x04
    44a6:	8b 83       	std	Y+3, r24	; 0x03
    44a8:	8b 81       	ldd	r24, Y+3	; 0x03
    44aa:	9c 81       	ldd	r25, Y+4	; 0x04
    44ac:	01 97       	sbiw	r24, 0x01	; 1
    44ae:	f1 f7       	brne	.-4      	; 0x44ac <HVAC_Awake+0xe4>
    44b0:	9c 83       	std	Y+4, r25	; 0x04
    44b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b4:	8d 81       	ldd	r24, Y+5	; 0x05
    44b6:	9e 81       	ldd	r25, Y+6	; 0x06
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	9e 83       	std	Y+6, r25	; 0x06
    44bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44be:	8d 81       	ldd	r24, Y+5	; 0x05
    44c0:	9e 81       	ldd	r25, Y+6	; 0x06
    44c2:	00 97       	sbiw	r24, 0x00	; 0
    44c4:	69 f7       	brne	.-38     	; 0x44a0 <HVAC_Awake+0xd8>
    44c6:	14 c0       	rjmp	.+40     	; 0x44f0 <HVAC_Awake+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c8:	6f 81       	ldd	r22, Y+7	; 0x07
    44ca:	78 85       	ldd	r23, Y+8	; 0x08
    44cc:	89 85       	ldd	r24, Y+9	; 0x09
    44ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	9e 83       	std	Y+6, r25	; 0x06
    44da:	8d 83       	std	Y+5, r24	; 0x05
    44dc:	8d 81       	ldd	r24, Y+5	; 0x05
    44de:	9e 81       	ldd	r25, Y+6	; 0x06
    44e0:	9a 83       	std	Y+2, r25	; 0x02
    44e2:	89 83       	std	Y+1, r24	; 0x01
    44e4:	89 81       	ldd	r24, Y+1	; 0x01
    44e6:	9a 81       	ldd	r25, Y+2	; 0x02
    44e8:	01 97       	sbiw	r24, 0x01	; 1
    44ea:	f1 f7       	brne	.-4      	; 0x44e8 <HVAC_Awake+0x120>
    44ec:	9a 83       	std	Y+2, r25	; 0x02
    44ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	Initial_Start = FALSE ;
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	80 93 08 02 	sts	0x0208, r24
}
    44f6:	60 96       	adiw	r28, 0x10	; 16
    44f8:	0f b6       	in	r0, 0x3f	; 63
    44fa:	f8 94       	cli
    44fc:	de bf       	out	0x3e, r29	; 62
    44fe:	0f be       	out	0x3f, r0	; 63
    4500:	cd bf       	out	0x3d, r28	; 61
    4502:	cf 91       	pop	r28
    4504:	df 91       	pop	r29
    4506:	08 95       	ret

00004508 <HVAC_Sleep>:
void HVAC_Sleep(void)
{
    4508:	df 93       	push	r29
    450a:	cf 93       	push	r28
    450c:	cd b7       	in	r28, 0x3d	; 61
    450e:	de b7       	in	r29, 0x3e	; 62
    4510:	2e 97       	sbiw	r28, 0x0e	; 14
    4512:	0f b6       	in	r0, 0x3f	; 63
    4514:	f8 94       	cli
    4516:	de bf       	out	0x3e, r29	; 62
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	cd bf       	out	0x3d, r28	; 61
	DISPLAY_CLOSE_MESSAGE;
    451c:	81 e0       	ldi	r24, 0x01	; 1
    451e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_enuWriteCommand>
    4522:	82 e0       	ldi	r24, 0x02	; 2
    4524:	63 e0       	ldi	r22, 0x03	; 3
    4526:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_enuGoToPosition>
    452a:	89 e7       	ldi	r24, 0x79	; 121
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_enuWriteString>
	LD_enuSetState( HOT_LD , LD_OFF);
    4532:	8e e1       	ldi	r24, 0x1E	; 30
    4534:	60 e0       	ldi	r22, 0x00	; 0
    4536:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
	LD_enuSetState( NORM_LD , LD_OFF);
    453a:	8f e1       	ldi	r24, 0x1F	; 31
    453c:	60 e0       	ldi	r22, 0x00	; 0
    453e:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
	LD_enuSetState( COLD_LD , LD_OFF);
    4542:	80 e2       	ldi	r24, 0x20	; 32
    4544:	60 e0       	ldi	r22, 0x00	; 0
    4546:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
	ADC_enuDisable();
    454a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <ADC_enuDisable>
    454e:	80 e0       	ldi	r24, 0x00	; 0
    4550:	90 e4       	ldi	r25, 0x40	; 64
    4552:	ac e9       	ldi	r26, 0x9C	; 156
    4554:	b5 e4       	ldi	r27, 0x45	; 69
    4556:	8b 87       	std	Y+11, r24	; 0x0b
    4558:	9c 87       	std	Y+12, r25	; 0x0c
    455a:	ad 87       	std	Y+13, r26	; 0x0d
    455c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    455e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4560:	7c 85       	ldd	r23, Y+12	; 0x0c
    4562:	8d 85       	ldd	r24, Y+13	; 0x0d
    4564:	9e 85       	ldd	r25, Y+14	; 0x0e
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	4a e7       	ldi	r20, 0x7A	; 122
    456c:	55 e4       	ldi	r21, 0x45	; 69
    456e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4572:	dc 01       	movw	r26, r24
    4574:	cb 01       	movw	r24, r22
    4576:	8f 83       	std	Y+7, r24	; 0x07
    4578:	98 87       	std	Y+8, r25	; 0x08
    457a:	a9 87       	std	Y+9, r26	; 0x09
    457c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    457e:	6f 81       	ldd	r22, Y+7	; 0x07
    4580:	78 85       	ldd	r23, Y+8	; 0x08
    4582:	89 85       	ldd	r24, Y+9	; 0x09
    4584:	9a 85       	ldd	r25, Y+10	; 0x0a
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	40 e8       	ldi	r20, 0x80	; 128
    458c:	5f e3       	ldi	r21, 0x3F	; 63
    458e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4592:	88 23       	and	r24, r24
    4594:	2c f4       	brge	.+10     	; 0x45a0 <HVAC_Sleep+0x98>
		__ticks = 1;
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	9e 83       	std	Y+6, r25	; 0x06
    459c:	8d 83       	std	Y+5, r24	; 0x05
    459e:	3f c0       	rjmp	.+126    	; 0x461e <HVAC_Sleep+0x116>
	else if (__tmp > 65535)
    45a0:	6f 81       	ldd	r22, Y+7	; 0x07
    45a2:	78 85       	ldd	r23, Y+8	; 0x08
    45a4:	89 85       	ldd	r24, Y+9	; 0x09
    45a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    45a8:	20 e0       	ldi	r18, 0x00	; 0
    45aa:	3f ef       	ldi	r19, 0xFF	; 255
    45ac:	4f e7       	ldi	r20, 0x7F	; 127
    45ae:	57 e4       	ldi	r21, 0x47	; 71
    45b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45b4:	18 16       	cp	r1, r24
    45b6:	4c f5       	brge	.+82     	; 0x460a <HVAC_Sleep+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    45bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    45be:	9e 85       	ldd	r25, Y+14	; 0x0e
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	30 e0       	ldi	r19, 0x00	; 0
    45c4:	40 e2       	ldi	r20, 0x20	; 32
    45c6:	51 e4       	ldi	r21, 0x41	; 65
    45c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45cc:	dc 01       	movw	r26, r24
    45ce:	cb 01       	movw	r24, r22
    45d0:	bc 01       	movw	r22, r24
    45d2:	cd 01       	movw	r24, r26
    45d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	9e 83       	std	Y+6, r25	; 0x06
    45de:	8d 83       	std	Y+5, r24	; 0x05
    45e0:	0f c0       	rjmp	.+30     	; 0x4600 <HVAC_Sleep+0xf8>
    45e2:	80 e9       	ldi	r24, 0x90	; 144
    45e4:	91 e0       	ldi	r25, 0x01	; 1
    45e6:	9c 83       	std	Y+4, r25	; 0x04
    45e8:	8b 83       	std	Y+3, r24	; 0x03
    45ea:	8b 81       	ldd	r24, Y+3	; 0x03
    45ec:	9c 81       	ldd	r25, Y+4	; 0x04
    45ee:	01 97       	sbiw	r24, 0x01	; 1
    45f0:	f1 f7       	brne	.-4      	; 0x45ee <HVAC_Sleep+0xe6>
    45f2:	9c 83       	std	Y+4, r25	; 0x04
    45f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f6:	8d 81       	ldd	r24, Y+5	; 0x05
    45f8:	9e 81       	ldd	r25, Y+6	; 0x06
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	9e 83       	std	Y+6, r25	; 0x06
    45fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4600:	8d 81       	ldd	r24, Y+5	; 0x05
    4602:	9e 81       	ldd	r25, Y+6	; 0x06
    4604:	00 97       	sbiw	r24, 0x00	; 0
    4606:	69 f7       	brne	.-38     	; 0x45e2 <HVAC_Sleep+0xda>
    4608:	14 c0       	rjmp	.+40     	; 0x4632 <HVAC_Sleep+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    460a:	6f 81       	ldd	r22, Y+7	; 0x07
    460c:	78 85       	ldd	r23, Y+8	; 0x08
    460e:	89 85       	ldd	r24, Y+9	; 0x09
    4610:	9a 85       	ldd	r25, Y+10	; 0x0a
    4612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4616:	dc 01       	movw	r26, r24
    4618:	cb 01       	movw	r24, r22
    461a:	9e 83       	std	Y+6, r25	; 0x06
    461c:	8d 83       	std	Y+5, r24	; 0x05
    461e:	8d 81       	ldd	r24, Y+5	; 0x05
    4620:	9e 81       	ldd	r25, Y+6	; 0x06
    4622:	9a 83       	std	Y+2, r25	; 0x02
    4624:	89 83       	std	Y+1, r24	; 0x01
    4626:	89 81       	ldd	r24, Y+1	; 0x01
    4628:	9a 81       	ldd	r25, Y+2	; 0x02
    462a:	01 97       	sbiw	r24, 0x01	; 1
    462c:	f1 f7       	brne	.-4      	; 0x462a <HVAC_Sleep+0x122>
    462e:	9a 83       	std	Y+2, r25	; 0x02
    4630:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
	LCD_enuWriteCommand(0x08);
    4632:	88 e0       	ldi	r24, 0x08	; 8
    4634:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_enuWriteCommand>
	Sleep_Mode = FALSE;
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	80 93 fc 01 	sts	0x01FC, r24
	Initial_Start = TRUE ;
    463e:	10 92 08 02 	sts	0x0208, r1
}
    4642:	2e 96       	adiw	r28, 0x0e	; 14
    4644:	0f b6       	in	r0, 0x3f	; 63
    4646:	f8 94       	cli
    4648:	de bf       	out	0x3e, r29	; 62
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	cd bf       	out	0x3d, r28	; 61
    464e:	cf 91       	pop	r28
    4650:	df 91       	pop	r29
    4652:	08 95       	ret

00004654 <HVAC_StandByMode>:

void HVAC_StandByMode(void)
{
    4654:	df 93       	push	r29
    4656:	cf 93       	push	r28
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
    465c:	60 97       	sbiw	r28, 0x10	; 16
    465e:	0f b6       	in	r0, 0x3f	; 63
    4660:	f8 94       	cli
    4662:	de bf       	out	0x3e, r29	; 62
    4664:	0f be       	out	0x3f, r0	; 63
    4666:	cd bf       	out	0x3d, r28	; 61
	for(u16 Local_u16Iter = 0 ; Local_u16Iter < STANDBY_TOTAL_DELAYS ; Local_u16Iter++)    //Delay between readings = STANDBY_TOTAL_DELAYS * STANDBY_CHECK_DELAY
    4668:	18 8a       	std	Y+16, r1	; 0x10
    466a:	1f 86       	std	Y+15, r1	; 0x0f
    466c:	7f c0       	rjmp	.+254    	; 0x476c <HVAC_StandByMode+0x118>
    466e:	80 e0       	ldi	r24, 0x00	; 0
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	a0 e2       	ldi	r26, 0x20	; 32
    4674:	b1 e4       	ldi	r27, 0x41	; 65
    4676:	8b 87       	std	Y+11, r24	; 0x0b
    4678:	9c 87       	std	Y+12, r25	; 0x0c
    467a:	ad 87       	std	Y+13, r26	; 0x0d
    467c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    467e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4680:	7c 85       	ldd	r23, Y+12	; 0x0c
    4682:	8d 85       	ldd	r24, Y+13	; 0x0d
    4684:	9e 85       	ldd	r25, Y+14	; 0x0e
    4686:	20 e0       	ldi	r18, 0x00	; 0
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	4a e7       	ldi	r20, 0x7A	; 122
    468c:	55 e4       	ldi	r21, 0x45	; 69
    468e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4692:	dc 01       	movw	r26, r24
    4694:	cb 01       	movw	r24, r22
    4696:	8f 83       	std	Y+7, r24	; 0x07
    4698:	98 87       	std	Y+8, r25	; 0x08
    469a:	a9 87       	std	Y+9, r26	; 0x09
    469c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    469e:	6f 81       	ldd	r22, Y+7	; 0x07
    46a0:	78 85       	ldd	r23, Y+8	; 0x08
    46a2:	89 85       	ldd	r24, Y+9	; 0x09
    46a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a6:	20 e0       	ldi	r18, 0x00	; 0
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	40 e8       	ldi	r20, 0x80	; 128
    46ac:	5f e3       	ldi	r21, 0x3F	; 63
    46ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46b2:	88 23       	and	r24, r24
    46b4:	2c f4       	brge	.+10     	; 0x46c0 <HVAC_StandByMode+0x6c>
		__ticks = 1;
    46b6:	81 e0       	ldi	r24, 0x01	; 1
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	9e 83       	std	Y+6, r25	; 0x06
    46bc:	8d 83       	std	Y+5, r24	; 0x05
    46be:	3f c0       	rjmp	.+126    	; 0x473e <HVAC_StandByMode+0xea>
	else if (__tmp > 65535)
    46c0:	6f 81       	ldd	r22, Y+7	; 0x07
    46c2:	78 85       	ldd	r23, Y+8	; 0x08
    46c4:	89 85       	ldd	r24, Y+9	; 0x09
    46c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    46c8:	20 e0       	ldi	r18, 0x00	; 0
    46ca:	3f ef       	ldi	r19, 0xFF	; 255
    46cc:	4f e7       	ldi	r20, 0x7F	; 127
    46ce:	57 e4       	ldi	r21, 0x47	; 71
    46d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46d4:	18 16       	cp	r1, r24
    46d6:	4c f5       	brge	.+82     	; 0x472a <HVAC_StandByMode+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    46da:	7c 85       	ldd	r23, Y+12	; 0x0c
    46dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    46de:	9e 85       	ldd	r25, Y+14	; 0x0e
    46e0:	20 e0       	ldi	r18, 0x00	; 0
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	40 e2       	ldi	r20, 0x20	; 32
    46e6:	51 e4       	ldi	r21, 0x41	; 65
    46e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ec:	dc 01       	movw	r26, r24
    46ee:	cb 01       	movw	r24, r22
    46f0:	bc 01       	movw	r22, r24
    46f2:	cd 01       	movw	r24, r26
    46f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f8:	dc 01       	movw	r26, r24
    46fa:	cb 01       	movw	r24, r22
    46fc:	9e 83       	std	Y+6, r25	; 0x06
    46fe:	8d 83       	std	Y+5, r24	; 0x05
    4700:	0f c0       	rjmp	.+30     	; 0x4720 <HVAC_StandByMode+0xcc>
    4702:	80 e9       	ldi	r24, 0x90	; 144
    4704:	91 e0       	ldi	r25, 0x01	; 1
    4706:	9c 83       	std	Y+4, r25	; 0x04
    4708:	8b 83       	std	Y+3, r24	; 0x03
    470a:	8b 81       	ldd	r24, Y+3	; 0x03
    470c:	9c 81       	ldd	r25, Y+4	; 0x04
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	f1 f7       	brne	.-4      	; 0x470e <HVAC_StandByMode+0xba>
    4712:	9c 83       	std	Y+4, r25	; 0x04
    4714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4716:	8d 81       	ldd	r24, Y+5	; 0x05
    4718:	9e 81       	ldd	r25, Y+6	; 0x06
    471a:	01 97       	sbiw	r24, 0x01	; 1
    471c:	9e 83       	std	Y+6, r25	; 0x06
    471e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4720:	8d 81       	ldd	r24, Y+5	; 0x05
    4722:	9e 81       	ldd	r25, Y+6	; 0x06
    4724:	00 97       	sbiw	r24, 0x00	; 0
    4726:	69 f7       	brne	.-38     	; 0x4702 <HVAC_StandByMode+0xae>
    4728:	14 c0       	rjmp	.+40     	; 0x4752 <HVAC_StandByMode+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    472a:	6f 81       	ldd	r22, Y+7	; 0x07
    472c:	78 85       	ldd	r23, Y+8	; 0x08
    472e:	89 85       	ldd	r24, Y+9	; 0x09
    4730:	9a 85       	ldd	r25, Y+10	; 0x0a
    4732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	9e 83       	std	Y+6, r25	; 0x06
    473c:	8d 83       	std	Y+5, r24	; 0x05
    473e:	8d 81       	ldd	r24, Y+5	; 0x05
    4740:	9e 81       	ldd	r25, Y+6	; 0x06
    4742:	9a 83       	std	Y+2, r25	; 0x02
    4744:	89 83       	std	Y+1, r24	; 0x01
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	9a 81       	ldd	r25, Y+2	; 0x02
    474a:	01 97       	sbiw	r24, 0x01	; 1
    474c:	f1 f7       	brne	.-4      	; 0x474a <HVAC_StandByMode+0xf6>
    474e:	9a 83       	std	Y+2, r25	; 0x02
    4750:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms( STANDBY_CHECK_DELAY);
		if( Global_boolPower == FALSE || Global_boolSetMode == TRUE ) break;
    4752:	80 91 f9 01 	lds	r24, 0x01F9
    4756:	81 30       	cpi	r24, 0x01	; 1
    4758:	79 f0       	breq	.+30     	; 0x4778 <HVAC_StandByMode+0x124>
    475a:	80 91 fb 01 	lds	r24, 0x01FB
    475e:	88 23       	and	r24, r24
    4760:	59 f0       	breq	.+22     	; 0x4778 <HVAC_StandByMode+0x124>
	Initial_Start = TRUE ;
}

void HVAC_StandByMode(void)
{
	for(u16 Local_u16Iter = 0 ; Local_u16Iter < STANDBY_TOTAL_DELAYS ; Local_u16Iter++)    //Delay between readings = STANDBY_TOTAL_DELAYS * STANDBY_CHECK_DELAY
    4762:	8f 85       	ldd	r24, Y+15	; 0x0f
    4764:	98 89       	ldd	r25, Y+16	; 0x10
    4766:	01 96       	adiw	r24, 0x01	; 1
    4768:	98 8b       	std	Y+16, r25	; 0x10
    476a:	8f 87       	std	Y+15, r24	; 0x0f
    476c:	8f 85       	ldd	r24, Y+15	; 0x0f
    476e:	98 89       	ldd	r25, Y+16	; 0x10
    4770:	84 31       	cpi	r24, 0x14	; 20
    4772:	91 05       	cpc	r25, r1
    4774:	08 f4       	brcc	.+2      	; 0x4778 <HVAC_StandByMode+0x124>
    4776:	7b cf       	rjmp	.-266    	; 0x466e <HVAC_StandByMode+0x1a>
	{
		_delay_ms( STANDBY_CHECK_DELAY);
		if( Global_boolPower == FALSE || Global_boolSetMode == TRUE ) break;
	}
}
    4778:	60 96       	adiw	r28, 0x10	; 16
    477a:	0f b6       	in	r0, 0x3f	; 63
    477c:	f8 94       	cli
    477e:	de bf       	out	0x3e, r29	; 62
    4780:	0f be       	out	0x3f, r0	; 63
    4782:	cd bf       	out	0x3d, r28	; 61
    4784:	cf 91       	pop	r28
    4786:	df 91       	pop	r29
    4788:	08 95       	ret

0000478a <HVAC_SetTemp>:



void HVAC_SetTemp(void)
{
    478a:	0f 93       	push	r16
    478c:	1f 93       	push	r17
    478e:	df 93       	push	r29
    4790:	cf 93       	push	r28
    4792:	cd b7       	in	r28, 0x3d	; 61
    4794:	de b7       	in	r29, 0x3e	; 62
    4796:	ca 54       	subi	r28, 0x4A	; 74
    4798:	d0 40       	sbci	r29, 0x00	; 0
    479a:	0f b6       	in	r0, 0x3f	; 63
    479c:	f8 94       	cli
    479e:	de bf       	out	0x3e, r29	; 62
    47a0:	0f be       	out	0x3f, r0	; 63
    47a2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8IncKeyValue , Local_u8DecKeyValue ,Local_u8Counter = STANDBY_TOTAL_DELAYS , Local_u8SetTemp = Global_u8SetTemp;
    47a4:	fe 01       	movw	r30, r28
    47a6:	e8 5b       	subi	r30, 0xB8	; 184
    47a8:	ff 4f       	sbci	r31, 0xFF	; 255
    47aa:	84 e1       	ldi	r24, 0x14	; 20
    47ac:	80 83       	st	Z, r24
    47ae:	fe 01       	movw	r30, r28
    47b0:	e9 5b       	subi	r30, 0xB9	; 185
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	80 91 fd 01 	lds	r24, 0x01FD
    47b8:	80 83       	st	Z, r24

	DISPLAY_SET_MODE_MESSAGE;
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_enuWriteCommand>
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	65 e0       	ldi	r22, 0x05	; 5
    47c4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_enuGoToPosition>
    47c8:	85 e8       	ldi	r24, 0x85	; 133
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_enuWriteString>
    47d0:	82 e0       	ldi	r24, 0x02	; 2
    47d2:	68 e0       	ldi	r22, 0x08	; 8
    47d4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_enuGoToPosition>
    47d8:	80 91 fd 01 	lds	r24, 0x01FD
    47dc:	88 2f       	mov	r24, r24
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	a0 e0       	ldi	r26, 0x00	; 0
    47e2:	b0 e0       	ldi	r27, 0x00	; 0
    47e4:	bc 01       	movw	r22, r24
    47e6:	cd 01       	movw	r24, r26
    47e8:	0e 94 88 18 	call	0x3110	; 0x3110 <LCD_enuWriteIntegerNum>
    47ec:	fe 01       	movw	r30, r28
    47ee:	ed 5b       	subi	r30, 0xBD	; 189
    47f0:	ff 4f       	sbci	r31, 0xFF	; 255
    47f2:	80 e0       	ldi	r24, 0x00	; 0
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	aa ef       	ldi	r26, 0xFA	; 250
    47f8:	b3 e4       	ldi	r27, 0x43	; 67
    47fa:	80 83       	st	Z, r24
    47fc:	91 83       	std	Z+1, r25	; 0x01
    47fe:	a2 83       	std	Z+2, r26	; 0x02
    4800:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4802:	8e 01       	movw	r16, r28
    4804:	01 5c       	subi	r16, 0xC1	; 193
    4806:	1f 4f       	sbci	r17, 0xFF	; 255
    4808:	fe 01       	movw	r30, r28
    480a:	ed 5b       	subi	r30, 0xBD	; 189
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	60 81       	ld	r22, Z
    4810:	71 81       	ldd	r23, Z+1	; 0x01
    4812:	82 81       	ldd	r24, Z+2	; 0x02
    4814:	93 81       	ldd	r25, Z+3	; 0x03
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	4a e7       	ldi	r20, 0x7A	; 122
    481c:	55 e4       	ldi	r21, 0x45	; 69
    481e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4822:	dc 01       	movw	r26, r24
    4824:	cb 01       	movw	r24, r22
    4826:	f8 01       	movw	r30, r16
    4828:	80 83       	st	Z, r24
    482a:	91 83       	std	Z+1, r25	; 0x01
    482c:	a2 83       	std	Z+2, r26	; 0x02
    482e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4830:	fe 01       	movw	r30, r28
    4832:	ff 96       	adiw	r30, 0x3f	; 63
    4834:	60 81       	ld	r22, Z
    4836:	71 81       	ldd	r23, Z+1	; 0x01
    4838:	82 81       	ldd	r24, Z+2	; 0x02
    483a:	93 81       	ldd	r25, Z+3	; 0x03
    483c:	20 e0       	ldi	r18, 0x00	; 0
    483e:	30 e0       	ldi	r19, 0x00	; 0
    4840:	40 e8       	ldi	r20, 0x80	; 128
    4842:	5f e3       	ldi	r21, 0x3F	; 63
    4844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4848:	88 23       	and	r24, r24
    484a:	2c f4       	brge	.+10     	; 0x4856 <HVAC_SetTemp+0xcc>
		__ticks = 1;
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	9e af       	std	Y+62, r25	; 0x3e
    4852:	8d af       	std	Y+61, r24	; 0x3d
    4854:	46 c0       	rjmp	.+140    	; 0x48e2 <HVAC_SetTemp+0x158>
	else if (__tmp > 65535)
    4856:	fe 01       	movw	r30, r28
    4858:	ff 96       	adiw	r30, 0x3f	; 63
    485a:	60 81       	ld	r22, Z
    485c:	71 81       	ldd	r23, Z+1	; 0x01
    485e:	82 81       	ldd	r24, Z+2	; 0x02
    4860:	93 81       	ldd	r25, Z+3	; 0x03
    4862:	20 e0       	ldi	r18, 0x00	; 0
    4864:	3f ef       	ldi	r19, 0xFF	; 255
    4866:	4f e7       	ldi	r20, 0x7F	; 127
    4868:	57 e4       	ldi	r21, 0x47	; 71
    486a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    486e:	18 16       	cp	r1, r24
    4870:	64 f5       	brge	.+88     	; 0x48ca <HVAC_SetTemp+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4872:	fe 01       	movw	r30, r28
    4874:	ed 5b       	subi	r30, 0xBD	; 189
    4876:	ff 4f       	sbci	r31, 0xFF	; 255
    4878:	60 81       	ld	r22, Z
    487a:	71 81       	ldd	r23, Z+1	; 0x01
    487c:	82 81       	ldd	r24, Z+2	; 0x02
    487e:	93 81       	ldd	r25, Z+3	; 0x03
    4880:	20 e0       	ldi	r18, 0x00	; 0
    4882:	30 e0       	ldi	r19, 0x00	; 0
    4884:	40 e2       	ldi	r20, 0x20	; 32
    4886:	51 e4       	ldi	r21, 0x41	; 65
    4888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    488c:	dc 01       	movw	r26, r24
    488e:	cb 01       	movw	r24, r22
    4890:	bc 01       	movw	r22, r24
    4892:	cd 01       	movw	r24, r26
    4894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4898:	dc 01       	movw	r26, r24
    489a:	cb 01       	movw	r24, r22
    489c:	9e af       	std	Y+62, r25	; 0x3e
    489e:	8d af       	std	Y+61, r24	; 0x3d
    48a0:	0f c0       	rjmp	.+30     	; 0x48c0 <HVAC_SetTemp+0x136>
    48a2:	80 e9       	ldi	r24, 0x90	; 144
    48a4:	91 e0       	ldi	r25, 0x01	; 1
    48a6:	9c af       	std	Y+60, r25	; 0x3c
    48a8:	8b af       	std	Y+59, r24	; 0x3b
    48aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    48ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    48ae:	01 97       	sbiw	r24, 0x01	; 1
    48b0:	f1 f7       	brne	.-4      	; 0x48ae <HVAC_SetTemp+0x124>
    48b2:	9c af       	std	Y+60, r25	; 0x3c
    48b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    48b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    48ba:	01 97       	sbiw	r24, 0x01	; 1
    48bc:	9e af       	std	Y+62, r25	; 0x3e
    48be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    48c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    48c4:	00 97       	sbiw	r24, 0x00	; 0
    48c6:	69 f7       	brne	.-38     	; 0x48a2 <HVAC_SetTemp+0x118>
    48c8:	75 c2       	rjmp	.+1258   	; 0x4db4 <HVAC_SetTemp+0x62a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ca:	fe 01       	movw	r30, r28
    48cc:	ff 96       	adiw	r30, 0x3f	; 63
    48ce:	60 81       	ld	r22, Z
    48d0:	71 81       	ldd	r23, Z+1	; 0x01
    48d2:	82 81       	ldd	r24, Z+2	; 0x02
    48d4:	93 81       	ldd	r25, Z+3	; 0x03
    48d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48da:	dc 01       	movw	r26, r24
    48dc:	cb 01       	movw	r24, r22
    48de:	9e af       	std	Y+62, r25	; 0x3e
    48e0:	8d af       	std	Y+61, r24	; 0x3d
    48e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    48e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    48e6:	9a af       	std	Y+58, r25	; 0x3a
    48e8:	89 af       	std	Y+57, r24	; 0x39
    48ea:	89 ad       	ldd	r24, Y+57	; 0x39
    48ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    48ee:	01 97       	sbiw	r24, 0x01	; 1
    48f0:	f1 f7       	brne	.-4      	; 0x48ee <HVAC_SetTemp+0x164>
    48f2:	9a af       	std	Y+58, r25	; 0x3a
    48f4:	89 af       	std	Y+57, r24	; 0x39
    48f6:	5e c2       	rjmp	.+1212   	; 0x4db4 <HVAC_SetTemp+0x62a>
	_delay_ms(500);

	while( Local_u8Counter > 0)
	{
		if( ( Switch_enuGetPressed( INCREMENT_SWITCH , &Local_u8IncKeyValue) == ES_OK ) && ( Switch_enuGetPressed( DECREMENT_SWITCH , &Local_u8DecKeyValue) == ES_OK ) )
    48f8:	9e 01       	movw	r18, r28
    48fa:	27 5b       	subi	r18, 0xB7	; 183
    48fc:	3f 4f       	sbci	r19, 0xFF	; 255
    48fe:	8a ec       	ldi	r24, 0xCA	; 202
    4900:	b9 01       	movw	r22, r18
    4902:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <Switch_enuGetPressed>
    4906:	88 23       	and	r24, r24
    4908:	09 f0       	breq	.+2      	; 0x490c <HVAC_SetTemp+0x182>
    490a:	3f c1       	rjmp	.+638    	; 0x4b8a <HVAC_SetTemp+0x400>
    490c:	9e 01       	movw	r18, r28
    490e:	26 5b       	subi	r18, 0xB6	; 182
    4910:	3f 4f       	sbci	r19, 0xFF	; 255
    4912:	89 ec       	ldi	r24, 0xC9	; 201
    4914:	b9 01       	movw	r22, r18
    4916:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <Switch_enuGetPressed>
    491a:	88 23       	and	r24, r24
    491c:	09 f0       	breq	.+2      	; 0x4920 <HVAC_SetTemp+0x196>
    491e:	35 c1       	rjmp	.+618    	; 0x4b8a <HVAC_SetTemp+0x400>
		{
			if( Local_u8IncKeyValue == INC_SW_PRESSED && Local_u8DecKeyValue != DEC_SW_PRESSED )
    4920:	fe 01       	movw	r30, r28
    4922:	e7 5b       	subi	r30, 0xB7	; 183
    4924:	ff 4f       	sbci	r31, 0xFF	; 255
    4926:	80 81       	ld	r24, Z
    4928:	81 30       	cpi	r24, 0x01	; 1
    492a:	09 f0       	breq	.+2      	; 0x492e <HVAC_SetTemp+0x1a4>
    492c:	95 c0       	rjmp	.+298    	; 0x4a58 <HVAC_SetTemp+0x2ce>
    492e:	fe 01       	movw	r30, r28
    4930:	e6 5b       	subi	r30, 0xB6	; 182
    4932:	ff 4f       	sbci	r31, 0xFF	; 255
    4934:	80 81       	ld	r24, Z
    4936:	81 30       	cpi	r24, 0x01	; 1
    4938:	09 f4       	brne	.+2      	; 0x493c <HVAC_SetTemp+0x1b2>
    493a:	8e c0       	rjmp	.+284    	; 0x4a58 <HVAC_SetTemp+0x2ce>
    493c:	80 e0       	ldi	r24, 0x00	; 0
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	a0 e2       	ldi	r26, 0x20	; 32
    4942:	b1 e4       	ldi	r27, 0x41	; 65
    4944:	8d ab       	std	Y+53, r24	; 0x35
    4946:	9e ab       	std	Y+54, r25	; 0x36
    4948:	af ab       	std	Y+55, r26	; 0x37
    494a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    494c:	6d a9       	ldd	r22, Y+53	; 0x35
    494e:	7e a9       	ldd	r23, Y+54	; 0x36
    4950:	8f a9       	ldd	r24, Y+55	; 0x37
    4952:	98 ad       	ldd	r25, Y+56	; 0x38
    4954:	20 e0       	ldi	r18, 0x00	; 0
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	4a e7       	ldi	r20, 0x7A	; 122
    495a:	55 e4       	ldi	r21, 0x45	; 69
    495c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4960:	dc 01       	movw	r26, r24
    4962:	cb 01       	movw	r24, r22
    4964:	89 ab       	std	Y+49, r24	; 0x31
    4966:	9a ab       	std	Y+50, r25	; 0x32
    4968:	ab ab       	std	Y+51, r26	; 0x33
    496a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    496c:	69 a9       	ldd	r22, Y+49	; 0x31
    496e:	7a a9       	ldd	r23, Y+50	; 0x32
    4970:	8b a9       	ldd	r24, Y+51	; 0x33
    4972:	9c a9       	ldd	r25, Y+52	; 0x34
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	40 e8       	ldi	r20, 0x80	; 128
    497a:	5f e3       	ldi	r21, 0x3F	; 63
    497c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4980:	88 23       	and	r24, r24
    4982:	2c f4       	brge	.+10     	; 0x498e <HVAC_SetTemp+0x204>
		__ticks = 1;
    4984:	81 e0       	ldi	r24, 0x01	; 1
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	98 ab       	std	Y+48, r25	; 0x30
    498a:	8f a7       	std	Y+47, r24	; 0x2f
    498c:	3f c0       	rjmp	.+126    	; 0x4a0c <HVAC_SetTemp+0x282>
	else if (__tmp > 65535)
    498e:	69 a9       	ldd	r22, Y+49	; 0x31
    4990:	7a a9       	ldd	r23, Y+50	; 0x32
    4992:	8b a9       	ldd	r24, Y+51	; 0x33
    4994:	9c a9       	ldd	r25, Y+52	; 0x34
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	3f ef       	ldi	r19, 0xFF	; 255
    499a:	4f e7       	ldi	r20, 0x7F	; 127
    499c:	57 e4       	ldi	r21, 0x47	; 71
    499e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49a2:	18 16       	cp	r1, r24
    49a4:	4c f5       	brge	.+82     	; 0x49f8 <HVAC_SetTemp+0x26e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a6:	6d a9       	ldd	r22, Y+53	; 0x35
    49a8:	7e a9       	ldd	r23, Y+54	; 0x36
    49aa:	8f a9       	ldd	r24, Y+55	; 0x37
    49ac:	98 ad       	ldd	r25, Y+56	; 0x38
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	30 e0       	ldi	r19, 0x00	; 0
    49b2:	40 e2       	ldi	r20, 0x20	; 32
    49b4:	51 e4       	ldi	r21, 0x41	; 65
    49b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ba:	dc 01       	movw	r26, r24
    49bc:	cb 01       	movw	r24, r22
    49be:	bc 01       	movw	r22, r24
    49c0:	cd 01       	movw	r24, r26
    49c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c6:	dc 01       	movw	r26, r24
    49c8:	cb 01       	movw	r24, r22
    49ca:	98 ab       	std	Y+48, r25	; 0x30
    49cc:	8f a7       	std	Y+47, r24	; 0x2f
    49ce:	0f c0       	rjmp	.+30     	; 0x49ee <HVAC_SetTemp+0x264>
    49d0:	80 e9       	ldi	r24, 0x90	; 144
    49d2:	91 e0       	ldi	r25, 0x01	; 1
    49d4:	9e a7       	std	Y+46, r25	; 0x2e
    49d6:	8d a7       	std	Y+45, r24	; 0x2d
    49d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    49da:	9e a5       	ldd	r25, Y+46	; 0x2e
    49dc:	01 97       	sbiw	r24, 0x01	; 1
    49de:	f1 f7       	brne	.-4      	; 0x49dc <HVAC_SetTemp+0x252>
    49e0:	9e a7       	std	Y+46, r25	; 0x2e
    49e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    49e6:	98 a9       	ldd	r25, Y+48	; 0x30
    49e8:	01 97       	sbiw	r24, 0x01	; 1
    49ea:	98 ab       	std	Y+48, r25	; 0x30
    49ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    49f0:	98 a9       	ldd	r25, Y+48	; 0x30
    49f2:	00 97       	sbiw	r24, 0x00	; 0
    49f4:	69 f7       	brne	.-38     	; 0x49d0 <HVAC_SetTemp+0x246>
    49f6:	14 c0       	rjmp	.+40     	; 0x4a20 <HVAC_SetTemp+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49f8:	69 a9       	ldd	r22, Y+49	; 0x31
    49fa:	7a a9       	ldd	r23, Y+50	; 0x32
    49fc:	8b a9       	ldd	r24, Y+51	; 0x33
    49fe:	9c a9       	ldd	r25, Y+52	; 0x34
    4a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a04:	dc 01       	movw	r26, r24
    4a06:	cb 01       	movw	r24, r22
    4a08:	98 ab       	std	Y+48, r25	; 0x30
    4a0a:	8f a7       	std	Y+47, r24	; 0x2f
    4a0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a0e:	98 a9       	ldd	r25, Y+48	; 0x30
    4a10:	9c a7       	std	Y+44, r25	; 0x2c
    4a12:	8b a7       	std	Y+43, r24	; 0x2b
    4a14:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a16:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a18:	01 97       	sbiw	r24, 0x01	; 1
    4a1a:	f1 f7       	brne	.-4      	; 0x4a18 <HVAC_SetTemp+0x28e>
    4a1c:	9c a7       	std	Y+44, r25	; 0x2c
    4a1e:	8b a7       	std	Y+43, r24	; 0x2b
			{
				_delay_ms( SWITCH_BOUNCE_DELAY );
				if( Switch_enuGetPressed( INCREMENT_SWITCH , &Local_u8IncKeyValue) == ES_OK )
    4a20:	9e 01       	movw	r18, r28
    4a22:	27 5b       	subi	r18, 0xB7	; 183
    4a24:	3f 4f       	sbci	r19, 0xFF	; 255
    4a26:	8a ec       	ldi	r24, 0xCA	; 202
    4a28:	b9 01       	movw	r22, r18
    4a2a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <Switch_enuGetPressed>
    4a2e:	88 23       	and	r24, r24
    4a30:	09 f0       	breq	.+2      	; 0x4a34 <HVAC_SetTemp+0x2aa>
    4a32:	ab c0       	rjmp	.+342    	; 0x4b8a <HVAC_SetTemp+0x400>
				{
					if( Local_u8IncKeyValue == INC_SW_PRESSED )
    4a34:	fe 01       	movw	r30, r28
    4a36:	e7 5b       	subi	r30, 0xB7	; 183
    4a38:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3a:	80 81       	ld	r24, Z
    4a3c:	81 30       	cpi	r24, 0x01	; 1
    4a3e:	09 f0       	breq	.+2      	; 0x4a42 <HVAC_SetTemp+0x2b8>
    4a40:	a4 c0       	rjmp	.+328    	; 0x4b8a <HVAC_SetTemp+0x400>
					{
						Global_u8SetTemp++;
    4a42:	80 91 fd 01 	lds	r24, 0x01FD
    4a46:	8f 5f       	subi	r24, 0xFF	; 255
    4a48:	80 93 fd 01 	sts	0x01FD, r24
						Local_u8Counter = STANDBY_TOTAL_DELAYS ;
    4a4c:	fe 01       	movw	r30, r28
    4a4e:	e8 5b       	subi	r30, 0xB8	; 184
    4a50:	ff 4f       	sbci	r31, 0xFF	; 255
    4a52:	84 e1       	ldi	r24, 0x14	; 20
    4a54:	80 83       	st	Z, r24
    4a56:	99 c0       	rjmp	.+306    	; 0x4b8a <HVAC_SetTemp+0x400>
					}
				}
			}
			else if( Local_u8DecKeyValue == DEC_SW_PRESSED && Local_u8IncKeyValue != INC_SW_PRESSED )
    4a58:	fe 01       	movw	r30, r28
    4a5a:	e6 5b       	subi	r30, 0xB6	; 182
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	80 81       	ld	r24, Z
    4a60:	81 30       	cpi	r24, 0x01	; 1
    4a62:	09 f0       	breq	.+2      	; 0x4a66 <HVAC_SetTemp+0x2dc>
    4a64:	92 c0       	rjmp	.+292    	; 0x4b8a <HVAC_SetTemp+0x400>
    4a66:	fe 01       	movw	r30, r28
    4a68:	e7 5b       	subi	r30, 0xB7	; 183
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	80 81       	ld	r24, Z
    4a6e:	81 30       	cpi	r24, 0x01	; 1
    4a70:	09 f4       	brne	.+2      	; 0x4a74 <HVAC_SetTemp+0x2ea>
    4a72:	8b c0       	rjmp	.+278    	; 0x4b8a <HVAC_SetTemp+0x400>
    4a74:	80 e0       	ldi	r24, 0x00	; 0
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	a0 e2       	ldi	r26, 0x20	; 32
    4a7a:	b1 e4       	ldi	r27, 0x41	; 65
    4a7c:	8f a3       	std	Y+39, r24	; 0x27
    4a7e:	98 a7       	std	Y+40, r25	; 0x28
    4a80:	a9 a7       	std	Y+41, r26	; 0x29
    4a82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a84:	6f a1       	ldd	r22, Y+39	; 0x27
    4a86:	78 a5       	ldd	r23, Y+40	; 0x28
    4a88:	89 a5       	ldd	r24, Y+41	; 0x29
    4a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a8c:	20 e0       	ldi	r18, 0x00	; 0
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	4a e7       	ldi	r20, 0x7A	; 122
    4a92:	55 e4       	ldi	r21, 0x45	; 69
    4a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a98:	dc 01       	movw	r26, r24
    4a9a:	cb 01       	movw	r24, r22
    4a9c:	8b a3       	std	Y+35, r24	; 0x23
    4a9e:	9c a3       	std	Y+36, r25	; 0x24
    4aa0:	ad a3       	std	Y+37, r26	; 0x25
    4aa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    4aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    4aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    4aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	40 e8       	ldi	r20, 0x80	; 128
    4ab2:	5f e3       	ldi	r21, 0x3F	; 63
    4ab4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ab8:	88 23       	and	r24, r24
    4aba:	2c f4       	brge	.+10     	; 0x4ac6 <HVAC_SetTemp+0x33c>
		__ticks = 1;
    4abc:	81 e0       	ldi	r24, 0x01	; 1
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	9a a3       	std	Y+34, r25	; 0x22
    4ac2:	89 a3       	std	Y+33, r24	; 0x21
    4ac4:	3f c0       	rjmp	.+126    	; 0x4b44 <HVAC_SetTemp+0x3ba>
	else if (__tmp > 65535)
    4ac6:	6b a1       	ldd	r22, Y+35	; 0x23
    4ac8:	7c a1       	ldd	r23, Y+36	; 0x24
    4aca:	8d a1       	ldd	r24, Y+37	; 0x25
    4acc:	9e a1       	ldd	r25, Y+38	; 0x26
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	3f ef       	ldi	r19, 0xFF	; 255
    4ad2:	4f e7       	ldi	r20, 0x7F	; 127
    4ad4:	57 e4       	ldi	r21, 0x47	; 71
    4ad6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ada:	18 16       	cp	r1, r24
    4adc:	4c f5       	brge	.+82     	; 0x4b30 <HVAC_SetTemp+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ade:	6f a1       	ldd	r22, Y+39	; 0x27
    4ae0:	78 a5       	ldd	r23, Y+40	; 0x28
    4ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    4ae4:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ae6:	20 e0       	ldi	r18, 0x00	; 0
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	40 e2       	ldi	r20, 0x20	; 32
    4aec:	51 e4       	ldi	r21, 0x41	; 65
    4aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	bc 01       	movw	r22, r24
    4af8:	cd 01       	movw	r24, r26
    4afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4afe:	dc 01       	movw	r26, r24
    4b00:	cb 01       	movw	r24, r22
    4b02:	9a a3       	std	Y+34, r25	; 0x22
    4b04:	89 a3       	std	Y+33, r24	; 0x21
    4b06:	0f c0       	rjmp	.+30     	; 0x4b26 <HVAC_SetTemp+0x39c>
    4b08:	80 e9       	ldi	r24, 0x90	; 144
    4b0a:	91 e0       	ldi	r25, 0x01	; 1
    4b0c:	98 a3       	std	Y+32, r25	; 0x20
    4b0e:	8f 8f       	std	Y+31, r24	; 0x1f
    4b10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b12:	98 a1       	ldd	r25, Y+32	; 0x20
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	f1 f7       	brne	.-4      	; 0x4b14 <HVAC_SetTemp+0x38a>
    4b18:	98 a3       	std	Y+32, r25	; 0x20
    4b1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    4b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    4b20:	01 97       	sbiw	r24, 0x01	; 1
    4b22:	9a a3       	std	Y+34, r25	; 0x22
    4b24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b26:	89 a1       	ldd	r24, Y+33	; 0x21
    4b28:	9a a1       	ldd	r25, Y+34	; 0x22
    4b2a:	00 97       	sbiw	r24, 0x00	; 0
    4b2c:	69 f7       	brne	.-38     	; 0x4b08 <HVAC_SetTemp+0x37e>
    4b2e:	14 c0       	rjmp	.+40     	; 0x4b58 <HVAC_SetTemp+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b30:	6b a1       	ldd	r22, Y+35	; 0x23
    4b32:	7c a1       	ldd	r23, Y+36	; 0x24
    4b34:	8d a1       	ldd	r24, Y+37	; 0x25
    4b36:	9e a1       	ldd	r25, Y+38	; 0x26
    4b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b3c:	dc 01       	movw	r26, r24
    4b3e:	cb 01       	movw	r24, r22
    4b40:	9a a3       	std	Y+34, r25	; 0x22
    4b42:	89 a3       	std	Y+33, r24	; 0x21
    4b44:	89 a1       	ldd	r24, Y+33	; 0x21
    4b46:	9a a1       	ldd	r25, Y+34	; 0x22
    4b48:	9e 8f       	std	Y+30, r25	; 0x1e
    4b4a:	8d 8f       	std	Y+29, r24	; 0x1d
    4b4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b50:	01 97       	sbiw	r24, 0x01	; 1
    4b52:	f1 f7       	brne	.-4      	; 0x4b50 <HVAC_SetTemp+0x3c6>
    4b54:	9e 8f       	std	Y+30, r25	; 0x1e
    4b56:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms( SWITCH_BOUNCE_DELAY );
				if( Switch_enuGetPressed( DECREMENT_SWITCH , &Local_u8DecKeyValue) == ES_OK )
    4b58:	9e 01       	movw	r18, r28
    4b5a:	26 5b       	subi	r18, 0xB6	; 182
    4b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5e:	89 ec       	ldi	r24, 0xC9	; 201
    4b60:	b9 01       	movw	r22, r18
    4b62:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <Switch_enuGetPressed>
    4b66:	88 23       	and	r24, r24
    4b68:	81 f4       	brne	.+32     	; 0x4b8a <HVAC_SetTemp+0x400>
				{
					if( Local_u8DecKeyValue == DEC_SW_PRESSED )
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	e6 5b       	subi	r30, 0xB6	; 182
    4b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b70:	80 81       	ld	r24, Z
    4b72:	81 30       	cpi	r24, 0x01	; 1
    4b74:	51 f4       	brne	.+20     	; 0x4b8a <HVAC_SetTemp+0x400>
					{
						Global_u8SetTemp--;
    4b76:	80 91 fd 01 	lds	r24, 0x01FD
    4b7a:	81 50       	subi	r24, 0x01	; 1
    4b7c:	80 93 fd 01 	sts	0x01FD, r24
						Local_u8Counter = STANDBY_TOTAL_DELAYS ;
    4b80:	fe 01       	movw	r30, r28
    4b82:	e8 5b       	subi	r30, 0xB8	; 184
    4b84:	ff 4f       	sbci	r31, 0xFF	; 255
    4b86:	84 e1       	ldi	r24, 0x14	; 20
    4b88:	80 83       	st	Z, r24
			}

		}


		if ( Global_u8SetTemp != Local_u8SetTemp )
    4b8a:	80 91 fd 01 	lds	r24, 0x01FD
    4b8e:	fe 01       	movw	r30, r28
    4b90:	e9 5b       	subi	r30, 0xB9	; 185
    4b92:	ff 4f       	sbci	r31, 0xFF	; 255
    4b94:	90 81       	ld	r25, Z
    4b96:	89 17       	cp	r24, r25
    4b98:	01 f1       	breq	.+64     	; 0x4bda <HVAC_SetTemp+0x450>
		{
			DISPLAY_SET_MODE_MESSAGE;
    4b9a:	81 e0       	ldi	r24, 0x01	; 1
    4b9c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_enuWriteCommand>
    4ba0:	81 e0       	ldi	r24, 0x01	; 1
    4ba2:	65 e0       	ldi	r22, 0x05	; 5
    4ba4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_enuGoToPosition>
    4ba8:	85 e8       	ldi	r24, 0x85	; 133
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <LCD_enuWriteString>
    4bb0:	82 e0       	ldi	r24, 0x02	; 2
    4bb2:	68 e0       	ldi	r22, 0x08	; 8
    4bb4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <LCD_enuGoToPosition>
    4bb8:	80 91 fd 01 	lds	r24, 0x01FD
    4bbc:	88 2f       	mov	r24, r24
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	a0 e0       	ldi	r26, 0x00	; 0
    4bc2:	b0 e0       	ldi	r27, 0x00	; 0
    4bc4:	bc 01       	movw	r22, r24
    4bc6:	cd 01       	movw	r24, r26
    4bc8:	0e 94 88 18 	call	0x3110	; 0x3110 <LCD_enuWriteIntegerNum>
			Local_u8SetTemp = Global_u8SetTemp  ;
    4bcc:	fe 01       	movw	r30, r28
    4bce:	e9 5b       	subi	r30, 0xB9	; 185
    4bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd2:	80 91 fd 01 	lds	r24, 0x01FD
    4bd6:	80 83       	st	Z, r24
    4bd8:	72 c0       	rjmp	.+228    	; 0x4cbe <HVAC_SetTemp+0x534>
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	a8 ec       	ldi	r26, 0xC8	; 200
    4be0:	b2 e4       	ldi	r27, 0x42	; 66
    4be2:	89 8f       	std	Y+25, r24	; 0x19
    4be4:	9a 8f       	std	Y+26, r25	; 0x1a
    4be6:	ab 8f       	std	Y+27, r26	; 0x1b
    4be8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bea:	69 8d       	ldd	r22, Y+25	; 0x19
    4bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0
    4bf6:	4a e7       	ldi	r20, 0x7A	; 122
    4bf8:	55 e4       	ldi	r21, 0x45	; 69
    4bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	8d 8b       	std	Y+21, r24	; 0x15
    4c04:	9e 8b       	std	Y+22, r25	; 0x16
    4c06:	af 8b       	std	Y+23, r26	; 0x17
    4c08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    4c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    4c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c10:	98 8d       	ldd	r25, Y+24	; 0x18
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	40 e8       	ldi	r20, 0x80	; 128
    4c18:	5f e3       	ldi	r21, 0x3F	; 63
    4c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c1e:	88 23       	and	r24, r24
    4c20:	2c f4       	brge	.+10     	; 0x4c2c <HVAC_SetTemp+0x4a2>
		__ticks = 1;
    4c22:	81 e0       	ldi	r24, 0x01	; 1
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	9c 8b       	std	Y+20, r25	; 0x14
    4c28:	8b 8b       	std	Y+19, r24	; 0x13
    4c2a:	3f c0       	rjmp	.+126    	; 0x4caa <HVAC_SetTemp+0x520>
	else if (__tmp > 65535)
    4c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    4c30:	8f 89       	ldd	r24, Y+23	; 0x17
    4c32:	98 8d       	ldd	r25, Y+24	; 0x18
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	3f ef       	ldi	r19, 0xFF	; 255
    4c38:	4f e7       	ldi	r20, 0x7F	; 127
    4c3a:	57 e4       	ldi	r21, 0x47	; 71
    4c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c40:	18 16       	cp	r1, r24
    4c42:	4c f5       	brge	.+82     	; 0x4c96 <HVAC_SetTemp+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c44:	69 8d       	ldd	r22, Y+25	; 0x19
    4c46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	40 e2       	ldi	r20, 0x20	; 32
    4c52:	51 e4       	ldi	r21, 0x41	; 65
    4c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c58:	dc 01       	movw	r26, r24
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	bc 01       	movw	r22, r24
    4c5e:	cd 01       	movw	r24, r26
    4c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c64:	dc 01       	movw	r26, r24
    4c66:	cb 01       	movw	r24, r22
    4c68:	9c 8b       	std	Y+20, r25	; 0x14
    4c6a:	8b 8b       	std	Y+19, r24	; 0x13
    4c6c:	0f c0       	rjmp	.+30     	; 0x4c8c <HVAC_SetTemp+0x502>
    4c6e:	80 e9       	ldi	r24, 0x90	; 144
    4c70:	91 e0       	ldi	r25, 0x01	; 1
    4c72:	9a 8b       	std	Y+18, r25	; 0x12
    4c74:	89 8b       	std	Y+17, r24	; 0x11
    4c76:	89 89       	ldd	r24, Y+17	; 0x11
    4c78:	9a 89       	ldd	r25, Y+18	; 0x12
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	f1 f7       	brne	.-4      	; 0x4c7a <HVAC_SetTemp+0x4f0>
    4c7e:	9a 8b       	std	Y+18, r25	; 0x12
    4c80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c82:	8b 89       	ldd	r24, Y+19	; 0x13
    4c84:	9c 89       	ldd	r25, Y+20	; 0x14
    4c86:	01 97       	sbiw	r24, 0x01	; 1
    4c88:	9c 8b       	std	Y+20, r25	; 0x14
    4c8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    4c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    4c90:	00 97       	sbiw	r24, 0x00	; 0
    4c92:	69 f7       	brne	.-38     	; 0x4c6e <HVAC_SetTemp+0x4e4>
    4c94:	14 c0       	rjmp	.+40     	; 0x4cbe <HVAC_SetTemp+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c96:	6d 89       	ldd	r22, Y+21	; 0x15
    4c98:	7e 89       	ldd	r23, Y+22	; 0x16
    4c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    4c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    4c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca2:	dc 01       	movw	r26, r24
    4ca4:	cb 01       	movw	r24, r22
    4ca6:	9c 8b       	std	Y+20, r25	; 0x14
    4ca8:	8b 8b       	std	Y+19, r24	; 0x13
    4caa:	8b 89       	ldd	r24, Y+19	; 0x13
    4cac:	9c 89       	ldd	r25, Y+20	; 0x14
    4cae:	98 8b       	std	Y+16, r25	; 0x10
    4cb0:	8f 87       	std	Y+15, r24	; 0x0f
    4cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cb4:	98 89       	ldd	r25, Y+16	; 0x10
    4cb6:	01 97       	sbiw	r24, 0x01	; 1
    4cb8:	f1 f7       	brne	.-4      	; 0x4cb6 <HVAC_SetTemp+0x52c>
    4cba:	98 8b       	std	Y+16, r25	; 0x10
    4cbc:	8f 87       	std	Y+15, r24	; 0x0f
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	a0 e2       	ldi	r26, 0x20	; 32
    4cc4:	b1 e4       	ldi	r27, 0x41	; 65
    4cc6:	8b 87       	std	Y+11, r24	; 0x0b
    4cc8:	9c 87       	std	Y+12, r25	; 0x0c
    4cca:	ad 87       	std	Y+13, r26	; 0x0d
    4ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cd6:	20 e0       	ldi	r18, 0x00	; 0
    4cd8:	30 e0       	ldi	r19, 0x00	; 0
    4cda:	4a e7       	ldi	r20, 0x7A	; 122
    4cdc:	55 e4       	ldi	r21, 0x45	; 69
    4cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	8f 83       	std	Y+7, r24	; 0x07
    4ce8:	98 87       	std	Y+8, r25	; 0x08
    4cea:	a9 87       	std	Y+9, r26	; 0x09
    4cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4cee:	6f 81       	ldd	r22, Y+7	; 0x07
    4cf0:	78 85       	ldd	r23, Y+8	; 0x08
    4cf2:	89 85       	ldd	r24, Y+9	; 0x09
    4cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf6:	20 e0       	ldi	r18, 0x00	; 0
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	40 e8       	ldi	r20, 0x80	; 128
    4cfc:	5f e3       	ldi	r21, 0x3F	; 63
    4cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d02:	88 23       	and	r24, r24
    4d04:	2c f4       	brge	.+10     	; 0x4d10 <HVAC_SetTemp+0x586>
		__ticks = 1;
    4d06:	81 e0       	ldi	r24, 0x01	; 1
    4d08:	90 e0       	ldi	r25, 0x00	; 0
    4d0a:	9e 83       	std	Y+6, r25	; 0x06
    4d0c:	8d 83       	std	Y+5, r24	; 0x05
    4d0e:	3f c0       	rjmp	.+126    	; 0x4d8e <HVAC_SetTemp+0x604>
	else if (__tmp > 65535)
    4d10:	6f 81       	ldd	r22, Y+7	; 0x07
    4d12:	78 85       	ldd	r23, Y+8	; 0x08
    4d14:	89 85       	ldd	r24, Y+9	; 0x09
    4d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	3f ef       	ldi	r19, 0xFF	; 255
    4d1c:	4f e7       	ldi	r20, 0x7F	; 127
    4d1e:	57 e4       	ldi	r21, 0x47	; 71
    4d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d24:	18 16       	cp	r1, r24
    4d26:	4c f5       	brge	.+82     	; 0x4d7a <HVAC_SetTemp+0x5f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	40 e2       	ldi	r20, 0x20	; 32
    4d36:	51 e4       	ldi	r21, 0x41	; 65
    4d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d3c:	dc 01       	movw	r26, r24
    4d3e:	cb 01       	movw	r24, r22
    4d40:	bc 01       	movw	r22, r24
    4d42:	cd 01       	movw	r24, r26
    4d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d48:	dc 01       	movw	r26, r24
    4d4a:	cb 01       	movw	r24, r22
    4d4c:	9e 83       	std	Y+6, r25	; 0x06
    4d4e:	8d 83       	std	Y+5, r24	; 0x05
    4d50:	0f c0       	rjmp	.+30     	; 0x4d70 <HVAC_SetTemp+0x5e6>
    4d52:	80 e9       	ldi	r24, 0x90	; 144
    4d54:	91 e0       	ldi	r25, 0x01	; 1
    4d56:	9c 83       	std	Y+4, r25	; 0x04
    4d58:	8b 83       	std	Y+3, r24	; 0x03
    4d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    4d5e:	01 97       	sbiw	r24, 0x01	; 1
    4d60:	f1 f7       	brne	.-4      	; 0x4d5e <HVAC_SetTemp+0x5d4>
    4d62:	9c 83       	std	Y+4, r25	; 0x04
    4d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d66:	8d 81       	ldd	r24, Y+5	; 0x05
    4d68:	9e 81       	ldd	r25, Y+6	; 0x06
    4d6a:	01 97       	sbiw	r24, 0x01	; 1
    4d6c:	9e 83       	std	Y+6, r25	; 0x06
    4d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d70:	8d 81       	ldd	r24, Y+5	; 0x05
    4d72:	9e 81       	ldd	r25, Y+6	; 0x06
    4d74:	00 97       	sbiw	r24, 0x00	; 0
    4d76:	69 f7       	brne	.-38     	; 0x4d52 <HVAC_SetTemp+0x5c8>
    4d78:	14 c0       	rjmp	.+40     	; 0x4da2 <HVAC_SetTemp+0x618>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    4d7c:	78 85       	ldd	r23, Y+8	; 0x08
    4d7e:	89 85       	ldd	r24, Y+9	; 0x09
    4d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d86:	dc 01       	movw	r26, r24
    4d88:	cb 01       	movw	r24, r22
    4d8a:	9e 83       	std	Y+6, r25	; 0x06
    4d8c:	8d 83       	std	Y+5, r24	; 0x05
    4d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d90:	9e 81       	ldd	r25, Y+6	; 0x06
    4d92:	9a 83       	std	Y+2, r25	; 0x02
    4d94:	89 83       	std	Y+1, r24	; 0x01
    4d96:	89 81       	ldd	r24, Y+1	; 0x01
    4d98:	9a 81       	ldd	r25, Y+2	; 0x02
    4d9a:	01 97       	sbiw	r24, 0x01	; 1
    4d9c:	f1 f7       	brne	.-4      	; 0x4d9a <HVAC_SetTemp+0x610>
    4d9e:	9a 83       	std	Y+2, r25	; 0x02
    4da0:	89 83       	std	Y+1, r24	; 0x01
		}
		else _delay_ms(100);

		_delay_ms( STANDBY_CHECK_DELAY );
		Local_u8Counter-- ;
    4da2:	de 01       	movw	r26, r28
    4da4:	a8 5b       	subi	r26, 0xB8	; 184
    4da6:	bf 4f       	sbci	r27, 0xFF	; 255
    4da8:	fe 01       	movw	r30, r28
    4daa:	e8 5b       	subi	r30, 0xB8	; 184
    4dac:	ff 4f       	sbci	r31, 0xFF	; 255
    4dae:	80 81       	ld	r24, Z
    4db0:	81 50       	subi	r24, 0x01	; 1
    4db2:	8c 93       	st	X, r24
	u8 Local_u8IncKeyValue , Local_u8DecKeyValue ,Local_u8Counter = STANDBY_TOTAL_DELAYS , Local_u8SetTemp = Global_u8SetTemp;

	DISPLAY_SET_MODE_MESSAGE;
	_delay_ms(500);

	while( Local_u8Counter > 0)
    4db4:	fe 01       	movw	r30, r28
    4db6:	e8 5b       	subi	r30, 0xB8	; 184
    4db8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dba:	80 81       	ld	r24, Z
    4dbc:	88 23       	and	r24, r24
    4dbe:	09 f0       	breq	.+2      	; 0x4dc2 <HVAC_SetTemp+0x638>
    4dc0:	9b cd       	rjmp	.-1226   	; 0x48f8 <HVAC_SetTemp+0x16e>
		else _delay_ms(100);

		_delay_ms( STANDBY_CHECK_DELAY );
		Local_u8Counter-- ;
	}
	Global_boolSetMode = FALSE;
    4dc2:	81 e0       	ldi	r24, 0x01	; 1
    4dc4:	80 93 fb 01 	sts	0x01FB, r24
}
    4dc8:	c6 5b       	subi	r28, 0xB6	; 182
    4dca:	df 4f       	sbci	r29, 0xFF	; 255
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	cd bf       	out	0x3d, r28	; 61
    4dd6:	cf 91       	pop	r28
    4dd8:	df 91       	pop	r29
    4dda:	1f 91       	pop	r17
    4ddc:	0f 91       	pop	r16
    4dde:	08 95       	ret

00004de0 <HVAC_CheckTemperatureStatus>:


void HVAC_CheckTemperatureStatus(u16 Copy_u16ActTempValue )
{
    4de0:	df 93       	push	r29
    4de2:	cf 93       	push	r28
    4de4:	00 d0       	rcall	.+0      	; 0x4de6 <HVAC_CheckTemperatureStatus+0x6>
    4de6:	cd b7       	in	r28, 0x3d	; 61
    4de8:	de b7       	in	r29, 0x3e	; 62
    4dea:	9a 83       	std	Y+2, r25	; 0x02
    4dec:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_u16ActTempValue > (Global_u8SetTemp + TEMP_TOLERANCE) )
    4dee:	80 91 fd 01 	lds	r24, 0x01FD
    4df2:	88 2f       	mov	r24, r24
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	02 96       	adiw	r24, 0x02	; 2
    4df8:	9c 01       	movw	r18, r24
    4dfa:	89 81       	ldd	r24, Y+1	; 0x01
    4dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfe:	28 17       	cp	r18, r24
    4e00:	39 07       	cpc	r19, r25
    4e02:	80 f4       	brcc	.+32     	; 0x4e24 <HVAC_CheckTemperatureStatus+0x44>
	{
		TemperatureStatus = HOT ;
    4e04:	82 e0       	ldi	r24, 0x02	; 2
    4e06:	80 93 f8 01 	sts	0x01F8, r24
		LD_enuSetState( NORM_LD , LD_OFF);
    4e0a:	8f e1       	ldi	r24, 0x1F	; 31
    4e0c:	60 e0       	ldi	r22, 0x00	; 0
    4e0e:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
		LD_enuSetState( COLD_LD , LD_OFF);
    4e12:	80 e2       	ldi	r24, 0x20	; 32
    4e14:	60 e0       	ldi	r22, 0x00	; 0
    4e16:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
		LD_enuSetState( HOT_LD , LD_ON);
    4e1a:	8e e1       	ldi	r24, 0x1E	; 30
    4e1c:	61 e0       	ldi	r22, 0x01	; 1
    4e1e:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
    4e22:	29 c0       	rjmp	.+82     	; 0x4e76 <HVAC_CheckTemperatureStatus+0x96>
	}
	else if( Copy_u16ActTempValue < (Global_u8SetTemp - TEMP_TOLERANCE) )
    4e24:	80 91 fd 01 	lds	r24, 0x01FD
    4e28:	88 2f       	mov	r24, r24
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	02 97       	sbiw	r24, 0x02	; 2
    4e2e:	9c 01       	movw	r18, r24
    4e30:	89 81       	ldd	r24, Y+1	; 0x01
    4e32:	9a 81       	ldd	r25, Y+2	; 0x02
    4e34:	82 17       	cp	r24, r18
    4e36:	93 07       	cpc	r25, r19
    4e38:	78 f4       	brcc	.+30     	; 0x4e58 <HVAC_CheckTemperatureStatus+0x78>
	{
		TemperatureStatus = COLD ;
    4e3a:	10 92 f8 01 	sts	0x01F8, r1
		LD_enuSetState( HOT_LD , LD_OFF);
    4e3e:	8e e1       	ldi	r24, 0x1E	; 30
    4e40:	60 e0       	ldi	r22, 0x00	; 0
    4e42:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
		LD_enuSetState( NORM_LD , LD_OFF);
    4e46:	8f e1       	ldi	r24, 0x1F	; 31
    4e48:	60 e0       	ldi	r22, 0x00	; 0
    4e4a:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
		LD_enuSetState( COLD_LD , LD_ON);
    4e4e:	80 e2       	ldi	r24, 0x20	; 32
    4e50:	61 e0       	ldi	r22, 0x01	; 1
    4e52:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
    4e56:	0f c0       	rjmp	.+30     	; 0x4e76 <HVAC_CheckTemperatureStatus+0x96>
	}
	else
	{
		TemperatureStatus = NORMAL ;
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	80 93 f8 01 	sts	0x01F8, r24
		LD_enuSetState( HOT_LD , LD_OFF);
    4e5e:	8e e1       	ldi	r24, 0x1E	; 30
    4e60:	60 e0       	ldi	r22, 0x00	; 0
    4e62:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
		LD_enuSetState( COLD_LD , LD_OFF);
    4e66:	80 e2       	ldi	r24, 0x20	; 32
    4e68:	60 e0       	ldi	r22, 0x00	; 0
    4e6a:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
		LD_enuSetState( NORM_LD , LD_ON);
    4e6e:	8f e1       	ldi	r24, 0x1F	; 31
    4e70:	61 e0       	ldi	r22, 0x01	; 1
    4e72:	0e 94 a5 13 	call	0x274a	; 0x274a <LD_enuSetState>
	}
}
    4e76:	0f 90       	pop	r0
    4e78:	0f 90       	pop	r0
    4e7a:	cf 91       	pop	r28
    4e7c:	df 91       	pop	r29
    4e7e:	08 95       	ret

00004e80 <HVAC_AdjustCompressorStatus>:

void HVAC_AdjustCompressorStatus(void)
{
    4e80:	df 93       	push	r29
    4e82:	cf 93       	push	r28
    4e84:	00 d0       	rcall	.+0      	; 0x4e86 <HVAC_AdjustCompressorStatus+0x6>
    4e86:	cd b7       	in	r28, 0x3d	; 61
    4e88:	de b7       	in	r29, 0x3e	; 62
	switch( CompressorStatus)
    4e8a:	80 91 f7 01 	lds	r24, 0x01F7
    4e8e:	28 2f       	mov	r18, r24
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	3a 83       	std	Y+2, r19	; 0x02
    4e94:	29 83       	std	Y+1, r18	; 0x01
    4e96:	89 81       	ldd	r24, Y+1	; 0x01
    4e98:	9a 81       	ldd	r25, Y+2	; 0x02
    4e9a:	00 97       	sbiw	r24, 0x00	; 0
    4e9c:	61 f0       	breq	.+24     	; 0x4eb6 <HVAC_AdjustCompressorStatus+0x36>
    4e9e:	29 81       	ldd	r18, Y+1	; 0x01
    4ea0:	3a 81       	ldd	r19, Y+2	; 0x02
    4ea2:	21 30       	cpi	r18, 0x01	; 1
    4ea4:	31 05       	cpc	r19, r1
    4ea6:	71 f4       	brne	.+28     	; 0x4ec4 <HVAC_AdjustCompressorStatus+0x44>
	{
		case (OFF)	:	if( TemperatureStatus == HOT) CompressorStatus = ON ;
    4ea8:	80 91 f8 01 	lds	r24, 0x01F8
    4eac:	82 30       	cpi	r24, 0x02	; 2
    4eae:	51 f4       	brne	.+20     	; 0x4ec4 <HVAC_AdjustCompressorStatus+0x44>
    4eb0:	10 92 f7 01 	sts	0x01F7, r1
    4eb4:	07 c0       	rjmp	.+14     	; 0x4ec4 <HVAC_AdjustCompressorStatus+0x44>
						break;
		case (ON)	:	if( TemperatureStatus == COLD) CompressorStatus = OFF ;
    4eb6:	80 91 f8 01 	lds	r24, 0x01F8
    4eba:	88 23       	and	r24, r24
    4ebc:	19 f4       	brne	.+6      	; 0x4ec4 <HVAC_AdjustCompressorStatus+0x44>
    4ebe:	81 e0       	ldi	r24, 0x01	; 1
    4ec0:	80 93 f7 01 	sts	0x01F7, r24
							break;
	}
}
    4ec4:	0f 90       	pop	r0
    4ec6:	0f 90       	pop	r0
    4ec8:	cf 91       	pop	r28
    4eca:	df 91       	pop	r29
    4ecc:	08 95       	ret

00004ece <HVAC_UpdateReading>:

void HVAC_UpdateReading(u16 *Copy_u16AvgTempValue )
{
    4ece:	df 93       	push	r29
    4ed0:	cf 93       	push	r28
    4ed2:	00 d0       	rcall	.+0      	; 0x4ed4 <HVAC_UpdateReading+0x6>
    4ed4:	00 d0       	rcall	.+0      	; 0x4ed6 <HVAC_UpdateReading+0x8>
    4ed6:	0f 92       	push	r0
    4ed8:	cd b7       	in	r28, 0x3d	; 61
    4eda:	de b7       	in	r29, 0x3e	; 62
    4edc:	9d 83       	std	Y+5, r25	; 0x05
    4ede:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u16AccumReadings = 0;
    4ee0:	1b 82       	std	Y+3, r1	; 0x03
    4ee2:	1a 82       	std	Y+2, r1	; 0x02

	for( u8 Local_u8Iter = 0 ; Local_u8Iter < TEMP_AVG_READINGS ; Local_u8Iter++)
    4ee4:	19 82       	std	Y+1, r1	; 0x01
    4ee6:	1d c0       	rjmp	.+58     	; 0x4f22 <HVAC_UpdateReading+0x54>
	{
		ADC_enuStartConversion();
    4ee8:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <ADC_enuStartConversion>
		while( Global_boolRead == FALSE);
    4eec:	80 91 fa 01 	lds	r24, 0x01FA
    4ef0:	81 30       	cpi	r24, 0x01	; 1
    4ef2:	e1 f3       	breq	.-8      	; 0x4eec <HVAC_UpdateReading+0x1e>
		Local_u16AccumReadings += ( Global_u16TempRead / (ADC_GAIN_FACTOR * TEMP_COEFFICENT) );
    4ef4:	80 91 06 02 	lds	r24, 0x0206
    4ef8:	90 91 07 02 	lds	r25, 0x0207
    4efc:	24 e1       	ldi	r18, 0x14	; 20
    4efe:	30 e0       	ldi	r19, 0x00	; 0
    4f00:	b9 01       	movw	r22, r18
    4f02:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <__udivmodhi4>
    4f06:	cb 01       	movw	r24, r22
    4f08:	9c 01       	movw	r18, r24
    4f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f0e:	82 0f       	add	r24, r18
    4f10:	93 1f       	adc	r25, r19
    4f12:	9b 83       	std	Y+3, r25	; 0x03
    4f14:	8a 83       	std	Y+2, r24	; 0x02
		Global_boolRead = FALSE;
    4f16:	81 e0       	ldi	r24, 0x01	; 1
    4f18:	80 93 fa 01 	sts	0x01FA, r24

void HVAC_UpdateReading(u16 *Copy_u16AvgTempValue )
{
	u16 Local_u16AccumReadings = 0;

	for( u8 Local_u8Iter = 0 ; Local_u8Iter < TEMP_AVG_READINGS ; Local_u8Iter++)
    4f1c:	89 81       	ldd	r24, Y+1	; 0x01
    4f1e:	8f 5f       	subi	r24, 0xFF	; 255
    4f20:	89 83       	std	Y+1, r24	; 0x01
    4f22:	89 81       	ldd	r24, Y+1	; 0x01
    4f24:	85 30       	cpi	r24, 0x05	; 5
    4f26:	00 f3       	brcs	.-64     	; 0x4ee8 <HVAC_UpdateReading+0x1a>
		while( Global_boolRead == FALSE);
		Local_u16AccumReadings += ( Global_u16TempRead / (ADC_GAIN_FACTOR * TEMP_COEFFICENT) );
		Global_boolRead = FALSE;
	}

	Local_u16AccumReadings = ( (Local_u16AccumReadings + (TEMP_AVG_READINGS -1) )/  TEMP_AVG_READINGS  )  ;
    4f28:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f2c:	04 96       	adiw	r24, 0x04	; 4
    4f2e:	25 e0       	ldi	r18, 0x05	; 5
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	b9 01       	movw	r22, r18
    4f34:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <__udivmodhi4>
    4f38:	cb 01       	movw	r24, r22
    4f3a:	9b 83       	std	Y+3, r25	; 0x03
    4f3c:	8a 83       	std	Y+2, r24	; 0x02
	Local_u16AccumReadings = (Local_u16AccumReadings - ( Local_u16AccumReadings / 33 ) )  ;
    4f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f40:	9b 81       	ldd	r25, Y+3	; 0x03
    4f42:	21 e2       	ldi	r18, 0x21	; 33
    4f44:	30 e0       	ldi	r19, 0x00	; 0
    4f46:	b9 01       	movw	r22, r18
    4f48:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <__udivmodhi4>
    4f4c:	cb 01       	movw	r24, r22
    4f4e:	9c 01       	movw	r18, r24
    4f50:	8a 81       	ldd	r24, Y+2	; 0x02
    4f52:	9b 81       	ldd	r25, Y+3	; 0x03
    4f54:	82 1b       	sub	r24, r18
    4f56:	93 0b       	sbc	r25, r19
    4f58:	9b 83       	std	Y+3, r25	; 0x03
    4f5a:	8a 83       	std	Y+2, r24	; 0x02

	if(Local_u16AccumReadings < 2  )	Local_u16AccumReadings = 2 ; 	//Minimum Correct Reading.
    4f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    4f60:	82 30       	cpi	r24, 0x02	; 2
    4f62:	91 05       	cpc	r25, r1
    4f64:	20 f4       	brcc	.+8      	; 0x4f6e <HVAC_UpdateReading+0xa0>
    4f66:	82 e0       	ldi	r24, 0x02	; 2
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	9b 83       	std	Y+3, r25	; 0x03
    4f6c:	8a 83       	std	Y+2, r24	; 0x02

	*Copy_u16AvgTempValue = Local_u16AccumReadings;
    4f6e:	ec 81       	ldd	r30, Y+4	; 0x04
    4f70:	fd 81       	ldd	r31, Y+5	; 0x05
    4f72:	8a 81       	ldd	r24, Y+2	; 0x02
    4f74:	9b 81       	ldd	r25, Y+3	; 0x03
    4f76:	91 83       	std	Z+1, r25	; 0x01
    4f78:	80 83       	st	Z, r24

}
    4f7a:	0f 90       	pop	r0
    4f7c:	0f 90       	pop	r0
    4f7e:	0f 90       	pop	r0
    4f80:	0f 90       	pop	r0
    4f82:	0f 90       	pop	r0
    4f84:	cf 91       	pop	r28
    4f86:	df 91       	pop	r29
    4f88:	08 95       	ret

00004f8a <__udivmodhi4>:
    4f8a:	aa 1b       	sub	r26, r26
    4f8c:	bb 1b       	sub	r27, r27
    4f8e:	51 e1       	ldi	r21, 0x11	; 17
    4f90:	07 c0       	rjmp	.+14     	; 0x4fa0 <__udivmodhi4_ep>

00004f92 <__udivmodhi4_loop>:
    4f92:	aa 1f       	adc	r26, r26
    4f94:	bb 1f       	adc	r27, r27
    4f96:	a6 17       	cp	r26, r22
    4f98:	b7 07       	cpc	r27, r23
    4f9a:	10 f0       	brcs	.+4      	; 0x4fa0 <__udivmodhi4_ep>
    4f9c:	a6 1b       	sub	r26, r22
    4f9e:	b7 0b       	sbc	r27, r23

00004fa0 <__udivmodhi4_ep>:
    4fa0:	88 1f       	adc	r24, r24
    4fa2:	99 1f       	adc	r25, r25
    4fa4:	5a 95       	dec	r21
    4fa6:	a9 f7       	brne	.-22     	; 0x4f92 <__udivmodhi4_loop>
    4fa8:	80 95       	com	r24
    4faa:	90 95       	com	r25
    4fac:	bc 01       	movw	r22, r24
    4fae:	cd 01       	movw	r24, r26
    4fb0:	08 95       	ret

00004fb2 <__divmodhi4>:
    4fb2:	97 fb       	bst	r25, 7
    4fb4:	09 2e       	mov	r0, r25
    4fb6:	07 26       	eor	r0, r23
    4fb8:	0a d0       	rcall	.+20     	; 0x4fce <__divmodhi4_neg1>
    4fba:	77 fd       	sbrc	r23, 7
    4fbc:	04 d0       	rcall	.+8      	; 0x4fc6 <__divmodhi4_neg2>
    4fbe:	e5 df       	rcall	.-54     	; 0x4f8a <__udivmodhi4>
    4fc0:	06 d0       	rcall	.+12     	; 0x4fce <__divmodhi4_neg1>
    4fc2:	00 20       	and	r0, r0
    4fc4:	1a f4       	brpl	.+6      	; 0x4fcc <__divmodhi4_exit>

00004fc6 <__divmodhi4_neg2>:
    4fc6:	70 95       	com	r23
    4fc8:	61 95       	neg	r22
    4fca:	7f 4f       	sbci	r23, 0xFF	; 255

00004fcc <__divmodhi4_exit>:
    4fcc:	08 95       	ret

00004fce <__divmodhi4_neg1>:
    4fce:	f6 f7       	brtc	.-4      	; 0x4fcc <__divmodhi4_exit>
    4fd0:	90 95       	com	r25
    4fd2:	81 95       	neg	r24
    4fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd6:	08 95       	ret

00004fd8 <__udivmodsi4>:
    4fd8:	a1 e2       	ldi	r26, 0x21	; 33
    4fda:	1a 2e       	mov	r1, r26
    4fdc:	aa 1b       	sub	r26, r26
    4fde:	bb 1b       	sub	r27, r27
    4fe0:	fd 01       	movw	r30, r26
    4fe2:	0d c0       	rjmp	.+26     	; 0x4ffe <__udivmodsi4_ep>

00004fe4 <__udivmodsi4_loop>:
    4fe4:	aa 1f       	adc	r26, r26
    4fe6:	bb 1f       	adc	r27, r27
    4fe8:	ee 1f       	adc	r30, r30
    4fea:	ff 1f       	adc	r31, r31
    4fec:	a2 17       	cp	r26, r18
    4fee:	b3 07       	cpc	r27, r19
    4ff0:	e4 07       	cpc	r30, r20
    4ff2:	f5 07       	cpc	r31, r21
    4ff4:	20 f0       	brcs	.+8      	; 0x4ffe <__udivmodsi4_ep>
    4ff6:	a2 1b       	sub	r26, r18
    4ff8:	b3 0b       	sbc	r27, r19
    4ffa:	e4 0b       	sbc	r30, r20
    4ffc:	f5 0b       	sbc	r31, r21

00004ffe <__udivmodsi4_ep>:
    4ffe:	66 1f       	adc	r22, r22
    5000:	77 1f       	adc	r23, r23
    5002:	88 1f       	adc	r24, r24
    5004:	99 1f       	adc	r25, r25
    5006:	1a 94       	dec	r1
    5008:	69 f7       	brne	.-38     	; 0x4fe4 <__udivmodsi4_loop>
    500a:	60 95       	com	r22
    500c:	70 95       	com	r23
    500e:	80 95       	com	r24
    5010:	90 95       	com	r25
    5012:	9b 01       	movw	r18, r22
    5014:	ac 01       	movw	r20, r24
    5016:	bd 01       	movw	r22, r26
    5018:	cf 01       	movw	r24, r30
    501a:	08 95       	ret

0000501c <__divmodsi4>:
    501c:	97 fb       	bst	r25, 7
    501e:	09 2e       	mov	r0, r25
    5020:	05 26       	eor	r0, r21
    5022:	0e d0       	rcall	.+28     	; 0x5040 <__divmodsi4_neg1>
    5024:	57 fd       	sbrc	r21, 7
    5026:	04 d0       	rcall	.+8      	; 0x5030 <__divmodsi4_neg2>
    5028:	d7 df       	rcall	.-82     	; 0x4fd8 <__udivmodsi4>
    502a:	0a d0       	rcall	.+20     	; 0x5040 <__divmodsi4_neg1>
    502c:	00 1c       	adc	r0, r0
    502e:	38 f4       	brcc	.+14     	; 0x503e <__divmodsi4_exit>

00005030 <__divmodsi4_neg2>:
    5030:	50 95       	com	r21
    5032:	40 95       	com	r20
    5034:	30 95       	com	r19
    5036:	21 95       	neg	r18
    5038:	3f 4f       	sbci	r19, 0xFF	; 255
    503a:	4f 4f       	sbci	r20, 0xFF	; 255
    503c:	5f 4f       	sbci	r21, 0xFF	; 255

0000503e <__divmodsi4_exit>:
    503e:	08 95       	ret

00005040 <__divmodsi4_neg1>:
    5040:	f6 f7       	brtc	.-4      	; 0x503e <__divmodsi4_exit>
    5042:	90 95       	com	r25
    5044:	80 95       	com	r24
    5046:	70 95       	com	r23
    5048:	61 95       	neg	r22
    504a:	7f 4f       	sbci	r23, 0xFF	; 255
    504c:	8f 4f       	sbci	r24, 0xFF	; 255
    504e:	9f 4f       	sbci	r25, 0xFF	; 255
    5050:	08 95       	ret

00005052 <__prologue_saves__>:
    5052:	2f 92       	push	r2
    5054:	3f 92       	push	r3
    5056:	4f 92       	push	r4
    5058:	5f 92       	push	r5
    505a:	6f 92       	push	r6
    505c:	7f 92       	push	r7
    505e:	8f 92       	push	r8
    5060:	9f 92       	push	r9
    5062:	af 92       	push	r10
    5064:	bf 92       	push	r11
    5066:	cf 92       	push	r12
    5068:	df 92       	push	r13
    506a:	ef 92       	push	r14
    506c:	ff 92       	push	r15
    506e:	0f 93       	push	r16
    5070:	1f 93       	push	r17
    5072:	cf 93       	push	r28
    5074:	df 93       	push	r29
    5076:	cd b7       	in	r28, 0x3d	; 61
    5078:	de b7       	in	r29, 0x3e	; 62
    507a:	ca 1b       	sub	r28, r26
    507c:	db 0b       	sbc	r29, r27
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	f8 94       	cli
    5082:	de bf       	out	0x3e, r29	; 62
    5084:	0f be       	out	0x3f, r0	; 63
    5086:	cd bf       	out	0x3d, r28	; 61
    5088:	09 94       	ijmp

0000508a <__epilogue_restores__>:
    508a:	2a 88       	ldd	r2, Y+18	; 0x12
    508c:	39 88       	ldd	r3, Y+17	; 0x11
    508e:	48 88       	ldd	r4, Y+16	; 0x10
    5090:	5f 84       	ldd	r5, Y+15	; 0x0f
    5092:	6e 84       	ldd	r6, Y+14	; 0x0e
    5094:	7d 84       	ldd	r7, Y+13	; 0x0d
    5096:	8c 84       	ldd	r8, Y+12	; 0x0c
    5098:	9b 84       	ldd	r9, Y+11	; 0x0b
    509a:	aa 84       	ldd	r10, Y+10	; 0x0a
    509c:	b9 84       	ldd	r11, Y+9	; 0x09
    509e:	c8 84       	ldd	r12, Y+8	; 0x08
    50a0:	df 80       	ldd	r13, Y+7	; 0x07
    50a2:	ee 80       	ldd	r14, Y+6	; 0x06
    50a4:	fd 80       	ldd	r15, Y+5	; 0x05
    50a6:	0c 81       	ldd	r16, Y+4	; 0x04
    50a8:	1b 81       	ldd	r17, Y+3	; 0x03
    50aa:	aa 81       	ldd	r26, Y+2	; 0x02
    50ac:	b9 81       	ldd	r27, Y+1	; 0x01
    50ae:	ce 0f       	add	r28, r30
    50b0:	d1 1d       	adc	r29, r1
    50b2:	0f b6       	in	r0, 0x3f	; 63
    50b4:	f8 94       	cli
    50b6:	de bf       	out	0x3e, r29	; 62
    50b8:	0f be       	out	0x3f, r0	; 63
    50ba:	cd bf       	out	0x3d, r28	; 61
    50bc:	ed 01       	movw	r28, r26
    50be:	08 95       	ret

000050c0 <_exit>:
    50c0:	f8 94       	cli

000050c2 <__stop_program>:
    50c2:	ff cf       	rjmp	.-2      	; 0x50c2 <__stop_program>

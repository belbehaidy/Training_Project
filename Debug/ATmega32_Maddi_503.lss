
ATmega32_Maddi_503.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000190  00800060  00003376  0000340a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008001f0  008001f0  0000359a  2**0
                  ALLOC
  3 .stab         00003ccc  00000000  00000000  0000359c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f36  00000000  00000000  00007268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000919e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000931e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000094f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000b500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d674  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d814  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000dad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e383  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3f       	cpi	r26, 0xF1	; 241
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <main>
      8a:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 19 	jmp	0x333c	; 0x333c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e9 56       	subi	r30, 0x69	; 105
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	89 83       	std	Y+1, r24	; 0x01

	//

	return Local_enuErrorState ;
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <DIO_enuSetPinDirection+0x6>
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <DIO_enuSetPinDirection+0x8>
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <DIO_enuSetPinDirection+0xa>
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	6b 83       	std	Y+3, r22	; 0x03
     d00:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	84 30       	cpi	r24, 0x04	; 4
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <DIO_enuSetPinDirection+0x20>
     d0c:	d0 c0       	rjmp	.+416    	; 0xeae <DIO_enuSetPinDirection+0x1c0>
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	88 30       	cpi	r24, 0x08	; 8
     d12:	08 f0       	brcs	.+2      	; 0xd16 <DIO_enuSetPinDirection+0x28>
     d14:	cc c0       	rjmp	.+408    	; 0xeae <DIO_enuSetPinDirection+0x1c0>
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <DIO_enuSetPinDirection+0x30>
     d1c:	c8 c0       	rjmp	.+400    	; 0xeae <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT )
	{
		switch (Copy_u8GroupID)
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	3e 83       	std	Y+6, r19	; 0x06
     d26:	2d 83       	std	Y+5, r18	; 0x05
     d28:	6d 81       	ldd	r22, Y+5	; 0x05
     d2a:	7e 81       	ldd	r23, Y+6	; 0x06
     d2c:	61 30       	cpi	r22, 0x01	; 1
     d2e:	71 05       	cpc	r23, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <DIO_enuSetPinDirection+0x46>
     d32:	41 c0       	rjmp	.+130    	; 0xdb6 <DIO_enuSetPinDirection+0xc8>
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	91 05       	cpc	r25, r1
     d3c:	34 f4       	brge	.+12     	; 0xd4a <DIO_enuSetPinDirection+0x5c>
     d3e:	2d 81       	ldd	r18, Y+5	; 0x05
     d40:	3e 81       	ldd	r19, Y+6	; 0x06
     d42:	21 15       	cp	r18, r1
     d44:	31 05       	cpc	r19, r1
     d46:	71 f0       	breq	.+28     	; 0xd64 <DIO_enuSetPinDirection+0x76>
     d48:	b0 c0       	rjmp	.+352    	; 0xeaa <DIO_enuSetPinDirection+0x1bc>
     d4a:	6d 81       	ldd	r22, Y+5	; 0x05
     d4c:	7e 81       	ldd	r23, Y+6	; 0x06
     d4e:	62 30       	cpi	r22, 0x02	; 2
     d50:	71 05       	cpc	r23, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <DIO_enuSetPinDirection+0x68>
     d54:	59 c0       	rjmp	.+178    	; 0xe08 <DIO_enuSetPinDirection+0x11a>
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <DIO_enuSetPinDirection+0x74>
     d60:	7c c0       	rjmp	.+248    	; 0xe5a <DIO_enuSetPinDirection+0x16c>
     d62:	a3 c0       	rjmp	.+326    	; 0xeaa <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     d64:	aa e3       	ldi	r26, 0x3A	; 58
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ea e3       	ldi	r30, 0x3A	; 58
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_enuSetPinDirection+0x92>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	2a 95       	dec	r18
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_enuSetPinDirection+0x8e>
     d84:	80 95       	com	r24
     d86:	84 23       	and	r24, r20
     d88:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction <<   Copy_u8PinID );
     d8a:	aa e3       	ldi	r26, 0x3A	; 58
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	ea e3       	ldi	r30, 0x3A	; 58
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	88 2f       	mov	r24, r24
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	b9 01       	movw	r22, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_enuSetPinDirection+0xbc>
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	8a 95       	dec	r24
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_enuSetPinDirection+0xb8>
     dae:	cb 01       	movw	r24, r22
     db0:	84 2b       	or	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	7a c0       	rjmp	.+244    	; 0xeaa <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     db6:	a7 e3       	ldi	r26, 0x37	; 55
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e7 e3       	ldi	r30, 0x37	; 55
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_enuSetPinDirection+0xe4>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	2a 95       	dec	r18
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_enuSetPinDirection+0xe0>
     dd6:	80 95       	com	r24
     dd8:	84 23       	and	r24, r20
     dda:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction <<   Copy_u8PinID );
     ddc:	a7 e3       	ldi	r26, 0x37	; 55
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e7 e3       	ldi	r30, 0x37	; 55
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	b9 01       	movw	r22, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_enuSetPinDirection+0x10e>
     df8:	66 0f       	add	r22, r22
     dfa:	77 1f       	adc	r23, r23
     dfc:	8a 95       	dec	r24
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_enuSetPinDirection+0x10a>
     e00:	cb 01       	movw	r24, r22
     e02:	84 2b       	or	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	51 c0       	rjmp	.+162    	; 0xeaa <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     e08:	a4 e3       	ldi	r26, 0x34	; 52
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e4 e3       	ldi	r30, 0x34	; 52
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_enuSetPinDirection+0x136>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	2a 95       	dec	r18
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_enuSetPinDirection+0x132>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction <<   Copy_u8PinID );
     e2e:	a4 e3       	ldi	r26, 0x34	; 52
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e4 e3       	ldi	r30, 0x34	; 52
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	b9 01       	movw	r22, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_enuSetPinDirection+0x160>
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	8a 95       	dec	r24
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_enuSetPinDirection+0x15c>
     e52:	cb 01       	movw	r24, r22
     e54:	84 2b       	or	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	28 c0       	rjmp	.+80     	; 0xeaa <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     e5a:	a1 e3       	ldi	r26, 0x31	; 49
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e1 e3       	ldi	r30, 0x31	; 49
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_enuSetPinDirection+0x188>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	2a 95       	dec	r18
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_enuSetPinDirection+0x184>
     e7a:	80 95       	com	r24
     e7c:	84 23       	and	r24, r20
     e7e:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction <<   Copy_u8PinID );
     e80:	a1 e3       	ldi	r26, 0x31	; 49
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e1 e3       	ldi	r30, 0x31	; 49
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	b9 01       	movw	r22, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_enuSetPinDirection+0x1b2>
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	8a 95       	dec	r24
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <DIO_enuSetPinDirection+0x1ae>
     ea4:	cb 01       	movw	r24, r22
     ea6:	84 2b       	or	r24, r20
     ea8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     eaa:	19 82       	std	Y+1, r1	; 0x01
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb4:	26 96       	adiw	r28, 0x06	; 6
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <DIO_enuSetPinValue+0x6>
     ecc:	00 d0       	rcall	.+0      	; 0xece <DIO_enuSetPinValue+0x8>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <DIO_enuSetPinValue+0xa>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	8a 83       	std	Y+2, r24	; 0x02
     ed6:	6b 83       	std	Y+3, r22	; 0x03
     ed8:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	84 30       	cpi	r24, 0x04	; 4
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <DIO_enuSetPinValue+0x20>
     ee4:	d3 c0       	rjmp	.+422    	; 0x108c <DIO_enuSetPinValue+0x1c6>
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	88 30       	cpi	r24, 0x08	; 8
     eea:	08 f0       	brcs	.+2      	; 0xeee <DIO_enuSetPinValue+0x28>
     eec:	cf c0       	rjmp	.+414    	; 0x108c <DIO_enuSetPinValue+0x1c6>
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	20 f0       	brcs	.+8      	; 0xefc <DIO_enuSetPinValue+0x36>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	08 f0       	brcs	.+2      	; 0xefc <DIO_enuSetPinValue+0x36>
     efa:	c8 c0       	rjmp	.+400    	; 0x108c <DIO_enuSetPinValue+0x1c6>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ) )
	{
		switch (Copy_u8GroupID)
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3e 83       	std	Y+6, r19	; 0x06
     f04:	2d 83       	std	Y+5, r18	; 0x05
     f06:	6d 81       	ldd	r22, Y+5	; 0x05
     f08:	7e 81       	ldd	r23, Y+6	; 0x06
     f0a:	61 30       	cpi	r22, 0x01	; 1
     f0c:	71 05       	cpc	r23, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <DIO_enuSetPinValue+0x4c>
     f10:	41 c0       	rjmp	.+130    	; 0xf94 <DIO_enuSetPinValue+0xce>
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	91 05       	cpc	r25, r1
     f1a:	34 f4       	brge	.+12     	; 0xf28 <DIO_enuSetPinValue+0x62>
     f1c:	2d 81       	ldd	r18, Y+5	; 0x05
     f1e:	3e 81       	ldd	r19, Y+6	; 0x06
     f20:	21 15       	cp	r18, r1
     f22:	31 05       	cpc	r19, r1
     f24:	71 f0       	breq	.+28     	; 0xf42 <DIO_enuSetPinValue+0x7c>
     f26:	b0 c0       	rjmp	.+352    	; 0x1088 <DIO_enuSetPinValue+0x1c2>
     f28:	6d 81       	ldd	r22, Y+5	; 0x05
     f2a:	7e 81       	ldd	r23, Y+6	; 0x06
     f2c:	62 30       	cpi	r22, 0x02	; 2
     f2e:	71 05       	cpc	r23, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <DIO_enuSetPinValue+0x6e>
     f32:	59 c0       	rjmp	.+178    	; 0xfe6 <DIO_enuSetPinValue+0x120>
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_enuSetPinValue+0x7a>
     f3e:	7c c0       	rjmp	.+248    	; 0x1038 <DIO_enuSetPinValue+0x172>
     f40:	a3 c0       	rjmp	.+326    	; 0x1088 <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
     f42:	ab e3       	ldi	r26, 0x3B	; 59
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e3       	ldi	r30, 0x3B	; 59
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_enuSetPinValue+0x98>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	2a 95       	dec	r18
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_enuSetPinValue+0x94>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value <<   Copy_u8PinID );
     f68:	ab e3       	ldi	r26, 0x3B	; 59
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	eb e3       	ldi	r30, 0x3B	; 59
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	b9 01       	movw	r22, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_enuSetPinValue+0xc2>
     f84:	66 0f       	add	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	8a 95       	dec	r24
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_enuSetPinValue+0xbe>
     f8c:	cb 01       	movw	r24, r22
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	7a c0       	rjmp	.+244    	; 0x1088 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
     f94:	a8 e3       	ldi	r26, 0x38	; 56
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e8 e3       	ldi	r30, 0x38	; 56
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_enuSetPinValue+0xea>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	2a 95       	dec	r18
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_enuSetPinValue+0xe6>
     fb4:	80 95       	com	r24
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value <<   Copy_u8PinID );
     fba:	a8 e3       	ldi	r26, 0x38	; 56
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e8 e3       	ldi	r30, 0x38	; 56
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	b9 01       	movw	r22, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_enuSetPinValue+0x114>
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	8a 95       	dec	r24
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_enuSetPinValue+0x110>
     fde:	cb 01       	movw	r24, r22
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	51 c0       	rjmp	.+162    	; 0x1088 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
     fe6:	a5 e3       	ldi	r26, 0x35	; 53
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e5 e3       	ldi	r30, 0x35	; 53
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_enuSetPinValue+0x13c>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	2a 95       	dec	r18
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_enuSetPinValue+0x138>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value <<   Copy_u8PinID );
    100c:	a5 e3       	ldi	r26, 0x35	; 53
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	b9 01       	movw	r22, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_enuSetPinValue+0x166>
    1028:	66 0f       	add	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	8a 95       	dec	r24
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_enuSetPinValue+0x162>
    1030:	cb 01       	movw	r24, r22
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	28 c0       	rjmp	.+80     	; 0x1088 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    1038:	a2 e3       	ldi	r26, 0x32	; 50
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e2 e3       	ldi	r30, 0x32	; 50
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_enuSetPinValue+0x18e>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	2a 95       	dec	r18
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_enuSetPinValue+0x18a>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value <<   Copy_u8PinID );
    105e:	a2 e3       	ldi	r26, 0x32	; 50
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e2 e3       	ldi	r30, 0x32	; 50
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	b9 01       	movw	r22, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_enuSetPinValue+0x1b8>
    107a:	66 0f       	add	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_enuSetPinValue+0x1b4>
    1082:	cb 01       	movw	r24, r22
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1088:	19 82       	std	Y+1, r1	; 0x01
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
}
    1092:	26 96       	adiw	r28, 0x06	; 6
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <DIO_enuTogglePinValue+0x6>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <DIO_enuTogglePinValue+0x8>
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	8a 83       	std	Y+2, r24	; 0x02
    10b4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <DIO_enuTogglePinValue+0x1e>
    10c0:	74 c0       	rjmp	.+232    	; 0x11aa <DIO_enuTogglePinValue+0x106>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	88 30       	cpi	r24, 0x08	; 8
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <DIO_enuTogglePinValue+0x26>
    10c8:	70 c0       	rjmp	.+224    	; 0x11aa <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3d 83       	std	Y+5, r19	; 0x05
    10d2:	2c 83       	std	Y+4, r18	; 0x04
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	91 05       	cpc	r25, r1
    10dc:	49 f1       	breq	.+82     	; 0x1130 <DIO_enuTogglePinValue+0x8c>
    10de:	2c 81       	ldd	r18, Y+4	; 0x04
    10e0:	3d 81       	ldd	r19, Y+5	; 0x05
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <DIO_enuTogglePinValue+0x4e>
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	61 f0       	breq	.+24     	; 0x1108 <DIO_enuTogglePinValue+0x64>
    10f0:	5a c0       	rjmp	.+180    	; 0x11a6 <DIO_enuTogglePinValue+0x102>
    10f2:	2c 81       	ldd	r18, Y+4	; 0x04
    10f4:	3d 81       	ldd	r19, Y+5	; 0x05
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	71 f1       	breq	.+92     	; 0x1158 <DIO_enuTogglePinValue+0xb4>
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	e9 f1       	breq	.+122    	; 0x1180 <DIO_enuTogglePinValue+0xdc>
    1106:	4f c0       	rjmp	.+158    	; 0x11a6 <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    1108:	ab e3       	ldi	r26, 0x3B	; 59
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_enuTogglePinValue+0x82>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_enuTogglePinValue+0x7e>
    112a:	84 27       	eor	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	3b c0       	rjmp	.+118    	; 0x11a6 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    1130:	a8 e3       	ldi	r26, 0x38	; 56
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e8 e3       	ldi	r30, 0x38	; 56
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_enuTogglePinValue+0xaa>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_enuTogglePinValue+0xa6>
    1152:	84 27       	eor	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	27 c0       	rjmp	.+78     	; 0x11a6 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    1158:	a5 e3       	ldi	r26, 0x35	; 53
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e3       	ldi	r30, 0x35	; 53
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_enuTogglePinValue+0xd2>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_enuTogglePinValue+0xce>
    117a:	84 27       	eor	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	13 c0       	rjmp	.+38     	; 0x11a6 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    1180:	a2 e3       	ldi	r26, 0x32	; 50
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e2 e3       	ldi	r30, 0x32	; 50
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_enuTogglePinValue+0xfa>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_enuTogglePinValue+0xf6>
    11a2:	84 27       	eor	r24, r20
    11a4:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    11a6:	19 82       	std	Y+1, r1	; 0x01
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	27 97       	sbiw	r28, 0x07	; 7
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	8a 83       	std	Y+2, r24	; 0x02
    11d6:	6b 83       	std	Y+3, r22	; 0x03
    11d8:	5d 83       	std	Y+5, r21	; 0x05
    11da:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	09 f4       	brne	.+2      	; 0x11ea <DIO_enuGetPinValue+0x2a>
    11e8:	7d c0       	rjmp	.+250    	; 0x12e4 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <DIO_enuGetPinValue+0x32>
    11f0:	76 c0       	rjmp	.+236    	; 0x12de <DIO_enuGetPinValue+0x11e>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 30       	cpi	r24, 0x08	; 8
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <DIO_enuGetPinValue+0x3a>
    11f8:	72 c0       	rjmp	.+228    	; 0x12de <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3f 83       	std	Y+7, r19	; 0x07
    1202:	2e 83       	std	Y+6, r18	; 0x06
    1204:	4e 81       	ldd	r20, Y+6	; 0x06
    1206:	5f 81       	ldd	r21, Y+7	; 0x07
    1208:	41 30       	cpi	r20, 0x01	; 1
    120a:	51 05       	cpc	r21, r1
    120c:	59 f1       	breq	.+86     	; 0x1264 <DIO_enuGetPinValue+0xa4>
    120e:	8e 81       	ldd	r24, Y+6	; 0x06
    1210:	9f 81       	ldd	r25, Y+7	; 0x07
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	91 05       	cpc	r25, r1
    1216:	34 f4       	brge	.+12     	; 0x1224 <DIO_enuGetPinValue+0x64>
    1218:	2e 81       	ldd	r18, Y+6	; 0x06
    121a:	3f 81       	ldd	r19, Y+7	; 0x07
    121c:	21 15       	cp	r18, r1
    121e:	31 05       	cpc	r19, r1
    1220:	69 f0       	breq	.+26     	; 0x123c <DIO_enuGetPinValue+0x7c>
    1222:	5b c0       	rjmp	.+182    	; 0x12da <DIO_enuGetPinValue+0x11a>
    1224:	4e 81       	ldd	r20, Y+6	; 0x06
    1226:	5f 81       	ldd	r21, Y+7	; 0x07
    1228:	42 30       	cpi	r20, 0x02	; 2
    122a:	51 05       	cpc	r21, r1
    122c:	79 f1       	breq	.+94     	; 0x128c <DIO_enuGetPinValue+0xcc>
    122e:	8e 81       	ldd	r24, Y+6	; 0x06
    1230:	9f 81       	ldd	r25, Y+7	; 0x07
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	91 05       	cpc	r25, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <DIO_enuGetPinValue+0x7a>
    1238:	3d c0       	rjmp	.+122    	; 0x12b4 <DIO_enuGetPinValue+0xf4>
    123a:	4f c0       	rjmp	.+158    	; 0x12da <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( ( PINA >> Copy_u8PinID ) & DIO_BIT_MASK );
    123c:	e9 e3       	ldi	r30, 0x39	; 57
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	a9 01       	movw	r20, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_enuGetPinValue+0x94>
    1250:	55 95       	asr	r21
    1252:	47 95       	ror	r20
    1254:	8a 95       	dec	r24
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_enuGetPinValue+0x90>
    1258:	ca 01       	movw	r24, r20
    125a:	81 70       	andi	r24, 0x01	; 1
    125c:	ec 81       	ldd	r30, Y+4	; 0x04
    125e:	fd 81       	ldd	r31, Y+5	; 0x05
    1260:	80 83       	st	Z, r24
    1262:	3b c0       	rjmp	.+118    	; 0x12da <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( ( PINB >> Copy_u8PinID ) & DIO_BIT_MASK );
    1264:	e6 e3       	ldi	r30, 0x36	; 54
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a9 01       	movw	r20, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_enuGetPinValue+0xbc>
    1278:	55 95       	asr	r21
    127a:	47 95       	ror	r20
    127c:	8a 95       	dec	r24
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_enuGetPinValue+0xb8>
    1280:	ca 01       	movw	r24, r20
    1282:	81 70       	andi	r24, 0x01	; 1
    1284:	ec 81       	ldd	r30, Y+4	; 0x04
    1286:	fd 81       	ldd	r31, Y+5	; 0x05
    1288:	80 83       	st	Z, r24
    128a:	27 c0       	rjmp	.+78     	; 0x12da <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( ( PINC >> Copy_u8PinID ) & DIO_BIT_MASK );
    128c:	e3 e3       	ldi	r30, 0x33	; 51
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a9 01       	movw	r20, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_enuGetPinValue+0xe4>
    12a0:	55 95       	asr	r21
    12a2:	47 95       	ror	r20
    12a4:	8a 95       	dec	r24
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_enuGetPinValue+0xe0>
    12a8:	ca 01       	movw	r24, r20
    12aa:	81 70       	andi	r24, 0x01	; 1
    12ac:	ec 81       	ldd	r30, Y+4	; 0x04
    12ae:	fd 81       	ldd	r31, Y+5	; 0x05
    12b0:	80 83       	st	Z, r24
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( ( PIND >> Copy_u8PinID ) & DIO_BIT_MASK );
    12b4:	e0 e3       	ldi	r30, 0x30	; 48
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a9 01       	movw	r20, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_enuGetPinValue+0x10c>
    12c8:	55 95       	asr	r21
    12ca:	47 95       	ror	r20
    12cc:	8a 95       	dec	r24
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_enuGetPinValue+0x108>
    12d0:	ca 01       	movw	r24, r20
    12d2:	81 70       	andi	r24, 0x01	; 1
    12d4:	ec 81       	ldd	r30, Y+4	; 0x04
    12d6:	fd 81       	ldd	r31, Y+5	; 0x05
    12d8:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    12da:	19 82       	std	Y+1, r1	; 0x01
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ea:	27 96       	adiw	r28, 0x07	; 7
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <Switch_enuInit>:

extern u8 Switch_u8SwitchesMaxNum ;
extern Switch_t Switch[];

ES_t Switch_enuInit(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <Switch_enuInit+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <Switch_enuInit+0x8>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	8a 83       	std	Y+2, r24	; 0x02
    130c:	51 c0       	rjmp	.+162    	; 0x13b0 <Switch_enuInit+0xb4>

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
	{
		Local_enuAerror[0] = DIO_enuSetPinDirection	(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , DIO_u8INPUT);
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	c9 01       	movw	r24, r18
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	82 0f       	add	r24, r18
    131c:	93 1f       	adc	r25, r19
    131e:	fc 01       	movw	r30, r24
    1320:	e8 56       	subi	r30, 0x68	; 104
    1322:	fe 4f       	sbci	r31, 0xFE	; 254
    1324:	40 81       	ld	r20, Z
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	c9 01       	movw	r24, r18
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	82 0f       	add	r24, r18
    1334:	93 1f       	adc	r25, r19
    1336:	fc 01       	movw	r30, r24
    1338:	e7 56       	subi	r30, 0x67	; 103
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	90 81       	ld	r25, Z
    133e:	84 2f       	mov	r24, r20
    1340:	69 2f       	mov	r22, r25
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    1348:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	c9 01       	movw	r24, r18
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	82 0f       	add	r24, r18
    1358:	93 1f       	adc	r25, r19
    135a:	fc 01       	movw	r30, r24
    135c:	e8 56       	subi	r30, 0x68	; 104
    135e:	fe 4f       	sbci	r31, 0xFE	; 254
    1360:	50 81       	ld	r21, Z
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	c9 01       	movw	r24, r18
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	82 0f       	add	r24, r18
    1370:	93 1f       	adc	r25, r19
    1372:	fc 01       	movw	r30, r24
    1374:	e7 56       	subi	r30, 0x67	; 103
    1376:	fe 4f       	sbci	r31, 0xFE	; 254
    1378:	40 81       	ld	r20, Z
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	c9 01       	movw	r24, r18
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	82 0f       	add	r24, r18
    1388:	93 1f       	adc	r25, r19
    138a:	fc 01       	movw	r30, r24
    138c:	e6 56       	subi	r30, 0x66	; 102
    138e:	fe 4f       	sbci	r31, 0xFE	; 254
    1390:	90 81       	ld	r25, Z
    1392:	85 2f       	mov	r24, r21
    1394:	64 2f       	mov	r22, r20
    1396:	49 2f       	mov	r20, r25
    1398:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    139c:	8c 83       	std	Y+4, r24	; 0x04

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 23       	and	r24, r24
    13a2:	61 f4       	brne	.+24     	; 0x13bc <Switch_enuInit+0xc0>
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	88 23       	and	r24, r24
    13a8:	49 f4       	brne	.+18     	; 0x13bc <Switch_enuInit+0xc0>

ES_t Switch_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	8f 5f       	subi	r24, 0xFF	; 255
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	90 91 97 01 	lds	r25, 0x0197
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	89 17       	cp	r24, r25
    13b8:	08 f4       	brcc	.+2      	; 0x13bc <Switch_enuInit+0xc0>
    13ba:	a9 cf       	rjmp	.-174    	; 0x130e <Switch_enuInit+0x12>
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
	}

	if (Local_enuAerror[0] == ES_OK && Local_enuAerror[1] == ES_OK)
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	88 23       	and	r24, r24
    13c0:	21 f4       	brne	.+8      	; 0x13ca <Switch_enuInit+0xce>
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	88 23       	and	r24, r24
    13c6:	09 f4       	brne	.+2      	; 0x13ca <Switch_enuInit+0xce>
		Local_enuErrorState = ES_OK;
    13c8:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <Switch_enuGetPressed>:

ES_t Switch_enuGetPressed (u8 Copy_u8SwitchNum ,u8 * Copy_pu8SwitchValue)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <Switch_enuGetPressed+0x6>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <Switch_enuGetPressed+0x8>
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	8a 83       	std	Y+2, r24	; 0x02
    13e8:	7c 83       	std	Y+4, r23	; 0x04
    13ea:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8SwitchNum < Switch_u8SwitchesMaxNum)
    13f0:	90 91 97 01 	lds	r25, 0x0197
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	89 17       	cp	r24, r25
    13f8:	08 f5       	brcc	.+66     	; 0x143c <Switch_enuGetPressed+0x62>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Switch[Copy_u8SwitchNum].sw_Grp , Switch[Copy_u8SwitchNum].sw_Pin , Copy_pu8SwitchValue);
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	c9 01       	movw	r24, r18
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	82 0f       	add	r24, r18
    1408:	93 1f       	adc	r25, r19
    140a:	fc 01       	movw	r30, r24
    140c:	e8 56       	subi	r30, 0x68	; 104
    140e:	fe 4f       	sbci	r31, 0xFE	; 254
    1410:	40 81       	ld	r20, Z
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	c9 01       	movw	r24, r18
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	82 0f       	add	r24, r18
    1420:	93 1f       	adc	r25, r19
    1422:	fc 01       	movw	r30, r24
    1424:	e7 56       	subi	r30, 0x67	; 103
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	90 81       	ld	r25, Z
    142a:	2b 81       	ldd	r18, Y+3	; 0x03
    142c:	3c 81       	ldd	r19, Y+4	; 0x04
    142e:	84 2f       	mov	r24, r20
    1430:	69 2f       	mov	r22, r25
    1432:	a9 01       	movw	r20, r18
    1434:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enuGetPinValue>
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <Switch_enuGetPressed+0x66>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <SevSeg_enuInit>:
extern u8 ModuleValuePins;
extern u8 ModuleControlPins;
extern SSegModule_t SSegModule[];

ES_t SevSeg_enuInit(void)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <SevSeg_enuInit+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <SevSeg_enuInit+0x8>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    1460:	8b e0       	ldi	r24, 0x0B	; 11
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	bc c0       	rjmp	.+376    	; 0x15de <SevSeg_enuInit+0x18e>
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	8b 50       	subi	r24, 0x0B	; 11
    146a:	8a 83       	std	Y+2, r24	; 0x02
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    146c:	19 82       	std	Y+1, r1	; 0x01
    146e:	3a c0       	rjmp	.+116    	; 0x14e4 <SevSeg_enuInit+0x94>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	48 2f       	mov	r20, r24
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	c9 01       	movw	r24, r18
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	82 1b       	sub	r24, r18
    148c:	93 0b       	sbc	r25, r19
    148e:	84 0f       	add	r24, r20
    1490:	95 1f       	adc	r25, r21
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	fc 01       	movw	r30, r24
    1498:	ec 55       	subi	r30, 0x5C	; 92
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	60 81       	ld	r22, Z
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	48 2f       	mov	r20, r24
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	c9 01       	movw	r24, r18
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	82 1b       	sub	r24, r18
    14ba:	93 0b       	sbc	r25, r19
    14bc:	84 0f       	add	r24, r20
    14be:	95 1f       	adc	r25, r21
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	fc 01       	movw	r30, r24
    14c6:	eb 55       	subi	r30, 0x5B	; 91
    14c8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ca:	90 81       	ld	r25, Z
    14cc:	86 2f       	mov	r24, r22
    14ce:	69 2f       	mov	r22, r25
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    14d6:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	88 23       	and	r24, r24
    14dc:	41 f4       	brne	.+16     	; 0x14ee <SevSeg_enuInit+0x9e>
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	8f 5f       	subi	r24, 0xFF	; 255
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	90 91 a2 01 	lds	r25, 0x01A2
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	89 17       	cp	r24, r25
    14ec:	08 f2       	brcs	.-126    	; 0x1470 <SevSeg_enuInit+0x20>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
		if( Local_enuErrorState == ES_OK)
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	88 23       	and	r24, r24
    14f2:	61 f5       	brne	.+88     	; 0x154c <SevSeg_enuInit+0xfc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9c 01       	movw	r18, r24
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	c9 01       	movw	r24, r18
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	82 1b       	sub	r24, r18
    1510:	93 0b       	sbc	r25, r19
    1512:	fc 01       	movw	r30, r24
    1514:	e4 55       	subi	r30, 0x54	; 84
    1516:	fe 4f       	sbci	r31, 0xFE	; 254
    1518:	40 81       	ld	r20, Z
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9c 01       	movw	r18, r24
    1522:	22 0f       	add	r18, r18
    1524:	33 1f       	adc	r19, r19
    1526:	c9 01       	movw	r24, r18
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	82 1b       	sub	r24, r18
    1536:	93 0b       	sbc	r25, r19
    1538:	fc 01       	movw	r30, r24
    153a:	e3 55       	subi	r30, 0x53	; 83
    153c:	fe 4f       	sbci	r31, 0xFE	; 254
    153e:	90 81       	ld	r25, Z
    1540:	84 2f       	mov	r24, r20
    1542:	69 2f       	mov	r22, r25
    1544:	41 e0       	ldi	r20, 0x01	; 1
    1546:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    154a:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    154c:	19 82       	std	Y+1, r1	; 0x01
    154e:	3b c0       	rjmp	.+118    	; 0x15c6 <SevSeg_enuInit+0x176>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	48 2f       	mov	r20, r24
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	c9 01       	movw	r24, r18
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	82 1b       	sub	r24, r18
    156c:	93 0b       	sbc	r25, r19
    156e:	84 0f       	add	r24, r20
    1570:	95 1f       	adc	r25, r21
    1572:	05 96       	adiw	r24, 0x05	; 5
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	fc 01       	movw	r30, r24
    157a:	ec 55       	subi	r30, 0x5C	; 92
    157c:	fe 4f       	sbci	r31, 0xFE	; 254
    157e:	60 81       	ld	r22, Z
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	48 2f       	mov	r20, r24
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	c9 01       	movw	r24, r18
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	82 1b       	sub	r24, r18
    159c:	93 0b       	sbc	r25, r19
    159e:	84 0f       	add	r24, r20
    15a0:	95 1f       	adc	r25, r21
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	fc 01       	movw	r30, r24
    15a8:	e1 55       	subi	r30, 0x51	; 81
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	90 81       	ld	r25, Z
    15ae:	86 2f       	mov	r24, r22
    15b0:	69 2f       	mov	r22, r25
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    15b8:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	88 23       	and	r24, r24
    15be:	61 f4       	brne	.+24     	; 0x15d8 <SevSeg_enuInit+0x188>
		if( Local_enuErrorState == ES_OK)
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	88 23       	and	r24, r24
    15ca:	31 f4       	brne	.+12     	; 0x15d8 <SevSeg_enuInit+0x188>
    15cc:	90 91 a3 01 	lds	r25, 0x01A3
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	89 17       	cp	r24, r25
    15d4:	08 f4       	brcc	.+2      	; 0x15d8 <SevSeg_enuInit+0x188>
    15d6:	bc cf       	rjmp	.-136    	; 0x1550 <SevSeg_enuInit+0x100>
ES_t SevSeg_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	8b 83       	std	Y+3, r24	; 0x03
    15de:	90 91 a1 01 	lds	r25, 0x01A1
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	98 17       	cp	r25, r24
    15e6:	08 f0       	brcs	.+2      	; 0x15ea <SevSeg_enuInit+0x19a>
    15e8:	3e cf       	rjmp	.-388    	; 0x1466 <SevSeg_enuInit+0x16>
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
	}

	return Local_enuErrorState ;//DONE
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <SevSeg_enuSetDigitValue>:
ES_t SevSeg_enuSetDigitValue(u8 Copy_u8ModuleNum , u8 Copy_u8SevSegDigitValue)
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <SevSeg_enuSetDigitValue+0x6>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <SevSeg_enuSetDigitValue+0x8>
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	8b 83       	std	Y+3, r24	; 0x03
    1608:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK ;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	8b 50       	subi	r24, 0x0B	; 11
    1612:	8b 83       	std	Y+3, r24	; 0x03
    1614:	90 91 a1 01 	lds	r25, 0x01A1
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	89 17       	cp	r24, r25
    161c:	08 f0       	brcs	.+2      	; 0x1620 <SevSeg_enuSetDigitValue+0x26>
    161e:	59 c0       	rjmp	.+178    	; 0x16d2 <SevSeg_enuSetDigitValue+0xd8>
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	8a 30       	cpi	r24, 0x0A	; 10
    1624:	08 f0       	brcs	.+2      	; 0x1628 <SevSeg_enuSetDigitValue+0x2e>
    1626:	52 c0       	rjmp	.+164    	; 0x16cc <SevSeg_enuSetDigitValue+0xd2>
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    1628:	19 82       	std	Y+1, r1	; 0x01
    162a:	49 c0       	rjmp	.+146    	; 0x16be <SevSeg_enuSetDigitValue+0xc4>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputGrp ,
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	48 2f       	mov	r20, r24
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	c9 01       	movw	r24, r18
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	82 1b       	sub	r24, r18
    1648:	93 0b       	sbc	r25, r19
    164a:	84 0f       	add	r24, r20
    164c:	95 1f       	adc	r25, r21
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	fc 01       	movw	r30, r24
    1654:	ec 55       	subi	r30, 0x5C	; 92
    1656:	fe 4f       	sbci	r31, 0xFE	; 254
    1658:	60 81       	ld	r22, Z
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	48 2f       	mov	r20, r24
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	c9 01       	movw	r24, r18
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	82 1b       	sub	r24, r18
    1676:	93 0b       	sbc	r25, r19
    1678:	84 0f       	add	r24, r20
    167a:	95 1f       	adc	r25, r21
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	fc 01       	movw	r30, r24
    1682:	eb 55       	subi	r30, 0x5B	; 91
    1684:	fe 4f       	sbci	r31, 0xFE	; 254
    1686:	40 81       	ld	r20, Z
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	f9 01       	movw	r30, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <SevSeg_enuSetDigitValue+0xa2>
    1698:	f5 95       	asr	r31
    169a:	e7 95       	ror	r30
    169c:	8a 95       	dec	r24
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <SevSeg_enuSetDigitValue+0x9e>
    16a0:	cf 01       	movw	r24, r30
    16a2:	98 2f       	mov	r25, r24
    16a4:	91 70       	andi	r25, 0x01	; 1
    16a6:	86 2f       	mov	r24, r22
    16a8:	64 2f       	mov	r22, r20
    16aa:	49 2f       	mov	r20, r25
    16ac:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    16b0:	8a 83       	std	Y+2, r24	; 0x02
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	88 23       	and	r24, r24
    16b6:	79 f4       	brne	.+30     	; 0x16d6 <SevSeg_enuSetDigitValue+0xdc>

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	8f 5f       	subi	r24, 0xFF	; 255
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	90 91 a2 01 	lds	r25, 0x01A2
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	89 17       	cp	r24, r25
    16c6:	08 f4       	brcc	.+2      	; 0x16ca <SevSeg_enuSetDigitValue+0xd0>
    16c8:	b1 cf       	rjmp	.-158    	; 0x162c <SevSeg_enuSetDigitValue+0x32>
    16ca:	05 c0       	rjmp	.+10     	; 0x16d6 <SevSeg_enuSetDigitValue+0xdc>
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	8a 83       	std	Y+2, r24	; 0x02
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <SevSeg_enuSetDigitValue+0xdc>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	8a 83       	std	Y+2, r24	; 0x02


	return Local_enuErrorState ;//DONE
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <SevSeg_enuSetDIPValue>:

ES_t SevSeg_enuSetDIPValue(u8 Copy_u8ModuleNum ,u8 Copy_u8SevSegDIPValue)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <SevSeg_enuSetDIPValue+0x6>
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	8a 83       	std	Y+2, r24	; 0x02
    16f4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	8b 50       	subi	r24, 0x0B	; 11
    16fe:	8a 83       	std	Y+2, r24	; 0x02
    1700:	90 91 a1 01 	lds	r25, 0x01A1
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	89 17       	cp	r24, r25
    1708:	b0 f5       	brcc	.+108    	; 0x1776 <SevSeg_enuSetDIPValue+0x90>
	{
		if( Copy_u8SevSegDIPValue == DIP_ON ||Copy_u8SevSegDIPValue == DIP_OFF )
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	19 f0       	breq	.+6      	; 0x1716 <SevSeg_enuSetDIPValue+0x30>
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	88 23       	and	r24, r24
    1714:	69 f5       	brne	.+90     	; 0x1770 <SevSeg_enuSetDIPValue+0x8a>
		{
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].DIP_Conf.InputGrp ,
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	88 2f       	mov	r24, r24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9c 01       	movw	r18, r24
    171e:	22 0f       	add	r18, r18
    1720:	33 1f       	adc	r19, r19
    1722:	c9 01       	movw	r24, r18
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	82 1b       	sub	r24, r18
    1732:	93 0b       	sbc	r25, r19
    1734:	fc 01       	movw	r30, r24
    1736:	e4 55       	subi	r30, 0x54	; 84
    1738:	fe 4f       	sbci	r31, 0xFE	; 254
    173a:	40 81       	ld	r20, Z
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9c 01       	movw	r18, r24
    1744:	22 0f       	add	r18, r18
    1746:	33 1f       	adc	r19, r19
    1748:	c9 01       	movw	r24, r18
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	82 1b       	sub	r24, r18
    1758:	93 0b       	sbc	r25, r19
    175a:	fc 01       	movw	r30, r24
    175c:	e3 55       	subi	r30, 0x53	; 83
    175e:	fe 4f       	sbci	r31, 0xFE	; 254
    1760:	90 81       	ld	r25, Z
    1762:	84 2f       	mov	r24, r20
    1764:	69 2f       	mov	r22, r25
    1766:	4b 81       	ldd	r20, Y+3	; 0x03
    1768:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	05 c0       	rjmp	.+10     	; 0x177a <SevSeg_enuSetDIPValue+0x94>
														SSegModule[Copy_u8ModuleNum].DIP_Conf.InputPin  , Copy_u8SevSegDIPValue );
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	02 c0       	rjmp	.+4      	; 0x177a <SevSeg_enuSetDIPValue+0x94>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    177a:	89 81       	ldd	r24, Y+1	; 0x01
}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <SevSeg_enuFrameDelay>:

ES_t SevSeg_enuFrameDelay(u8 Copy_u8SevSegTotalModules, u8 *Copy_pu8SevSegModuleDelay)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <SevSeg_enuFrameDelay+0x6>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <SevSeg_enuFrameDelay+0x8>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	8a 83       	std	Y+2, r24	; 0x02
    1796:	7c 83       	std	Y+4, r23	; 0x04
    1798:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8SevSegTotalModules <= SevSeg_u8MaxModules)
    179e:	90 91 a1 01 	lds	r25, 0x01A1
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	98 17       	cp	r25, r24
    17a6:	98 f0       	brcs	.+38     	; 0x17ce <SevSeg_enuFrameDelay+0x46>
	{

		*Copy_pu8SevSegModuleDelay = SevSeg_u8MODULE_DELAY( Copy_u8SevSegTotalModules );
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	ac 01       	movw	r20, r24
    17b0:	4d 5e       	subi	r20, 0xED	; 237
    17b2:	5f 4f       	sbci	r21, 0xFF	; 255
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	ca 01       	movw	r24, r20
    17bc:	b9 01       	movw	r22, r18
    17be:	0e 94 1e 19 	call	0x323c	; 0x323c <__divmodhi4>
    17c2:	cb 01       	movw	r24, r22
    17c4:	eb 81       	ldd	r30, Y+3	; 0x03
    17c6:	fc 81       	ldd	r31, Y+4	; 0x04
    17c8:	80 83       	st	Z, r24

		Local_enuErrorState=ES_OK;
    17ca:	19 82       	std	Y+1, r1	; 0x01
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <SevSeg_enuFrameDelay+0x4a>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <SevSeg_enuModuleControl>:

ES_t SevSeg_enuModuleControl(u8 Copy_u8SevSegModuleNum , u8 Copy_u8SevSegModuleStatus)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	27 97       	sbiw	r28, 0x07	; 7
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	8c 83       	std	Y+4, r24	; 0x04
    17f8:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Output;

	if( Copy_u8SevSegModuleStatus == MODULE_DISABLE || Copy_u8SevSegModuleStatus == MODULE_ENABLE )
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	8d 30       	cpi	r24, 0x0D	; 13
    1802:	21 f0       	breq	.+8      	; 0x180c <SevSeg_enuModuleControl+0x2a>
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	8e 30       	cpi	r24, 0x0E	; 14
    1808:	09 f0       	breq	.+2      	; 0x180c <SevSeg_enuModuleControl+0x2a>
    180a:	64 c0       	rjmp	.+200    	; 0x18d4 <SevSeg_enuModuleControl+0xf2>
	{
		if( (Copy_u8SevSegModuleNum -= MODULE_1)< SevSeg_u8MaxModules )
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	8b 50       	subi	r24, 0x0B	; 11
    1810:	8c 83       	std	Y+4, r24	; 0x04
    1812:	90 91 a1 01 	lds	r25, 0x01A1
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
    1818:	89 17       	cp	r24, r25
    181a:	08 f0       	brcs	.+2      	; 0x181e <SevSeg_enuModuleControl+0x3c>
    181c:	58 c0       	rjmp	.+176    	; 0x18ce <SevSeg_enuModuleControl+0xec>
		{
			switch( Copy_u8SevSegModuleStatus )
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3f 83       	std	Y+7, r19	; 0x07
    1826:	2e 83       	std	Y+6, r18	; 0x06
    1828:	8e 81       	ldd	r24, Y+6	; 0x06
    182a:	9f 81       	ldd	r25, Y+7	; 0x07
    182c:	8d 30       	cpi	r24, 0x0D	; 13
    182e:	91 05       	cpc	r25, r1
    1830:	31 f0       	breq	.+12     	; 0x183e <SevSeg_enuModuleControl+0x5c>
    1832:	2e 81       	ldd	r18, Y+6	; 0x06
    1834:	3f 81       	ldd	r19, Y+7	; 0x07
    1836:	2e 30       	cpi	r18, 0x0E	; 14
    1838:	31 05       	cpc	r19, r1
    183a:	19 f0       	breq	.+6      	; 0x1842 <SevSeg_enuModuleControl+0x60>
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <SevSeg_enuModuleControl+0x64>
			{
				case MODULE_DISABLE : Local_u8Output = DIO_u8LOW;
    183e:	1a 82       	std	Y+2, r1	; 0x02
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <SevSeg_enuModuleControl+0x64>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	8a 83       	std	Y+2, r24	; 0x02
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    1846:	19 82       	std	Y+1, r1	; 0x01
    1848:	3b c0       	rjmp	.+118    	; 0x18c0 <SevSeg_enuModuleControl+0xde>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	48 2f       	mov	r20, r24
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	c9 01       	movw	r24, r18
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	82 1b       	sub	r24, r18
    1866:	93 0b       	sbc	r25, r19
    1868:	84 0f       	add	r24, r20
    186a:	95 1f       	adc	r25, r21
    186c:	05 96       	adiw	r24, 0x05	; 5
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	fc 01       	movw	r30, r24
    1874:	ec 55       	subi	r30, 0x5C	; 92
    1876:	fe 4f       	sbci	r31, 0xFE	; 254
    1878:	60 81       	ld	r22, Z
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	48 2f       	mov	r20, r24
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	c9 01       	movw	r24, r18
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	82 1b       	sub	r24, r18
    1896:	93 0b       	sbc	r25, r19
    1898:	84 0f       	add	r24, r20
    189a:	95 1f       	adc	r25, r21
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	fc 01       	movw	r30, r24
    18a2:	e1 55       	subi	r30, 0x51	; 81
    18a4:	fe 4f       	sbci	r31, 0xFE	; 254
    18a6:	90 81       	ld	r25, Z
    18a8:	86 2f       	mov	r24, r22
    18aa:	69 2f       	mov	r22, r25
    18ac:	4a 81       	ldd	r20, Y+2	; 0x02
    18ae:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    18b2:	8b 83       	std	Y+3, r24	; 0x03
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	88 23       	and	r24, r24
    18b8:	79 f4       	brne	.+30     	; 0x18d8 <SevSeg_enuModuleControl+0xf6>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	90 91 a3 01 	lds	r25, 0x01A3
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	89 17       	cp	r24, r25
    18c8:	08 f4       	brcc	.+2      	; 0x18cc <SevSeg_enuModuleControl+0xea>
    18ca:	bf cf       	rjmp	.-130    	; 0x184a <SevSeg_enuModuleControl+0x68>
    18cc:	05 c0       	rjmp	.+10     	; 0x18d8 <SevSeg_enuModuleControl+0xf6>
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else	Local_enuErrorState = ES_OUT_RANGE;
    18ce:	82 e0       	ldi	r24, 0x02	; 2
    18d0:	8b 83       	std	Y+3, r24	; 0x03
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <SevSeg_enuModuleControl+0xf6>
	}
	else	Local_enuErrorState = ES_OUT_RANGE;
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;//DONE
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18da:	27 96       	adiw	r28, 0x07	; 7
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <LD_enuInit>:

extern LD_t LD[];


ES_t LD_enuInit(void)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <LD_enuInit+0x6>
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <LD_enuInit+0x8>
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	8a 83       	std	Y+2, r24	; 0x02

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
    18fc:	80 91 c1 01 	lds	r24, 0x01C1
    1900:	81 34       	cpi	r24, 0x41	; 65
    1902:	09 f4       	brne	.+2      	; 0x1906 <LD_enuInit+0x1a>
    1904:	41 c0       	rjmp	.+130    	; 0x1988 <LD_enuInit+0x9c>
    1906:	80 91 c1 01 	lds	r24, 0x01C1
    190a:	82 34       	cpi	r24, 0x42	; 66
    190c:	09 f0       	breq	.+2      	; 0x1910 <LD_enuInit+0x24>
    190e:	4a c0       	rjmp	.+148    	; 0x19a4 <LD_enuInit+0xb8>
    1910:	3b c0       	rjmp	.+118    	; 0x1988 <LD_enuInit+0x9c>
	{
		for(u8 Local_u8Iter; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
		{
			Local_AenuStatus[0] = DIO_enuSetPinDirection	( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , DIO_u8OUTPUT);
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	fc 01       	movw	r30, r24
    191e:	ed 53       	subi	r30, 0x3D	; 61
    1920:	fe 4f       	sbci	r31, 0xFE	; 254
    1922:	20 81       	ld	r18, Z
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	fc 01       	movw	r30, r24
    1930:	ec 53       	subi	r30, 0x3C	; 60
    1932:	fe 4f       	sbci	r31, 0xFE	; 254
    1934:	90 81       	ld	r25, Z
    1936:	82 2f       	mov	r24, r18
    1938:	69 2f       	mov	r22, r25
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    1940:	8b 83       	std	Y+3, r24	; 0x03
			Local_AenuStatus[1] = DIO_enuSetPinValue		( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8Off);
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	fc 01       	movw	r30, r24
    194e:	ed 53       	subi	r30, 0x3D	; 61
    1950:	fe 4f       	sbci	r31, 0xFE	; 254
    1952:	30 81       	ld	r19, Z
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	fc 01       	movw	r30, r24
    1960:	ec 53       	subi	r30, 0x3C	; 60
    1962:	fe 4f       	sbci	r31, 0xFE	; 254
    1964:	90 81       	ld	r25, Z
    1966:	20 91 f0 01 	lds	r18, 0x01F0
    196a:	83 2f       	mov	r24, r19
    196c:	69 2f       	mov	r22, r25
    196e:	42 2f       	mov	r20, r18
    1970:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1974:	8c 83       	std	Y+4, r24	; 0x04

			if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	88 23       	and	r24, r24
    197a:	61 f4       	brne	.+24     	; 0x1994 <LD_enuInit+0xa8>
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	88 23       	and	r24, r24
    1980:	49 f4       	brne	.+18     	; 0x1994 <LD_enuInit+0xa8>
{
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
	{
		for(u8 Local_u8Iter; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	8f 5f       	subi	r24, 0xFF	; 255
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	90 91 c0 01 	lds	r25, 0x01C0
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	89 17       	cp	r24, r25
    1990:	08 f4       	brcc	.+2      	; 0x1994 <LD_enuInit+0xa8>
    1992:	bf cf       	rjmp	.-130    	; 0x1912 <LD_enuInit+0x26>
			Local_AenuStatus[1] = DIO_enuSetPinValue		( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8Off);

			if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
		}

		if(Local_AenuStatus[0] == ES_OK && Local_AenuStatus[1] == ES_OK)
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	88 23       	and	r24, r24
    1998:	39 f4       	brne	.+14     	; 0x19a8 <LD_enuInit+0xbc>
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	88 23       	and	r24, r24
    199e:	21 f4       	brne	.+8      	; 0x19a8 <LD_enuInit+0xbc>
			Local_enuErrorStatus = ES_OK;
    19a0:	1a 82       	std	Y+2, r1	; 0x02
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <LD_enuInit+0xbc>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorStatus;
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <LD_enuSetState>:

ES_t LD_enuSetState(u8 Copy_u8LD_Num ,u8 Copy_u8LDSetValue)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <LD_enuSetState+0x6>
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	8a 83       	std	Y+2, r24	; 0x02
    19c6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK ;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	89 83       	std	Y+1, r24	; 0x01

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
    19cc:	80 91 c1 01 	lds	r24, 0x01C1
    19d0:	81 34       	cpi	r24, 0x41	; 65
    19d2:	21 f0       	breq	.+8      	; 0x19dc <LD_enuSetState+0x24>
    19d4:	80 91 c1 01 	lds	r24, 0x01C1
    19d8:	82 34       	cpi	r24, 0x42	; 66
    19da:	71 f5       	brne	.+92     	; 0x1a38 <LD_enuSetState+0x80>
	{
		if( Copy_u8LD_Num < LD_u8LD_MaxNum)
    19dc:	90 91 c0 01 	lds	r25, 0x01C0
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	89 17       	cp	r24, r25
    19e4:	30 f5       	brcc	.+76     	; 0x1a32 <LD_enuSetState+0x7a>
		{
			if( Copy_u8LDSetValue == LD_u8On || Copy_u8LDSetValue == LD_u8Off )
    19e6:	90 91 c2 01 	lds	r25, 0x01C2
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	89 17       	cp	r24, r25
    19ee:	29 f0       	breq	.+10     	; 0x19fa <LD_enuSetState+0x42>
    19f0:	90 91 f0 01 	lds	r25, 0x01F0
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	89 17       	cp	r24, r25
    19f8:	c9 f4       	brne	.+50     	; 0x1a2c <LD_enuSetState+0x74>
			{
				Local_enuErrorStatus = DIO_enuSetPinValue(LD[Copy_u8LD_Num].LD_Grp , LD[Copy_u8LD_Num].LD_Pin , Copy_u8LDSetValue);
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	88 2f       	mov	r24, r24
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	fc 01       	movw	r30, r24
    1a06:	ed 53       	subi	r30, 0x3D	; 61
    1a08:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0a:	20 81       	ld	r18, Z
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	fc 01       	movw	r30, r24
    1a18:	ec 53       	subi	r30, 0x3C	; 60
    1a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1c:	90 81       	ld	r25, Z
    1a1e:	82 2f       	mov	r24, r18
    1a20:	69 2f       	mov	r22, r25
    1a22:	4b 81       	ldd	r20, Y+3	; 0x03
    1a24:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	08 c0       	rjmp	.+16     	; 0x1a3c <LD_enuSetState+0x84>
			}
			else Local_enuErrorStatus = ES_OUT_RANGE;
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <LD_enuSetState+0x84>
		}
		else Local_enuErrorStatus = ES_OUT_RANGE;
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <LD_enuSetState+0x84>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <LCD_enuInit>:
#include "LCD_priv.h"

#include <util/delay.h>

ES_t LCD_enuInit(void)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	ab 97       	sbiw	r28, 0x2b	; 43
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	8b a7       	std	Y+43, r24	; 0x2b
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 ef       	ldi	r26, 0xF0	; 240
    1a68:	b1 e4       	ldi	r27, 0x41	; 65
    1a6a:	8f a3       	std	Y+39, r24	; 0x27
    1a6c:	98 a7       	std	Y+40, r25	; 0x28
    1a6e:	a9 a7       	std	Y+41, r26	; 0x29
    1a70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	6f a1       	ldd	r22, Y+39	; 0x27
    1a74:	78 a5       	ldd	r23, Y+40	; 0x28
    1a76:	89 a5       	ldd	r24, Y+41	; 0x29
    1a78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a e7       	ldi	r20, 0x7A	; 122
    1a80:	55 e4       	ldi	r21, 0x45	; 69
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	8b a3       	std	Y+35, r24	; 0x23
    1a8c:	9c a3       	std	Y+36, r25	; 0x24
    1a8e:	ad a3       	std	Y+37, r26	; 0x25
    1a90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a92:	6b a1       	ldd	r22, Y+35	; 0x23
    1a94:	7c a1       	ldd	r23, Y+36	; 0x24
    1a96:	8d a1       	ldd	r24, Y+37	; 0x25
    1a98:	9e a1       	ldd	r25, Y+38	; 0x26
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <LCD_enuInit+0x6a>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9a a3       	std	Y+34, r25	; 0x22
    1ab0:	89 a3       	std	Y+33, r24	; 0x21
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <LCD_enuInit+0xe8>
	else if (__tmp > 65535)
    1ab4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aba:	9e a1       	ldd	r25, Y+38	; 0x26
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <LCD_enuInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ace:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9a a3       	std	Y+34, r25	; 0x22
    1af2:	89 a3       	std	Y+33, r24	; 0x21
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <LCD_enuInit+0xca>
    1af6:	80 e9       	ldi	r24, 0x90	; 144
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	98 a3       	std	Y+32, r25	; 0x20
    1afc:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1afe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b00:	98 a1       	ldd	r25, Y+32	; 0x20
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_enuInit+0xb8>
    1b06:	98 a3       	std	Y+32, r25	; 0x20
    1b08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	9a a3       	std	Y+34, r25	; 0x22
    1b12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	89 a1       	ldd	r24, Y+33	; 0x21
    1b16:	9a a1       	ldd	r25, Y+34	; 0x22
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <LCD_enuInit+0xac>
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <LCD_enuInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b20:	7c a1       	ldd	r23, Y+36	; 0x24
    1b22:	8d a1       	ldd	r24, Y+37	; 0x25
    1b24:	9e a1       	ldd	r25, Y+38	; 0x26
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9a a3       	std	Y+34, r25	; 0x22
    1b30:	89 a3       	std	Y+33, r24	; 0x21
    1b32:	89 a1       	ldd	r24, Y+33	; 0x21
    1b34:	9a a1       	ldd	r25, Y+34	; 0x22
    1b36:	9e 8f       	std	Y+30, r25	; 0x1e
    1b38:	8d 8f       	std	Y+29, r24	; 0x1d
    1b3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_enuInit+0xf4>
    1b42:	9e 8f       	std	Y+30, r25	; 0x1e
    1b44:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);

	DIO_enuSetPinDirection(RS_GRP , RS_PIN , DIO_u8OUTPUT);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
#if RW_GRP != NC && RW_PIN != NC
	DIO_enuSetPinDirection(RW_GRP , RW_PIN , DIO_u8OUTPUT);
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	62 e0       	ldi	r22, 0x02	; 2
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
#endif
	DIO_enuSetPinDirection(EN_GRP , EN_PIN , DIO_u8OUTPUT);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	63 e0       	ldi	r22, 0x03	; 3
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP , D7_PIN , DIO_u8OUTPUT);
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	67 e0       	ldi	r22, 0x07	; 7
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP , D6_PIN , DIO_u8OUTPUT);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	66 e0       	ldi	r22, 0x06	; 6
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP , D5_PIN , DIO_u8OUTPUT);
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	65 e0       	ldi	r22, 0x05	; 5
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP , D4_PIN , DIO_u8OUTPUT);
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	64 e0       	ldi	r22, 0x04	; 4
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch( 0x38 );

#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(D7_GRP , D7_PIN , 0);
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	67 e0       	ldi	r22, 0x07	; 7
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , 0);
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	66 e0       	ldi	r22, 0x06	; 6
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , 1);
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	65 e0       	ldi	r22, 0x05	; 5
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , 0);
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	64 e0       	ldi	r22, 0x04	; 4
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	63 e0       	ldi	r22, 0x03	; 3
    1bb8:	41 e0       	ldi	r20, 0x01	; 1
    1bba:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a0 e8       	ldi	r26, 0x80	; 128
    1bc4:	bf e3       	ldi	r27, 0x3F	; 63
    1bc6:	89 8f       	std	Y+25, r24	; 0x19
    1bc8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bca:	ab 8f       	std	Y+27, r26	; 0x1b
    1bcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bce:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4a e7       	ldi	r20, 0x7A	; 122
    1bdc:	55 e4       	ldi	r21, 0x45	; 69
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	8d 8b       	std	Y+21, r24	; 0x15
    1be8:	9e 8b       	std	Y+22, r25	; 0x16
    1bea:	af 8b       	std	Y+23, r26	; 0x17
    1bec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bee:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e8       	ldi	r20, 0x80	; 128
    1bfc:	5f e3       	ldi	r21, 0x3F	; 63
    1bfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c02:	88 23       	and	r24, r24
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <LCD_enuInit+0x1c6>
		__ticks = 1;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9c 8b       	std	Y+20, r25	; 0x14
    1c0c:	8b 8b       	std	Y+19, r24	; 0x13
    1c0e:	3f c0       	rjmp	.+126    	; 0x1c8e <LCD_enuInit+0x244>
	else if (__tmp > 65535)
    1c10:	6d 89       	ldd	r22, Y+21	; 0x15
    1c12:	7e 89       	ldd	r23, Y+22	; 0x16
    1c14:	8f 89       	ldd	r24, Y+23	; 0x17
    1c16:	98 8d       	ldd	r25, Y+24	; 0x18
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	3f ef       	ldi	r19, 0xFF	; 255
    1c1c:	4f e7       	ldi	r20, 0x7F	; 127
    1c1e:	57 e4       	ldi	r21, 0x47	; 71
    1c20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c24:	18 16       	cp	r1, r24
    1c26:	4c f5       	brge	.+82     	; 0x1c7a <LCD_enuInit+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c28:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e2       	ldi	r20, 0x20	; 32
    1c36:	51 e4       	ldi	r21, 0x41	; 65
    1c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9c 8b       	std	Y+20, r25	; 0x14
    1c4e:	8b 8b       	std	Y+19, r24	; 0x13
    1c50:	0f c0       	rjmp	.+30     	; 0x1c70 <LCD_enuInit+0x226>
    1c52:	80 e9       	ldi	r24, 0x90	; 144
    1c54:	91 e0       	ldi	r25, 0x01	; 1
    1c56:	9a 8b       	std	Y+18, r25	; 0x12
    1c58:	89 8b       	std	Y+17, r24	; 0x11
    1c5a:	89 89       	ldd	r24, Y+17	; 0x11
    1c5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <LCD_enuInit+0x214>
    1c62:	9a 8b       	std	Y+18, r25	; 0x12
    1c64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c66:	8b 89       	ldd	r24, Y+19	; 0x13
    1c68:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	9c 8b       	std	Y+20, r25	; 0x14
    1c6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c70:	8b 89       	ldd	r24, Y+19	; 0x13
    1c72:	9c 89       	ldd	r25, Y+20	; 0x14
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	69 f7       	brne	.-38     	; 0x1c52 <LCD_enuInit+0x208>
    1c78:	14 c0       	rjmp	.+40     	; 0x1ca2 <LCD_enuInit+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c80:	98 8d       	ldd	r25, Y+24	; 0x18
    1c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	9c 8b       	std	Y+20, r25	; 0x14
    1c8c:	8b 8b       	std	Y+19, r24	; 0x13
    1c8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c90:	9c 89       	ldd	r25, Y+20	; 0x14
    1c92:	98 8b       	std	Y+16, r25	; 0x10
    1c94:	8f 87       	std	Y+15, r24	; 0x0f
    1c96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c98:	98 89       	ldd	r25, Y+16	; 0x10
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_enuInit+0x250>
    1c9e:	98 8b       	std	Y+16, r25	; 0x10
    1ca0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	63 e0       	ldi	r22, 0x03	; 3
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a0 e8       	ldi	r26, 0x80	; 128
    1cb2:	b0 e4       	ldi	r27, 0x40	; 64
    1cb4:	8b 87       	std	Y+11, r24	; 0x0b
    1cb6:	9c 87       	std	Y+12, r25	; 0x0c
    1cb8:	ad 87       	std	Y+13, r26	; 0x0d
    1cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a e7       	ldi	r20, 0x7A	; 122
    1cca:	55 e4       	ldi	r21, 0x45	; 69
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8f 83       	std	Y+7, r24	; 0x07
    1cd6:	98 87       	std	Y+8, r25	; 0x08
    1cd8:	a9 87       	std	Y+9, r26	; 0x09
    1cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <LCD_enuInit+0x2b4>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <LCD_enuInit+0x332>
	else if (__tmp > 65535)
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <LCD_enuInit+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <LCD_enuInit+0x314>
    1d40:	80 e9       	ldi	r24, 0x90	; 144
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	8b 83       	std	Y+3, r24	; 0x03
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_enuInit+0x302>
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <LCD_enuInit+0x2f6>
    1d66:	14 c0       	rjmp	.+40     	; 0x1d90 <LCD_enuInit+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_enuInit+0x33e>
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x28 );
    1d9a:	88 e2       	ldi	r24, 0x28	; 40
    1d9c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>

#endif

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0xF );
    1daa:	8f e0       	ldi	r24, 0x0F	; 15
    1dac:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x1 );
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x6 );
    1dca:	86 e0       	ldi	r24, 0x06	; 6
    1dcc:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>



	return Local_enuErrorState;
    1dd0:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    1dd2:	ab 96       	adiw	r28, 0x2b	; 43
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <LCD_enuWriteData+0x6>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	61 e0       	ldi	r22, 0x01	; 1
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( Copy_u8Data );
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Cmnd)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <LCD_enuWriteCommand+0x6>
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( Copy_u8Cmnd );
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>


	return Local_enuErrorState;
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <LCD_enuWriteString+0x6>
    1e42:	0f 92       	push	r0
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	9b 83       	std	Y+3, r25	; 0x03
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	10 c0       	rjmp	.+32     	; 0x1e72 <LCD_enuWriteString+0x36>

	while (*Copy_pcString)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch( *Copy_pcString++ );
    1e5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e60:	20 81       	ld	r18, Z
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	9b 83       	std	Y+3, r25	; 0x03
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
    1e6c:	82 2f       	mov	r24, r18
    1e6e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
	ES_t Local_enuErrorState = ES_NOK;

	while (*Copy_pcString)
    1e72:	ea 81       	ldd	r30, Y+2	; 0x02
    1e74:	fb 81       	ldd	r31, Y+3	; 0x03
    1e76:	80 81       	ld	r24, Z
    1e78:	88 23       	and	r24, r24
    1e7a:	59 f7       	brne	.-42     	; 0x1e52 <LCD_enuWriteString+0x16>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch( *Copy_pcString++ );
	}

	return Local_enuErrorState;
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <LCD_enuGoToPosition>:


ES_t LCD_enuGoToPosition(u8 Copy_u8Row , u8 Copy_u8Column)
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <LCD_enuGoToPosition+0x6>
    1e90:	0f 92       	push	r0
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	8a 83       	std	Y+2, r24	; 0x02
    1e98:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Row >= 1 && Copy_u8Row <=2 &&
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	88 23       	and	r24, r24
    1ea2:	09 f1       	breq	.+66     	; 0x1ee6 <LCD_enuGoToPosition+0x5c>
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	83 30       	cpi	r24, 0x03	; 3
    1ea8:	f0 f4       	brcc	.+60     	; 0x1ee6 <LCD_enuGoToPosition+0x5c>
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	88 23       	and	r24, r24
    1eae:	d9 f0       	breq	.+54     	; 0x1ee6 <LCD_enuGoToPosition+0x5c>
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	81 31       	cpi	r24, 0x11	; 17
    1eb4:	c0 f4       	brcc	.+48     	; 0x1ee6 <LCD_enuGoToPosition+0x5c>
			Copy_u8Column >=1 && Copy_u8Column <=16)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch( 0x80 + ( Copy_u8Row - 1 )*0x40 + ( Copy_u8Column - 1 ) );
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	00 24       	eor	r0, r0
    1eca:	96 95       	lsr	r25
    1ecc:	87 95       	ror	r24
    1ece:	07 94       	ror	r0
    1ed0:	96 95       	lsr	r25
    1ed2:	87 95       	ror	r24
    1ed4:	07 94       	ror	r0
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	80 2d       	mov	r24, r0
    1eda:	98 2f       	mov	r25, r24
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	89 0f       	add	r24, r25
    1ee0:	81 50       	subi	r24, 0x01	; 1
    1ee2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
	}
	return Local_enuErrorState;
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch(u8 Copy_u8Byte)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	e9 97       	sbiw	r28, 0x39	; 57
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	89 af       	std	Y+57, r24	; 0x39
#if RW_GRP != NC  && RW_PIN != NC
	DIO_enuSetPinValue(RW_GRP , RW_PIN , DIO_u8LOW);
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	62 e0       	ldi	r22, 0x02	; 2
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
#endif
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	63 e0       	ldi	r22, 0x03	; 3
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
	_delay_ms(4);


#elif LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 7 )&1 ));
    1f1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f20:	98 2f       	mov	r25, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	99 27       	eor	r25, r25
    1f26:	99 1f       	adc	r25, r25
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	67 e0       	ldi	r22, 0x07	; 7
    1f2c:	49 2f       	mov	r20, r25
    1f2e:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 6 )&1 ));
    1f32:	89 ad       	ldd	r24, Y+57	; 0x39
    1f34:	82 95       	swap	r24
    1f36:	86 95       	lsr	r24
    1f38:	86 95       	lsr	r24
    1f3a:	83 70       	andi	r24, 0x03	; 3
    1f3c:	98 2f       	mov	r25, r24
    1f3e:	91 70       	andi	r25, 0x01	; 1
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	66 e0       	ldi	r22, 0x06	; 6
    1f44:	49 2f       	mov	r20, r25
    1f46:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 5 )&1 ));
    1f4a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f4c:	82 95       	swap	r24
    1f4e:	86 95       	lsr	r24
    1f50:	87 70       	andi	r24, 0x07	; 7
    1f52:	98 2f       	mov	r25, r24
    1f54:	91 70       	andi	r25, 0x01	; 1
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	65 e0       	ldi	r22, 0x05	; 5
    1f5a:	49 2f       	mov	r20, r25
    1f5c:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 4 )&1 ));
    1f60:	89 ad       	ldd	r24, Y+57	; 0x39
    1f62:	82 95       	swap	r24
    1f64:	8f 70       	andi	r24, 0x0F	; 15
    1f66:	98 2f       	mov	r25, r24
    1f68:	91 70       	andi	r25, 0x01	; 1
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	64 e0       	ldi	r22, 0x04	; 4
    1f6e:	49 2f       	mov	r20, r25
    1f70:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	63 e0       	ldi	r22, 0x03	; 3
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a0 e8       	ldi	r26, 0x80	; 128
    1f84:	bf e3       	ldi	r27, 0x3F	; 63
    1f86:	8d ab       	std	Y+53, r24	; 0x35
    1f88:	9e ab       	std	Y+54, r25	; 0x36
    1f8a:	af ab       	std	Y+55, r26	; 0x37
    1f8c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f90:	7e a9       	ldd	r23, Y+54	; 0x36
    1f92:	8f a9       	ldd	r24, Y+55	; 0x37
    1f94:	98 ad       	ldd	r25, Y+56	; 0x38
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a e7       	ldi	r20, 0x7A	; 122
    1f9c:	55 e4       	ldi	r21, 0x45	; 69
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	89 ab       	std	Y+49, r24	; 0x31
    1fa8:	9a ab       	std	Y+50, r25	; 0x32
    1faa:	ab ab       	std	Y+51, r26	; 0x33
    1fac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fae:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	2c f4       	brge	.+10     	; 0x1fd0 <LCD_enuWriteNLatch+0xdc>
		__ticks = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	98 ab       	std	Y+48, r25	; 0x30
    1fcc:	8f a7       	std	Y+47, r24	; 0x2f
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <LCD_enuWriteNLatch+0x15a>
	else if (__tmp > 65535)
    1fd0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	4f e7       	ldi	r20, 0x7F	; 127
    1fde:	57 e4       	ldi	r21, 0x47	; 71
    1fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	4c f5       	brge	.+82     	; 0x203a <LCD_enuWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	6d a9       	ldd	r22, Y+53	; 0x35
    1fea:	7e a9       	ldd	r23, Y+54	; 0x36
    1fec:	8f a9       	ldd	r24, Y+55	; 0x37
    1fee:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e2       	ldi	r20, 0x20	; 32
    1ff6:	51 e4       	ldi	r21, 0x41	; 65
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	98 ab       	std	Y+48, r25	; 0x30
    200e:	8f a7       	std	Y+47, r24	; 0x2f
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <LCD_enuWriteNLatch+0x13c>
    2012:	80 e9       	ldi	r24, 0x90	; 144
    2014:	91 e0       	ldi	r25, 0x01	; 1
    2016:	9e a7       	std	Y+46, r25	; 0x2e
    2018:	8d a7       	std	Y+45, r24	; 0x2d
    201a:	8d a5       	ldd	r24, Y+45	; 0x2d
    201c:	9e a5       	ldd	r25, Y+46	; 0x2e
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_enuWriteNLatch+0x12a>
    2022:	9e a7       	std	Y+46, r25	; 0x2e
    2024:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2026:	8f a5       	ldd	r24, Y+47	; 0x2f
    2028:	98 a9       	ldd	r25, Y+48	; 0x30
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	98 ab       	std	Y+48, r25	; 0x30
    202e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	8f a5       	ldd	r24, Y+47	; 0x2f
    2032:	98 a9       	ldd	r25, Y+48	; 0x30
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	69 f7       	brne	.-38     	; 0x2012 <LCD_enuWriteNLatch+0x11e>
    2038:	14 c0       	rjmp	.+40     	; 0x2062 <LCD_enuWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203a:	69 a9       	ldd	r22, Y+49	; 0x31
    203c:	7a a9       	ldd	r23, Y+50	; 0x32
    203e:	8b a9       	ldd	r24, Y+51	; 0x33
    2040:	9c a9       	ldd	r25, Y+52	; 0x34
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	98 ab       	std	Y+48, r25	; 0x30
    204c:	8f a7       	std	Y+47, r24	; 0x2f
    204e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2050:	98 a9       	ldd	r25, Y+48	; 0x30
    2052:	9c a7       	std	Y+44, r25	; 0x2c
    2054:	8b a7       	std	Y+43, r24	; 0x2b
    2056:	8b a5       	ldd	r24, Y+43	; 0x2b
    2058:	9c a5       	ldd	r25, Y+44	; 0x2c
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_enuWriteNLatch+0x166>
    205e:	9c a7       	std	Y+44, r25	; 0x2c
    2060:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	63 e0       	ldi	r22, 0x03	; 3
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e8       	ldi	r26, 0x80	; 128
    2072:	b0 e4       	ldi	r27, 0x40	; 64
    2074:	8f a3       	std	Y+39, r24	; 0x27
    2076:	98 a7       	std	Y+40, r25	; 0x28
    2078:	a9 a7       	std	Y+41, r26	; 0x29
    207a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6f a1       	ldd	r22, Y+39	; 0x27
    207e:	78 a5       	ldd	r23, Y+40	; 0x28
    2080:	89 a5       	ldd	r24, Y+41	; 0x29
    2082:	9a a5       	ldd	r25, Y+42	; 0x2a
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	55 e4       	ldi	r21, 0x45	; 69
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8b a3       	std	Y+35, r24	; 0x23
    2096:	9c a3       	std	Y+36, r25	; 0x24
    2098:	ad a3       	std	Y+37, r26	; 0x25
    209a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209c:	6b a1       	ldd	r22, Y+35	; 0x23
    209e:	7c a1       	ldd	r23, Y+36	; 0x24
    20a0:	8d a1       	ldd	r24, Y+37	; 0x25
    20a2:	9e a1       	ldd	r25, Y+38	; 0x26
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LCD_enuWriteNLatch+0x1ca>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9a a3       	std	Y+34, r25	; 0x22
    20ba:	89 a3       	std	Y+33, r24	; 0x21
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <LCD_enuWriteNLatch+0x248>
	else if (__tmp > 65535)
    20be:	6b a1       	ldd	r22, Y+35	; 0x23
    20c0:	7c a1       	ldd	r23, Y+36	; 0x24
    20c2:	8d a1       	ldd	r24, Y+37	; 0x25
    20c4:	9e a1       	ldd	r25, Y+38	; 0x26
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <LCD_enuWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6f a1       	ldd	r22, Y+39	; 0x27
    20d8:	78 a5       	ldd	r23, Y+40	; 0x28
    20da:	89 a5       	ldd	r24, Y+41	; 0x29
    20dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9a a3       	std	Y+34, r25	; 0x22
    20fc:	89 a3       	std	Y+33, r24	; 0x21
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <LCD_enuWriteNLatch+0x22a>
    2100:	80 e9       	ldi	r24, 0x90	; 144
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	98 a3       	std	Y+32, r25	; 0x20
    2106:	8f 8f       	std	Y+31, r24	; 0x1f
    2108:	8f 8d       	ldd	r24, Y+31	; 0x1f
    210a:	98 a1       	ldd	r25, Y+32	; 0x20
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_enuWriteNLatch+0x218>
    2110:	98 a3       	std	Y+32, r25	; 0x20
    2112:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	89 a1       	ldd	r24, Y+33	; 0x21
    2116:	9a a1       	ldd	r25, Y+34	; 0x22
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9a a3       	std	Y+34, r25	; 0x22
    211c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	89 a1       	ldd	r24, Y+33	; 0x21
    2120:	9a a1       	ldd	r25, Y+34	; 0x22
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <LCD_enuWriteNLatch+0x20c>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <LCD_enuWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6b a1       	ldd	r22, Y+35	; 0x23
    212a:	7c a1       	ldd	r23, Y+36	; 0x24
    212c:	8d a1       	ldd	r24, Y+37	; 0x25
    212e:	9e a1       	ldd	r25, Y+38	; 0x26
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9a a3       	std	Y+34, r25	; 0x22
    213a:	89 a3       	std	Y+33, r24	; 0x21
    213c:	89 a1       	ldd	r24, Y+33	; 0x21
    213e:	9a a1       	ldd	r25, Y+34	; 0x22
    2140:	9e 8f       	std	Y+30, r25	; 0x1e
    2142:	8d 8f       	std	Y+29, r24	; 0x1d
    2144:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2146:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_enuWriteNLatch+0x254>
    214c:	9e 8f       	std	Y+30, r25	; 0x1e
    214e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4);

	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 3 )&1 ));
    2150:	89 ad       	ldd	r24, Y+57	; 0x39
    2152:	86 95       	lsr	r24
    2154:	86 95       	lsr	r24
    2156:	86 95       	lsr	r24
    2158:	98 2f       	mov	r25, r24
    215a:	91 70       	andi	r25, 0x01	; 1
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	67 e0       	ldi	r22, 0x07	; 7
    2160:	49 2f       	mov	r20, r25
    2162:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 2 )&1 ));
    2166:	89 ad       	ldd	r24, Y+57	; 0x39
    2168:	86 95       	lsr	r24
    216a:	86 95       	lsr	r24
    216c:	98 2f       	mov	r25, r24
    216e:	91 70       	andi	r25, 0x01	; 1
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	66 e0       	ldi	r22, 0x06	; 6
    2174:	49 2f       	mov	r20, r25
    2176:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 1 )&1 ));
    217a:	89 ad       	ldd	r24, Y+57	; 0x39
    217c:	86 95       	lsr	r24
    217e:	98 2f       	mov	r25, r24
    2180:	91 70       	andi	r25, 0x01	; 1
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	65 e0       	ldi	r22, 0x05	; 5
    2186:	49 2f       	mov	r20, r25
    2188:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 0 )&1 ));
    218c:	89 ad       	ldd	r24, Y+57	; 0x39
    218e:	98 2f       	mov	r25, r24
    2190:	91 70       	andi	r25, 0x01	; 1
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	64 e0       	ldi	r22, 0x04	; 4
    2196:	49 2f       	mov	r20, r25
    2198:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	63 e0       	ldi	r22, 0x03	; 3
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a0 e8       	ldi	r26, 0x80	; 128
    21ac:	bf e3       	ldi	r27, 0x3F	; 63
    21ae:	89 8f       	std	Y+25, r24	; 0x19
    21b0:	9a 8f       	std	Y+26, r25	; 0x1a
    21b2:	ab 8f       	std	Y+27, r26	; 0x1b
    21b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b6:	69 8d       	ldd	r22, Y+25	; 0x19
    21b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	4a e7       	ldi	r20, 0x7A	; 122
    21c4:	55 e4       	ldi	r21, 0x45	; 69
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	8d 8b       	std	Y+21, r24	; 0x15
    21d0:	9e 8b       	std	Y+22, r25	; 0x16
    21d2:	af 8b       	std	Y+23, r26	; 0x17
    21d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d6:	6d 89       	ldd	r22, Y+21	; 0x15
    21d8:	7e 89       	ldd	r23, Y+22	; 0x16
    21da:	8f 89       	ldd	r24, Y+23	; 0x17
    21dc:	98 8d       	ldd	r25, Y+24	; 0x18
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e8       	ldi	r20, 0x80	; 128
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ea:	88 23       	and	r24, r24
    21ec:	2c f4       	brge	.+10     	; 0x21f8 <LCD_enuWriteNLatch+0x304>
		__ticks = 1;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	3f c0       	rjmp	.+126    	; 0x2276 <LCD_enuWriteNLatch+0x382>
	else if (__tmp > 65535)
    21f8:	6d 89       	ldd	r22, Y+21	; 0x15
    21fa:	7e 89       	ldd	r23, Y+22	; 0x16
    21fc:	8f 89       	ldd	r24, Y+23	; 0x17
    21fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	3f ef       	ldi	r19, 0xFF	; 255
    2204:	4f e7       	ldi	r20, 0x7F	; 127
    2206:	57 e4       	ldi	r21, 0x47	; 71
    2208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220c:	18 16       	cp	r1, r24
    220e:	4c f5       	brge	.+82     	; 0x2262 <LCD_enuWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2210:	69 8d       	ldd	r22, Y+25	; 0x19
    2212:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2214:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2216:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e2       	ldi	r20, 0x20	; 32
    221e:	51 e4       	ldi	r21, 0x41	; 65
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	bc 01       	movw	r22, r24
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
    2238:	0f c0       	rjmp	.+30     	; 0x2258 <LCD_enuWriteNLatch+0x364>
    223a:	80 e9       	ldi	r24, 0x90	; 144
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	9a 8b       	std	Y+18, r25	; 0x12
    2240:	89 8b       	std	Y+17, r24	; 0x11
    2242:	89 89       	ldd	r24, Y+17	; 0x11
    2244:	9a 89       	ldd	r25, Y+18	; 0x12
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <LCD_enuWriteNLatch+0x352>
    224a:	9a 8b       	std	Y+18, r25	; 0x12
    224c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224e:	8b 89       	ldd	r24, Y+19	; 0x13
    2250:	9c 89       	ldd	r25, Y+20	; 0x14
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2258:	8b 89       	ldd	r24, Y+19	; 0x13
    225a:	9c 89       	ldd	r25, Y+20	; 0x14
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	69 f7       	brne	.-38     	; 0x223a <LCD_enuWriteNLatch+0x346>
    2260:	14 c0       	rjmp	.+40     	; 0x228a <LCD_enuWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2262:	6d 89       	ldd	r22, Y+21	; 0x15
    2264:	7e 89       	ldd	r23, Y+22	; 0x16
    2266:	8f 89       	ldd	r24, Y+23	; 0x17
    2268:	98 8d       	ldd	r25, Y+24	; 0x18
    226a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9c 8b       	std	Y+20, r25	; 0x14
    2274:	8b 8b       	std	Y+19, r24	; 0x13
    2276:	8b 89       	ldd	r24, Y+19	; 0x13
    2278:	9c 89       	ldd	r25, Y+20	; 0x14
    227a:	98 8b       	std	Y+16, r25	; 0x10
    227c:	8f 87       	std	Y+15, r24	; 0x0f
    227e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2280:	98 89       	ldd	r25, Y+16	; 0x10
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_enuWriteNLatch+0x38e>
    2286:	98 8b       	std	Y+16, r25	; 0x10
    2288:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	63 e0       	ldi	r22, 0x03	; 3
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a0 e8       	ldi	r26, 0x80	; 128
    229a:	b0 e4       	ldi	r27, 0x40	; 64
    229c:	8b 87       	std	Y+11, r24	; 0x0b
    229e:	9c 87       	std	Y+12, r25	; 0x0c
    22a0:	ad 87       	std	Y+13, r26	; 0x0d
    22a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	4a e7       	ldi	r20, 0x7A	; 122
    22b2:	55 e4       	ldi	r21, 0x45	; 69
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	8f 83       	std	Y+7, r24	; 0x07
    22be:	98 87       	std	Y+8, r25	; 0x08
    22c0:	a9 87       	std	Y+9, r26	; 0x09
    22c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c4:	6f 81       	ldd	r22, Y+7	; 0x07
    22c6:	78 85       	ldd	r23, Y+8	; 0x08
    22c8:	89 85       	ldd	r24, Y+9	; 0x09
    22ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e8       	ldi	r20, 0x80	; 128
    22d2:	5f e3       	ldi	r21, 0x3F	; 63
    22d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d8:	88 23       	and	r24, r24
    22da:	2c f4       	brge	.+10     	; 0x22e6 <LCD_enuWriteNLatch+0x3f2>
		__ticks = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	3f c0       	rjmp	.+126    	; 0x2364 <LCD_enuWriteNLatch+0x470>
	else if (__tmp > 65535)
    22e6:	6f 81       	ldd	r22, Y+7	; 0x07
    22e8:	78 85       	ldd	r23, Y+8	; 0x08
    22ea:	89 85       	ldd	r24, Y+9	; 0x09
    22ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	3f ef       	ldi	r19, 0xFF	; 255
    22f2:	4f e7       	ldi	r20, 0x7F	; 127
    22f4:	57 e4       	ldi	r21, 0x47	; 71
    22f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	4c f5       	brge	.+82     	; 0x2350 <LCD_enuWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2300:	7c 85       	ldd	r23, Y+12	; 0x0c
    2302:	8d 85       	ldd	r24, Y+13	; 0x0d
    2304:	9e 85       	ldd	r25, Y+14	; 0x0e
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e2       	ldi	r20, 0x20	; 32
    230c:	51 e4       	ldi	r21, 0x41	; 65
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <LCD_enuWriteNLatch+0x452>
    2328:	80 e9       	ldi	r24, 0x90	; 144
    232a:	91 e0       	ldi	r25, 0x01	; 1
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <LCD_enuWriteNLatch+0x440>
    2338:	9c 83       	std	Y+4, r25	; 0x04
    233a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2346:	8d 81       	ldd	r24, Y+5	; 0x05
    2348:	9e 81       	ldd	r25, Y+6	; 0x06
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	69 f7       	brne	.-38     	; 0x2328 <LCD_enuWriteNLatch+0x434>
    234e:	14 c0       	rjmp	.+40     	; 0x2378 <LCD_enuWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2350:	6f 81       	ldd	r22, Y+7	; 0x07
    2352:	78 85       	ldd	r23, Y+8	; 0x08
    2354:	89 85       	ldd	r24, Y+9	; 0x09
    2356:	9a 85       	ldd	r25, Y+10	; 0x0a
    2358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9e 83       	std	Y+6, r25	; 0x06
    2362:	8d 83       	std	Y+5, r24	; 0x05
    2364:	8d 81       	ldd	r24, Y+5	; 0x05
    2366:	9e 81       	ldd	r25, Y+6	; 0x06
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	9a 81       	ldd	r25, Y+2	; 0x02
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_enuWriteNLatch+0x47c>
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);
#else
#error "LCD mode is wrong ya 7aywan"
#endif
	return ES_OK;
    2378:	80 e0       	ldi	r24, 0x00	; 0
}
    237a:	e9 96       	adiw	r28, 0x39	; 57
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <LCD_enuWriteIntegerNum>:

/*		ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)		*/
ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	2d 97       	sbiw	r28, 0x0d	; 13
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	69 87       	std	Y+9, r22	; 0x09
    23a2:	7a 87       	std	Y+10, r23	; 0x0a
    23a4:	8b 87       	std	Y+11, r24	; 0x0b
    23a6:	9c 87       	std	Y+12, r25	; 0x0c
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8DigitCounter = 1 ;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	8d 83       	std	Y+5, r24	; 0x05

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    23ba:	8f 83       	std	Y+7, r24	; 0x07
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    23bc:	86 e0       	ldi	r24, 0x06	; 6
    23be:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    23c2:	88 87       	std	Y+8, r24	; 0x08

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    23c4:	8f 81       	ldd	r24, Y+7	; 0x07
    23c6:	88 23       	and	r24, r24
    23c8:	09 f0       	breq	.+2      	; 0x23cc <LCD_enuWriteIntegerNum+0x40>
    23ca:	eb c0       	rjmp	.+470    	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
    23cc:	88 85       	ldd	r24, Y+8	; 0x08
    23ce:	88 23       	and	r24, r24
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <LCD_enuWriteIntegerNum+0x48>
    23d2:	e7 c0       	rjmp	.+462    	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
	{
		if( Copy_s32Num < 0 )
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    23da:	bc 85       	ldd	r27, Y+12	; 0x0c
    23dc:	bb 23       	and	r27, r27
    23de:	cc f4       	brge	.+50     	; 0x2412 <LCD_enuWriteIntegerNum+0x86>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    23ea:	8f 83       	std	Y+7, r24	; 0x07
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    23ec:	8d e2       	ldi	r24, 0x2D	; 45
    23ee:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    23f2:	88 87       	std	Y+8, r24	; 0x08
			Copy_s32Num = - Copy_s32Num;
    23f4:	89 85       	ldd	r24, Y+9	; 0x09
    23f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    23fa:	bc 85       	ldd	r27, Y+12	; 0x0c
    23fc:	b0 95       	com	r27
    23fe:	a0 95       	com	r26
    2400:	90 95       	com	r25
    2402:	81 95       	neg	r24
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	af 4f       	sbci	r26, 0xFF	; 255
    2408:	bf 4f       	sbci	r27, 0xFF	; 255
    240a:	89 87       	std	Y+9, r24	; 0x09
    240c:	9a 87       	std	Y+10, r25	; 0x0a
    240e:	ab 87       	std	Y+11, r26	; 0x0b
    2410:	bc 87       	std	Y+12, r27	; 0x0c
		}

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2412:	8f 81       	ldd	r24, Y+7	; 0x07
    2414:	88 23       	and	r24, r24
    2416:	09 f0       	breq	.+2      	; 0x241a <LCD_enuWriteIntegerNum+0x8e>
    2418:	c4 c0       	rjmp	.+392    	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
    241a:	88 85       	ldd	r24, Y+8	; 0x08
    241c:	88 23       	and	r24, r24
    241e:	09 f0       	breq	.+2      	; 0x2422 <LCD_enuWriteIntegerNum+0x96>
    2420:	c0 c0       	rjmp	.+384    	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
		{
			u32 Local_u32Number = Copy_s32Num;
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	ab 85       	ldd	r26, Y+11	; 0x0b
    2428:	bc 85       	ldd	r27, Y+12	; 0x0c
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	9a 83       	std	Y+2, r25	; 0x02
    242e:	ab 83       	std	Y+3, r26	; 0x03
    2430:	bc 83       	std	Y+4, r27	; 0x04
    2432:	1c c0       	rjmp	.+56     	; 0x246c <LCD_enuWriteIntegerNum+0xe0>

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	61 e0       	ldi	r22, 0x01	; 1
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    243e:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    2440:	84 e1       	ldi	r24, 0x14	; 20
    2442:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2446:	88 87       	std	Y+8, r24	; 0x08
				Local_u32Number /=10;
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	9a 81       	ldd	r25, Y+2	; 0x02
    244c:	ab 81       	ldd	r26, Y+3	; 0x03
    244e:	bc 81       	ldd	r27, Y+4	; 0x04
    2450:	2a e0       	ldi	r18, 0x0A	; 10
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 31 19 	call	0x3262	; 0x3262 <__udivmodsi4>
    2460:	da 01       	movw	r26, r20
    2462:	c9 01       	movw	r24, r18
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	ab 83       	std	Y+3, r26	; 0x03
    246a:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			u32 Local_u32Number = Copy_s32Num;

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	ab 81       	ldd	r26, Y+3	; 0x03
    2472:	bc 81       	ldd	r27, Y+4	; 0x04
    2474:	8b 30       	cpi	r24, 0x0B	; 11
    2476:	91 05       	cpc	r25, r1
    2478:	a1 05       	cpc	r26, r1
    247a:	b1 05       	cpc	r27, r1
    247c:	30 f0       	brcs	.+12     	; 0x248a <LCD_enuWriteIntegerNum+0xfe>
    247e:	8f 81       	ldd	r24, Y+7	; 0x07
    2480:	88 23       	and	r24, r24
    2482:	19 f4       	brne	.+6      	; 0x248a <LCD_enuWriteIntegerNum+0xfe>
    2484:	88 85       	ldd	r24, Y+8	; 0x08
    2486:	88 23       	and	r24, r24
    2488:	a9 f2       	breq	.-86     	; 0x2434 <LCD_enuWriteIntegerNum+0xa8>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    248a:	8f 81       	ldd	r24, Y+7	; 0x07
    248c:	88 23       	and	r24, r24
    248e:	09 f0       	breq	.+2      	; 0x2492 <LCD_enuWriteIntegerNum+0x106>
    2490:	88 c0       	rjmp	.+272    	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
    2492:	88 85       	ldd	r24, Y+8	; 0x08
    2494:	88 23       	and	r24, r24
    2496:	09 f0       	breq	.+2      	; 0x249a <LCD_enuWriteIntegerNum+0x10e>
    2498:	84 c0       	rjmp	.+264    	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	61 e0       	ldi	r22, 0x01	; 1
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    24a4:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    24a6:	84 e0       	ldi	r24, 0x04	; 4
    24a8:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    24ac:	88 87       	std	Y+8, r24	; 0x08

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    24ae:	8f 81       	ldd	r24, Y+7	; 0x07
    24b0:	88 23       	and	r24, r24
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <LCD_enuWriteIntegerNum+0x12a>
    24b4:	76 c0       	rjmp	.+236    	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
    24b6:	88 85       	ldd	r24, Y+8	; 0x08
    24b8:	88 23       	and	r24, r24
    24ba:	09 f0       	breq	.+2      	; 0x24be <LCD_enuWriteIntegerNum+0x132>
    24bc:	72 c0       	rjmp	.+228    	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
    24be:	2d c0       	rjmp	.+90     	; 0x251a <LCD_enuWriteIntegerNum+0x18e>
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
					{
						Local_u8DigitCounter++;
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	8f 5f       	subi	r24, 0xFF	; 255
    24c4:	8d 83       	std	Y+5, r24	; 0x05
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	61 e0       	ldi	r22, 0x01	; 1
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    24d0:	8f 83       	std	Y+7, r24	; 0x07
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    24d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    24da:	2a e0       	ldi	r18, 0x0A	; 10
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	50 e0       	ldi	r21, 0x00	; 0
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__divmodsi4>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	80 5d       	subi	r24, 0xD0	; 208
    24f0:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    24f4:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
    24f6:	89 85       	ldd	r24, Y+9	; 0x09
    24f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    24fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    24fe:	2a e0       	ldi	r18, 0x0A	; 10
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e0       	ldi	r20, 0x00	; 0
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__divmodsi4>
    250e:	da 01       	movw	r26, r20
    2510:	c9 01       	movw	r24, r18
    2512:	89 87       	std	Y+9, r24	; 0x09
    2514:	9a 87       	std	Y+10, r25	; 0x0a
    2516:	ab 87       	std	Y+11, r26	; 0x0b
    2518:	bc 87       	std	Y+12, r27	; 0x0c
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2520:	bc 85       	ldd	r27, Y+12	; 0x0c
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	a1 05       	cpc	r26, r1
    2526:	b1 05       	cpc	r27, r1
    2528:	31 f0       	breq	.+12     	; 0x2536 <LCD_enuWriteIntegerNum+0x1aa>
    252a:	8f 81       	ldd	r24, Y+7	; 0x07
    252c:	88 23       	and	r24, r24
    252e:	19 f4       	brne	.+6      	; 0x2536 <LCD_enuWriteIntegerNum+0x1aa>
    2530:	88 85       	ldd	r24, Y+8	; 0x08
    2532:	88 23       	and	r24, r24
    2534:	29 f2       	breq	.-118    	; 0x24c0 <LCD_enuWriteIntegerNum+0x134>
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2536:	8f 81       	ldd	r24, Y+7	; 0x07
    2538:	88 23       	and	r24, r24
    253a:	99 f5       	brne	.+102    	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
    253c:	88 85       	ldd	r24, Y+8	; 0x08
    253e:	88 23       	and	r24, r24
    2540:	81 f5       	brne	.+96     	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
    2542:	0a c0       	rjmp	.+20     	; 0x2558 <LCD_enuWriteIntegerNum+0x1cc>
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	40 e0       	ldi	r20, 0x00	; 0
    254a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    254e:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    2550:	84 e1       	ldi	r24, 0x14	; 20
    2552:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2556:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	8d 87       	std	Y+13, r24	; 0x0d
    255c:	8d 85       	ldd	r24, Y+13	; 0x0d
    255e:	88 23       	and	r24, r24
    2560:	11 f0       	breq	.+4      	; 0x2566 <LCD_enuWriteIntegerNum+0x1da>
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	8d 87       	std	Y+13, r24	; 0x0d
    2566:	9d 85       	ldd	r25, Y+13	; 0x0d
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	81 50       	subi	r24, 0x01	; 1
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	89 27       	eor	r24, r25
    2572:	88 23       	and	r24, r24
    2574:	31 f4       	brne	.+12     	; 0x2582 <LCD_enuWriteIntegerNum+0x1f6>
    2576:	8f 81       	ldd	r24, Y+7	; 0x07
    2578:	88 23       	and	r24, r24
    257a:	19 f4       	brne	.+6      	; 0x2582 <LCD_enuWriteIntegerNum+0x1f6>
    257c:	88 85       	ldd	r24, Y+8	; 0x08
    257e:	88 23       	and	r24, r24
    2580:	09 f3       	breq	.-62     	; 0x2544 <LCD_enuWriteIntegerNum+0x1b8>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
						}

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2582:	8f 81       	ldd	r24, Y+7	; 0x07
    2584:	88 23       	and	r24, r24
    2586:	69 f4       	brne	.+26     	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
    2588:	88 85       	ldd	r24, Y+8	; 0x08
    258a:	88 23       	and	r24, r24
    258c:	51 f4       	brne	.+20     	; 0x25a2 <LCD_enuWriteIntegerNum+0x216>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	61 e0       	ldi	r22, 0x01	; 1
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2598:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    259a:	86 e0       	ldi	r24, 0x06	; 6
    259c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    25a0:	88 87       	std	Y+8, r24	; 0x08

			}

		}
	}
	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    25a2:	8f 81       	ldd	r24, Y+7	; 0x07
    25a4:	88 23       	and	r24, r24
    25a6:	21 f4       	brne	.+8      	; 0x25b0 <LCD_enuWriteIntegerNum+0x224>
    25a8:	88 85       	ldd	r24, Y+8	; 0x08
    25aa:	88 23       	and	r24, r24
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <LCD_enuWriteIntegerNum+0x224>
			 	 Local_enuErrorState = ES_OK;
    25ae:	1e 82       	std	Y+6, r1	; 0x06

	return (Local_enuErrorState = ES_OK);
    25b0:	1e 82       	std	Y+6, r1	; 0x06
    25b2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    25b4:	2d 96       	adiw	r28, 0x0d	; 13
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	cd bf       	out	0x3d, r28	; 61
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <LCD_enuWriteFloatNum>:

/*		ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)		*/
ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	66 97       	sbiw	r28, 0x16	; 22
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	69 8b       	std	Y+17, r22	; 0x11
    25dc:	7a 8b       	std	Y+18, r23	; 0x12
    25de:	8b 8b       	std	Y+19, r24	; 0x13
    25e0:	9c 8b       	std	Y+20, r25	; 0x14
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	8e 87       	std	Y+14, r24	; 0x0e

	u8 Local_u8DigitCounter = 0 ;
    25e6:	1d 86       	std	Y+13, r1	; 0x0d
	u32 Local_u32Integer = 0 , Local_u32Number = 0;
    25e8:	19 86       	std	Y+9, r1	; 0x09
    25ea:	1a 86       	std	Y+10, r1	; 0x0a
    25ec:	1b 86       	std	Y+11, r1	; 0x0b
    25ee:	1c 86       	std	Y+12, r1	; 0x0c
    25f0:	1d 82       	std	Y+5, r1	; 0x05
    25f2:	1e 82       	std	Y+6, r1	; 0x06
    25f4:	1f 82       	std	Y+7, r1	; 0x07
    25f6:	18 86       	std	Y+8, r1	; 0x08
	f32 Local_f32_Fraction = 0.0 ;
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e0       	ldi	r26, 0x00	; 0
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	ab 83       	std	Y+3, r26	; 0x03
    2606:	bc 83       	std	Y+4, r27	; 0x04

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	61 e0       	ldi	r22, 0x01	; 1
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2612:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2614:	86 e0       	ldi	r24, 0x06	; 6
    2616:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    261a:	88 8b       	std	Y+16, r24	; 0x10

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    261c:	8f 85       	ldd	r24, Y+15	; 0x0f
    261e:	88 23       	and	r24, r24
    2620:	09 f0       	breq	.+2      	; 0x2624 <LCD_enuWriteFloatNum+0x5e>
    2622:	8f c1       	rjmp	.+798    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    2624:	88 89       	ldd	r24, Y+16	; 0x10
    2626:	88 23       	and	r24, r24
    2628:	09 f0       	breq	.+2      	; 0x262c <LCD_enuWriteFloatNum+0x66>
    262a:	8b c1       	rjmp	.+790    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
	{
		if( Copy_f32Num < 0 )
    262c:	69 89       	ldd	r22, Y+17	; 0x11
    262e:	7a 89       	ldd	r23, Y+18	; 0x12
    2630:	8b 89       	ldd	r24, Y+19	; 0x13
    2632:	9c 89       	ldd	r25, Y+20	; 0x14
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2640:	88 23       	and	r24, r24
    2642:	9c f4       	brge	.+38     	; 0x266a <LCD_enuWriteFloatNum+0xa4>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	61 e0       	ldi	r22, 0x01	; 1
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    264e:	8f 87       	std	Y+15, r24	; 0x0f
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    2650:	8d e2       	ldi	r24, 0x2D	; 45
    2652:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2656:	88 8b       	std	Y+16, r24	; 0x10
			Copy_f32Num = - Copy_f32Num;
    2658:	89 89       	ldd	r24, Y+17	; 0x11
    265a:	9a 89       	ldd	r25, Y+18	; 0x12
    265c:	ab 89       	ldd	r26, Y+19	; 0x13
    265e:	bc 89       	ldd	r27, Y+20	; 0x14
    2660:	b0 58       	subi	r27, 0x80	; 128
    2662:	89 8b       	std	Y+17, r24	; 0x11
    2664:	9a 8b       	std	Y+18, r25	; 0x12
    2666:	ab 8b       	std	Y+19, r26	; 0x13
    2668:	bc 8b       	std	Y+20, r27	; 0x14
		}

		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
    266a:	69 89       	ldd	r22, Y+17	; 0x11
    266c:	7a 89       	ldd	r23, Y+18	; 0x12
    266e:	8b 89       	ldd	r24, Y+19	; 0x13
    2670:	9c 89       	ldd	r25, Y+20	; 0x14
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	9e 83       	std	Y+6, r25	; 0x06
    267e:	af 83       	std	Y+7, r26	; 0x07
    2680:	b8 87       	std	Y+8, r27	; 0x08
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	af 81       	ldd	r26, Y+7	; 0x07
    2688:	b8 85       	ldd	r27, Y+8	; 0x08
    268a:	89 87       	std	Y+9, r24	; 0x09
    268c:	9a 87       	std	Y+10, r25	; 0x0a
    268e:	ab 87       	std	Y+11, r26	; 0x0b
    2690:	bc 87       	std	Y+12, r27	; 0x0c
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;
    2692:	69 85       	ldd	r22, Y+9	; 0x09
    2694:	7a 85       	ldd	r23, Y+10	; 0x0a
    2696:	8b 85       	ldd	r24, Y+11	; 0x0b
    2698:	9c 85       	ldd	r25, Y+12	; 0x0c
    269a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    269e:	9b 01       	movw	r18, r22
    26a0:	ac 01       	movw	r20, r24
    26a2:	69 89       	ldd	r22, Y+17	; 0x11
    26a4:	7a 89       	ldd	r23, Y+18	; 0x12
    26a6:	8b 89       	ldd	r24, Y+19	; 0x13
    26a8:	9c 89       	ldd	r25, Y+20	; 0x14
    26aa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	9a 83       	std	Y+2, r25	; 0x02
    26b6:	ab 83       	std	Y+3, r26	; 0x03
    26b8:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    26ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    26bc:	88 23       	and	r24, r24
    26be:	09 f0       	breq	.+2      	; 0x26c2 <LCD_enuWriteFloatNum+0xfc>
    26c0:	40 c1       	rjmp	.+640    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    26c2:	88 89       	ldd	r24, Y+16	; 0x10
    26c4:	88 23       	and	r24, r24
    26c6:	09 f0       	breq	.+2      	; 0x26ca <LCD_enuWriteFloatNum+0x104>
    26c8:	3c c1       	rjmp	.+632    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    26ca:	1c c0       	rjmp	.+56     	; 0x2704 <LCD_enuWriteFloatNum+0x13e>
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    26d6:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
    26d8:	84 e1       	ldi	r24, 0x14	; 20
    26da:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    26de:	8f 87       	std	Y+15, r24	; 0x0f
				Local_u32Number /=10;
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	af 81       	ldd	r26, Y+7	; 0x07
    26e6:	b8 85       	ldd	r27, Y+8	; 0x08
    26e8:	2a e0       	ldi	r18, 0x0A	; 10
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	50 e0       	ldi	r21, 0x00	; 0
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 31 19 	call	0x3262	; 0x3262 <__udivmodsi4>
    26f8:	da 01       	movw	r26, r20
    26fa:	c9 01       	movw	r24, r18
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	af 83       	std	Y+7, r26	; 0x07
    2702:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	af 81       	ldd	r26, Y+7	; 0x07
    270a:	b8 85       	ldd	r27, Y+8	; 0x08
    270c:	8b 30       	cpi	r24, 0x0B	; 11
    270e:	91 05       	cpc	r25, r1
    2710:	a1 05       	cpc	r26, r1
    2712:	b1 05       	cpc	r27, r1
    2714:	30 f0       	brcs	.+12     	; 0x2722 <LCD_enuWriteFloatNum+0x15c>
    2716:	8f 85       	ldd	r24, Y+15	; 0x0f
    2718:	88 23       	and	r24, r24
    271a:	19 f4       	brne	.+6      	; 0x2722 <LCD_enuWriteFloatNum+0x15c>
    271c:	88 89       	ldd	r24, Y+16	; 0x10
    271e:	88 23       	and	r24, r24
    2720:	a9 f2       	breq	.-86     	; 0x26cc <LCD_enuWriteFloatNum+0x106>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2722:	8f 85       	ldd	r24, Y+15	; 0x0f
    2724:	88 23       	and	r24, r24
    2726:	09 f0       	breq	.+2      	; 0x272a <LCD_enuWriteFloatNum+0x164>
    2728:	0c c1       	rjmp	.+536    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    272a:	88 89       	ldd	r24, Y+16	; 0x10
    272c:	88 23       	and	r24, r24
    272e:	09 f0       	breq	.+2      	; 0x2732 <LCD_enuWriteFloatNum+0x16c>
    2730:	08 c1       	rjmp	.+528    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    273c:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    273e:	84 e0       	ldi	r24, 0x04	; 4
    2740:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2744:	88 8b       	std	Y+16, r24	; 0x10

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2746:	8f 85       	ldd	r24, Y+15	; 0x0f
    2748:	88 23       	and	r24, r24
    274a:	09 f0       	breq	.+2      	; 0x274e <LCD_enuWriteFloatNum+0x188>
    274c:	fa c0       	rjmp	.+500    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    274e:	88 89       	ldd	r24, Y+16	; 0x10
    2750:	88 23       	and	r24, r24
    2752:	09 f0       	breq	.+2      	; 0x2756 <LCD_enuWriteFloatNum+0x190>
    2754:	f6 c0       	rjmp	.+492    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
				{
					do
					{
						Local_u8DigitCounter++;
    2756:	8d 85       	ldd	r24, Y+13	; 0x0d
    2758:	8f 5f       	subi	r24, 0xFF	; 255
    275a:	8d 87       	std	Y+13, r24	; 0x0d
						DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	61 e0       	ldi	r22, 0x01	; 1
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
						LCD_enuWriteNLatch(ZERO_ASCII + (Local_u32Integer % 10));
    2766:	89 85       	ldd	r24, Y+9	; 0x09
    2768:	9a 85       	ldd	r25, Y+10	; 0x0a
    276a:	ab 85       	ldd	r26, Y+11	; 0x0b
    276c:	bc 85       	ldd	r27, Y+12	; 0x0c
    276e:	2a e0       	ldi	r18, 0x0A	; 10
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 31 19 	call	0x3262	; 0x3262 <__udivmodsi4>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	80 5d       	subi	r24, 0xD0	; 208
    2784:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
						Local_u32Integer /= 10;
    2788:	89 85       	ldd	r24, Y+9	; 0x09
    278a:	9a 85       	ldd	r25, Y+10	; 0x0a
    278c:	ab 85       	ldd	r26, Y+11	; 0x0b
    278e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2790:	2a e0       	ldi	r18, 0x0A	; 10
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 31 19 	call	0x3262	; 0x3262 <__udivmodsi4>
    27a0:	da 01       	movw	r26, r20
    27a2:	c9 01       	movw	r24, r18
    27a4:	89 87       	std	Y+9, r24	; 0x09
    27a6:	9a 87       	std	Y+10, r25	; 0x0a
    27a8:	ab 87       	std	Y+11, r26	; 0x0b
    27aa:	bc 87       	std	Y+12, r27	; 0x0c
					}while(Local_u32Integer && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK);
    27ac:	89 85       	ldd	r24, Y+9	; 0x09
    27ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    27b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	a1 05       	cpc	r26, r1
    27b8:	b1 05       	cpc	r27, r1
    27ba:	31 f0       	breq	.+12     	; 0x27c8 <LCD_enuWriteFloatNum+0x202>
    27bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27be:	88 23       	and	r24, r24
    27c0:	19 f4       	brne	.+6      	; 0x27c8 <LCD_enuWriteFloatNum+0x202>
    27c2:	88 89       	ldd	r24, Y+16	; 0x10
    27c4:	88 23       	and	r24, r24
    27c6:	39 f2       	breq	.-114    	; 0x2756 <LCD_enuWriteFloatNum+0x190>

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    27c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ca:	88 23       	and	r24, r24
    27cc:	09 f0       	breq	.+2      	; 0x27d0 <LCD_enuWriteFloatNum+0x20a>
    27ce:	b9 c0       	rjmp	.+370    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    27d0:	88 89       	ldd	r24, Y+16	; 0x10
    27d2:	88 23       	and	r24, r24
    27d4:	09 f0       	breq	.+2      	; 0x27d8 <LCD_enuWriteFloatNum+0x212>
    27d6:	b5 c0       	rjmp	.+362    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
					{
						do
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	61 e0       	ldi	r22, 0x01	; 1
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    27e2:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    27e4:	84 e1       	ldi	r24, 0x14	; 20
    27e6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    27ea:	88 8b       	std	Y+16, r24	; 0x10
						}while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK );
    27ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ee:	8e 8b       	std	Y+22, r24	; 0x16
    27f0:	9e 89       	ldd	r25, Y+22	; 0x16
    27f2:	99 23       	and	r25, r25
    27f4:	11 f0       	breq	.+4      	; 0x27fa <LCD_enuWriteFloatNum+0x234>
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	8e 8b       	std	Y+22, r24	; 0x16
    27fa:	9e 89       	ldd	r25, Y+22	; 0x16
    27fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fe:	81 50       	subi	r24, 0x01	; 1
    2800:	8d 87       	std	Y+13, r24	; 0x0d
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	89 27       	eor	r24, r25
    2806:	88 23       	and	r24, r24
    2808:	31 f4       	brne	.+12     	; 0x2816 <LCD_enuWriteFloatNum+0x250>
    280a:	8f 85       	ldd	r24, Y+15	; 0x0f
    280c:	88 23       	and	r24, r24
    280e:	19 f4       	brne	.+6      	; 0x2816 <LCD_enuWriteFloatNum+0x250>
    2810:	88 89       	ldd	r24, Y+16	; 0x10
    2812:	88 23       	and	r24, r24
    2814:	09 f3       	breq	.-62     	; 0x27d8 <LCD_enuWriteFloatNum+0x212>

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2816:	8f 85       	ldd	r24, Y+15	; 0x0f
    2818:	88 23       	and	r24, r24
    281a:	09 f0       	breq	.+2      	; 0x281e <LCD_enuWriteFloatNum+0x258>
    281c:	92 c0       	rjmp	.+292    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    281e:	88 89       	ldd	r24, Y+16	; 0x10
    2820:	88 23       	and	r24, r24
    2822:	09 f0       	breq	.+2      	; 0x2826 <LCD_enuWriteFloatNum+0x260>
    2824:	8e c0       	rjmp	.+284    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	61 e0       	ldi	r22, 0x01	; 1
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2830:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2832:	86 e0       	ldi	r24, 0x06	; 6
    2834:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2838:	88 8b       	std	Y+16, r24	; 0x10

							if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    283a:	8f 85       	ldd	r24, Y+15	; 0x0f
    283c:	88 23       	and	r24, r24
    283e:	09 f0       	breq	.+2      	; 0x2842 <LCD_enuWriteFloatNum+0x27c>
    2840:	80 c0       	rjmp	.+256    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    2842:	88 89       	ldd	r24, Y+16	; 0x10
    2844:	88 23       	and	r24, r24
    2846:	09 f0       	breq	.+2      	; 0x284a <LCD_enuWriteFloatNum+0x284>
    2848:	7c c0       	rjmp	.+248    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
							{
								if(Local_f32_Fraction > 0.0f)
    284a:	69 81       	ldd	r22, Y+1	; 0x01
    284c:	7a 81       	ldd	r23, Y+2	; 0x02
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	9c 81       	ldd	r25, Y+4	; 0x04
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	54 f4       	brge	.+20     	; 0x2876 <LCD_enuWriteFloatNum+0x2b0>
								{
									Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	61 e0       	ldi	r22, 0x01	; 1
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    286c:	8f 87       	std	Y+15, r24	; 0x0f
									Local_enuStatus[1] = LCD_enuWriteNLatch(DOT);
    286e:	8e e2       	ldi	r24, 0x2E	; 46
    2870:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2874:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2876:	8f 85       	ldd	r24, Y+15	; 0x0f
    2878:	88 23       	and	r24, r24
    287a:	09 f0       	breq	.+2      	; 0x287e <LCD_enuWriteFloatNum+0x2b8>
    287c:	62 c0       	rjmp	.+196    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    287e:	88 89       	ldd	r24, Y+16	; 0x10
    2880:	88 23       	and	r24, r24
    2882:	09 f0       	breq	.+2      	; 0x2886 <LCD_enuWriteFloatNum+0x2c0>
    2884:	5e c0       	rjmp	.+188    	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
								{
									Local_u8DigitCounter =0;
    2886:	1d 86       	std	Y+13, r1	; 0x0d
    2888:	3e c0       	rjmp	.+124    	; 0x2906 <LCD_enuWriteFloatNum+0x340>
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
									{
										Local_u8DigitCounter++;
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	8f 5f       	subi	r24, 0xFF	; 255
    288e:	8d 87       	std	Y+13, r24	; 0x0d
										Local_f32_Fraction *= 10.0;
    2890:	69 81       	ldd	r22, Y+1	; 0x01
    2892:	7a 81       	ldd	r23, Y+2	; 0x02
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e2       	ldi	r20, 0x20	; 32
    289e:	51 e4       	ldi	r21, 0x41	; 65
    28a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	ab 83       	std	Y+3, r26	; 0x03
    28ae:	bc 83       	std	Y+4, r27	; 0x04
										Local_u32Integer = (u32) Local_f32_Fraction;
    28b0:	69 81       	ldd	r22, Y+1	; 0x01
    28b2:	7a 81       	ldd	r23, Y+2	; 0x02
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	9c 81       	ldd	r25, Y+4	; 0x04
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	89 87       	std	Y+9, r24	; 0x09
    28c2:	9a 87       	std	Y+10, r25	; 0x0a
    28c4:	ab 87       	std	Y+11, r26	; 0x0b
    28c6:	bc 87       	std	Y+12, r27	; 0x0c
										Local_f32_Fraction -= Local_u32Integer;
    28c8:	69 85       	ldd	r22, Y+9	; 0x09
    28ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    28cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    28d0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    28d4:	9b 01       	movw	r18, r22
    28d6:	ac 01       	movw	r20, r24
    28d8:	69 81       	ldd	r22, Y+1	; 0x01
    28da:	7a 81       	ldd	r23, Y+2	; 0x02
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	9c 81       	ldd	r25, Y+4	; 0x04
    28e0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	9a 83       	std	Y+2, r25	; 0x02
    28ec:	ab 83       	std	Y+3, r26	; 0x03
    28ee:	bc 83       	std	Y+4, r27	; 0x04
										Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	61 e0       	ldi	r22, 0x01	; 1
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    28fa:	8f 87       	std	Y+15, r24	; 0x0f
										Local_enuStatus[1] = LCD_enuWriteNLatch((ZERO_ASCII + Local_u32Integer));
    28fc:	89 85       	ldd	r24, Y+9	; 0x09
    28fe:	80 5d       	subi	r24, 0xD0	; 208
    2900:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2904:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
								{
									Local_u8DigitCounter =0;
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2906:	1d 8a       	std	Y+21, r1	; 0x15
    2908:	69 81       	ldd	r22, Y+1	; 0x01
    290a:	7a 81       	ldd	r23, Y+2	; 0x02
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e0       	ldi	r20, 0x00	; 0
    2916:	50 e0       	ldi	r21, 0x00	; 0
    2918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291c:	18 16       	cp	r1, r24
    291e:	14 f4       	brge	.+4      	; 0x2924 <LCD_enuWriteFloatNum+0x35e>
    2920:	91 e0       	ldi	r25, 0x01	; 1
    2922:	9d 8b       	std	Y+21, r25	; 0x15
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	9d 89       	ldd	r25, Y+21	; 0x15
    2928:	89 27       	eor	r24, r25
    292a:	88 23       	and	r24, r24
    292c:	51 f4       	brne	.+20     	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    292e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2930:	86 30       	cpi	r24, 0x06	; 6
    2932:	38 f4       	brcc	.+14     	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    2934:	8f 85       	ldd	r24, Y+15	; 0x0f
    2936:	88 23       	and	r24, r24
    2938:	21 f4       	brne	.+8      	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    293a:	88 89       	ldd	r24, Y+16	; 0x10
    293c:	88 23       	and	r24, r24
    293e:	09 f4       	brne	.+2      	; 0x2942 <LCD_enuWriteFloatNum+0x37c>
    2940:	a4 cf       	rjmp	.-184    	; 0x288a <LCD_enuWriteFloatNum+0x2c4>
				}
			}
		}
	}

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2942:	8f 85       	ldd	r24, Y+15	; 0x0f
    2944:	88 23       	and	r24, r24
    2946:	21 f4       	brne	.+8      	; 0x2950 <LCD_enuWriteFloatNum+0x38a>
    2948:	88 89       	ldd	r24, Y+16	; 0x10
    294a:	88 23       	and	r24, r24
    294c:	09 f4       	brne	.+2      	; 0x2950 <LCD_enuWriteFloatNum+0x38a>
		 	 Local_enuErrorState = ES_OK;
    294e:	1e 86       	std	Y+14, r1	; 0x0e

	return Local_enuErrorState ;
    2950:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    2952:	66 96       	adiw	r28, 0x16	; 22
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <LCD_enuWriteExtraPattern>:

/*		ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)		*/
ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)
{
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	2b 97       	sbiw	r28, 0x0b	; 11
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	de bf       	out	0x3e, r29	; 62
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	cd bf       	out	0x3d, r28	; 61
    2978:	9e 83       	std	Y+6, r25	; 0x06
    297a:	8d 83       	std	Y+5, r24	; 0x05
    297c:	6f 83       	std	Y+7, r22	; 0x07
    297e:	48 87       	std	Y+8, r20	; 0x08
    2980:	29 87       	std	Y+9, r18	; 0x09

	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
    2986:	88 85       	ldd	r24, Y+8	; 0x08
    2988:	85 36       	cpi	r24, 0x65	; 101
    298a:	08 f4       	brcc	.+2      	; 0x298e <LCD_enuWriteExtraPattern+0x2a>
    298c:	52 c0       	rjmp	.+164    	; 0x2a32 <LCD_enuWriteExtraPattern+0xce>
    298e:	88 85       	ldd	r24, Y+8	; 0x08
    2990:	8d 36       	cpi	r24, 0x6D	; 109
    2992:	08 f0       	brcs	.+2      	; 0x2996 <LCD_enuWriteExtraPattern+0x32>
    2994:	4e c0       	rjmp	.+156    	; 0x2a32 <LCD_enuWriteExtraPattern+0xce>
    2996:	88 85       	ldd	r24, Y+8	; 0x08
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	8f 81       	ldd	r24, Y+7	; 0x07
    299e:	88 2f       	mov	r24, r24
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	82 0f       	add	r24, r18
    29a4:	93 1f       	adc	r25, r19
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	8d 36       	cpi	r24, 0x6D	; 109
    29aa:	91 05       	cpc	r25, r1
    29ac:	0c f0       	brlt	.+2      	; 0x29b0 <LCD_enuWriteExtraPattern+0x4c>
    29ae:	41 c0       	rjmp	.+130    	; 0x2a32 <LCD_enuWriteExtraPattern+0xce>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	61 e0       	ldi	r22, 0x01	; 1
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    29ba:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));
    29bc:	88 85       	ldd	r24, Y+8	; 0x08
    29be:	88 2f       	mov	r24, r24
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	8d 55       	subi	r24, 0x5D	; 93
    29c4:	90 40       	sbci	r25, 0x00	; 0
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    29d6:	8c 83       	std	Y+4, r24	; 0x04

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    29d8:	19 82       	std	Y+1, r1	; 0x01
    29da:	15 c0       	rjmp	.+42     	; 0x2a06 <LCD_enuWriteExtraPattern+0xa2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	61 e0       	ldi	r22, 0x01	; 1
    29e0:	41 e0       	ldi	r20, 0x01	; 1
    29e2:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    29e6:	8b 83       	std	Y+3, r24	; 0x03
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	8d 81       	ldd	r24, Y+5	; 0x05
    29f0:	9e 81       	ldd	r25, Y+6	; 0x06
    29f2:	fc 01       	movw	r30, r24
    29f4:	e2 0f       	add	r30, r18
    29f6:	f3 1f       	adc	r31, r19
    29f8:	80 81       	ld	r24, Z
    29fa:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    29fe:	8c 83       	std	Y+4, r24	; 0x04
	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	8f 5f       	subi	r24, 0xFF	; 255
    2a04:	89 83       	std	Y+1, r24	; 0x01
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0e:	88 2f       	mov	r24, r24
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	88 0f       	add	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	28 17       	cp	r18, r24
    2a20:	39 07       	cpc	r19, r25
    2a22:	4c f4       	brge	.+18     	; 0x2a36 <LCD_enuWriteExtraPattern+0xd2>
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	88 23       	and	r24, r24
    2a28:	31 f4       	brne	.+12     	; 0x2a36 <LCD_enuWriteExtraPattern+0xd2>
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	88 23       	and	r24, r24
    2a2e:	b1 f2       	breq	.-84     	; 0x29dc <LCD_enuWriteExtraPattern+0x78>
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <LCD_enuWriteExtraPattern+0xd2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	8a 83       	std	Y+2, r24	; 0x02

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	82 30       	cpi	r24, 0x02	; 2
    2a3a:	71 f1       	breq	.+92     	; 0x2a98 <LCD_enuWriteExtraPattern+0x134>
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	88 23       	and	r24, r24
    2a40:	59 f5       	brne	.+86     	; 0x2a98 <LCD_enuWriteExtraPattern+0x134>
    2a42:	8c 81       	ldd	r24, Y+4	; 0x04
    2a44:	88 23       	and	r24, r24
    2a46:	41 f5       	brne	.+80     	; 0x2a98 <LCD_enuWriteExtraPattern+0x134>
	{
		if(Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT || Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT )
    2a48:	89 85       	ldd	r24, Y+9	; 0x09
    2a4a:	8e 36       	cpi	r24, 0x6E	; 110
    2a4c:	19 f0       	breq	.+6      	; 0x2a54 <LCD_enuWriteExtraPattern+0xf0>
    2a4e:	89 85       	ldd	r24, Y+9	; 0x09
    2a50:	8e 36       	cpi	r24, 0x6E	; 110
    2a52:	01 f5       	brne	.+64     	; 0x2a94 <LCD_enuWriteExtraPattern+0x130>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	61 e0       	ldi	r22, 0x01	; 1
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2a5e:	8b 83       	std	Y+3, r24	; 0x03

			switch(Copy_u8DisplayDirection)
    2a60:	89 85       	ldd	r24, Y+9	; 0x09
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	3b 87       	std	Y+11, r19	; 0x0b
    2a68:	2a 87       	std	Y+10, r18	; 0x0a
    2a6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a6e:	8e 36       	cpi	r24, 0x6E	; 110
    2a70:	91 05       	cpc	r25, r1
    2a72:	31 f0       	breq	.+12     	; 0x2a80 <LCD_enuWriteExtraPattern+0x11c>
    2a74:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a76:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a78:	2f 36       	cpi	r18, 0x6F	; 111
    2a7a:	31 05       	cpc	r19, r1
    2a7c:	31 f0       	breq	.+12     	; 0x2a8a <LCD_enuWriteExtraPattern+0x126>
    2a7e:	0c c0       	rjmp	.+24     	; 0x2a98 <LCD_enuWriteExtraPattern+0x134>
			{
				case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2a80:	86 e0       	ldi	r24, 0x06	; 6
    2a82:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2a86:	8c 83       	std	Y+4, r24	; 0x04
    2a88:	07 c0       	rjmp	.+14     	; 0x2a98 <LCD_enuWriteExtraPattern+0x134>
												break;
				case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    2a8a:	84 e0       	ldi	r24, 0x04	; 4
    2a8c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2a90:	8c 83       	std	Y+4, r24	; 0x04
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <LCD_enuWriteExtraPattern+0x134>
												break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    2a94:	82 e0       	ldi	r24, 0x02	; 2
    2a96:	8a 83       	std	Y+2, r24	; 0x02
	}

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	82 30       	cpi	r24, 0x02	; 2
    2a9c:	39 f0       	breq	.+14     	; 0x2aac <LCD_enuWriteExtraPattern+0x148>
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	88 23       	and	r24, r24
    2aa2:	21 f4       	brne	.+8      	; 0x2aac <LCD_enuWriteExtraPattern+0x148>
    2aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa6:	88 23       	and	r24, r24
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <LCD_enuWriteExtraPattern+0x148>
	 	 Local_enuErrorState = ES_OK;
    2aaa:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState;
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2aae:	2b 96       	adiw	r28, 0x0b	; 11
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <LCD_enuSetTextDirection>:

ES_t LCD_enuSetTextDirection(u8 Copy_u8Direction)
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <LCD_enuSetTextDirection+0x6>
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <LCD_enuSetTextDirection+0x8>
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <LCD_enuSetTextDirection+0xa>
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Direction == DISPLAY_DIR_RIGHT || Copy_u8Direction == DISPLAY_DIR_RIGHT )
    2ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad6:	8e 36       	cpi	r24, 0x6E	; 110
    2ad8:	19 f0       	breq	.+6      	; 0x2ae0 <LCD_enuSetTextDirection+0x20>
    2ada:	8c 81       	ldd	r24, Y+4	; 0x04
    2adc:	8e 36       	cpi	r24, 0x6E	; 110
    2ade:	01 f5       	brne	.+64     	; 0x2b20 <LCD_enuSetTextDirection+0x60>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	61 e0       	ldi	r22, 0x01	; 1
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2aea:	8a 83       	std	Y+2, r24	; 0x02

		switch(Copy_u8Direction)
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	3e 83       	std	Y+6, r19	; 0x06
    2af4:	2d 83       	std	Y+5, r18	; 0x05
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
    2af8:	9e 81       	ldd	r25, Y+6	; 0x06
    2afa:	8e 36       	cpi	r24, 0x6E	; 110
    2afc:	91 05       	cpc	r25, r1
    2afe:	31 f0       	breq	.+12     	; 0x2b0c <LCD_enuSetTextDirection+0x4c>
    2b00:	2d 81       	ldd	r18, Y+5	; 0x05
    2b02:	3e 81       	ldd	r19, Y+6	; 0x06
    2b04:	2f 36       	cpi	r18, 0x6F	; 111
    2b06:	31 05       	cpc	r19, r1
    2b08:	31 f0       	breq	.+12     	; 0x2b16 <LCD_enuSetTextDirection+0x56>
    2b0a:	0c c0       	rjmp	.+24     	; 0x2b24 <LCD_enuSetTextDirection+0x64>
		{
			case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2b0c:	86 e0       	ldi	r24, 0x06	; 6
    2b0e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2b12:	8b 83       	std	Y+3, r24	; 0x03
    2b14:	07 c0       	rjmp	.+14     	; 0x2b24 <LCD_enuSetTextDirection+0x64>
											break;
			case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    2b16:	84 e0       	ldi	r24, 0x04	; 4
    2b18:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_enuWriteNLatch>
    2b1c:	8b 83       	std	Y+3, r24	; 0x03
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <LCD_enuSetTextDirection+0x64>
											break;
		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	82 30       	cpi	r24, 0x02	; 2
    2b28:	39 f0       	breq	.+14     	; 0x2b38 <LCD_enuSetTextDirection+0x78>
    2b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2c:	88 23       	and	r24, r24
    2b2e:	21 f4       	brne	.+8      	; 0x2b38 <LCD_enuSetTextDirection+0x78>
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	88 23       	and	r24, r24
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <LCD_enuSetTextDirection+0x78>
		 	 Local_enuErrorState = ES_OK;
    2b36:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b3a:	26 96       	adiw	r28, 0x06	; 6
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <Keypad_enuInit>:
extern u8 Kpad_u8KeyValues[];
extern KP_Output_t KeyPadCols[];
extern KP_Input_t KeyPadRows[];

ES_t Keypad_enuInit(void)
{
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <Keypad_enuInit+0x6>
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <Keypad_enuInit+0x8>
    2b54:	0f 92       	push	r0
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Iter=0 , Local_u8Flag = 0;
    2b5e:	1a 82       	std	Y+2, r1	; 0x02
    2b60:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    2b62:	90 91 ca 01 	lds	r25, 0x01CA
    2b66:	80 91 c9 01 	lds	r24, 0x01C9
    2b6a:	89 17       	cp	r24, r25
    2b6c:	08 f4       	brcc	.+2      	; 0x2b70 <Keypad_enuInit+0x24>
    2b6e:	b5 c0       	rjmp	.+362    	; 0x2cda <Keypad_enuInit+0x18e>
    2b70:	90 91 cb 01 	lds	r25, 0x01CB
    2b74:	80 91 c9 01 	lds	r24, 0x01C9
    2b78:	89 17       	cp	r24, r25
    2b7a:	08 f4       	brcc	.+2      	; 0x2b7e <Keypad_enuInit+0x32>
    2b7c:	ae c0       	rjmp	.+348    	; 0x2cda <Keypad_enuInit+0x18e>
    2b7e:	54 c0       	rjmp	.+168    	; 0x2c28 <Keypad_enuInit+0xdc>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8INPUT	);
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	28 2f       	mov	r18, r24
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	c9 01       	movw	r24, r18
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	82 0f       	add	r24, r18
    2b8e:	93 1f       	adc	r25, r19
    2b90:	fc 01       	movw	r30, r24
    2b92:	ec 51       	subi	r30, 0x1C	; 28
    2b94:	fe 4f       	sbci	r31, 0xFE	; 254
    2b96:	40 81       	ld	r20, Z
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	c9 01       	movw	r24, r18
    2ba0:	88 0f       	add	r24, r24
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	82 0f       	add	r24, r18
    2ba6:	93 1f       	adc	r25, r19
    2ba8:	fc 01       	movw	r30, r24
    2baa:	eb 51       	subi	r30, 0x1B	; 27
    2bac:	fe 4f       	sbci	r31, 0xFE	; 254
    2bae:	90 81       	ld	r25, Z
    2bb0:	84 2f       	mov	r24, r20
    2bb2:	69 2f       	mov	r22, r25
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    2bba:	8c 83       	std	Y+4, r24	; 0x04
			Local_enuError[1] = DIO_enuSetPinValue		( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState	);
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	c9 01       	movw	r24, r18
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	82 0f       	add	r24, r18
    2bca:	93 1f       	adc	r25, r19
    2bcc:	fc 01       	movw	r30, r24
    2bce:	ec 51       	subi	r30, 0x1C	; 28
    2bd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd2:	50 81       	ld	r21, Z
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	c9 01       	movw	r24, r18
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	82 0f       	add	r24, r18
    2be2:	93 1f       	adc	r25, r19
    2be4:	fc 01       	movw	r30, r24
    2be6:	eb 51       	subi	r30, 0x1B	; 27
    2be8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bea:	40 81       	ld	r20, Z
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	c9 01       	movw	r24, r18
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	82 0f       	add	r24, r18
    2bfa:	93 1f       	adc	r25, r19
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	ea 51       	subi	r30, 0x1A	; 26
    2c00:	fe 4f       	sbci	r31, 0xFE	; 254
    2c02:	90 81       	ld	r25, Z
    2c04:	85 2f       	mov	r24, r21
    2c06:	64 2f       	mov	r22, r20
    2c08:	49 2f       	mov	r20, r25
    2c0a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2c0e:	8d 83       	std	Y+5, r24	; 0x05

			if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    2c10:	8c 81       	ldd	r24, Y+4	; 0x04
    2c12:	88 23       	and	r24, r24
    2c14:	19 f4       	brne	.+6      	; 0x2c1c <Keypad_enuInit+0xd0>
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	88 23       	and	r24, r24
    2c1a:	19 f0       	breq	.+6      	; 0x2c22 <Keypad_enuInit+0xd6>
			{
				Local_u8Flag = 1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	89 83       	std	Y+1, r24	; 0x01
    2c20:	09 c0       	rjmp	.+18     	; 0x2c34 <Keypad_enuInit+0xe8>
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
	u8 Local_u8Iter=0 , Local_u8Flag = 0;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	8a 83       	std	Y+2, r24	; 0x02
    2c28:	90 91 ca 01 	lds	r25, 0x01CA
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	89 17       	cp	r24, r25
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <Keypad_enuInit+0xe8>
    2c32:	a6 cf       	rjmp	.-180    	; 0x2b80 <Keypad_enuInit+0x34>
			{
				Local_u8Flag = 1;
				break;
			}
		}
		if(!Local_u8Flag)
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	88 23       	and	r24, r24
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <Keypad_enuInit+0xf0>
    2c3a:	44 c0       	rjmp	.+136    	; 0x2cc4 <Keypad_enuInit+0x178>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    2c3c:	1a 82       	std	Y+2, r1	; 0x02
    2c3e:	3c c0       	rjmp	.+120    	; 0x2cb8 <Keypad_enuInit+0x16c>
			{
				Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8OUTPUT );
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	88 2f       	mov	r24, r24
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	e4 52       	subi	r30, 0x24	; 36
    2c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c50:	20 81       	ld	r18, Z
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	88 2f       	mov	r24, r24
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	88 0f       	add	r24, r24
    2c5a:	99 1f       	adc	r25, r25
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	e3 52       	subi	r30, 0x23	; 35
    2c60:	fe 4f       	sbci	r31, 0xFE	; 254
    2c62:	90 81       	ld	r25, Z
    2c64:	82 2f       	mov	r24, r18
    2c66:	69 2f       	mov	r22, r25
    2c68:	41 e0       	ldi	r20, 0x01	; 1
    2c6a:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    2c6e:	8c 83       	std	Y+4, r24	; 0x04
				Local_enuError[1] = DIO_enuSetPinValue		( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8HIGH	 );
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	88 2f       	mov	r24, r24
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	e4 52       	subi	r30, 0x24	; 36
    2c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c80:	20 81       	ld	r18, Z
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	e3 52       	subi	r30, 0x23	; 35
    2c90:	fe 4f       	sbci	r31, 0xFE	; 254
    2c92:	90 81       	ld	r25, Z
    2c94:	82 2f       	mov	r24, r18
    2c96:	69 2f       	mov	r22, r25
    2c98:	41 e0       	ldi	r20, 0x01	; 1
    2c9a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2c9e:	8d 83       	std	Y+5, r24	; 0x05

				if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    2ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca2:	88 23       	and	r24, r24
    2ca4:	19 f4       	brne	.+6      	; 0x2cac <Keypad_enuInit+0x160>
    2ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca8:	88 23       	and	r24, r24
    2caa:	19 f0       	breq	.+6      	; 0x2cb2 <Keypad_enuInit+0x166>
				{
					Local_u8Flag = 1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	89 83       	std	Y+1, r24	; 0x01
    2cb0:	09 c0       	rjmp	.+18     	; 0x2cc4 <Keypad_enuInit+0x178>
				break;
			}
		}
		if(!Local_u8Flag)
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	8f 5f       	subi	r24, 0xFF	; 255
    2cb6:	8a 83       	std	Y+2, r24	; 0x02
    2cb8:	90 91 cb 01 	lds	r25, 0x01CB
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	89 17       	cp	r24, r25
    2cc0:	08 f4       	brcc	.+2      	; 0x2cc4 <Keypad_enuInit+0x178>
    2cc2:	be cf       	rjmp	.-132    	; 0x2c40 <Keypad_enuInit+0xf4>
					Local_u8Flag = 1;
					break;
				}
			}
		}
		if(!Local_u8Flag && Local_enuError[0] == ES_OK && Local_enuError[1] == ES_OK)
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	88 23       	and	r24, r24
    2cc8:	51 f4       	brne	.+20     	; 0x2cde <Keypad_enuInit+0x192>
    2cca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ccc:	88 23       	and	r24, r24
    2cce:	39 f4       	brne	.+14     	; 0x2cde <Keypad_enuInit+0x192>
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd2:	88 23       	and	r24, r24
    2cd4:	21 f4       	brne	.+8      	; 0x2cde <Keypad_enuInit+0x192>
			Local_enuErrorState = ES_OK;
    2cd6:	1b 82       	std	Y+3, r1	; 0x03
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <Keypad_enuInit+0x192>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState;//DONE
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)

{
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	65 97       	sbiw	r28, 0x15	; 21
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	9d 8b       	std	Y+21, r25	; 0x15
    2d06:	8c 8b       	std	Y+20, r24	; 0x14
	ES_t Local_enuErrorState = ES_NOK;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	8a 8b       	std	Y+18, r24	; 0x12

	if (Copy_pu8KeyValue != NULL)
    2d0c:	8c 89       	ldd	r24, Y+20	; 0x14
    2d0e:	9d 89       	ldd	r25, Y+21	; 0x15
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <Keypad_enuGetPressedKey+0x26>
    2d14:	64 c1       	rjmp	.+712    	; 0x2fde <Keypad_enuGetPressedKey+0x2ee>
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	8b 8b       	std	Y+19, r24	; 0x13
    2d1a:	19 8a       	std	Y+17, r1	; 0x11

		*Copy_pu8KeyValue = 0xff;
    2d1c:	ec 89       	ldd	r30, Y+20	; 0x14
    2d1e:	fd 89       	ldd	r31, Y+21	; 0x15
    2d20:	8f ef       	ldi	r24, 0xFF	; 255
    2d22:	80 83       	st	Z, r24

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    2d24:	18 8a       	std	Y+16, r1	; 0x10
    2d26:	54 c1       	rjmp	.+680    	; 0x2fd0 <Keypad_enuGetPressedKey+0x2e0>
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );
    2d28:	88 89       	ldd	r24, Y+16	; 0x10
    2d2a:	88 2f       	mov	r24, r24
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	fc 01       	movw	r30, r24
    2d34:	e4 52       	subi	r30, 0x24	; 36
    2d36:	fe 4f       	sbci	r31, 0xFE	; 254
    2d38:	20 81       	ld	r18, Z
    2d3a:	88 89       	ldd	r24, Y+16	; 0x10
    2d3c:	88 2f       	mov	r24, r24
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	fc 01       	movw	r30, r24
    2d46:	e3 52       	subi	r30, 0x23	; 35
    2d48:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4a:	90 81       	ld	r25, Z
    2d4c:	82 2f       	mov	r24, r18
    2d4e:	69 2f       	mov	r22, r25
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2d56:	8a 8b       	std	Y+18, r24	; 0x12

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    2d58:	1f 86       	std	Y+15, r1	; 0x0f
    2d5a:	0d c1       	rjmp	.+538    	; 0x2f76 <Keypad_enuGetPressedKey+0x286>
			{
				Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    2d5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d5e:	28 2f       	mov	r18, r24
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	c9 01       	movw	r24, r18
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	82 0f       	add	r24, r18
    2d6a:	93 1f       	adc	r25, r19
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	ec 51       	subi	r30, 0x1C	; 28
    2d70:	fe 4f       	sbci	r31, 0xFE	; 254
    2d72:	40 81       	ld	r20, Z
    2d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	c9 01       	movw	r24, r18
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	82 0f       	add	r24, r18
    2d82:	93 1f       	adc	r25, r19
    2d84:	fc 01       	movw	r30, r24
    2d86:	eb 51       	subi	r30, 0x1B	; 27
    2d88:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8a:	90 81       	ld	r25, Z
    2d8c:	9e 01       	movw	r18, r28
    2d8e:	2d 5e       	subi	r18, 0xED	; 237
    2d90:	3f 4f       	sbci	r19, 0xFF	; 255
    2d92:	84 2f       	mov	r24, r20
    2d94:	69 2f       	mov	r22, r25
    2d96:	a9 01       	movw	r20, r18
    2d98:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enuGetPinValue>
    2d9c:	8a 8b       	std	Y+18, r24	; 0x12

				if( (Local_u8RowValue == DIO_u8LOW) && ( Local_enuErrorState == ES_OK) )
    2d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2da0:	88 23       	and	r24, r24
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <Keypad_enuGetPressedKey+0xb6>
    2da4:	e5 c0       	rjmp	.+458    	; 0x2f70 <Keypad_enuGetPressedKey+0x280>
    2da6:	8a 89       	ldd	r24, Y+18	; 0x12
    2da8:	88 23       	and	r24, r24
    2daa:	09 f0       	breq	.+2      	; 0x2dae <Keypad_enuGetPressedKey+0xbe>
    2dac:	e1 c0       	rjmp	.+450    	; 0x2f70 <Keypad_enuGetPressedKey+0x280>
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	a0 ea       	ldi	r26, 0xA0	; 160
    2db4:	b1 e4       	ldi	r27, 0x41	; 65
    2db6:	8b 87       	std	Y+11, r24	; 0x0b
    2db8:	9c 87       	std	Y+12, r25	; 0x0c
    2dba:	ad 87       	std	Y+13, r26	; 0x0d
    2dbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	4a e7       	ldi	r20, 0x7A	; 122
    2dcc:	55 e4       	ldi	r21, 0x45	; 69
    2dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	8f 83       	std	Y+7, r24	; 0x07
    2dd8:	98 87       	std	Y+8, r25	; 0x08
    2dda:	a9 87       	std	Y+9, r26	; 0x09
    2ddc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dde:	6f 81       	ldd	r22, Y+7	; 0x07
    2de0:	78 85       	ldd	r23, Y+8	; 0x08
    2de2:	89 85       	ldd	r24, Y+9	; 0x09
    2de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e8       	ldi	r20, 0x80	; 128
    2dec:	5f e3       	ldi	r21, 0x3F	; 63
    2dee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2df2:	88 23       	and	r24, r24
    2df4:	2c f4       	brge	.+10     	; 0x2e00 <Keypad_enuGetPressedKey+0x110>
		__ticks = 1;
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	9e 83       	std	Y+6, r25	; 0x06
    2dfc:	8d 83       	std	Y+5, r24	; 0x05
    2dfe:	3f c0       	rjmp	.+126    	; 0x2e7e <Keypad_enuGetPressedKey+0x18e>
	else if (__tmp > 65535)
    2e00:	6f 81       	ldd	r22, Y+7	; 0x07
    2e02:	78 85       	ldd	r23, Y+8	; 0x08
    2e04:	89 85       	ldd	r24, Y+9	; 0x09
    2e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	3f ef       	ldi	r19, 0xFF	; 255
    2e0c:	4f e7       	ldi	r20, 0x7F	; 127
    2e0e:	57 e4       	ldi	r21, 0x47	; 71
    2e10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e14:	18 16       	cp	r1, r24
    2e16:	4c f5       	brge	.+82     	; 0x2e6a <Keypad_enuGetPressedKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e2       	ldi	r20, 0x20	; 32
    2e26:	51 e4       	ldi	r21, 0x41	; 65
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	bc 01       	movw	r22, r24
    2e32:	cd 01       	movw	r24, r26
    2e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	9e 83       	std	Y+6, r25	; 0x06
    2e3e:	8d 83       	std	Y+5, r24	; 0x05
    2e40:	0f c0       	rjmp	.+30     	; 0x2e60 <Keypad_enuGetPressedKey+0x170>
    2e42:	80 e9       	ldi	r24, 0x90	; 144
    2e44:	91 e0       	ldi	r25, 0x01	; 1
    2e46:	9c 83       	std	Y+4, r25	; 0x04
    2e48:	8b 83       	std	Y+3, r24	; 0x03
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	f1 f7       	brne	.-4      	; 0x2e4e <Keypad_enuGetPressedKey+0x15e>
    2e52:	9c 83       	std	Y+4, r25	; 0x04
    2e54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e56:	8d 81       	ldd	r24, Y+5	; 0x05
    2e58:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	9e 83       	std	Y+6, r25	; 0x06
    2e5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	69 f7       	brne	.-38     	; 0x2e42 <Keypad_enuGetPressedKey+0x152>
    2e68:	14 c0       	rjmp	.+40     	; 0x2e92 <Keypad_enuGetPressedKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6c:	78 85       	ldd	r23, Y+8	; 0x08
    2e6e:	89 85       	ldd	r24, Y+9	; 0x09
    2e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	9e 83       	std	Y+6, r25	; 0x06
    2e7c:	8d 83       	std	Y+5, r24	; 0x05
    2e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e80:	9e 81       	ldd	r25, Y+6	; 0x06
    2e82:	9a 83       	std	Y+2, r25	; 0x02
    2e84:	89 83       	std	Y+1, r24	; 0x01
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <Keypad_enuGetPressedKey+0x19a>
    2e8e:	9a 83       	std	Y+2, r25	; 0x02
    2e90:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(20);
					Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    2e92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	c9 01       	movw	r24, r18
    2e9a:	88 0f       	add	r24, r24
    2e9c:	99 1f       	adc	r25, r25
    2e9e:	82 0f       	add	r24, r18
    2ea0:	93 1f       	adc	r25, r19
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	ec 51       	subi	r30, 0x1C	; 28
    2ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea8:	40 81       	ld	r20, Z
    2eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eac:	28 2f       	mov	r18, r24
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	c9 01       	movw	r24, r18
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	82 0f       	add	r24, r18
    2eb8:	93 1f       	adc	r25, r19
    2eba:	fc 01       	movw	r30, r24
    2ebc:	eb 51       	subi	r30, 0x1B	; 27
    2ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec0:	90 81       	ld	r25, Z
    2ec2:	9e 01       	movw	r18, r28
    2ec4:	2d 5e       	subi	r18, 0xED	; 237
    2ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec8:	84 2f       	mov	r24, r20
    2eca:	69 2f       	mov	r22, r25
    2ecc:	a9 01       	movw	r20, r18
    2ece:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enuGetPinValue>
    2ed2:	8a 8b       	std	Y+18, r24	; 0x12

					if( Local_enuErrorState == ES_OK )
    2ed4:	8a 89       	ldd	r24, Y+18	; 0x12
    2ed6:	88 23       	and	r24, r24
    2ed8:	09 f0       	breq	.+2      	; 0x2edc <Keypad_enuGetPressedKey+0x1ec>
    2eda:	56 c0       	rjmp	.+172    	; 0x2f88 <Keypad_enuGetPressedKey+0x298>
					{
						if( Local_u8RowValue == DIO_u8LOW )
    2edc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ede:	88 23       	and	r24, r24
    2ee0:	09 f0       	breq	.+2      	; 0x2ee4 <Keypad_enuGetPressedKey+0x1f4>
    2ee2:	46 c0       	rjmp	.+140    	; 0x2f70 <Keypad_enuGetPressedKey+0x280>
						{
							Local_u8Pressed = 1 ;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	89 8b       	std	Y+17, r24	; 0x11
							*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];
    2ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	80 91 cb 01 	lds	r24, 0x01CB
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	a9 01       	movw	r20, r18
    2ef8:	48 9f       	mul	r20, r24
    2efa:	90 01       	movw	r18, r0
    2efc:	49 9f       	mul	r20, r25
    2efe:	30 0d       	add	r19, r0
    2f00:	58 9f       	mul	r21, r24
    2f02:	30 0d       	add	r19, r0
    2f04:	11 24       	eor	r1, r1
    2f06:	88 89       	ldd	r24, Y+16	; 0x10
    2f08:	88 2f       	mov	r24, r24
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	82 0f       	add	r24, r18
    2f0e:	93 1f       	adc	r25, r19
    2f10:	fc 01       	movw	r30, r24
    2f12:	e4 53       	subi	r30, 0x34	; 52
    2f14:	fe 4f       	sbci	r31, 0xFE	; 254
    2f16:	80 81       	ld	r24, Z
    2f18:	ec 89       	ldd	r30, Y+20	; 0x14
    2f1a:	fd 89       	ldd	r31, Y+21	; 0x15
    2f1c:	80 83       	st	Z, r24
    2f1e:	21 c0       	rjmp	.+66     	; 0x2f62 <Keypad_enuGetPressedKey+0x272>

							while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
							{
								Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    2f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f22:	28 2f       	mov	r18, r24
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	c9 01       	movw	r24, r18
    2f28:	88 0f       	add	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	82 0f       	add	r24, r18
    2f2e:	93 1f       	adc	r25, r19
    2f30:	fc 01       	movw	r30, r24
    2f32:	ec 51       	subi	r30, 0x1C	; 28
    2f34:	fe 4f       	sbci	r31, 0xFE	; 254
    2f36:	40 81       	ld	r20, Z
    2f38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f3a:	28 2f       	mov	r18, r24
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	c9 01       	movw	r24, r18
    2f40:	88 0f       	add	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	82 0f       	add	r24, r18
    2f46:	93 1f       	adc	r25, r19
    2f48:	fc 01       	movw	r30, r24
    2f4a:	eb 51       	subi	r30, 0x1B	; 27
    2f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4e:	90 81       	ld	r25, Z
    2f50:	9e 01       	movw	r18, r28
    2f52:	2d 5e       	subi	r18, 0xED	; 237
    2f54:	3f 4f       	sbci	r19, 0xFF	; 255
    2f56:	84 2f       	mov	r24, r20
    2f58:	69 2f       	mov	r22, r25
    2f5a:	a9 01       	movw	r20, r18
    2f5c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enuGetPinValue>
    2f60:	8a 8b       	std	Y+18, r24	; 0x12
						if( Local_u8RowValue == DIO_u8LOW )
						{
							Local_u8Pressed = 1 ;
							*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];

							while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
    2f62:	8b 89       	ldd	r24, Y+19	; 0x13
    2f64:	88 23       	and	r24, r24
    2f66:	81 f4       	brne	.+32     	; 0x2f88 <Keypad_enuGetPressedKey+0x298>
    2f68:	8a 89       	ldd	r24, Y+18	; 0x12
    2f6a:	88 23       	and	r24, r24
    2f6c:	c9 f2       	breq	.-78     	; 0x2f20 <Keypad_enuGetPressedKey+0x230>
    2f6e:	0c c0       	rjmp	.+24     	; 0x2f88 <Keypad_enuGetPressedKey+0x298>

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    2f70:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f72:	8f 5f       	subi	r24, 0xFF	; 255
    2f74:	8f 87       	std	Y+15, r24	; 0x0f
    2f76:	8a 89       	ldd	r24, Y+18	; 0x12
    2f78:	88 23       	and	r24, r24
    2f7a:	31 f4       	brne	.+12     	; 0x2f88 <Keypad_enuGetPressedKey+0x298>
    2f7c:	90 91 ca 01 	lds	r25, 0x01CA
    2f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f82:	89 17       	cp	r24, r25
    2f84:	08 f4       	brcc	.+2      	; 0x2f88 <Keypad_enuGetPressedKey+0x298>
    2f86:	ea ce       	rjmp	.-556    	; 0x2d5c <Keypad_enuGetPressedKey+0x6c>
					}
					else break;
				}
			}

			if( Local_enuErrorState == ES_OK )
    2f88:	8a 89       	ldd	r24, Y+18	; 0x12
    2f8a:	88 23       	and	r24, r24
    2f8c:	c1 f4       	brne	.+48     	; 0x2fbe <Keypad_enuGetPressedKey+0x2ce>
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
    2f8e:	88 89       	ldd	r24, Y+16	; 0x10
    2f90:	88 2f       	mov	r24, r24
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	fc 01       	movw	r30, r24
    2f9a:	e4 52       	subi	r30, 0x24	; 36
    2f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f9e:	20 81       	ld	r18, Z
    2fa0:	88 89       	ldd	r24, Y+16	; 0x10
    2fa2:	88 2f       	mov	r24, r24
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	fc 01       	movw	r30, r24
    2fac:	e3 52       	subi	r30, 0x23	; 35
    2fae:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb0:	90 81       	ld	r25, Z
    2fb2:	82 2f       	mov	r24, r18
    2fb4:	69 2f       	mov	r22, r25
    2fb6:	41 e0       	ldi	r20, 0x01	; 1
    2fb8:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2fbc:	8a 8b       	std	Y+18, r24	; 0x12

			if( (Local_u8Pressed == 1) || (Local_enuErrorState != ES_OK) ) break;
    2fbe:	89 89       	ldd	r24, Y+17	; 0x11
    2fc0:	81 30       	cpi	r24, 0x01	; 1
    2fc2:	79 f0       	breq	.+30     	; 0x2fe2 <Keypad_enuGetPressedKey+0x2f2>
    2fc4:	8a 89       	ldd	r24, Y+18	; 0x12
    2fc6:	88 23       	and	r24, r24
    2fc8:	61 f4       	brne	.+24     	; 0x2fe2 <Keypad_enuGetPressedKey+0x2f2>
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;

		*Copy_pu8KeyValue = 0xff;

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    2fca:	88 89       	ldd	r24, Y+16	; 0x10
    2fcc:	8f 5f       	subi	r24, 0xFF	; 255
    2fce:	88 8b       	std	Y+16, r24	; 0x10
    2fd0:	90 91 cb 01 	lds	r25, 0x01CB
    2fd4:	88 89       	ldd	r24, Y+16	; 0x10
    2fd6:	89 17       	cp	r24, r25
    2fd8:	08 f4       	brcc	.+2      	; 0x2fdc <Keypad_enuGetPressedKey+0x2ec>
    2fda:	a6 ce       	rjmp	.-692    	; 0x2d28 <Keypad_enuGetPressedKey+0x38>
    2fdc:	02 c0       	rjmp	.+4      	; 0x2fe2 <Keypad_enuGetPressedKey+0x2f2>
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );

			if( (Local_u8Pressed == 1) || (Local_enuErrorState != ES_OK) ) break;
		}
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    2fde:	83 e0       	ldi	r24, 0x03	; 3
    2fe0:	8a 8b       	std	Y+18, r24	; 0x12

	return Local_enuErrorState;//DONE
    2fe2:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2fe4:	65 96       	adiw	r28, 0x15	; 21
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	cf 91       	pop	r28
    2ff2:	df 91       	pop	r29
    2ff4:	08 95       	ret

00002ff6 <main>:
#define LENGTH	4
#define MAX_TRIALS 3

int
main(void) //using Proteus
{
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	a4 97       	sbiw	r28, 0x24	; 36
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
	char Local_u8Auser[]= "7+12" , Local_u8Apass[]="x-34";
    300a:	ce 01       	movw	r24, r28
    300c:	06 96       	adiw	r24, 0x06	; 6
    300e:	9c 8f       	std	Y+28, r25	; 0x1c
    3010:	8b 8f       	std	Y+27, r24	; 0x1b
    3012:	a5 e8       	ldi	r26, 0x85	; 133
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	be 8f       	std	Y+30, r27	; 0x1e
    3018:	ad 8f       	std	Y+29, r26	; 0x1d
    301a:	b5 e0       	ldi	r27, 0x05	; 5
    301c:	bf 8f       	std	Y+31, r27	; 0x1f
    301e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3020:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3022:	00 80       	ld	r0, Z
    3024:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3026:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	9e 8f       	std	Y+30, r25	; 0x1e
    302c:	8d 8f       	std	Y+29, r24	; 0x1d
    302e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3030:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3032:	0c 92       	st	X, r0
    3034:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3036:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3038:	31 96       	adiw	r30, 0x01	; 1
    303a:	fc 8f       	std	Y+28, r31	; 0x1c
    303c:	eb 8f       	std	Y+27, r30	; 0x1b
    303e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3040:	f1 50       	subi	r31, 0x01	; 1
    3042:	ff 8f       	std	Y+31, r31	; 0x1f
    3044:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3046:	88 23       	and	r24, r24
    3048:	51 f7       	brne	.-44     	; 0x301e <main+0x28>
    304a:	de 01       	movw	r26, r28
    304c:	1b 96       	adiw	r26, 0x0b	; 11
    304e:	b9 a3       	std	Y+33, r27	; 0x21
    3050:	a8 a3       	std	Y+32, r26	; 0x20
    3052:	ea e8       	ldi	r30, 0x8A	; 138
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	fb a3       	std	Y+35, r31	; 0x23
    3058:	ea a3       	std	Y+34, r30	; 0x22
    305a:	f5 e0       	ldi	r31, 0x05	; 5
    305c:	fc a3       	std	Y+36, r31	; 0x24
    305e:	aa a1       	ldd	r26, Y+34	; 0x22
    3060:	bb a1       	ldd	r27, Y+35	; 0x23
    3062:	0c 90       	ld	r0, X
    3064:	ea a1       	ldd	r30, Y+34	; 0x22
    3066:	fb a1       	ldd	r31, Y+35	; 0x23
    3068:	31 96       	adiw	r30, 0x01	; 1
    306a:	fb a3       	std	Y+35, r31	; 0x23
    306c:	ea a3       	std	Y+34, r30	; 0x22
    306e:	a8 a1       	ldd	r26, Y+32	; 0x20
    3070:	b9 a1       	ldd	r27, Y+33	; 0x21
    3072:	0c 92       	st	X, r0
    3074:	e8 a1       	ldd	r30, Y+32	; 0x20
    3076:	f9 a1       	ldd	r31, Y+33	; 0x21
    3078:	31 96       	adiw	r30, 0x01	; 1
    307a:	f9 a3       	std	Y+33, r31	; 0x21
    307c:	e8 a3       	std	Y+32, r30	; 0x20
    307e:	fc a1       	ldd	r31, Y+36	; 0x24
    3080:	f1 50       	subi	r31, 0x01	; 1
    3082:	fc a3       	std	Y+36, r31	; 0x24
    3084:	8c a1       	ldd	r24, Y+36	; 0x24
    3086:	88 23       	and	r24, r24
    3088:	51 f7       	brne	.-44     	; 0x305e <main+0x68>
	char Local_u8AuserInput[LENGTH+1] = {0} , Local_u8ApassInput[LENGTH+1] = {0};
    308a:	85 e0       	ldi	r24, 0x05	; 5
    308c:	fe 01       	movw	r30, r28
    308e:	70 96       	adiw	r30, 0x10	; 16
    3090:	df 01       	movw	r26, r30
    3092:	98 2f       	mov	r25, r24
    3094:	1d 92       	st	X+, r1
    3096:	9a 95       	dec	r25
    3098:	e9 f7       	brne	.-6      	; 0x3094 <main+0x9e>
    309a:	85 e0       	ldi	r24, 0x05	; 5
    309c:	fe 01       	movw	r30, r28
    309e:	75 96       	adiw	r30, 0x15	; 21
    30a0:	df 01       	movw	r26, r30
    30a2:	98 2f       	mov	r25, r24
    30a4:	1d 92       	st	X+, r1
    30a6:	9a 95       	dec	r25
    30a8:	e9 f7       	brne	.-6      	; 0x30a4 <main+0xae>
	u8 Local_u8Counter , Local_u8Trials=0 , key=KEYPAD_NOT_PRESSED , flag=0;
    30aa:	1c 82       	std	Y+4, r1	; 0x04
    30ac:	8f ef       	ldi	r24, 0xFF	; 255
    30ae:	8a 8f       	std	Y+26, r24	; 0x1a
    30b0:	1b 82       	std	Y+3, r1	; 0x03

	LCD_enuInit();
    30b2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_enuInit>
	Keypad_enuInit();
    30b6:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Keypad_enuInit>
    30ba:	a8 c0       	rjmp	.+336    	; 0x320c <main+0x216>

	while (1)
	{
		while(Local_u8Trials < MAX_TRIALS)
		{
			LCD_enuWriteCommand(0x1);
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <LCD_enuWriteCommand>
			LCD_enuGoToPosition(1,1);
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	61 e0       	ldi	r22, 0x01	; 1
    30c6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LCD_enuGoToPosition>
			LCD_enuWriteString("USER:");
    30ca:	80 e6       	ldi	r24, 0x60	; 96
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_enuWriteString>
			LCD_enuGoToPosition(2,1);
    30d2:	82 e0       	ldi	r24, 0x02	; 2
    30d4:	61 e0       	ldi	r22, 0x01	; 1
    30d6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LCD_enuGoToPosition>
			LCD_enuWriteString("PASS:");
    30da:	86 e6       	ldi	r24, 0x66	; 102
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_enuWriteString>
			LCD_enuGoToPosition(1,6);
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	66 e0       	ldi	r22, 0x06	; 6
    30e6:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LCD_enuGoToPosition>
			for(u8 Local_u8Counter=0;Local_u8Counter<LENGTH;Local_u8Counter++ )
    30ea:	1a 82       	std	Y+2, r1	; 0x02
    30ec:	1e c0       	rjmp	.+60     	; 0x312a <main+0x134>
			{
				if( Keypad_enuGetPressedKey(&key) == ES_OK )
    30ee:	ce 01       	movw	r24, r28
    30f0:	4a 96       	adiw	r24, 0x1a	; 26
    30f2:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Keypad_enuGetPressedKey>
    30f6:	88 23       	and	r24, r24
    30f8:	a9 f4       	brne	.+42     	; 0x3124 <main+0x12e>
    30fa:	04 c0       	rjmp	.+8      	; 0x3104 <main+0x10e>
				{
					while( key == KEYPAD_NOT_PRESSED )
					{
						Keypad_enuGetPressedKey(&key);
    30fc:	ce 01       	movw	r24, r28
    30fe:	4a 96       	adiw	r24, 0x1a	; 26
    3100:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Keypad_enuGetPressedKey>
			LCD_enuGoToPosition(1,6);
			for(u8 Local_u8Counter=0;Local_u8Counter<LENGTH;Local_u8Counter++ )
			{
				if( Keypad_enuGetPressedKey(&key) == ES_OK )
				{
					while( key == KEYPAD_NOT_PRESSED )
    3104:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3106:	8f 3f       	cpi	r24, 0xFF	; 255
    3108:	c9 f3       	breq	.-14     	; 0x30fc <main+0x106>
					{
						Keypad_enuGetPressedKey(&key);
					}
					Local_u8AuserInput[Local_u8Counter] = key;
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3112:	ce 01       	movw	r24, r28
    3114:	40 96       	adiw	r24, 0x10	; 16
    3116:	fc 01       	movw	r30, r24
    3118:	e2 0f       	add	r30, r18
    311a:	f3 1f       	adc	r31, r19
    311c:	40 83       	st	Z, r20
					LCD_enuWriteData(key);
    311e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3120:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_enuWriteData>
			LCD_enuGoToPosition(1,1);
			LCD_enuWriteString("USER:");
			LCD_enuGoToPosition(2,1);
			LCD_enuWriteString("PASS:");
			LCD_enuGoToPosition(1,6);
			for(u8 Local_u8Counter=0;Local_u8Counter<LENGTH;Local_u8Counter++ )
    3124:	8a 81       	ldd	r24, Y+2	; 0x02
    3126:	8f 5f       	subi	r24, 0xFF	; 255
    3128:	8a 83       	std	Y+2, r24	; 0x02
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	84 30       	cpi	r24, 0x04	; 4
    312e:	f8 f2       	brcs	.-66     	; 0x30ee <main+0xf8>
					}
					Local_u8AuserInput[Local_u8Counter] = key;
					LCD_enuWriteData(key);
				}
			}
			for(Local_u8Counter = 0; Local_u8Counter<LENGTH && (Local_u8AuserInput[Local_u8Counter] == Local_u8Auser[Local_u8Counter]) ;Local_u8Counter++ );
    3130:	1d 82       	std	Y+5, r1	; 0x05
    3132:	03 c0       	rjmp	.+6      	; 0x313a <main+0x144>
    3134:	8d 81       	ldd	r24, Y+5	; 0x05
    3136:	8f 5f       	subi	r24, 0xFF	; 255
    3138:	8d 83       	std	Y+5, r24	; 0x05
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	84 30       	cpi	r24, 0x04	; 4
    313e:	a0 f4       	brcc	.+40     	; 0x3168 <main+0x172>
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	ce 01       	movw	r24, r28
    3148:	40 96       	adiw	r24, 0x10	; 16
    314a:	fc 01       	movw	r30, r24
    314c:	e2 0f       	add	r30, r18
    314e:	f3 1f       	adc	r31, r19
    3150:	40 81       	ld	r20, Z
    3152:	8d 81       	ldd	r24, Y+5	; 0x05
    3154:	28 2f       	mov	r18, r24
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	ce 01       	movw	r24, r28
    315a:	06 96       	adiw	r24, 0x06	; 6
    315c:	fc 01       	movw	r30, r24
    315e:	e2 0f       	add	r30, r18
    3160:	f3 1f       	adc	r31, r19
    3162:	80 81       	ld	r24, Z
    3164:	48 17       	cp	r20, r24
    3166:	31 f3       	breq	.-52     	; 0x3134 <main+0x13e>

			if( Local_u8Counter != LENGTH )
    3168:	8d 81       	ldd	r24, Y+5	; 0x05
    316a:	84 30       	cpi	r24, 0x04	; 4
    316c:	11 f0       	breq	.+4      	; 0x3172 <main+0x17c>
			{
				flag = 1;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	8b 83       	std	Y+3, r24	; 0x03
			}

			LCD_enuGoToPosition(2,6);
    3172:	82 e0       	ldi	r24, 0x02	; 2
    3174:	66 e0       	ldi	r22, 0x06	; 6
    3176:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LCD_enuGoToPosition>
			for(u8 Local_u8Counter=0;Local_u8Counter<LENGTH;Local_u8Counter++ )
    317a:	19 82       	std	Y+1, r1	; 0x01
    317c:	1e c0       	rjmp	.+60     	; 0x31ba <main+0x1c4>
			{
				if( Keypad_enuGetPressedKey(&key) == ES_OK )
    317e:	ce 01       	movw	r24, r28
    3180:	4a 96       	adiw	r24, 0x1a	; 26
    3182:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Keypad_enuGetPressedKey>
    3186:	88 23       	and	r24, r24
    3188:	a9 f4       	brne	.+42     	; 0x31b4 <main+0x1be>
    318a:	04 c0       	rjmp	.+8      	; 0x3194 <main+0x19e>
				{
					while( key == KEYPAD_NOT_PRESSED )
					{
						Keypad_enuGetPressedKey(&key);
    318c:	ce 01       	movw	r24, r28
    318e:	4a 96       	adiw	r24, 0x1a	; 26
    3190:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <Keypad_enuGetPressedKey>
			LCD_enuGoToPosition(2,6);
			for(u8 Local_u8Counter=0;Local_u8Counter<LENGTH;Local_u8Counter++ )
			{
				if( Keypad_enuGetPressedKey(&key) == ES_OK )
				{
					while( key == KEYPAD_NOT_PRESSED )
    3194:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3196:	8f 3f       	cpi	r24, 0xFF	; 255
    3198:	c9 f3       	breq	.-14     	; 0x318c <main+0x196>
					{
						Keypad_enuGetPressedKey(&key);
					}
					Local_u8ApassInput[Local_u8Counter] = key;
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	28 2f       	mov	r18, r24
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    31a2:	ce 01       	movw	r24, r28
    31a4:	45 96       	adiw	r24, 0x15	; 21
    31a6:	fc 01       	movw	r30, r24
    31a8:	e2 0f       	add	r30, r18
    31aa:	f3 1f       	adc	r31, r19
    31ac:	40 83       	st	Z, r20
					LCD_enuWriteData('*');
    31ae:	8a e2       	ldi	r24, 0x2A	; 42
    31b0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <LCD_enuWriteData>
			{
				flag = 1;
			}

			LCD_enuGoToPosition(2,6);
			for(u8 Local_u8Counter=0;Local_u8Counter<LENGTH;Local_u8Counter++ )
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	8f 5f       	subi	r24, 0xFF	; 255
    31b8:	89 83       	std	Y+1, r24	; 0x01
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	84 30       	cpi	r24, 0x04	; 4
    31be:	f8 f2       	brcs	.-66     	; 0x317e <main+0x188>
					}
					Local_u8ApassInput[Local_u8Counter] = key;
					LCD_enuWriteData('*');
				}
			}
			for(Local_u8Counter = 0; Local_u8Counter<LENGTH && (Local_u8ApassInput[Local_u8Counter] == Local_u8Apass[Local_u8Counter]) ;Local_u8Counter++ );
    31c0:	1d 82       	std	Y+5, r1	; 0x05
    31c2:	03 c0       	rjmp	.+6      	; 0x31ca <main+0x1d4>
    31c4:	8d 81       	ldd	r24, Y+5	; 0x05
    31c6:	8f 5f       	subi	r24, 0xFF	; 255
    31c8:	8d 83       	std	Y+5, r24	; 0x05
    31ca:	8d 81       	ldd	r24, Y+5	; 0x05
    31cc:	84 30       	cpi	r24, 0x04	; 4
    31ce:	a0 f4       	brcc	.+40     	; 0x31f8 <main+0x202>
    31d0:	8d 81       	ldd	r24, Y+5	; 0x05
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	ce 01       	movw	r24, r28
    31d8:	45 96       	adiw	r24, 0x15	; 21
    31da:	fc 01       	movw	r30, r24
    31dc:	e2 0f       	add	r30, r18
    31de:	f3 1f       	adc	r31, r19
    31e0:	40 81       	ld	r20, Z
    31e2:	8d 81       	ldd	r24, Y+5	; 0x05
    31e4:	28 2f       	mov	r18, r24
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	ce 01       	movw	r24, r28
    31ea:	0b 96       	adiw	r24, 0x0b	; 11
    31ec:	fc 01       	movw	r30, r24
    31ee:	e2 0f       	add	r30, r18
    31f0:	f3 1f       	adc	r31, r19
    31f2:	80 81       	ld	r24, Z
    31f4:	48 17       	cp	r20, r24
    31f6:	31 f3       	breq	.-52     	; 0x31c4 <main+0x1ce>

			if( flag || Local_u8Counter != LENGTH )
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	88 23       	and	r24, r24
    31fc:	19 f4       	brne	.+6      	; 0x3204 <main+0x20e>
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	84 30       	cpi	r24, 0x04	; 4
    3202:	41 f0       	breq	.+16     	; 0x3214 <main+0x21e>
			{
				Local_u8Trials++;
    3204:	8c 81       	ldd	r24, Y+4	; 0x04
    3206:	8f 5f       	subi	r24, 0xFF	; 255
    3208:	8c 83       	std	Y+4, r24	; 0x04
				flag = 0;
    320a:	1b 82       	std	Y+3, r1	; 0x03
	LCD_enuInit();
	Keypad_enuInit();

	while (1)
	{
		while(Local_u8Trials < MAX_TRIALS)
    320c:	8c 81       	ldd	r24, Y+4	; 0x04
    320e:	83 30       	cpi	r24, 0x03	; 3
    3210:	08 f4       	brcc	.+2      	; 0x3214 <main+0x21e>
    3212:	54 cf       	rjmp	.-344    	; 0x30bc <main+0xc6>
			{
				break;
			}

		}
		LCD_enuWriteCommand(0x1);
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <LCD_enuWriteCommand>
		LCD_enuGoToPosition(2,2);
    321a:	82 e0       	ldi	r24, 0x02	; 2
    321c:	62 e0       	ldi	r22, 0x02	; 2
    321e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <LCD_enuGoToPosition>
		if(Local_u8Trials == MAX_TRIALS)
    3222:	8c 81       	ldd	r24, Y+4	; 0x04
    3224:	83 30       	cpi	r24, 0x03	; 3
    3226:	29 f4       	brne	.+10     	; 0x3232 <main+0x23c>
		{
			LCD_enuWriteString("***LOCKED***");
    3228:	8c e6       	ldi	r24, 0x6C	; 108
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_enuWriteString>
    3230:	04 c0       	rjmp	.+8      	; 0x323a <main+0x244>
		}
		else
		{
			LCD_enuWriteString("..WELCOME..");
    3232:	89 e7       	ldi	r24, 0x79	; 121
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_enuWriteString>
    323a:	ff cf       	rjmp	.-2      	; 0x323a <main+0x244>

0000323c <__divmodhi4>:
    323c:	97 fb       	bst	r25, 7
    323e:	09 2e       	mov	r0, r25
    3240:	07 26       	eor	r0, r23
    3242:	0a d0       	rcall	.+20     	; 0x3258 <__divmodhi4_neg1>
    3244:	77 fd       	sbrc	r23, 7
    3246:	04 d0       	rcall	.+8      	; 0x3250 <__divmodhi4_neg2>
    3248:	49 d0       	rcall	.+146    	; 0x32dc <__udivmodhi4>
    324a:	06 d0       	rcall	.+12     	; 0x3258 <__divmodhi4_neg1>
    324c:	00 20       	and	r0, r0
    324e:	1a f4       	brpl	.+6      	; 0x3256 <__divmodhi4_exit>

00003250 <__divmodhi4_neg2>:
    3250:	70 95       	com	r23
    3252:	61 95       	neg	r22
    3254:	7f 4f       	sbci	r23, 0xFF	; 255

00003256 <__divmodhi4_exit>:
    3256:	08 95       	ret

00003258 <__divmodhi4_neg1>:
    3258:	f6 f7       	brtc	.-4      	; 0x3256 <__divmodhi4_exit>
    325a:	90 95       	com	r25
    325c:	81 95       	neg	r24
    325e:	9f 4f       	sbci	r25, 0xFF	; 255
    3260:	08 95       	ret

00003262 <__udivmodsi4>:
    3262:	a1 e2       	ldi	r26, 0x21	; 33
    3264:	1a 2e       	mov	r1, r26
    3266:	aa 1b       	sub	r26, r26
    3268:	bb 1b       	sub	r27, r27
    326a:	fd 01       	movw	r30, r26
    326c:	0d c0       	rjmp	.+26     	; 0x3288 <__udivmodsi4_ep>

0000326e <__udivmodsi4_loop>:
    326e:	aa 1f       	adc	r26, r26
    3270:	bb 1f       	adc	r27, r27
    3272:	ee 1f       	adc	r30, r30
    3274:	ff 1f       	adc	r31, r31
    3276:	a2 17       	cp	r26, r18
    3278:	b3 07       	cpc	r27, r19
    327a:	e4 07       	cpc	r30, r20
    327c:	f5 07       	cpc	r31, r21
    327e:	20 f0       	brcs	.+8      	; 0x3288 <__udivmodsi4_ep>
    3280:	a2 1b       	sub	r26, r18
    3282:	b3 0b       	sbc	r27, r19
    3284:	e4 0b       	sbc	r30, r20
    3286:	f5 0b       	sbc	r31, r21

00003288 <__udivmodsi4_ep>:
    3288:	66 1f       	adc	r22, r22
    328a:	77 1f       	adc	r23, r23
    328c:	88 1f       	adc	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	1a 94       	dec	r1
    3292:	69 f7       	brne	.-38     	; 0x326e <__udivmodsi4_loop>
    3294:	60 95       	com	r22
    3296:	70 95       	com	r23
    3298:	80 95       	com	r24
    329a:	90 95       	com	r25
    329c:	9b 01       	movw	r18, r22
    329e:	ac 01       	movw	r20, r24
    32a0:	bd 01       	movw	r22, r26
    32a2:	cf 01       	movw	r24, r30
    32a4:	08 95       	ret

000032a6 <__divmodsi4>:
    32a6:	97 fb       	bst	r25, 7
    32a8:	09 2e       	mov	r0, r25
    32aa:	05 26       	eor	r0, r21
    32ac:	0e d0       	rcall	.+28     	; 0x32ca <__divmodsi4_neg1>
    32ae:	57 fd       	sbrc	r21, 7
    32b0:	04 d0       	rcall	.+8      	; 0x32ba <__divmodsi4_neg2>
    32b2:	d7 df       	rcall	.-82     	; 0x3262 <__udivmodsi4>
    32b4:	0a d0       	rcall	.+20     	; 0x32ca <__divmodsi4_neg1>
    32b6:	00 1c       	adc	r0, r0
    32b8:	38 f4       	brcc	.+14     	; 0x32c8 <__divmodsi4_exit>

000032ba <__divmodsi4_neg2>:
    32ba:	50 95       	com	r21
    32bc:	40 95       	com	r20
    32be:	30 95       	com	r19
    32c0:	21 95       	neg	r18
    32c2:	3f 4f       	sbci	r19, 0xFF	; 255
    32c4:	4f 4f       	sbci	r20, 0xFF	; 255
    32c6:	5f 4f       	sbci	r21, 0xFF	; 255

000032c8 <__divmodsi4_exit>:
    32c8:	08 95       	ret

000032ca <__divmodsi4_neg1>:
    32ca:	f6 f7       	brtc	.-4      	; 0x32c8 <__divmodsi4_exit>
    32cc:	90 95       	com	r25
    32ce:	80 95       	com	r24
    32d0:	70 95       	com	r23
    32d2:	61 95       	neg	r22
    32d4:	7f 4f       	sbci	r23, 0xFF	; 255
    32d6:	8f 4f       	sbci	r24, 0xFF	; 255
    32d8:	9f 4f       	sbci	r25, 0xFF	; 255
    32da:	08 95       	ret

000032dc <__udivmodhi4>:
    32dc:	aa 1b       	sub	r26, r26
    32de:	bb 1b       	sub	r27, r27
    32e0:	51 e1       	ldi	r21, 0x11	; 17
    32e2:	07 c0       	rjmp	.+14     	; 0x32f2 <__udivmodhi4_ep>

000032e4 <__udivmodhi4_loop>:
    32e4:	aa 1f       	adc	r26, r26
    32e6:	bb 1f       	adc	r27, r27
    32e8:	a6 17       	cp	r26, r22
    32ea:	b7 07       	cpc	r27, r23
    32ec:	10 f0       	brcs	.+4      	; 0x32f2 <__udivmodhi4_ep>
    32ee:	a6 1b       	sub	r26, r22
    32f0:	b7 0b       	sbc	r27, r23

000032f2 <__udivmodhi4_ep>:
    32f2:	88 1f       	adc	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	5a 95       	dec	r21
    32f8:	a9 f7       	brne	.-22     	; 0x32e4 <__udivmodhi4_loop>
    32fa:	80 95       	com	r24
    32fc:	90 95       	com	r25
    32fe:	bc 01       	movw	r22, r24
    3300:	cd 01       	movw	r24, r26
    3302:	08 95       	ret

00003304 <__prologue_saves__>:
    3304:	2f 92       	push	r2
    3306:	3f 92       	push	r3
    3308:	4f 92       	push	r4
    330a:	5f 92       	push	r5
    330c:	6f 92       	push	r6
    330e:	7f 92       	push	r7
    3310:	8f 92       	push	r8
    3312:	9f 92       	push	r9
    3314:	af 92       	push	r10
    3316:	bf 92       	push	r11
    3318:	cf 92       	push	r12
    331a:	df 92       	push	r13
    331c:	ef 92       	push	r14
    331e:	ff 92       	push	r15
    3320:	0f 93       	push	r16
    3322:	1f 93       	push	r17
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	ca 1b       	sub	r28, r26
    332e:	db 0b       	sbc	r29, r27
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	de bf       	out	0x3e, r29	; 62
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	cd bf       	out	0x3d, r28	; 61
    333a:	09 94       	ijmp

0000333c <__epilogue_restores__>:
    333c:	2a 88       	ldd	r2, Y+18	; 0x12
    333e:	39 88       	ldd	r3, Y+17	; 0x11
    3340:	48 88       	ldd	r4, Y+16	; 0x10
    3342:	5f 84       	ldd	r5, Y+15	; 0x0f
    3344:	6e 84       	ldd	r6, Y+14	; 0x0e
    3346:	7d 84       	ldd	r7, Y+13	; 0x0d
    3348:	8c 84       	ldd	r8, Y+12	; 0x0c
    334a:	9b 84       	ldd	r9, Y+11	; 0x0b
    334c:	aa 84       	ldd	r10, Y+10	; 0x0a
    334e:	b9 84       	ldd	r11, Y+9	; 0x09
    3350:	c8 84       	ldd	r12, Y+8	; 0x08
    3352:	df 80       	ldd	r13, Y+7	; 0x07
    3354:	ee 80       	ldd	r14, Y+6	; 0x06
    3356:	fd 80       	ldd	r15, Y+5	; 0x05
    3358:	0c 81       	ldd	r16, Y+4	; 0x04
    335a:	1b 81       	ldd	r17, Y+3	; 0x03
    335c:	aa 81       	ldd	r26, Y+2	; 0x02
    335e:	b9 81       	ldd	r27, Y+1	; 0x01
    3360:	ce 0f       	add	r28, r30
    3362:	d1 1d       	adc	r29, r1
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	ed 01       	movw	r28, r26
    3370:	08 95       	ret

00003372 <_exit>:
    3372:	f8 94       	cli

00003374 <__stop_program>:
    3374:	ff cf       	rjmp	.-2      	; 0x3374 <__stop_program>

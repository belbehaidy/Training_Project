
ATmega32_Maddi_503.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b8  00800060  000037ae  00003842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800218  00800218  000039fa  2**0
                  ALLOC
  3 .stab         00004140  00000000  00000000  000039fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f7f  00000000  00000000  00007b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00009abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00009c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00009e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000be1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000cf8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000df90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000e130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000e3f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ec9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 31       	cpi	r26, 0x1B	; 27
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <main>
      8a:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 eb       	ldi	r26, 0xB2	; 178
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 eb       	ldi	r24, 0xB2	; 178
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e6 54       	subi	r30, 0x46	; 70
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	89 83       	std	Y+1, r24	; 0x01

	//

	return Local_enuErrorState ;
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <DIO_enuSetPinDirection+0x6>
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <DIO_enuSetPinDirection+0x8>
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <DIO_enuSetPinDirection+0xa>
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	6b 83       	std	Y+3, r22	; 0x03
     d00:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	84 30       	cpi	r24, 0x04	; 4
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <DIO_enuSetPinDirection+0x20>
     d0c:	d0 c0       	rjmp	.+416    	; 0xeae <DIO_enuSetPinDirection+0x1c0>
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	88 30       	cpi	r24, 0x08	; 8
     d12:	08 f0       	brcs	.+2      	; 0xd16 <DIO_enuSetPinDirection+0x28>
     d14:	cc c0       	rjmp	.+408    	; 0xeae <DIO_enuSetPinDirection+0x1c0>
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <DIO_enuSetPinDirection+0x30>
     d1c:	c8 c0       	rjmp	.+400    	; 0xeae <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT )
	{
		switch (Copy_u8GroupID)
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	3e 83       	std	Y+6, r19	; 0x06
     d26:	2d 83       	std	Y+5, r18	; 0x05
     d28:	6d 81       	ldd	r22, Y+5	; 0x05
     d2a:	7e 81       	ldd	r23, Y+6	; 0x06
     d2c:	61 30       	cpi	r22, 0x01	; 1
     d2e:	71 05       	cpc	r23, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <DIO_enuSetPinDirection+0x46>
     d32:	41 c0       	rjmp	.+130    	; 0xdb6 <DIO_enuSetPinDirection+0xc8>
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	91 05       	cpc	r25, r1
     d3c:	34 f4       	brge	.+12     	; 0xd4a <DIO_enuSetPinDirection+0x5c>
     d3e:	2d 81       	ldd	r18, Y+5	; 0x05
     d40:	3e 81       	ldd	r19, Y+6	; 0x06
     d42:	21 15       	cp	r18, r1
     d44:	31 05       	cpc	r19, r1
     d46:	71 f0       	breq	.+28     	; 0xd64 <DIO_enuSetPinDirection+0x76>
     d48:	b0 c0       	rjmp	.+352    	; 0xeaa <DIO_enuSetPinDirection+0x1bc>
     d4a:	6d 81       	ldd	r22, Y+5	; 0x05
     d4c:	7e 81       	ldd	r23, Y+6	; 0x06
     d4e:	62 30       	cpi	r22, 0x02	; 2
     d50:	71 05       	cpc	r23, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <DIO_enuSetPinDirection+0x68>
     d54:	59 c0       	rjmp	.+178    	; 0xe08 <DIO_enuSetPinDirection+0x11a>
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <DIO_enuSetPinDirection+0x74>
     d60:	7c c0       	rjmp	.+248    	; 0xe5a <DIO_enuSetPinDirection+0x16c>
     d62:	a3 c0       	rjmp	.+326    	; 0xeaa <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     d64:	aa e3       	ldi	r26, 0x3A	; 58
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ea e3       	ldi	r30, 0x3A	; 58
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_enuSetPinDirection+0x92>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	2a 95       	dec	r18
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_enuSetPinDirection+0x8e>
     d84:	80 95       	com	r24
     d86:	84 23       	and	r24, r20
     d88:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction <<   Copy_u8PinID );
     d8a:	aa e3       	ldi	r26, 0x3A	; 58
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	ea e3       	ldi	r30, 0x3A	; 58
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	88 2f       	mov	r24, r24
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	b9 01       	movw	r22, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_enuSetPinDirection+0xbc>
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	8a 95       	dec	r24
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_enuSetPinDirection+0xb8>
     dae:	cb 01       	movw	r24, r22
     db0:	84 2b       	or	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	7a c0       	rjmp	.+244    	; 0xeaa <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     db6:	a7 e3       	ldi	r26, 0x37	; 55
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e7 e3       	ldi	r30, 0x37	; 55
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_enuSetPinDirection+0xe4>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	2a 95       	dec	r18
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_enuSetPinDirection+0xe0>
     dd6:	80 95       	com	r24
     dd8:	84 23       	and	r24, r20
     dda:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction <<   Copy_u8PinID );
     ddc:	a7 e3       	ldi	r26, 0x37	; 55
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e7 e3       	ldi	r30, 0x37	; 55
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	b9 01       	movw	r22, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_enuSetPinDirection+0x10e>
     df8:	66 0f       	add	r22, r22
     dfa:	77 1f       	adc	r23, r23
     dfc:	8a 95       	dec	r24
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_enuSetPinDirection+0x10a>
     e00:	cb 01       	movw	r24, r22
     e02:	84 2b       	or	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	51 c0       	rjmp	.+162    	; 0xeaa <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     e08:	a4 e3       	ldi	r26, 0x34	; 52
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e4 e3       	ldi	r30, 0x34	; 52
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_enuSetPinDirection+0x136>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	2a 95       	dec	r18
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_enuSetPinDirection+0x132>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction <<   Copy_u8PinID );
     e2e:	a4 e3       	ldi	r26, 0x34	; 52
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e4 e3       	ldi	r30, 0x34	; 52
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	b9 01       	movw	r22, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_enuSetPinDirection+0x160>
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	8a 95       	dec	r24
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_enuSetPinDirection+0x15c>
     e52:	cb 01       	movw	r24, r22
     e54:	84 2b       	or	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	28 c0       	rjmp	.+80     	; 0xeaa <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     e5a:	a1 e3       	ldi	r26, 0x31	; 49
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e1 e3       	ldi	r30, 0x31	; 49
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_enuSetPinDirection+0x188>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	2a 95       	dec	r18
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_enuSetPinDirection+0x184>
     e7a:	80 95       	com	r24
     e7c:	84 23       	and	r24, r20
     e7e:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction <<   Copy_u8PinID );
     e80:	a1 e3       	ldi	r26, 0x31	; 49
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e1 e3       	ldi	r30, 0x31	; 49
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	b9 01       	movw	r22, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_enuSetPinDirection+0x1b2>
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	8a 95       	dec	r24
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <DIO_enuSetPinDirection+0x1ae>
     ea4:	cb 01       	movw	r24, r22
     ea6:	84 2b       	or	r24, r20
     ea8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     eaa:	19 82       	std	Y+1, r1	; 0x01
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb4:	26 96       	adiw	r28, 0x06	; 6
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <DIO_enuSetPinValue+0x6>
     ecc:	00 d0       	rcall	.+0      	; 0xece <DIO_enuSetPinValue+0x8>
     ece:	00 d0       	rcall	.+0      	; 0xed0 <DIO_enuSetPinValue+0xa>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	8a 83       	std	Y+2, r24	; 0x02
     ed6:	6b 83       	std	Y+3, r22	; 0x03
     ed8:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	84 30       	cpi	r24, 0x04	; 4
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <DIO_enuSetPinValue+0x20>
     ee4:	d3 c0       	rjmp	.+422    	; 0x108c <DIO_enuSetPinValue+0x1c6>
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	88 30       	cpi	r24, 0x08	; 8
     eea:	08 f0       	brcs	.+2      	; 0xeee <DIO_enuSetPinValue+0x28>
     eec:	cf c0       	rjmp	.+414    	; 0x108c <DIO_enuSetPinValue+0x1c6>
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	20 f0       	brcs	.+8      	; 0xefc <DIO_enuSetPinValue+0x36>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	08 f0       	brcs	.+2      	; 0xefc <DIO_enuSetPinValue+0x36>
     efa:	c8 c0       	rjmp	.+400    	; 0x108c <DIO_enuSetPinValue+0x1c6>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ) )
	{
		switch (Copy_u8GroupID)
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3e 83       	std	Y+6, r19	; 0x06
     f04:	2d 83       	std	Y+5, r18	; 0x05
     f06:	6d 81       	ldd	r22, Y+5	; 0x05
     f08:	7e 81       	ldd	r23, Y+6	; 0x06
     f0a:	61 30       	cpi	r22, 0x01	; 1
     f0c:	71 05       	cpc	r23, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <DIO_enuSetPinValue+0x4c>
     f10:	41 c0       	rjmp	.+130    	; 0xf94 <DIO_enuSetPinValue+0xce>
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	91 05       	cpc	r25, r1
     f1a:	34 f4       	brge	.+12     	; 0xf28 <DIO_enuSetPinValue+0x62>
     f1c:	2d 81       	ldd	r18, Y+5	; 0x05
     f1e:	3e 81       	ldd	r19, Y+6	; 0x06
     f20:	21 15       	cp	r18, r1
     f22:	31 05       	cpc	r19, r1
     f24:	71 f0       	breq	.+28     	; 0xf42 <DIO_enuSetPinValue+0x7c>
     f26:	b0 c0       	rjmp	.+352    	; 0x1088 <DIO_enuSetPinValue+0x1c2>
     f28:	6d 81       	ldd	r22, Y+5	; 0x05
     f2a:	7e 81       	ldd	r23, Y+6	; 0x06
     f2c:	62 30       	cpi	r22, 0x02	; 2
     f2e:	71 05       	cpc	r23, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <DIO_enuSetPinValue+0x6e>
     f32:	59 c0       	rjmp	.+178    	; 0xfe6 <DIO_enuSetPinValue+0x120>
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <DIO_enuSetPinValue+0x7a>
     f3e:	7c c0       	rjmp	.+248    	; 0x1038 <DIO_enuSetPinValue+0x172>
     f40:	a3 c0       	rjmp	.+326    	; 0x1088 <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
     f42:	ab e3       	ldi	r26, 0x3B	; 59
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e3       	ldi	r30, 0x3B	; 59
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_enuSetPinValue+0x98>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	2a 95       	dec	r18
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_enuSetPinValue+0x94>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value <<   Copy_u8PinID );
     f68:	ab e3       	ldi	r26, 0x3B	; 59
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	eb e3       	ldi	r30, 0x3B	; 59
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	b9 01       	movw	r22, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_enuSetPinValue+0xc2>
     f84:	66 0f       	add	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	8a 95       	dec	r24
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_enuSetPinValue+0xbe>
     f8c:	cb 01       	movw	r24, r22
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	7a c0       	rjmp	.+244    	; 0x1088 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
     f94:	a8 e3       	ldi	r26, 0x38	; 56
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e8 e3       	ldi	r30, 0x38	; 56
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_enuSetPinValue+0xea>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	2a 95       	dec	r18
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_enuSetPinValue+0xe6>
     fb4:	80 95       	com	r24
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value <<   Copy_u8PinID );
     fba:	a8 e3       	ldi	r26, 0x38	; 56
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e8 e3       	ldi	r30, 0x38	; 56
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	b9 01       	movw	r22, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_enuSetPinValue+0x114>
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	8a 95       	dec	r24
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_enuSetPinValue+0x110>
     fde:	cb 01       	movw	r24, r22
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	51 c0       	rjmp	.+162    	; 0x1088 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
     fe6:	a5 e3       	ldi	r26, 0x35	; 53
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e5 e3       	ldi	r30, 0x35	; 53
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_enuSetPinValue+0x13c>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	2a 95       	dec	r18
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_enuSetPinValue+0x138>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value <<   Copy_u8PinID );
    100c:	a5 e3       	ldi	r26, 0x35	; 53
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	b9 01       	movw	r22, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_enuSetPinValue+0x166>
    1028:	66 0f       	add	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	8a 95       	dec	r24
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_enuSetPinValue+0x162>
    1030:	cb 01       	movw	r24, r22
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	28 c0       	rjmp	.+80     	; 0x1088 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
    1038:	a2 e3       	ldi	r26, 0x32	; 50
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e2 e3       	ldi	r30, 0x32	; 50
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_enuSetPinValue+0x18e>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	2a 95       	dec	r18
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_enuSetPinValue+0x18a>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value <<   Copy_u8PinID );
    105e:	a2 e3       	ldi	r26, 0x32	; 50
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e2 e3       	ldi	r30, 0x32	; 50
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	b9 01       	movw	r22, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_enuSetPinValue+0x1b8>
    107a:	66 0f       	add	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_enuSetPinValue+0x1b4>
    1082:	cb 01       	movw	r24, r22
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1088:	19 82       	std	Y+1, r1	; 0x01
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
}
    1092:	26 96       	adiw	r28, 0x06	; 6
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <DIO_enuTogglePinValue+0x6>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <DIO_enuTogglePinValue+0x8>
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	8a 83       	std	Y+2, r24	; 0x02
    10b4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <DIO_enuTogglePinValue+0x1e>
    10c0:	74 c0       	rjmp	.+232    	; 0x11aa <DIO_enuTogglePinValue+0x106>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	88 30       	cpi	r24, 0x08	; 8
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <DIO_enuTogglePinValue+0x26>
    10c8:	70 c0       	rjmp	.+224    	; 0x11aa <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3d 83       	std	Y+5, r19	; 0x05
    10d2:	2c 83       	std	Y+4, r18	; 0x04
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	91 05       	cpc	r25, r1
    10dc:	49 f1       	breq	.+82     	; 0x1130 <DIO_enuTogglePinValue+0x8c>
    10de:	2c 81       	ldd	r18, Y+4	; 0x04
    10e0:	3d 81       	ldd	r19, Y+5	; 0x05
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <DIO_enuTogglePinValue+0x4e>
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	61 f0       	breq	.+24     	; 0x1108 <DIO_enuTogglePinValue+0x64>
    10f0:	5a c0       	rjmp	.+180    	; 0x11a6 <DIO_enuTogglePinValue+0x102>
    10f2:	2c 81       	ldd	r18, Y+4	; 0x04
    10f4:	3d 81       	ldd	r19, Y+5	; 0x05
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	71 f1       	breq	.+92     	; 0x1158 <DIO_enuTogglePinValue+0xb4>
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	e9 f1       	breq	.+122    	; 0x1180 <DIO_enuTogglePinValue+0xdc>
    1106:	4f c0       	rjmp	.+158    	; 0x11a6 <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    1108:	ab e3       	ldi	r26, 0x3B	; 59
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_enuTogglePinValue+0x82>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_enuTogglePinValue+0x7e>
    112a:	84 27       	eor	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	3b c0       	rjmp	.+118    	; 0x11a6 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    1130:	a8 e3       	ldi	r26, 0x38	; 56
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e8 e3       	ldi	r30, 0x38	; 56
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_enuTogglePinValue+0xaa>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_enuTogglePinValue+0xa6>
    1152:	84 27       	eor	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	27 c0       	rjmp	.+78     	; 0x11a6 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    1158:	a5 e3       	ldi	r26, 0x35	; 53
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e3       	ldi	r30, 0x35	; 53
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_enuTogglePinValue+0xd2>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_enuTogglePinValue+0xce>
    117a:	84 27       	eor	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	13 c0       	rjmp	.+38     	; 0x11a6 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
    1180:	a2 e3       	ldi	r26, 0x32	; 50
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e2 e3       	ldi	r30, 0x32	; 50
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_enuTogglePinValue+0xfa>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_enuTogglePinValue+0xf6>
    11a2:	84 27       	eor	r24, r20
    11a4:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    11a6:	19 82       	std	Y+1, r1	; 0x01
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	27 97       	sbiw	r28, 0x07	; 7
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	8a 83       	std	Y+2, r24	; 0x02
    11d6:	6b 83       	std	Y+3, r22	; 0x03
    11d8:	5d 83       	std	Y+5, r21	; 0x05
    11da:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	09 f4       	brne	.+2      	; 0x11ea <DIO_enuGetPinValue+0x2a>
    11e8:	7d c0       	rjmp	.+250    	; 0x12e4 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <DIO_enuGetPinValue+0x32>
    11f0:	76 c0       	rjmp	.+236    	; 0x12de <DIO_enuGetPinValue+0x11e>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 30       	cpi	r24, 0x08	; 8
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <DIO_enuGetPinValue+0x3a>
    11f8:	72 c0       	rjmp	.+228    	; 0x12de <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3f 83       	std	Y+7, r19	; 0x07
    1202:	2e 83       	std	Y+6, r18	; 0x06
    1204:	4e 81       	ldd	r20, Y+6	; 0x06
    1206:	5f 81       	ldd	r21, Y+7	; 0x07
    1208:	41 30       	cpi	r20, 0x01	; 1
    120a:	51 05       	cpc	r21, r1
    120c:	59 f1       	breq	.+86     	; 0x1264 <DIO_enuGetPinValue+0xa4>
    120e:	8e 81       	ldd	r24, Y+6	; 0x06
    1210:	9f 81       	ldd	r25, Y+7	; 0x07
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	91 05       	cpc	r25, r1
    1216:	34 f4       	brge	.+12     	; 0x1224 <DIO_enuGetPinValue+0x64>
    1218:	2e 81       	ldd	r18, Y+6	; 0x06
    121a:	3f 81       	ldd	r19, Y+7	; 0x07
    121c:	21 15       	cp	r18, r1
    121e:	31 05       	cpc	r19, r1
    1220:	69 f0       	breq	.+26     	; 0x123c <DIO_enuGetPinValue+0x7c>
    1222:	5b c0       	rjmp	.+182    	; 0x12da <DIO_enuGetPinValue+0x11a>
    1224:	4e 81       	ldd	r20, Y+6	; 0x06
    1226:	5f 81       	ldd	r21, Y+7	; 0x07
    1228:	42 30       	cpi	r20, 0x02	; 2
    122a:	51 05       	cpc	r21, r1
    122c:	79 f1       	breq	.+94     	; 0x128c <DIO_enuGetPinValue+0xcc>
    122e:	8e 81       	ldd	r24, Y+6	; 0x06
    1230:	9f 81       	ldd	r25, Y+7	; 0x07
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	91 05       	cpc	r25, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <DIO_enuGetPinValue+0x7a>
    1238:	3d c0       	rjmp	.+122    	; 0x12b4 <DIO_enuGetPinValue+0xf4>
    123a:	4f c0       	rjmp	.+158    	; 0x12da <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( ( PINA >> Copy_u8PinID ) & DIO_BIT_MASK );
    123c:	e9 e3       	ldi	r30, 0x39	; 57
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	88 2f       	mov	r24, r24
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	a9 01       	movw	r20, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_enuGetPinValue+0x94>
    1250:	55 95       	asr	r21
    1252:	47 95       	ror	r20
    1254:	8a 95       	dec	r24
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_enuGetPinValue+0x90>
    1258:	ca 01       	movw	r24, r20
    125a:	81 70       	andi	r24, 0x01	; 1
    125c:	ec 81       	ldd	r30, Y+4	; 0x04
    125e:	fd 81       	ldd	r31, Y+5	; 0x05
    1260:	80 83       	st	Z, r24
    1262:	3b c0       	rjmp	.+118    	; 0x12da <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( ( PINB >> Copy_u8PinID ) & DIO_BIT_MASK );
    1264:	e6 e3       	ldi	r30, 0x36	; 54
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a9 01       	movw	r20, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_enuGetPinValue+0xbc>
    1278:	55 95       	asr	r21
    127a:	47 95       	ror	r20
    127c:	8a 95       	dec	r24
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_enuGetPinValue+0xb8>
    1280:	ca 01       	movw	r24, r20
    1282:	81 70       	andi	r24, 0x01	; 1
    1284:	ec 81       	ldd	r30, Y+4	; 0x04
    1286:	fd 81       	ldd	r31, Y+5	; 0x05
    1288:	80 83       	st	Z, r24
    128a:	27 c0       	rjmp	.+78     	; 0x12da <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( ( PINC >> Copy_u8PinID ) & DIO_BIT_MASK );
    128c:	e3 e3       	ldi	r30, 0x33	; 51
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a9 01       	movw	r20, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_enuGetPinValue+0xe4>
    12a0:	55 95       	asr	r21
    12a2:	47 95       	ror	r20
    12a4:	8a 95       	dec	r24
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_enuGetPinValue+0xe0>
    12a8:	ca 01       	movw	r24, r20
    12aa:	81 70       	andi	r24, 0x01	; 1
    12ac:	ec 81       	ldd	r30, Y+4	; 0x04
    12ae:	fd 81       	ldd	r31, Y+5	; 0x05
    12b0:	80 83       	st	Z, r24
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( ( PIND >> Copy_u8PinID ) & DIO_BIT_MASK );
    12b4:	e0 e3       	ldi	r30, 0x30	; 48
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a9 01       	movw	r20, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_enuGetPinValue+0x10c>
    12c8:	55 95       	asr	r21
    12ca:	47 95       	ror	r20
    12cc:	8a 95       	dec	r24
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_enuGetPinValue+0x108>
    12d0:	ca 01       	movw	r24, r20
    12d2:	81 70       	andi	r24, 0x01	; 1
    12d4:	ec 81       	ldd	r30, Y+4	; 0x04
    12d6:	fd 81       	ldd	r31, Y+5	; 0x05
    12d8:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    12da:	19 82       	std	Y+1, r1	; 0x01
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ea:	27 96       	adiw	r28, 0x07	; 7
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <Switch_enuInit>:
extern Switch_t Switch[];
extern u8 Switch_u8SwitchZero;


ES_t Switch_enuInit(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <Switch_enuInit+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <Switch_enuInit+0x8>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	8a 83       	std	Y+2, r24	; 0x02
    130c:	4d c0       	rjmp	.+154    	; 0x13a8 <Switch_enuInit+0xac>

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
	{
		Local_enuAerror[0] = DIO_enuSetPinDirection	(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , DIO_u8INPUT);
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	fc 01       	movw	r30, r24
    131e:	e4 54       	subi	r30, 0x44	; 68
    1320:	fe 4f       	sbci	r31, 0xFE	; 254
    1322:	20 81       	ld	r18, Z
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	fc 01       	movw	r30, r24
    1334:	e3 54       	subi	r30, 0x43	; 67
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	90 81       	ld	r25, Z
    133a:	82 2f       	mov	r24, r18
    133c:	69 2f       	mov	r22, r25
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    1344:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	fc 01       	movw	r30, r24
    1356:	e4 54       	subi	r30, 0x44	; 68
    1358:	fe 4f       	sbci	r31, 0xFE	; 254
    135a:	30 81       	ld	r19, Z
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	fc 01       	movw	r30, r24
    136c:	e3 54       	subi	r30, 0x43	; 67
    136e:	fe 4f       	sbci	r31, 0xFE	; 254
    1370:	20 81       	ld	r18, Z
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	fc 01       	movw	r30, r24
    1384:	e4 54       	subi	r30, 0x44	; 68
    1386:	fe 4f       	sbci	r31, 0xFE	; 254
    1388:	90 81       	ld	r25, Z
    138a:	83 2f       	mov	r24, r19
    138c:	62 2f       	mov	r22, r18
    138e:	49 2f       	mov	r20, r25
    1390:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1394:	8c 83       	std	Y+4, r24	; 0x04

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	88 23       	and	r24, r24
    139a:	61 f4       	brne	.+24     	; 0x13b4 <Switch_enuInit+0xb8>
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	88 23       	and	r24, r24
    13a0:	49 f4       	brne	.+18     	; 0x13b4 <Switch_enuInit+0xb8>

ES_t Switch_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	90 91 ba 01 	lds	r25, 0x01BA
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	89 17       	cp	r24, r25
    13b0:	08 f4       	brcc	.+2      	; 0x13b4 <Switch_enuInit+0xb8>
    13b2:	ad cf       	rjmp	.-166    	; 0x130e <Switch_enuInit+0x12>
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
	}

	if (Local_enuAerror[0] == ES_OK && Local_enuAerror[1] == ES_OK)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 23       	and	r24, r24
    13b8:	21 f4       	brne	.+8      	; 0x13c2 <Switch_enuInit+0xc6>
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	88 23       	and	r24, r24
    13be:	09 f4       	brne	.+2      	; 0x13c2 <Switch_enuInit+0xc6>
		Local_enuErrorState = ES_OK;
    13c0:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <Switch_enuGetPressed>:

ES_t Switch_enuGetPressed (u8 Copy_u8SwitchNum ,u8 * Copy_pu8SwitchValue)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <Switch_enuGetPressed+0x6>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <Switch_enuGetPressed+0x8>
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	8a 83       	std	Y+2, r24	; 0x02
    13e0:	7c 83       	std	Y+4, r23	; 0x04
    13e2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8SwitchNum-=Switch_u8SwitchZero) < Switch_u8SwitchesMaxNum )
    13e8:	90 91 bb 01 	lds	r25, 0x01BB
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	89 1b       	sub	r24, r25
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	90 91 ba 01 	lds	r25, 0x01BA
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	89 17       	cp	r24, r25
    13fa:	f8 f4       	brcc	.+62     	; 0x143a <Switch_enuGetPressed+0x68>
	{
		Local_enuErrorState = DIO_enuGetPinValue(Switch[Copy_u8SwitchNum].sw_Grp , Switch[Copy_u8SwitchNum].sw_Pin , Copy_pu8SwitchValue);
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	fc 01       	movw	r30, r24
    140c:	e4 54       	subi	r30, 0x44	; 68
    140e:	fe 4f       	sbci	r31, 0xFE	; 254
    1410:	40 81       	ld	r20, Z
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	fc 01       	movw	r30, r24
    1422:	e3 54       	subi	r30, 0x43	; 67
    1424:	fe 4f       	sbci	r31, 0xFE	; 254
    1426:	90 81       	ld	r25, Z
    1428:	2b 81       	ldd	r18, Y+3	; 0x03
    142a:	3c 81       	ldd	r19, Y+4	; 0x04
    142c:	84 2f       	mov	r24, r20
    142e:	69 2f       	mov	r22, r25
    1430:	a9 01       	movw	r20, r18
    1432:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enuGetPinValue>
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	02 c0       	rjmp	.+4      	; 0x143e <Switch_enuGetPressed+0x6c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    143e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <SevSeg_enuInit>:
extern u8 ModuleValuePins;
extern u8 ModuleControlPins;
extern SSegModule_t SSegModule[];

ES_t SevSeg_enuInit(void)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <SevSeg_enuInit+0x6>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <SevSeg_enuInit+0x8>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    145e:	8b e0       	ldi	r24, 0x0B	; 11
    1460:	8b 83       	std	Y+3, r24	; 0x03
    1462:	bc c0       	rjmp	.+376    	; 0x15dc <SevSeg_enuInit+0x18e>
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	8b 50       	subi	r24, 0x0B	; 11
    1468:	8a 83       	std	Y+2, r24	; 0x02
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    146a:	19 82       	std	Y+1, r1	; 0x01
    146c:	3a c0       	rjmp	.+116    	; 0x14e2 <SevSeg_enuInit+0x94>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	48 2f       	mov	r20, r24
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	c9 01       	movw	r24, r18
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	82 1b       	sub	r24, r18
    148a:	93 0b       	sbc	r25, r19
    148c:	84 0f       	add	r24, r20
    148e:	95 1f       	adc	r25, r21
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	fc 01       	movw	r30, r24
    1496:	e5 53       	subi	r30, 0x35	; 53
    1498:	fe 4f       	sbci	r31, 0xFE	; 254
    149a:	60 81       	ld	r22, Z
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	48 2f       	mov	r20, r24
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	c9 01       	movw	r24, r18
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	82 1b       	sub	r24, r18
    14b8:	93 0b       	sbc	r25, r19
    14ba:	84 0f       	add	r24, r20
    14bc:	95 1f       	adc	r25, r21
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	fc 01       	movw	r30, r24
    14c4:	e4 53       	subi	r30, 0x34	; 52
    14c6:	fe 4f       	sbci	r31, 0xFE	; 254
    14c8:	90 81       	ld	r25, Z
    14ca:	86 2f       	mov	r24, r22
    14cc:	69 2f       	mov	r22, r25
    14ce:	41 e0       	ldi	r20, 0x01	; 1
    14d0:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    14d4:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	88 23       	and	r24, r24
    14da:	41 f4       	brne	.+16     	; 0x14ec <SevSeg_enuInit+0x9e>
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
	{
		Local_u8ModuleNum = Local_u8Counter - MODULE_1;
		for(Local_u8PinNum = 0 ; Local_u8PinNum<ModuleValuePins ; Local_u8PinNum++ )
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	90 91 c9 01 	lds	r25, 0x01C9
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	89 17       	cp	r24, r25
    14ea:	08 f2       	brcs	.-126    	; 0x146e <SevSeg_enuInit+0x20>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Local_u8ModuleNum].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
		if( Local_enuErrorState == ES_OK)
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	88 23       	and	r24, r24
    14f0:	61 f5       	brne	.+88     	; 0x154a <SevSeg_enuInit+0xfc>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9c 01       	movw	r18, r24
    14fa:	22 0f       	add	r18, r18
    14fc:	33 1f       	adc	r19, r19
    14fe:	c9 01       	movw	r24, r18
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	82 1b       	sub	r24, r18
    150e:	93 0b       	sbc	r25, r19
    1510:	fc 01       	movw	r30, r24
    1512:	ed 52       	subi	r30, 0x2D	; 45
    1514:	fe 4f       	sbci	r31, 0xFE	; 254
    1516:	40 81       	ld	r20, Z
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9c 01       	movw	r18, r24
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	c9 01       	movw	r24, r18
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	82 1b       	sub	r24, r18
    1534:	93 0b       	sbc	r25, r19
    1536:	fc 01       	movw	r30, r24
    1538:	ec 52       	subi	r30, 0x2C	; 44
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	90 81       	ld	r25, Z
    153e:	84 2f       	mov	r24, r20
    1540:	69 2f       	mov	r22, r25
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    1548:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    154a:	19 82       	std	Y+1, r1	; 0x01
    154c:	3b c0       	rjmp	.+118    	; 0x15c4 <SevSeg_enuInit+0x176>
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	48 2f       	mov	r20, r24
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	c9 01       	movw	r24, r18
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	82 1b       	sub	r24, r18
    156a:	93 0b       	sbc	r25, r19
    156c:	84 0f       	add	r24, r20
    156e:	95 1f       	adc	r25, r21
    1570:	05 96       	adiw	r24, 0x05	; 5
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	fc 01       	movw	r30, r24
    1578:	e5 53       	subi	r30, 0x35	; 53
    157a:	fe 4f       	sbci	r31, 0xFE	; 254
    157c:	60 81       	ld	r22, Z
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	48 2f       	mov	r20, r24
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	c9 01       	movw	r24, r18
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	82 1b       	sub	r24, r18
    159a:	93 0b       	sbc	r25, r19
    159c:	84 0f       	add	r24, r20
    159e:	95 1f       	adc	r25, r21
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	fc 01       	movw	r30, r24
    15a6:	ea 52       	subi	r30, 0x2A	; 42
    15a8:	fe 4f       	sbci	r31, 0xFE	; 254
    15aa:	90 81       	ld	r25, Z
    15ac:	86 2f       	mov	r24, r22
    15ae:	69 2f       	mov	r22, r25
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    15b6:	8c 83       	std	Y+4, r24	; 0x04
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	88 23       	and	r24, r24
    15bc:	61 f4       	brne	.+24     	; 0x15d6 <SevSeg_enuInit+0x188>
		if( Local_enuErrorState == ES_OK)
		{
			Local_enuErrorState = DIO_enuSetPinDirection(	SSegModule[Local_u8ModuleNum].DIP_Conf.InputGrp ,
															SSegModule[Local_u8ModuleNum].DIP_Conf.InputPin , DIO_u8OUTPUT);
		}
		for(Local_u8PinNum = 0 ;( Local_enuErrorState == ES_OK) && Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	8f 5f       	subi	r24, 0xFF	; 255
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	88 23       	and	r24, r24
    15c8:	31 f4       	brne	.+12     	; 0x15d6 <SevSeg_enuInit+0x188>
    15ca:	90 91 ca 01 	lds	r25, 0x01CA
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	89 17       	cp	r24, r25
    15d2:	08 f4       	brcc	.+2      	; 0x15d6 <SevSeg_enuInit+0x188>
    15d4:	bc cf       	rjmp	.-136    	; 0x154e <SevSeg_enuInit+0x100>
ES_t SevSeg_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Counter , Local_u8ModuleNum , Local_u8PinNum;

	for( Local_u8Counter = MODULE_1 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	8f 5f       	subi	r24, 0xFF	; 255
    15da:	8b 83       	std	Y+3, r24	; 0x03
    15dc:	90 91 c8 01 	lds	r25, 0x01C8
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	98 17       	cp	r25, r24
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <SevSeg_enuInit+0x19a>
    15e6:	3e cf       	rjmp	.-388    	; 0x1464 <SevSeg_enuInit+0x16>
															SSegModule[Local_u8ModuleNum].Control_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT);
			if( Local_enuErrorState != ES_OK) break;
		}
	}

	return Local_enuErrorState ;//DONE
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <SevSeg_enuSetDigitValue>:
ES_t SevSeg_enuSetDigitValue(u8 Copy_u8ModuleNum , u8 Copy_u8SevSegDigitValue)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <SevSeg_enuSetDigitValue+0x6>
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <SevSeg_enuSetDigitValue+0x8>
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK ;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	8b 50       	subi	r24, 0x0B	; 11
    1610:	8b 83       	std	Y+3, r24	; 0x03
    1612:	90 91 c8 01 	lds	r25, 0x01C8
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	89 17       	cp	r24, r25
    161a:	08 f0       	brcs	.+2      	; 0x161e <SevSeg_enuSetDigitValue+0x26>
    161c:	59 c0       	rjmp	.+178    	; 0x16d0 <SevSeg_enuSetDigitValue+0xd8>
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	8a 30       	cpi	r24, 0x0A	; 10
    1622:	08 f0       	brcs	.+2      	; 0x1626 <SevSeg_enuSetDigitValue+0x2e>
    1624:	52 c0       	rjmp	.+164    	; 0x16ca <SevSeg_enuSetDigitValue+0xd2>
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    1626:	19 82       	std	Y+1, r1	; 0x01
    1628:	49 c0       	rjmp	.+146    	; 0x16bc <SevSeg_enuSetDigitValue+0xc4>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputGrp ,
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	48 2f       	mov	r20, r24
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	c9 01       	movw	r24, r18
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	82 1b       	sub	r24, r18
    1646:	93 0b       	sbc	r25, r19
    1648:	84 0f       	add	r24, r20
    164a:	95 1f       	adc	r25, r21
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	fc 01       	movw	r30, r24
    1652:	e5 53       	subi	r30, 0x35	; 53
    1654:	fe 4f       	sbci	r31, 0xFE	; 254
    1656:	60 81       	ld	r22, Z
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	48 2f       	mov	r20, r24
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	c9 01       	movw	r24, r18
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	82 1b       	sub	r24, r18
    1674:	93 0b       	sbc	r25, r19
    1676:	84 0f       	add	r24, r20
    1678:	95 1f       	adc	r25, r21
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	fc 01       	movw	r30, r24
    1680:	e4 53       	subi	r30, 0x34	; 52
    1682:	fe 4f       	sbci	r31, 0xFE	; 254
    1684:	40 81       	ld	r20, Z
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	f9 01       	movw	r30, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <SevSeg_enuSetDigitValue+0xa2>
    1696:	f5 95       	asr	r31
    1698:	e7 95       	ror	r30
    169a:	8a 95       	dec	r24
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <SevSeg_enuSetDigitValue+0x9e>
    169e:	cf 01       	movw	r24, r30
    16a0:	98 2f       	mov	r25, r24
    16a2:	91 70       	andi	r25, 0x01	; 1
    16a4:	86 2f       	mov	r24, r22
    16a6:	64 2f       	mov	r22, r20
    16a8:	49 2f       	mov	r20, r25
    16aa:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    16ae:	8a 83       	std	Y+2, r24	; 0x02
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	88 23       	and	r24, r24
    16b4:	79 f4       	brne	.+30     	; 0x16d4 <SevSeg_enuSetDigitValue+0xdc>

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
	{
		if( Copy_u8SevSegDigitValue < DIGIT_BASE )
		{
			for(Local_u8Counter = 0 ; Local_u8Counter<ModuleValuePins ; Local_u8Counter++ )
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	90 91 c9 01 	lds	r25, 0x01C9
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	89 17       	cp	r24, r25
    16c4:	08 f4       	brcc	.+2      	; 0x16c8 <SevSeg_enuSetDigitValue+0xd0>
    16c6:	b1 cf       	rjmp	.-158    	; 0x162a <SevSeg_enuSetDigitValue+0x32>
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <SevSeg_enuSetDigitValue+0xdc>
															SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
															(Copy_u8SevSegDigitValue>>Local_u8Counter)&SevSeg_u8BIT_MASK		);
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	8a 83       	std	Y+2, r24	; 0x02
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <SevSeg_enuSetDigitValue+0xdc>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	8a 83       	std	Y+2, r24	; 0x02


	return Local_enuErrorState ;//DONE
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <SevSeg_enuSetDIPValue>:

ES_t SevSeg_enuSetDIPValue(u8 Copy_u8ModuleNum ,u8 Copy_u8SevSegDIPValue)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <SevSeg_enuSetDIPValue+0x6>
    16ea:	0f 92       	push	r0
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	8a 83       	std	Y+2, r24	; 0x02
    16f2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	89 83       	std	Y+1, r24	; 0x01

	if( (Copy_u8ModuleNum -= MODULE_1) < SevSeg_u8MaxModules )
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	8b 50       	subi	r24, 0x0B	; 11
    16fc:	8a 83       	std	Y+2, r24	; 0x02
    16fe:	90 91 c8 01 	lds	r25, 0x01C8
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	89 17       	cp	r24, r25
    1706:	b0 f5       	brcc	.+108    	; 0x1774 <SevSeg_enuSetDIPValue+0x90>
	{
		if( Copy_u8SevSegDIPValue == DIP_ON ||Copy_u8SevSegDIPValue == DIP_OFF )
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	19 f0       	breq	.+6      	; 0x1714 <SevSeg_enuSetDIPValue+0x30>
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	88 23       	and	r24, r24
    1712:	69 f5       	brne	.+90     	; 0x176e <SevSeg_enuSetDIPValue+0x8a>
		{
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].DIP_Conf.InputGrp ,
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 01       	movw	r18, r24
    171c:	22 0f       	add	r18, r18
    171e:	33 1f       	adc	r19, r19
    1720:	c9 01       	movw	r24, r18
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	82 1b       	sub	r24, r18
    1730:	93 0b       	sbc	r25, r19
    1732:	fc 01       	movw	r30, r24
    1734:	ed 52       	subi	r30, 0x2D	; 45
    1736:	fe 4f       	sbci	r31, 0xFE	; 254
    1738:	40 81       	ld	r20, Z
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9c 01       	movw	r18, r24
    1742:	22 0f       	add	r18, r18
    1744:	33 1f       	adc	r19, r19
    1746:	c9 01       	movw	r24, r18
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	82 1b       	sub	r24, r18
    1756:	93 0b       	sbc	r25, r19
    1758:	fc 01       	movw	r30, r24
    175a:	ec 52       	subi	r30, 0x2C	; 44
    175c:	fe 4f       	sbci	r31, 0xFE	; 254
    175e:	90 81       	ld	r25, Z
    1760:	84 2f       	mov	r24, r20
    1762:	69 2f       	mov	r22, r25
    1764:	4b 81       	ldd	r20, Y+3	; 0x03
    1766:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <SevSeg_enuSetDIPValue+0x94>
														SSegModule[Copy_u8ModuleNum].DIP_Conf.InputPin  , Copy_u8SevSegDIPValue );
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <SevSeg_enuSetDIPValue+0x94>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    1778:	89 81       	ldd	r24, Y+1	; 0x01
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <SevSeg_enuFrameDelay>:

ES_t SevSeg_enuFrameDelay(u8 Copy_u8SevSegTotalModules, u8 *Copy_pu8SevSegModuleDelay)
{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <SevSeg_enuFrameDelay+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <SevSeg_enuFrameDelay+0x8>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	8a 83       	std	Y+2, r24	; 0x02
    1794:	7c 83       	std	Y+4, r23	; 0x04
    1796:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8SevSegTotalModules <= SevSeg_u8MaxModules)
    179c:	90 91 c8 01 	lds	r25, 0x01C8
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	98 17       	cp	r25, r24
    17a4:	98 f0       	brcs	.+38     	; 0x17cc <SevSeg_enuFrameDelay+0x46>
	{

		*Copy_pu8SevSegModuleDelay = SevSeg_u8MODULE_DELAY( Copy_u8SevSegTotalModules );
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	88 2f       	mov	r24, r24
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	ac 01       	movw	r20, r24
    17ae:	4d 5e       	subi	r20, 0xED	; 237
    17b0:	5f 4f       	sbci	r21, 0xFF	; 255
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	ca 01       	movw	r24, r20
    17ba:	b9 01       	movw	r22, r18
    17bc:	0e 94 3a 1b 	call	0x3674	; 0x3674 <__divmodhi4>
    17c0:	cb 01       	movw	r24, r22
    17c2:	eb 81       	ldd	r30, Y+3	; 0x03
    17c4:	fc 81       	ldd	r31, Y+4	; 0x04
    17c6:	80 83       	st	Z, r24

		Local_enuErrorState=ES_OK;
    17c8:	19 82       	std	Y+1, r1	; 0x01
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <SevSeg_enuFrameDelay+0x4a>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <SevSeg_enuModuleControl>:

ES_t SevSeg_enuModuleControl(u8 Copy_u8SevSegModuleNum , u8 Copy_u8SevSegModuleStatus)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	27 97       	sbiw	r28, 0x07	; 7
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	8c 83       	std	Y+4, r24	; 0x04
    17f6:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Output;

	if( Copy_u8SevSegModuleStatus == MODULE_DISABLE || Copy_u8SevSegModuleStatus == MODULE_ENABLE )
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	8d 30       	cpi	r24, 0x0D	; 13
    1800:	21 f0       	breq	.+8      	; 0x180a <SevSeg_enuModuleControl+0x2a>
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	8e 30       	cpi	r24, 0x0E	; 14
    1806:	09 f0       	breq	.+2      	; 0x180a <SevSeg_enuModuleControl+0x2a>
    1808:	64 c0       	rjmp	.+200    	; 0x18d2 <SevSeg_enuModuleControl+0xf2>
	{
		if( (Copy_u8SevSegModuleNum -= MODULE_1)< SevSeg_u8MaxModules )
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	8b 50       	subi	r24, 0x0B	; 11
    180e:	8c 83       	std	Y+4, r24	; 0x04
    1810:	90 91 c8 01 	lds	r25, 0x01C8
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	89 17       	cp	r24, r25
    1818:	08 f0       	brcs	.+2      	; 0x181c <SevSeg_enuModuleControl+0x3c>
    181a:	58 c0       	rjmp	.+176    	; 0x18cc <SevSeg_enuModuleControl+0xec>
		{
			switch( Copy_u8SevSegModuleStatus )
    181c:	8d 81       	ldd	r24, Y+5	; 0x05
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	3f 83       	std	Y+7, r19	; 0x07
    1824:	2e 83       	std	Y+6, r18	; 0x06
    1826:	8e 81       	ldd	r24, Y+6	; 0x06
    1828:	9f 81       	ldd	r25, Y+7	; 0x07
    182a:	8d 30       	cpi	r24, 0x0D	; 13
    182c:	91 05       	cpc	r25, r1
    182e:	31 f0       	breq	.+12     	; 0x183c <SevSeg_enuModuleControl+0x5c>
    1830:	2e 81       	ldd	r18, Y+6	; 0x06
    1832:	3f 81       	ldd	r19, Y+7	; 0x07
    1834:	2e 30       	cpi	r18, 0x0E	; 14
    1836:	31 05       	cpc	r19, r1
    1838:	19 f0       	breq	.+6      	; 0x1840 <SevSeg_enuModuleControl+0x60>
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <SevSeg_enuModuleControl+0x64>
			{
				case MODULE_DISABLE : Local_u8Output = DIO_u8LOW;
    183c:	1a 82       	std	Y+2, r1	; 0x02
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <SevSeg_enuModuleControl+0x64>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	8a 83       	std	Y+2, r24	; 0x02
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    1844:	19 82       	std	Y+1, r1	; 0x01
    1846:	3b c0       	rjmp	.+118    	; 0x18be <SevSeg_enuModuleControl+0xde>
			{
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	48 2f       	mov	r20, r24
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	c9 01       	movw	r24, r18
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	82 1b       	sub	r24, r18
    1864:	93 0b       	sbc	r25, r19
    1866:	84 0f       	add	r24, r20
    1868:	95 1f       	adc	r25, r21
    186a:	05 96       	adiw	r24, 0x05	; 5
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	fc 01       	movw	r30, r24
    1872:	e5 53       	subi	r30, 0x35	; 53
    1874:	fe 4f       	sbci	r31, 0xFE	; 254
    1876:	60 81       	ld	r22, Z
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	48 2f       	mov	r20, r24
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	c9 01       	movw	r24, r18
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	82 1b       	sub	r24, r18
    1894:	93 0b       	sbc	r25, r19
    1896:	84 0f       	add	r24, r20
    1898:	95 1f       	adc	r25, r21
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	fc 01       	movw	r30, r24
    18a0:	ea 52       	subi	r30, 0x2A	; 42
    18a2:	fe 4f       	sbci	r31, 0xFE	; 254
    18a4:	90 81       	ld	r25, Z
    18a6:	86 2f       	mov	r24, r22
    18a8:	69 2f       	mov	r22, r25
    18aa:	4a 81       	ldd	r20, Y+2	; 0x02
    18ac:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    18b0:	8b 83       	std	Y+3, r24	; 0x03
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	88 23       	and	r24, r24
    18b6:	79 f4       	brne	.+30     	; 0x18d6 <SevSeg_enuModuleControl+0xf6>
										break;
				case MODULE_ENABLE : Local_u8Output = DIO_u8HIGH;
										break;
			}

			for(u8 Local_u8PinNum = 0 ; Local_u8PinNum<ModuleControlPins ; Local_u8PinNum++ )
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	8f 5f       	subi	r24, 0xFF	; 255
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	90 91 ca 01 	lds	r25, 0x01CA
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	89 17       	cp	r24, r25
    18c6:	08 f4       	brcc	.+2      	; 0x18ca <SevSeg_enuModuleControl+0xea>
    18c8:	bf cf       	rjmp	.-130    	; 0x1848 <SevSeg_enuModuleControl+0x68>
    18ca:	05 c0       	rjmp	.+10     	; 0x18d6 <SevSeg_enuModuleControl+0xf6>
				Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputGrp ,
															SSegModule[Copy_u8SevSegModuleNum].Control_Conf[Local_u8PinNum].InputPin , Local_u8Output );
				if( Local_enuErrorState != ES_OK) break;
			}
		}
		else	Local_enuErrorState = ES_OUT_RANGE;
    18cc:	82 e0       	ldi	r24, 0x02	; 2
    18ce:	8b 83       	std	Y+3, r24	; 0x03
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <SevSeg_enuModuleControl+0xf6>
	}
	else	Local_enuErrorState = ES_OUT_RANGE;
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;//DONE
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    18d8:	27 96       	adiw	r28, 0x07	; 7
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <LD_enuInit>:

extern LD_t LD[];


ES_t LD_enuInit(void)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <LD_enuInit+0x6>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <LD_enuInit+0x8>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	8a 83       	std	Y+2, r24	; 0x02

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
    18fa:	80 91 e8 01 	lds	r24, 0x01E8
    18fe:	81 34       	cpi	r24, 0x41	; 65
    1900:	09 f4       	brne	.+2      	; 0x1904 <LD_enuInit+0x1a>
    1902:	41 c0       	rjmp	.+130    	; 0x1986 <LD_enuInit+0x9c>
    1904:	80 91 e8 01 	lds	r24, 0x01E8
    1908:	82 34       	cpi	r24, 0x42	; 66
    190a:	09 f0       	breq	.+2      	; 0x190e <LD_enuInit+0x24>
    190c:	4a c0       	rjmp	.+148    	; 0x19a2 <LD_enuInit+0xb8>
    190e:	3b c0       	rjmp	.+118    	; 0x1986 <LD_enuInit+0x9c>
	{
		for(u8 Local_u8Iter; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
		{
			Local_AenuStatus[0] = DIO_enuSetPinDirection	( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , DIO_u8OUTPUT);
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	fc 01       	movw	r30, r24
    191c:	e6 51       	subi	r30, 0x16	; 22
    191e:	fe 4f       	sbci	r31, 0xFE	; 254
    1920:	20 81       	ld	r18, Z
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	fc 01       	movw	r30, r24
    192e:	e5 51       	subi	r30, 0x15	; 21
    1930:	fe 4f       	sbci	r31, 0xFE	; 254
    1932:	90 81       	ld	r25, Z
    1934:	82 2f       	mov	r24, r18
    1936:	69 2f       	mov	r22, r25
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    193e:	8b 83       	std	Y+3, r24	; 0x03
			Local_AenuStatus[1] = DIO_enuSetPinValue		( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8Off);
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	fc 01       	movw	r30, r24
    194c:	e6 51       	subi	r30, 0x16	; 22
    194e:	fe 4f       	sbci	r31, 0xFE	; 254
    1950:	30 81       	ld	r19, Z
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	88 2f       	mov	r24, r24
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	fc 01       	movw	r30, r24
    195e:	e5 51       	subi	r30, 0x15	; 21
    1960:	fe 4f       	sbci	r31, 0xFE	; 254
    1962:	90 81       	ld	r25, Z
    1964:	20 91 18 02 	lds	r18, 0x0218
    1968:	83 2f       	mov	r24, r19
    196a:	69 2f       	mov	r22, r25
    196c:	42 2f       	mov	r20, r18
    196e:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1972:	8c 83       	std	Y+4, r24	; 0x04

			if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	88 23       	and	r24, r24
    1978:	61 f4       	brne	.+24     	; 0x1992 <LD_enuInit+0xa8>
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	88 23       	and	r24, r24
    197e:	49 f4       	brne	.+18     	; 0x1992 <LD_enuInit+0xa8>
{
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
	{
		for(u8 Local_u8Iter; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	8f 5f       	subi	r24, 0xFF	; 255
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	90 91 e7 01 	lds	r25, 0x01E7
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	89 17       	cp	r24, r25
    198e:	08 f4       	brcc	.+2      	; 0x1992 <LD_enuInit+0xa8>
    1990:	bf cf       	rjmp	.-130    	; 0x1910 <LD_enuInit+0x26>
			Local_AenuStatus[1] = DIO_enuSetPinValue		( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8Off);

			if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
		}

		if(Local_AenuStatus[0] == ES_OK && Local_AenuStatus[1] == ES_OK)
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	88 23       	and	r24, r24
    1996:	39 f4       	brne	.+14     	; 0x19a6 <LD_enuInit+0xbc>
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	88 23       	and	r24, r24
    199c:	21 f4       	brne	.+8      	; 0x19a6 <LD_enuInit+0xbc>
			Local_enuErrorStatus = ES_OK;
    199e:	1a 82       	std	Y+2, r1	; 0x02
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <LD_enuInit+0xbc>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorStatus;
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <LD_enuSetState>:

ES_t LD_enuSetState(u8 Copy_u8LD_Num ,u8 Copy_u8LDSetValue)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <LD_enuSetState+0x6>
    19bc:	0f 92       	push	r0
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	8a 83       	std	Y+2, r24	; 0x02
    19c4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK ;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	89 83       	std	Y+1, r24	; 0x01

	if( LD_Mode == ACTIVE_HIGH || LD_Mode == ACTIVE_LOW )
    19ca:	80 91 e8 01 	lds	r24, 0x01E8
    19ce:	81 34       	cpi	r24, 0x41	; 65
    19d0:	21 f0       	breq	.+8      	; 0x19da <LD_enuSetState+0x24>
    19d2:	80 91 e8 01 	lds	r24, 0x01E8
    19d6:	82 34       	cpi	r24, 0x42	; 66
    19d8:	71 f5       	brne	.+92     	; 0x1a36 <LD_enuSetState+0x80>
	{
		if( Copy_u8LD_Num < LD_u8LD_MaxNum)
    19da:	90 91 e7 01 	lds	r25, 0x01E7
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	89 17       	cp	r24, r25
    19e2:	30 f5       	brcc	.+76     	; 0x1a30 <LD_enuSetState+0x7a>
		{
			if( Copy_u8LDSetValue == LD_u8On || Copy_u8LDSetValue == LD_u8Off )
    19e4:	90 91 e9 01 	lds	r25, 0x01E9
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	89 17       	cp	r24, r25
    19ec:	29 f0       	breq	.+10     	; 0x19f8 <LD_enuSetState+0x42>
    19ee:	90 91 18 02 	lds	r25, 0x0218
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	89 17       	cp	r24, r25
    19f6:	c9 f4       	brne	.+50     	; 0x1a2a <LD_enuSetState+0x74>
			{
				Local_enuErrorStatus = DIO_enuSetPinValue(LD[Copy_u8LD_Num].LD_Grp , LD[Copy_u8LD_Num].LD_Pin , Copy_u8LDSetValue);
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	fc 01       	movw	r30, r24
    1a04:	e6 51       	subi	r30, 0x16	; 22
    1a06:	fe 4f       	sbci	r31, 0xFE	; 254
    1a08:	20 81       	ld	r18, Z
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	fc 01       	movw	r30, r24
    1a16:	e5 51       	subi	r30, 0x15	; 21
    1a18:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1a:	90 81       	ld	r25, Z
    1a1c:	82 2f       	mov	r24, r18
    1a1e:	69 2f       	mov	r22, r25
    1a20:	4b 81       	ldd	r20, Y+3	; 0x03
    1a22:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	08 c0       	rjmp	.+16     	; 0x1a3a <LD_enuSetState+0x84>
			}
			else Local_enuErrorStatus = ES_OUT_RANGE;
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <LD_enuSetState+0x84>
		}
		else Local_enuErrorStatus = ES_OUT_RANGE;
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <LD_enuSetState+0x84>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <LCD_enuInit>:
#include "LCD_priv.h"

#include <util/delay.h>

ES_t LCD_enuInit(void)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	ab 97       	sbiw	r28, 0x2b	; 43
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	8b a7       	std	Y+43, r24	; 0x2b
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 ef       	ldi	r26, 0xF0	; 240
    1a66:	b1 e4       	ldi	r27, 0x41	; 65
    1a68:	8f a3       	std	Y+39, r24	; 0x27
    1a6a:	98 a7       	std	Y+40, r25	; 0x28
    1a6c:	a9 a7       	std	Y+41, r26	; 0x29
    1a6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a70:	6f a1       	ldd	r22, Y+39	; 0x27
    1a72:	78 a5       	ldd	r23, Y+40	; 0x28
    1a74:	89 a5       	ldd	r24, Y+41	; 0x29
    1a76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	4a e7       	ldi	r20, 0x7A	; 122
    1a7e:	55 e4       	ldi	r21, 0x45	; 69
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	8b a3       	std	Y+35, r24	; 0x23
    1a8a:	9c a3       	std	Y+36, r25	; 0x24
    1a8c:	ad a3       	std	Y+37, r26	; 0x25
    1a8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a90:	6b a1       	ldd	r22, Y+35	; 0x23
    1a92:	7c a1       	ldd	r23, Y+36	; 0x24
    1a94:	8d a1       	ldd	r24, Y+37	; 0x25
    1a96:	9e a1       	ldd	r25, Y+38	; 0x26
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	2c f4       	brge	.+10     	; 0x1ab2 <LCD_enuInit+0x6a>
		__ticks = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9a a3       	std	Y+34, r25	; 0x22
    1aae:	89 a3       	std	Y+33, r24	; 0x21
    1ab0:	3f c0       	rjmp	.+126    	; 0x1b30 <LCD_enuInit+0xe8>
	else if (__tmp > 65535)
    1ab2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	4f e7       	ldi	r20, 0x7F	; 127
    1ac0:	57 e4       	ldi	r21, 0x47	; 71
    1ac2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac6:	18 16       	cp	r1, r24
    1ac8:	4c f5       	brge	.+82     	; 0x1b1c <LCD_enuInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aca:	6f a1       	ldd	r22, Y+39	; 0x27
    1acc:	78 a5       	ldd	r23, Y+40	; 0x28
    1ace:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e2       	ldi	r20, 0x20	; 32
    1ad8:	51 e4       	ldi	r21, 0x41	; 65
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	9a a3       	std	Y+34, r25	; 0x22
    1af0:	89 a3       	std	Y+33, r24	; 0x21
    1af2:	0f c0       	rjmp	.+30     	; 0x1b12 <LCD_enuInit+0xca>
    1af4:	80 e9       	ldi	r24, 0x90	; 144
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	98 a3       	std	Y+32, r25	; 0x20
    1afa:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1afc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1afe:	98 a1       	ldd	r25, Y+32	; 0x20
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <LCD_enuInit+0xb8>
    1b04:	98 a3       	std	Y+32, r25	; 0x20
    1b06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b08:	89 a1       	ldd	r24, Y+33	; 0x21
    1b0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	9a a3       	std	Y+34, r25	; 0x22
    1b10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b12:	89 a1       	ldd	r24, Y+33	; 0x21
    1b14:	9a a1       	ldd	r25, Y+34	; 0x22
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	69 f7       	brne	.-38     	; 0x1af4 <LCD_enuInit+0xac>
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <LCD_enuInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b20:	8d a1       	ldd	r24, Y+37	; 0x25
    1b22:	9e a1       	ldd	r25, Y+38	; 0x26
    1b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9a a3       	std	Y+34, r25	; 0x22
    1b2e:	89 a3       	std	Y+33, r24	; 0x21
    1b30:	89 a1       	ldd	r24, Y+33	; 0x21
    1b32:	9a a1       	ldd	r25, Y+34	; 0x22
    1b34:	9e 8f       	std	Y+30, r25	; 0x1e
    1b36:	8d 8f       	std	Y+29, r24	; 0x1d
    1b38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LCD_enuInit+0xf4>
    1b40:	9e 8f       	std	Y+30, r25	; 0x1e
    1b42:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);

	DIO_enuSetPinDirection(RS_GRP , RS_PIN , DIO_u8OUTPUT);
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
#if RW_GRP != NC && RW_PIN != NC
	DIO_enuSetPinDirection(RW_GRP , RW_PIN , DIO_u8OUTPUT);
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
#endif
	DIO_enuSetPinDirection(EN_GRP , EN_PIN , DIO_u8OUTPUT);
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	63 e0       	ldi	r22, 0x03	; 3
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP , D7_PIN , DIO_u8OUTPUT);
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	67 e0       	ldi	r22, 0x07	; 7
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP , D6_PIN , DIO_u8OUTPUT);
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	66 e0       	ldi	r22, 0x06	; 6
    1b70:	41 e0       	ldi	r20, 0x01	; 1
    1b72:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP , D5_PIN , DIO_u8OUTPUT);
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	65 e0       	ldi	r22, 0x05	; 5
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP , D4_PIN , DIO_u8OUTPUT);
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	64 e0       	ldi	r22, 0x04	; 4
    1b84:	41 e0       	ldi	r20, 0x01	; 1
    1b86:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch( 0x38 );

#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(D7_GRP , D7_PIN , 0);
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	67 e0       	ldi	r22, 0x07	; 7
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , 0);
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	66 e0       	ldi	r22, 0x06	; 6
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , 1);
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	65 e0       	ldi	r22, 0x05	; 5
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , 0);
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	64 e0       	ldi	r22, 0x04	; 4
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	63 e0       	ldi	r22, 0x03	; 3
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e8       	ldi	r26, 0x80	; 128
    1bc2:	bf e3       	ldi	r27, 0x3F	; 63
    1bc4:	89 8f       	std	Y+25, r24	; 0x19
    1bc6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a e7       	ldi	r20, 0x7A	; 122
    1bda:	55 e4       	ldi	r21, 0x45	; 69
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8d 8b       	std	Y+21, r24	; 0x15
    1be6:	9e 8b       	std	Y+22, r25	; 0x16
    1be8:	af 8b       	std	Y+23, r26	; 0x17
    1bea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bec:	6d 89       	ldd	r22, Y+21	; 0x15
    1bee:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <LCD_enuInit+0x1c6>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 8b       	std	Y+20, r25	; 0x14
    1c0a:	8b 8b       	std	Y+19, r24	; 0x13
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <LCD_enuInit+0x244>
	else if (__tmp > 65535)
    1c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c10:	7e 89       	ldd	r23, Y+22	; 0x16
    1c12:	8f 89       	ldd	r24, Y+23	; 0x17
    1c14:	98 8d       	ldd	r25, Y+24	; 0x18
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <LCD_enuInit+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	69 8d       	ldd	r22, Y+25	; 0x19
    1c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9c 8b       	std	Y+20, r25	; 0x14
    1c4c:	8b 8b       	std	Y+19, r24	; 0x13
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <LCD_enuInit+0x226>
    1c50:	80 e9       	ldi	r24, 0x90	; 144
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	9a 8b       	std	Y+18, r25	; 0x12
    1c56:	89 8b       	std	Y+17, r24	; 0x11
    1c58:	89 89       	ldd	r24, Y+17	; 0x11
    1c5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_enuInit+0x214>
    1c60:	9a 8b       	std	Y+18, r25	; 0x12
    1c62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8b 89       	ldd	r24, Y+19	; 0x13
    1c66:	9c 89       	ldd	r25, Y+20	; 0x14
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9c 8b       	std	Y+20, r25	; 0x14
    1c6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c70:	9c 89       	ldd	r25, Y+20	; 0x14
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <LCD_enuInit+0x208>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <LCD_enuInit+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9c 8b       	std	Y+20, r25	; 0x14
    1c8a:	8b 8b       	std	Y+19, r24	; 0x13
    1c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c90:	98 8b       	std	Y+16, r25	; 0x10
    1c92:	8f 87       	std	Y+15, r24	; 0x0f
    1c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c96:	98 89       	ldd	r25, Y+16	; 0x10
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_enuInit+0x250>
    1c9c:	98 8b       	std	Y+16, r25	; 0x10
    1c9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	63 e0       	ldi	r22, 0x03	; 3
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e8       	ldi	r26, 0x80	; 128
    1cb0:	b0 e4       	ldi	r27, 0x40	; 64
    1cb2:	8b 87       	std	Y+11, r24	; 0x0b
    1cb4:	9c 87       	std	Y+12, r25	; 0x0c
    1cb6:	ad 87       	std	Y+13, r26	; 0x0d
    1cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a e7       	ldi	r20, 0x7A	; 122
    1cc8:	55 e4       	ldi	r21, 0x45	; 69
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8f 83       	std	Y+7, r24	; 0x07
    1cd4:	98 87       	std	Y+8, r25	; 0x08
    1cd6:	a9 87       	std	Y+9, r26	; 0x09
    1cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cda:	6f 81       	ldd	r22, Y+7	; 0x07
    1cdc:	78 85       	ldd	r23, Y+8	; 0x08
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <LCD_enuInit+0x2b4>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <LCD_enuInit+0x332>
	else if (__tmp > 65535)
    1cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfe:	78 85       	ldd	r23, Y+8	; 0x08
    1d00:	89 85       	ldd	r24, Y+9	; 0x09
    1d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <LCD_enuInit+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <LCD_enuInit+0x314>
    1d3e:	80 e9       	ldi	r24, 0x90	; 144
    1d40:	91 e0       	ldi	r25, 0x01	; 1
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_enuInit+0x302>
    1d4e:	9c 83       	std	Y+4, r25	; 0x04
    1d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <LCD_enuInit+0x2f6>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <LCD_enuInit+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6f 81       	ldd	r22, Y+7	; 0x07
    1d68:	78 85       	ldd	r23, Y+8	; 0x08
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_enuInit+0x33e>
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	61 e0       	ldi	r22, 0x01	; 1
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x28 );
    1d98:	88 e2       	ldi	r24, 0x28	; 40
    1d9a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>

#endif

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0xF );
    1da8:	8f e0       	ldi	r24, 0x0F	; 15
    1daa:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	61 e0       	ldi	r22, 0x01	; 1
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x1 );
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	61 e0       	ldi	r22, 0x01	; 1
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( 0x6 );
    1dc8:	86 e0       	ldi	r24, 0x06	; 6
    1dca:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>



	return Local_enuErrorState;
    1dce:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    1dd0:	ab 96       	adiw	r28, 0x2b	; 43
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <LCD_enuWriteData+0x6>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	61 e0       	ldi	r22, 0x01	; 1
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( Copy_u8Data );
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Cmnd)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <LCD_enuWriteCommand+0x6>
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	61 e0       	ldi	r22, 0x01	; 1
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch( Copy_u8Cmnd );
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>


	return Local_enuErrorState;
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <LCD_enuWriteString+0x6>
    1e40:	0f 92       	push	r0
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	9b 83       	std	Y+3, r25	; 0x03
    1e48:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	10 c0       	rjmp	.+32     	; 0x1e70 <LCD_enuWriteString+0x36>

	while (*Copy_pcString)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	61 e0       	ldi	r22, 0x01	; 1
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch( *Copy_pcString++ );
    1e5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e5e:	20 81       	ld	r18, Z
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	9b 81       	ldd	r25, Y+3	; 0x03
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	9b 83       	std	Y+3, r25	; 0x03
    1e68:	8a 83       	std	Y+2, r24	; 0x02
    1e6a:	82 2f       	mov	r24, r18
    1e6c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>

ES_t LCD_enuWriteString(const char * Copy_pcString)
{
	ES_t Local_enuErrorState = ES_NOK;

	while (*Copy_pcString)
    1e70:	ea 81       	ldd	r30, Y+2	; 0x02
    1e72:	fb 81       	ldd	r31, Y+3	; 0x03
    1e74:	80 81       	ld	r24, Z
    1e76:	88 23       	and	r24, r24
    1e78:	59 f7       	brne	.-42     	; 0x1e50 <LCD_enuWriteString+0x16>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch( *Copy_pcString++ );
	}

	return Local_enuErrorState;
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <LCD_enuGoToPosition>:


ES_t LCD_enuGoToPosition(u8 Copy_u8Row , u8 Copy_u8Column)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <LCD_enuGoToPosition+0x6>
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	8a 83       	std	Y+2, r24	; 0x02
    1e96:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Row >= 1 && Copy_u8Row <=2 &&
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	88 23       	and	r24, r24
    1ea0:	09 f1       	breq	.+66     	; 0x1ee4 <LCD_enuGoToPosition+0x5c>
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	83 30       	cpi	r24, 0x03	; 3
    1ea6:	f0 f4       	brcc	.+60     	; 0x1ee4 <LCD_enuGoToPosition+0x5c>
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	88 23       	and	r24, r24
    1eac:	d9 f0       	breq	.+54     	; 0x1ee4 <LCD_enuGoToPosition+0x5c>
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	81 31       	cpi	r24, 0x11	; 17
    1eb2:	c0 f4       	brcc	.+48     	; 0x1ee4 <LCD_enuGoToPosition+0x5c>
			Copy_u8Column >=1 && Copy_u8Column <=16)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch( 0x80 + ( Copy_u8Row - 1 )*0x40 + ( Copy_u8Column - 1 ) );
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	00 24       	eor	r0, r0
    1ec8:	96 95       	lsr	r25
    1eca:	87 95       	ror	r24
    1ecc:	07 94       	ror	r0
    1ece:	96 95       	lsr	r25
    1ed0:	87 95       	ror	r24
    1ed2:	07 94       	ror	r0
    1ed4:	98 2f       	mov	r25, r24
    1ed6:	80 2d       	mov	r24, r0
    1ed8:	98 2f       	mov	r25, r24
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	89 0f       	add	r24, r25
    1ede:	81 50       	subi	r24, 0x01	; 1
    1ee0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
	}
	return Local_enuErrorState;
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch(u8 Copy_u8Byte)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	e9 97       	sbiw	r28, 0x39	; 57
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	89 af       	std	Y+57, r24	; 0x39
#if RW_GRP != NC  && RW_PIN != NC
	DIO_enuSetPinValue(RW_GRP , RW_PIN , DIO_u8LOW);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	62 e0       	ldi	r22, 0x02	; 2
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
#endif
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	63 e0       	ldi	r22, 0x03	; 3
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
	_delay_ms(4);


#elif LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 7 )&1 ));
    1f1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f1e:	98 2f       	mov	r25, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	99 27       	eor	r25, r25
    1f24:	99 1f       	adc	r25, r25
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	67 e0       	ldi	r22, 0x07	; 7
    1f2a:	49 2f       	mov	r20, r25
    1f2c:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 6 )&1 ));
    1f30:	89 ad       	ldd	r24, Y+57	; 0x39
    1f32:	82 95       	swap	r24
    1f34:	86 95       	lsr	r24
    1f36:	86 95       	lsr	r24
    1f38:	83 70       	andi	r24, 0x03	; 3
    1f3a:	98 2f       	mov	r25, r24
    1f3c:	91 70       	andi	r25, 0x01	; 1
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	66 e0       	ldi	r22, 0x06	; 6
    1f42:	49 2f       	mov	r20, r25
    1f44:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 5 )&1 ));
    1f48:	89 ad       	ldd	r24, Y+57	; 0x39
    1f4a:	82 95       	swap	r24
    1f4c:	86 95       	lsr	r24
    1f4e:	87 70       	andi	r24, 0x07	; 7
    1f50:	98 2f       	mov	r25, r24
    1f52:	91 70       	andi	r25, 0x01	; 1
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	65 e0       	ldi	r22, 0x05	; 5
    1f58:	49 2f       	mov	r20, r25
    1f5a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 4 )&1 ));
    1f5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f60:	82 95       	swap	r24
    1f62:	8f 70       	andi	r24, 0x0F	; 15
    1f64:	98 2f       	mov	r25, r24
    1f66:	91 70       	andi	r25, 0x01	; 1
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	64 e0       	ldi	r22, 0x04	; 4
    1f6c:	49 2f       	mov	r20, r25
    1f6e:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	63 e0       	ldi	r22, 0x03	; 3
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	a0 e8       	ldi	r26, 0x80	; 128
    1f82:	bf e3       	ldi	r27, 0x3F	; 63
    1f84:	8d ab       	std	Y+53, r24	; 0x35
    1f86:	9e ab       	std	Y+54, r25	; 0x36
    1f88:	af ab       	std	Y+55, r26	; 0x37
    1f8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f8e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f90:	8f a9       	ldd	r24, Y+55	; 0x37
    1f92:	98 ad       	ldd	r25, Y+56	; 0x38
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4a e7       	ldi	r20, 0x7A	; 122
    1f9a:	55 e4       	ldi	r21, 0x45	; 69
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	89 ab       	std	Y+49, r24	; 0x31
    1fa6:	9a ab       	std	Y+50, r25	; 0x32
    1fa8:	ab ab       	std	Y+51, r26	; 0x33
    1faa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fac:	69 a9       	ldd	r22, Y+49	; 0x31
    1fae:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e8       	ldi	r20, 0x80	; 128
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <LCD_enuWriteNLatch+0xdc>
		__ticks = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	98 ab       	std	Y+48, r25	; 0x30
    1fca:	8f a7       	std	Y+47, r24	; 0x2f
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <LCD_enuWriteNLatch+0x15a>
	else if (__tmp > 65535)
    1fce:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	3f ef       	ldi	r19, 0xFF	; 255
    1fda:	4f e7       	ldi	r20, 0x7F	; 127
    1fdc:	57 e4       	ldi	r21, 0x47	; 71
    1fde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	4c f5       	brge	.+82     	; 0x2038 <LCD_enuWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fea:	8f a9       	ldd	r24, Y+55	; 0x37
    1fec:	98 ad       	ldd	r25, Y+56	; 0x38
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	98 ab       	std	Y+48, r25	; 0x30
    200c:	8f a7       	std	Y+47, r24	; 0x2f
    200e:	0f c0       	rjmp	.+30     	; 0x202e <LCD_enuWriteNLatch+0x13c>
    2010:	80 e9       	ldi	r24, 0x90	; 144
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	9e a7       	std	Y+46, r25	; 0x2e
    2016:	8d a7       	std	Y+45, r24	; 0x2d
    2018:	8d a5       	ldd	r24, Y+45	; 0x2d
    201a:	9e a5       	ldd	r25, Y+46	; 0x2e
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_enuWriteNLatch+0x12a>
    2020:	9e a7       	std	Y+46, r25	; 0x2e
    2022:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2024:	8f a5       	ldd	r24, Y+47	; 0x2f
    2026:	98 a9       	ldd	r25, Y+48	; 0x30
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	98 ab       	std	Y+48, r25	; 0x30
    202c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2030:	98 a9       	ldd	r25, Y+48	; 0x30
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	69 f7       	brne	.-38     	; 0x2010 <LCD_enuWriteNLatch+0x11e>
    2036:	14 c0       	rjmp	.+40     	; 0x2060 <LCD_enuWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2038:	69 a9       	ldd	r22, Y+49	; 0x31
    203a:	7a a9       	ldd	r23, Y+50	; 0x32
    203c:	8b a9       	ldd	r24, Y+51	; 0x33
    203e:	9c a9       	ldd	r25, Y+52	; 0x34
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	98 ab       	std	Y+48, r25	; 0x30
    204a:	8f a7       	std	Y+47, r24	; 0x2f
    204c:	8f a5       	ldd	r24, Y+47	; 0x2f
    204e:	98 a9       	ldd	r25, Y+48	; 0x30
    2050:	9c a7       	std	Y+44, r25	; 0x2c
    2052:	8b a7       	std	Y+43, r24	; 0x2b
    2054:	8b a5       	ldd	r24, Y+43	; 0x2b
    2056:	9c a5       	ldd	r25, Y+44	; 0x2c
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_enuWriteNLatch+0x166>
    205c:	9c a7       	std	Y+44, r25	; 0x2c
    205e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	63 e0       	ldi	r22, 0x03	; 3
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e8       	ldi	r26, 0x80	; 128
    2070:	b0 e4       	ldi	r27, 0x40	; 64
    2072:	8f a3       	std	Y+39, r24	; 0x27
    2074:	98 a7       	std	Y+40, r25	; 0x28
    2076:	a9 a7       	std	Y+41, r26	; 0x29
    2078:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	6f a1       	ldd	r22, Y+39	; 0x27
    207c:	78 a5       	ldd	r23, Y+40	; 0x28
    207e:	89 a5       	ldd	r24, Y+41	; 0x29
    2080:	9a a5       	ldd	r25, Y+42	; 0x2a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a e7       	ldi	r20, 0x7A	; 122
    2088:	55 e4       	ldi	r21, 0x45	; 69
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8b a3       	std	Y+35, r24	; 0x23
    2094:	9c a3       	std	Y+36, r25	; 0x24
    2096:	ad a3       	std	Y+37, r26	; 0x25
    2098:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209a:	6b a1       	ldd	r22, Y+35	; 0x23
    209c:	7c a1       	ldd	r23, Y+36	; 0x24
    209e:	8d a1       	ldd	r24, Y+37	; 0x25
    20a0:	9e a1       	ldd	r25, Y+38	; 0x26
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <LCD_enuWriteNLatch+0x1ca>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9a a3       	std	Y+34, r25	; 0x22
    20b8:	89 a3       	std	Y+33, r24	; 0x21
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <LCD_enuWriteNLatch+0x248>
	else if (__tmp > 65535)
    20bc:	6b a1       	ldd	r22, Y+35	; 0x23
    20be:	7c a1       	ldd	r23, Y+36	; 0x24
    20c0:	8d a1       	ldd	r24, Y+37	; 0x25
    20c2:	9e a1       	ldd	r25, Y+38	; 0x26
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <LCD_enuWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	6f a1       	ldd	r22, Y+39	; 0x27
    20d6:	78 a5       	ldd	r23, Y+40	; 0x28
    20d8:	89 a5       	ldd	r24, Y+41	; 0x29
    20da:	9a a5       	ldd	r25, Y+42	; 0x2a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9a a3       	std	Y+34, r25	; 0x22
    20fa:	89 a3       	std	Y+33, r24	; 0x21
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <LCD_enuWriteNLatch+0x22a>
    20fe:	80 e9       	ldi	r24, 0x90	; 144
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	98 a3       	std	Y+32, r25	; 0x20
    2104:	8f 8f       	std	Y+31, r24	; 0x1f
    2106:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2108:	98 a1       	ldd	r25, Y+32	; 0x20
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_enuWriteNLatch+0x218>
    210e:	98 a3       	std	Y+32, r25	; 0x20
    2110:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	89 a1       	ldd	r24, Y+33	; 0x21
    2114:	9a a1       	ldd	r25, Y+34	; 0x22
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	9a a3       	std	Y+34, r25	; 0x22
    211a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	89 a1       	ldd	r24, Y+33	; 0x21
    211e:	9a a1       	ldd	r25, Y+34	; 0x22
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <LCD_enuWriteNLatch+0x20c>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <LCD_enuWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	6b a1       	ldd	r22, Y+35	; 0x23
    2128:	7c a1       	ldd	r23, Y+36	; 0x24
    212a:	8d a1       	ldd	r24, Y+37	; 0x25
    212c:	9e a1       	ldd	r25, Y+38	; 0x26
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9a a3       	std	Y+34, r25	; 0x22
    2138:	89 a3       	std	Y+33, r24	; 0x21
    213a:	89 a1       	ldd	r24, Y+33	; 0x21
    213c:	9a a1       	ldd	r25, Y+34	; 0x22
    213e:	9e 8f       	std	Y+30, r25	; 0x1e
    2140:	8d 8f       	std	Y+29, r24	; 0x1d
    2142:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2144:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_enuWriteNLatch+0x254>
    214a:	9e 8f       	std	Y+30, r25	; 0x1e
    214c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4);

	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte >> 3 )&1 ));
    214e:	89 ad       	ldd	r24, Y+57	; 0x39
    2150:	86 95       	lsr	r24
    2152:	86 95       	lsr	r24
    2154:	86 95       	lsr	r24
    2156:	98 2f       	mov	r25, r24
    2158:	91 70       	andi	r25, 0x01	; 1
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	67 e0       	ldi	r22, 0x07	; 7
    215e:	49 2f       	mov	r20, r25
    2160:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte >> 2 )&1 ));
    2164:	89 ad       	ldd	r24, Y+57	; 0x39
    2166:	86 95       	lsr	r24
    2168:	86 95       	lsr	r24
    216a:	98 2f       	mov	r25, r24
    216c:	91 70       	andi	r25, 0x01	; 1
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	66 e0       	ldi	r22, 0x06	; 6
    2172:	49 2f       	mov	r20, r25
    2174:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte >> 1 )&1 ));
    2178:	89 ad       	ldd	r24, Y+57	; 0x39
    217a:	86 95       	lsr	r24
    217c:	98 2f       	mov	r25, r24
    217e:	91 70       	andi	r25, 0x01	; 1
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	65 e0       	ldi	r22, 0x05	; 5
    2184:	49 2f       	mov	r20, r25
    2186:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte >> 0 )&1 ));
    218a:	89 ad       	ldd	r24, Y+57	; 0x39
    218c:	98 2f       	mov	r25, r24
    218e:	91 70       	andi	r25, 0x01	; 1
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	64 e0       	ldi	r22, 0x04	; 4
    2194:	49 2f       	mov	r20, r25
    2196:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	63 e0       	ldi	r22, 0x03	; 3
    219e:	41 e0       	ldi	r20, 0x01	; 1
    21a0:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	a0 e8       	ldi	r26, 0x80	; 128
    21aa:	bf e3       	ldi	r27, 0x3F	; 63
    21ac:	89 8f       	std	Y+25, r24	; 0x19
    21ae:	9a 8f       	std	Y+26, r25	; 0x1a
    21b0:	ab 8f       	std	Y+27, r26	; 0x1b
    21b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b4:	69 8d       	ldd	r22, Y+25	; 0x19
    21b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a e7       	ldi	r20, 0x7A	; 122
    21c2:	55 e4       	ldi	r21, 0x45	; 69
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	8d 8b       	std	Y+21, r24	; 0x15
    21ce:	9e 8b       	std	Y+22, r25	; 0x16
    21d0:	af 8b       	std	Y+23, r26	; 0x17
    21d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	5f e3       	ldi	r21, 0x3F	; 63
    21e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e8:	88 23       	and	r24, r24
    21ea:	2c f4       	brge	.+10     	; 0x21f6 <LCD_enuWriteNLatch+0x304>
		__ticks = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9c 8b       	std	Y+20, r25	; 0x14
    21f2:	8b 8b       	std	Y+19, r24	; 0x13
    21f4:	3f c0       	rjmp	.+126    	; 0x2274 <LCD_enuWriteNLatch+0x382>
	else if (__tmp > 65535)
    21f6:	6d 89       	ldd	r22, Y+21	; 0x15
    21f8:	7e 89       	ldd	r23, Y+22	; 0x16
    21fa:	8f 89       	ldd	r24, Y+23	; 0x17
    21fc:	98 8d       	ldd	r25, Y+24	; 0x18
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	3f ef       	ldi	r19, 0xFF	; 255
    2202:	4f e7       	ldi	r20, 0x7F	; 127
    2204:	57 e4       	ldi	r21, 0x47	; 71
    2206:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220a:	18 16       	cp	r1, r24
    220c:	4c f5       	brge	.+82     	; 0x2260 <LCD_enuWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220e:	69 8d       	ldd	r22, Y+25	; 0x19
    2210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e2       	ldi	r20, 0x20	; 32
    221c:	51 e4       	ldi	r21, 0x41	; 65
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9c 8b       	std	Y+20, r25	; 0x14
    2234:	8b 8b       	std	Y+19, r24	; 0x13
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <LCD_enuWriteNLatch+0x364>
    2238:	80 e9       	ldi	r24, 0x90	; 144
    223a:	91 e0       	ldi	r25, 0x01	; 1
    223c:	9a 8b       	std	Y+18, r25	; 0x12
    223e:	89 8b       	std	Y+17, r24	; 0x11
    2240:	89 89       	ldd	r24, Y+17	; 0x11
    2242:	9a 89       	ldd	r25, Y+18	; 0x12
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <LCD_enuWriteNLatch+0x352>
    2248:	9a 8b       	std	Y+18, r25	; 0x12
    224a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224c:	8b 89       	ldd	r24, Y+19	; 0x13
    224e:	9c 89       	ldd	r25, Y+20	; 0x14
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	9c 8b       	std	Y+20, r25	; 0x14
    2254:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2256:	8b 89       	ldd	r24, Y+19	; 0x13
    2258:	9c 89       	ldd	r25, Y+20	; 0x14
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	69 f7       	brne	.-38     	; 0x2238 <LCD_enuWriteNLatch+0x346>
    225e:	14 c0       	rjmp	.+40     	; 0x2288 <LCD_enuWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2260:	6d 89       	ldd	r22, Y+21	; 0x15
    2262:	7e 89       	ldd	r23, Y+22	; 0x16
    2264:	8f 89       	ldd	r24, Y+23	; 0x17
    2266:	98 8d       	ldd	r25, Y+24	; 0x18
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9c 8b       	std	Y+20, r25	; 0x14
    2272:	8b 8b       	std	Y+19, r24	; 0x13
    2274:	8b 89       	ldd	r24, Y+19	; 0x13
    2276:	9c 89       	ldd	r25, Y+20	; 0x14
    2278:	98 8b       	std	Y+16, r25	; 0x10
    227a:	8f 87       	std	Y+15, r24	; 0x0f
    227c:	8f 85       	ldd	r24, Y+15	; 0x0f
    227e:	98 89       	ldd	r25, Y+16	; 0x10
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_enuWriteNLatch+0x38e>
    2284:	98 8b       	std	Y+16, r25	; 0x10
    2286:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	63 e0       	ldi	r22, 0x03	; 3
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a0 e8       	ldi	r26, 0x80	; 128
    2298:	b0 e4       	ldi	r27, 0x40	; 64
    229a:	8b 87       	std	Y+11, r24	; 0x0b
    229c:	9c 87       	std	Y+12, r25	; 0x0c
    229e:	ad 87       	std	Y+13, r26	; 0x0d
    22a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	4a e7       	ldi	r20, 0x7A	; 122
    22b0:	55 e4       	ldi	r21, 0x45	; 69
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8f 83       	std	Y+7, r24	; 0x07
    22bc:	98 87       	std	Y+8, r25	; 0x08
    22be:	a9 87       	std	Y+9, r26	; 0x09
    22c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <LCD_enuWriteNLatch+0x3f2>
		__ticks = 1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
    22e2:	3f c0       	rjmp	.+126    	; 0x2362 <LCD_enuWriteNLatch+0x470>
	else if (__tmp > 65535)
    22e4:	6f 81       	ldd	r22, Y+7	; 0x07
    22e6:	78 85       	ldd	r23, Y+8	; 0x08
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	3f ef       	ldi	r19, 0xFF	; 255
    22f0:	4f e7       	ldi	r20, 0x7F	; 127
    22f2:	57 e4       	ldi	r21, 0x47	; 71
    22f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	4c f5       	brge	.+82     	; 0x234e <LCD_enuWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2300:	8d 85       	ldd	r24, Y+13	; 0x0d
    2302:	9e 85       	ldd	r25, Y+14	; 0x0e
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e2       	ldi	r20, 0x20	; 32
    230a:	51 e4       	ldi	r21, 0x41	; 65
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
    2324:	0f c0       	rjmp	.+30     	; 0x2344 <LCD_enuWriteNLatch+0x452>
    2326:	80 e9       	ldi	r24, 0x90	; 144
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	8b 83       	std	Y+3, r24	; 0x03
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	9c 81       	ldd	r25, Y+4	; 0x04
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <LCD_enuWriteNLatch+0x440>
    2336:	9c 83       	std	Y+4, r25	; 0x04
    2338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	69 f7       	brne	.-38     	; 0x2326 <LCD_enuWriteNLatch+0x434>
    234c:	14 c0       	rjmp	.+40     	; 0x2376 <LCD_enuWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <LCD_enuWriteNLatch+0x47c>
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4);
#else
#error "LCD mode is wrong ya 7aywan"
#endif
	return ES_OK;
    2376:	80 e0       	ldi	r24, 0x00	; 0
}
    2378:	e9 96       	adiw	r28, 0x39	; 57
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <LCD_enuWriteIntegerNum>:

/*		ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)		*/
ES_t LCD_enuWriteIntegerNum (s32 Copy_s32Num)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	2d 97       	sbiw	r28, 0x0d	; 13
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	69 87       	std	Y+9, r22	; 0x09
    23a0:	7a 87       	std	Y+10, r23	; 0x0a
    23a2:	8b 87       	std	Y+11, r24	; 0x0b
    23a4:	9c 87       	std	Y+12, r25	; 0x0c
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8DigitCounter = 1 ;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	8d 83       	std	Y+5, r24	; 0x05

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	61 e0       	ldi	r22, 0x01	; 1
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    23b8:	8f 83       	std	Y+7, r24	; 0x07
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    23ba:	86 e0       	ldi	r24, 0x06	; 6
    23bc:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    23c0:	88 87       	std	Y+8, r24	; 0x08

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    23c2:	8f 81       	ldd	r24, Y+7	; 0x07
    23c4:	88 23       	and	r24, r24
    23c6:	09 f0       	breq	.+2      	; 0x23ca <LCD_enuWriteIntegerNum+0x40>
    23c8:	eb c0       	rjmp	.+470    	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
    23ca:	88 85       	ldd	r24, Y+8	; 0x08
    23cc:	88 23       	and	r24, r24
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <LCD_enuWriteIntegerNum+0x48>
    23d0:	e7 c0       	rjmp	.+462    	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
	{
		if( Copy_s32Num < 0 )
    23d2:	89 85       	ldd	r24, Y+9	; 0x09
    23d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    23d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    23da:	bb 23       	and	r27, r27
    23dc:	cc f4       	brge	.+50     	; 0x2410 <LCD_enuWriteIntegerNum+0x86>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	61 e0       	ldi	r22, 0x01	; 1
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    23e8:	8f 83       	std	Y+7, r24	; 0x07
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    23ea:	8d e2       	ldi	r24, 0x2D	; 45
    23ec:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    23f0:	88 87       	std	Y+8, r24	; 0x08
			Copy_s32Num = - Copy_s32Num;
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	ab 85       	ldd	r26, Y+11	; 0x0b
    23f8:	bc 85       	ldd	r27, Y+12	; 0x0c
    23fa:	b0 95       	com	r27
    23fc:	a0 95       	com	r26
    23fe:	90 95       	com	r25
    2400:	81 95       	neg	r24
    2402:	9f 4f       	sbci	r25, 0xFF	; 255
    2404:	af 4f       	sbci	r26, 0xFF	; 255
    2406:	bf 4f       	sbci	r27, 0xFF	; 255
    2408:	89 87       	std	Y+9, r24	; 0x09
    240a:	9a 87       	std	Y+10, r25	; 0x0a
    240c:	ab 87       	std	Y+11, r26	; 0x0b
    240e:	bc 87       	std	Y+12, r27	; 0x0c
		}

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2410:	8f 81       	ldd	r24, Y+7	; 0x07
    2412:	88 23       	and	r24, r24
    2414:	09 f0       	breq	.+2      	; 0x2418 <LCD_enuWriteIntegerNum+0x8e>
    2416:	c4 c0       	rjmp	.+392    	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
    2418:	88 85       	ldd	r24, Y+8	; 0x08
    241a:	88 23       	and	r24, r24
    241c:	09 f0       	breq	.+2      	; 0x2420 <LCD_enuWriteIntegerNum+0x96>
    241e:	c0 c0       	rjmp	.+384    	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
		{
			u32 Local_u32Number = Copy_s32Num;
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	ab 85       	ldd	r26, Y+11	; 0x0b
    2426:	bc 85       	ldd	r27, Y+12	; 0x0c
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	ab 83       	std	Y+3, r26	; 0x03
    242e:	bc 83       	std	Y+4, r27	; 0x04
    2430:	1c c0       	rjmp	.+56     	; 0x246a <LCD_enuWriteIntegerNum+0xe0>

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	61 e0       	ldi	r22, 0x01	; 1
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    243c:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    243e:	84 e1       	ldi	r24, 0x14	; 20
    2440:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2444:	88 87       	std	Y+8, r24	; 0x08
				Local_u32Number /=10;
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	ab 81       	ldd	r26, Y+3	; 0x03
    244c:	bc 81       	ldd	r27, Y+4	; 0x04
    244e:	2a e0       	ldi	r18, 0x0A	; 10
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	0e 94 4d 1b 	call	0x369a	; 0x369a <__udivmodsi4>
    245e:	da 01       	movw	r26, r20
    2460:	c9 01       	movw	r24, r18
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	ab 83       	std	Y+3, r26	; 0x03
    2468:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			u32 Local_u32Number = Copy_s32Num;

			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	ab 81       	ldd	r26, Y+3	; 0x03
    2470:	bc 81       	ldd	r27, Y+4	; 0x04
    2472:	8b 30       	cpi	r24, 0x0B	; 11
    2474:	91 05       	cpc	r25, r1
    2476:	a1 05       	cpc	r26, r1
    2478:	b1 05       	cpc	r27, r1
    247a:	30 f0       	brcs	.+12     	; 0x2488 <LCD_enuWriteIntegerNum+0xfe>
    247c:	8f 81       	ldd	r24, Y+7	; 0x07
    247e:	88 23       	and	r24, r24
    2480:	19 f4       	brne	.+6      	; 0x2488 <LCD_enuWriteIntegerNum+0xfe>
    2482:	88 85       	ldd	r24, Y+8	; 0x08
    2484:	88 23       	and	r24, r24
    2486:	a9 f2       	breq	.-86     	; 0x2432 <LCD_enuWriteIntegerNum+0xa8>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2488:	8f 81       	ldd	r24, Y+7	; 0x07
    248a:	88 23       	and	r24, r24
    248c:	09 f0       	breq	.+2      	; 0x2490 <LCD_enuWriteIntegerNum+0x106>
    248e:	88 c0       	rjmp	.+272    	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
    2490:	88 85       	ldd	r24, Y+8	; 0x08
    2492:	88 23       	and	r24, r24
    2494:	09 f0       	breq	.+2      	; 0x2498 <LCD_enuWriteIntegerNum+0x10e>
    2496:	84 c0       	rjmp	.+264    	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	61 e0       	ldi	r22, 0x01	; 1
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    24a2:	8f 83       	std	Y+7, r24	; 0x07
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    24a4:	84 e0       	ldi	r24, 0x04	; 4
    24a6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    24aa:	88 87       	std	Y+8, r24	; 0x08

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    24ac:	8f 81       	ldd	r24, Y+7	; 0x07
    24ae:	88 23       	and	r24, r24
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <LCD_enuWriteIntegerNum+0x12a>
    24b2:	76 c0       	rjmp	.+236    	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
    24b4:	88 85       	ldd	r24, Y+8	; 0x08
    24b6:	88 23       	and	r24, r24
    24b8:	09 f0       	breq	.+2      	; 0x24bc <LCD_enuWriteIntegerNum+0x132>
    24ba:	72 c0       	rjmp	.+228    	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
    24bc:	2d c0       	rjmp	.+90     	; 0x2518 <LCD_enuWriteIntegerNum+0x18e>
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
					{
						Local_u8DigitCounter++;
    24be:	8d 81       	ldd	r24, Y+5	; 0x05
    24c0:	8f 5f       	subi	r24, 0xFF	; 255
    24c2:	8d 83       	std	Y+5, r24	; 0x05
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    24ce:	8f 83       	std	Y+7, r24	; 0x07
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    24d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    24d8:	2a e0       	ldi	r18, 0x0A	; 10
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 6f 1b 	call	0x36de	; 0x36de <__divmodsi4>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	80 5d       	subi	r24, 0xD0	; 208
    24ee:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    24f2:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    24fa:	bc 85       	ldd	r27, Y+12	; 0x0c
    24fc:	2a e0       	ldi	r18, 0x0A	; 10
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 6f 1b 	call	0x36de	; 0x36de <__divmodsi4>
    250c:	da 01       	movw	r26, r20
    250e:	c9 01       	movw	r24, r18
    2510:	89 87       	std	Y+9, r24	; 0x09
    2512:	9a 87       	std	Y+10, r25	; 0x0a
    2514:	ab 87       	std	Y+11, r26	; 0x0b
    2516:	bc 87       	std	Y+12, r27	; 0x0c
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
				{
					while(Copy_s32Num && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2518:	89 85       	ldd	r24, Y+9	; 0x09
    251a:	9a 85       	ldd	r25, Y+10	; 0x0a
    251c:	ab 85       	ldd	r26, Y+11	; 0x0b
    251e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	a1 05       	cpc	r26, r1
    2524:	b1 05       	cpc	r27, r1
    2526:	31 f0       	breq	.+12     	; 0x2534 <LCD_enuWriteIntegerNum+0x1aa>
    2528:	8f 81       	ldd	r24, Y+7	; 0x07
    252a:	88 23       	and	r24, r24
    252c:	19 f4       	brne	.+6      	; 0x2534 <LCD_enuWriteIntegerNum+0x1aa>
    252e:	88 85       	ldd	r24, Y+8	; 0x08
    2530:	88 23       	and	r24, r24
    2532:	29 f2       	breq	.-118    	; 0x24be <LCD_enuWriteIntegerNum+0x134>
						Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
						Local_enuStatus[1] = LCD_enuWriteNLatch(ZERO_ASCII + (Copy_s32Num % 10));
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2534:	8f 81       	ldd	r24, Y+7	; 0x07
    2536:	88 23       	and	r24, r24
    2538:	99 f5       	brne	.+102    	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
    253a:	88 85       	ldd	r24, Y+8	; 0x08
    253c:	88 23       	and	r24, r24
    253e:	81 f5       	brne	.+96     	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
    2540:	0a c0       	rjmp	.+20     	; 0x2556 <LCD_enuWriteIntegerNum+0x1cc>
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    254c:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    254e:	84 e1       	ldi	r24, 0x14	; 20
    2550:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2554:	88 87       	std	Y+8, r24	; 0x08
						Copy_s32Num /= 10;
					}

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
					{
						while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	8d 87       	std	Y+13, r24	; 0x0d
    255a:	8d 85       	ldd	r24, Y+13	; 0x0d
    255c:	88 23       	and	r24, r24
    255e:	11 f0       	breq	.+4      	; 0x2564 <LCD_enuWriteIntegerNum+0x1da>
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	8d 87       	std	Y+13, r24	; 0x0d
    2564:	9d 85       	ldd	r25, Y+13	; 0x0d
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	81 50       	subi	r24, 0x01	; 1
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	89 27       	eor	r24, r25
    2570:	88 23       	and	r24, r24
    2572:	31 f4       	brne	.+12     	; 0x2580 <LCD_enuWriteIntegerNum+0x1f6>
    2574:	8f 81       	ldd	r24, Y+7	; 0x07
    2576:	88 23       	and	r24, r24
    2578:	19 f4       	brne	.+6      	; 0x2580 <LCD_enuWriteIntegerNum+0x1f6>
    257a:	88 85       	ldd	r24, Y+8	; 0x08
    257c:	88 23       	and	r24, r24
    257e:	09 f3       	breq	.-62     	; 0x2542 <LCD_enuWriteIntegerNum+0x1b8>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
						}

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2580:	8f 81       	ldd	r24, Y+7	; 0x07
    2582:	88 23       	and	r24, r24
    2584:	69 f4       	brne	.+26     	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
    2586:	88 85       	ldd	r24, Y+8	; 0x08
    2588:	88 23       	and	r24, r24
    258a:	51 f4       	brne	.+20     	; 0x25a0 <LCD_enuWriteIntegerNum+0x216>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	61 e0       	ldi	r22, 0x01	; 1
    2590:	40 e0       	ldi	r20, 0x00	; 0
    2592:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2596:	8f 83       	std	Y+7, r24	; 0x07
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2598:	86 e0       	ldi	r24, 0x06	; 6
    259a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    259e:	88 87       	std	Y+8, r24	; 0x08

			}

		}
	}
	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    25a0:	8f 81       	ldd	r24, Y+7	; 0x07
    25a2:	88 23       	and	r24, r24
    25a4:	21 f4       	brne	.+8      	; 0x25ae <LCD_enuWriteIntegerNum+0x224>
    25a6:	88 85       	ldd	r24, Y+8	; 0x08
    25a8:	88 23       	and	r24, r24
    25aa:	09 f4       	brne	.+2      	; 0x25ae <LCD_enuWriteIntegerNum+0x224>
			 	 Local_enuErrorState = ES_OK;
    25ac:	1e 82       	std	Y+6, r1	; 0x06

	return (Local_enuErrorState = ES_OK);
    25ae:	1e 82       	std	Y+6, r1	; 0x06
    25b0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    25b2:	2d 96       	adiw	r28, 0x0d	; 13
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <LCD_enuWriteFloatNum>:

/*		ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)		*/
ES_t LCD_enuWriteFloatNum(f32 Copy_f32Num)
{
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	66 97       	sbiw	r28, 0x16	; 22
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	69 8b       	std	Y+17, r22	; 0x11
    25da:	7a 8b       	std	Y+18, r23	; 0x12
    25dc:	8b 8b       	std	Y+19, r24	; 0x13
    25de:	9c 8b       	std	Y+20, r25	; 0x14
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	8e 87       	std	Y+14, r24	; 0x0e

	u8 Local_u8DigitCounter = 0 ;
    25e4:	1d 86       	std	Y+13, r1	; 0x0d
	u32 Local_u32Integer = 0 , Local_u32Number = 0;
    25e6:	19 86       	std	Y+9, r1	; 0x09
    25e8:	1a 86       	std	Y+10, r1	; 0x0a
    25ea:	1b 86       	std	Y+11, r1	; 0x0b
    25ec:	1c 86       	std	Y+12, r1	; 0x0c
    25ee:	1d 82       	std	Y+5, r1	; 0x05
    25f0:	1e 82       	std	Y+6, r1	; 0x06
    25f2:	1f 82       	std	Y+7, r1	; 0x07
    25f4:	18 86       	std	Y+8, r1	; 0x08
	f32 Local_f32_Fraction = 0.0 ;
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a0 e0       	ldi	r26, 0x00	; 0
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	ab 83       	std	Y+3, r26	; 0x03
    2604:	bc 83       	std	Y+4, r27	; 0x04

	Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2610:	8f 87       	std	Y+15, r24	; 0x0f
	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2612:	86 e0       	ldi	r24, 0x06	; 6
    2614:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2618:	88 8b       	std	Y+16, r24	; 0x10

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    261a:	8f 85       	ldd	r24, Y+15	; 0x0f
    261c:	88 23       	and	r24, r24
    261e:	09 f0       	breq	.+2      	; 0x2622 <LCD_enuWriteFloatNum+0x5e>
    2620:	8f c1       	rjmp	.+798    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    2622:	88 89       	ldd	r24, Y+16	; 0x10
    2624:	88 23       	and	r24, r24
    2626:	09 f0       	breq	.+2      	; 0x262a <LCD_enuWriteFloatNum+0x66>
    2628:	8b c1       	rjmp	.+790    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
	{
		if( Copy_f32Num < 0 )
    262a:	69 89       	ldd	r22, Y+17	; 0x11
    262c:	7a 89       	ldd	r23, Y+18	; 0x12
    262e:	8b 89       	ldd	r24, Y+19	; 0x13
    2630:	9c 89       	ldd	r25, Y+20	; 0x14
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	50 e0       	ldi	r21, 0x00	; 0
    263a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    263e:	88 23       	and	r24, r24
    2640:	9c f4       	brge	.+38     	; 0x2668 <LCD_enuWriteFloatNum+0xa4>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	61 e0       	ldi	r22, 0x01	; 1
    2646:	41 e0       	ldi	r20, 0x01	; 1
    2648:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    264c:	8f 87       	std	Y+15, r24	; 0x0f
			Local_enuStatus[1] = LCD_enuWriteNLatch( MINUS_SIGN );
    264e:	8d e2       	ldi	r24, 0x2D	; 45
    2650:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2654:	88 8b       	std	Y+16, r24	; 0x10
			Copy_f32Num = - Copy_f32Num;
    2656:	89 89       	ldd	r24, Y+17	; 0x11
    2658:	9a 89       	ldd	r25, Y+18	; 0x12
    265a:	ab 89       	ldd	r26, Y+19	; 0x13
    265c:	bc 89       	ldd	r27, Y+20	; 0x14
    265e:	b0 58       	subi	r27, 0x80	; 128
    2660:	89 8b       	std	Y+17, r24	; 0x11
    2662:	9a 8b       	std	Y+18, r25	; 0x12
    2664:	ab 8b       	std	Y+19, r26	; 0x13
    2666:	bc 8b       	std	Y+20, r27	; 0x14
		}

		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
    2668:	69 89       	ldd	r22, Y+17	; 0x11
    266a:	7a 89       	ldd	r23, Y+18	; 0x12
    266c:	8b 89       	ldd	r24, Y+19	; 0x13
    266e:	9c 89       	ldd	r25, Y+20	; 0x14
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	8d 83       	std	Y+5, r24	; 0x05
    267a:	9e 83       	std	Y+6, r25	; 0x06
    267c:	af 83       	std	Y+7, r26	; 0x07
    267e:	b8 87       	std	Y+8, r27	; 0x08
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	af 81       	ldd	r26, Y+7	; 0x07
    2686:	b8 85       	ldd	r27, Y+8	; 0x08
    2688:	89 87       	std	Y+9, r24	; 0x09
    268a:	9a 87       	std	Y+10, r25	; 0x0a
    268c:	ab 87       	std	Y+11, r26	; 0x0b
    268e:	bc 87       	std	Y+12, r27	; 0x0c
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;
    2690:	69 85       	ldd	r22, Y+9	; 0x09
    2692:	7a 85       	ldd	r23, Y+10	; 0x0a
    2694:	8b 85       	ldd	r24, Y+11	; 0x0b
    2696:	9c 85       	ldd	r25, Y+12	; 0x0c
    2698:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    269c:	9b 01       	movw	r18, r22
    269e:	ac 01       	movw	r20, r24
    26a0:	69 89       	ldd	r22, Y+17	; 0x11
    26a2:	7a 89       	ldd	r23, Y+18	; 0x12
    26a4:	8b 89       	ldd	r24, Y+19	; 0x13
    26a6:	9c 89       	ldd	r25, Y+20	; 0x14
    26a8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	ab 83       	std	Y+3, r26	; 0x03
    26b6:	bc 83       	std	Y+4, r27	; 0x04

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    26b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ba:	88 23       	and	r24, r24
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <LCD_enuWriteFloatNum+0xfc>
    26be:	40 c1       	rjmp	.+640    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    26c0:	88 89       	ldd	r24, Y+16	; 0x10
    26c2:	88 23       	and	r24, r24
    26c4:	09 f0       	breq	.+2      	; 0x26c8 <LCD_enuWriteFloatNum+0x104>
    26c6:	3c c1       	rjmp	.+632    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    26c8:	1c c0       	rjmp	.+56     	; 0x2702 <LCD_enuWriteFloatNum+0x13e>
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	61 e0       	ldi	r22, 0x01	; 1
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    26d4:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
    26d6:	84 e1       	ldi	r24, 0x14	; 20
    26d8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    26dc:	8f 87       	std	Y+15, r24	; 0x0f
				Local_u32Number /=10;
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	af 81       	ldd	r26, Y+7	; 0x07
    26e4:	b8 85       	ldd	r27, Y+8	; 0x08
    26e6:	2a e0       	ldi	r18, 0x0A	; 10
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 4d 1b 	call	0x369a	; 0x369a <__udivmodsi4>
    26f6:	da 01       	movw	r26, r20
    26f8:	c9 01       	movw	r24, r18
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	af 83       	std	Y+7, r26	; 0x07
    2700:	b8 87       	std	Y+8, r27	; 0x08
		Local_u32Integer = Local_u32Number =(u32)Copy_f32Num;
		Local_f32_Fraction = Copy_f32Num - Local_u32Integer;

		if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
		{
			while(Local_u32Number>10 && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	af 81       	ldd	r26, Y+7	; 0x07
    2708:	b8 85       	ldd	r27, Y+8	; 0x08
    270a:	8b 30       	cpi	r24, 0x0B	; 11
    270c:	91 05       	cpc	r25, r1
    270e:	a1 05       	cpc	r26, r1
    2710:	b1 05       	cpc	r27, r1
    2712:	30 f0       	brcs	.+12     	; 0x2720 <LCD_enuWriteFloatNum+0x15c>
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	88 23       	and	r24, r24
    2718:	19 f4       	brne	.+6      	; 0x2720 <LCD_enuWriteFloatNum+0x15c>
    271a:	88 89       	ldd	r24, Y+16	; 0x10
    271c:	88 23       	and	r24, r24
    271e:	a9 f2       	breq	.-86     	; 0x26ca <LCD_enuWriteFloatNum+0x106>
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
				Local_enuStatus[0] = LCD_enuWriteNLatch(0x14);
				Local_u32Number /=10;
			}

			if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2720:	8f 85       	ldd	r24, Y+15	; 0x0f
    2722:	88 23       	and	r24, r24
    2724:	09 f0       	breq	.+2      	; 0x2728 <LCD_enuWriteFloatNum+0x164>
    2726:	0c c1       	rjmp	.+536    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    2728:	88 89       	ldd	r24, Y+16	; 0x10
    272a:	88 23       	and	r24, r24
    272c:	09 f0       	breq	.+2      	; 0x2730 <LCD_enuWriteFloatNum+0x16c>
    272e:	08 c1       	rjmp	.+528    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
			{
				Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	61 e0       	ldi	r22, 0x01	; 1
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    273a:	8f 87       	std	Y+15, r24	; 0x0f
				Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    273c:	84 e0       	ldi	r24, 0x04	; 4
    273e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2742:	88 8b       	std	Y+16, r24	; 0x10

				if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2744:	8f 85       	ldd	r24, Y+15	; 0x0f
    2746:	88 23       	and	r24, r24
    2748:	09 f0       	breq	.+2      	; 0x274c <LCD_enuWriteFloatNum+0x188>
    274a:	fa c0       	rjmp	.+500    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    274c:	88 89       	ldd	r24, Y+16	; 0x10
    274e:	88 23       	and	r24, r24
    2750:	09 f0       	breq	.+2      	; 0x2754 <LCD_enuWriteFloatNum+0x190>
    2752:	f6 c0       	rjmp	.+492    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
				{
					do
					{
						Local_u8DigitCounter++;
    2754:	8d 85       	ldd	r24, Y+13	; 0x0d
    2756:	8f 5f       	subi	r24, 0xFF	; 255
    2758:	8d 87       	std	Y+13, r24	; 0x0d
						DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
						LCD_enuWriteNLatch(ZERO_ASCII + (Local_u32Integer % 10));
    2764:	89 85       	ldd	r24, Y+9	; 0x09
    2766:	9a 85       	ldd	r25, Y+10	; 0x0a
    2768:	ab 85       	ldd	r26, Y+11	; 0x0b
    276a:	bc 85       	ldd	r27, Y+12	; 0x0c
    276c:	2a e0       	ldi	r18, 0x0A	; 10
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 4d 1b 	call	0x369a	; 0x369a <__udivmodsi4>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	80 5d       	subi	r24, 0xD0	; 208
    2782:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
						Local_u32Integer /= 10;
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	ab 85       	ldd	r26, Y+11	; 0x0b
    278c:	bc 85       	ldd	r27, Y+12	; 0x0c
    278e:	2a e0       	ldi	r18, 0x0A	; 10
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	0e 94 4d 1b 	call	0x369a	; 0x369a <__udivmodsi4>
    279e:	da 01       	movw	r26, r20
    27a0:	c9 01       	movw	r24, r18
    27a2:	89 87       	std	Y+9, r24	; 0x09
    27a4:	9a 87       	std	Y+10, r25	; 0x0a
    27a6:	ab 87       	std	Y+11, r26	; 0x0b
    27a8:	bc 87       	std	Y+12, r27	; 0x0c
					}while(Local_u32Integer && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK);
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    27b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	a1 05       	cpc	r26, r1
    27b6:	b1 05       	cpc	r27, r1
    27b8:	31 f0       	breq	.+12     	; 0x27c6 <LCD_enuWriteFloatNum+0x202>
    27ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    27bc:	88 23       	and	r24, r24
    27be:	19 f4       	brne	.+6      	; 0x27c6 <LCD_enuWriteFloatNum+0x202>
    27c0:	88 89       	ldd	r24, Y+16	; 0x10
    27c2:	88 23       	and	r24, r24
    27c4:	39 f2       	breq	.-114    	; 0x2754 <LCD_enuWriteFloatNum+0x190>

					if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    27c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c8:	88 23       	and	r24, r24
    27ca:	09 f0       	breq	.+2      	; 0x27ce <LCD_enuWriteFloatNum+0x20a>
    27cc:	b9 c0       	rjmp	.+370    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    27ce:	88 89       	ldd	r24, Y+16	; 0x10
    27d0:	88 23       	and	r24, r24
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <LCD_enuWriteFloatNum+0x212>
    27d4:	b5 c0       	rjmp	.+362    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
					{
						do
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	61 e0       	ldi	r22, 0x01	; 1
    27da:	40 e0       	ldi	r20, 0x00	; 0
    27dc:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    27e0:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x14);
    27e2:	84 e1       	ldi	r24, 0x14	; 20
    27e4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    27e8:	88 8b       	std	Y+16, r24	; 0x10
						}while(Local_u8DigitCounter-- && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK );
    27ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ec:	8e 8b       	std	Y+22, r24	; 0x16
    27ee:	9e 89       	ldd	r25, Y+22	; 0x16
    27f0:	99 23       	and	r25, r25
    27f2:	11 f0       	breq	.+4      	; 0x27f8 <LCD_enuWriteFloatNum+0x234>
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	8e 8b       	std	Y+22, r24	; 0x16
    27f8:	9e 89       	ldd	r25, Y+22	; 0x16
    27fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fc:	81 50       	subi	r24, 0x01	; 1
    27fe:	8d 87       	std	Y+13, r24	; 0x0d
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	89 27       	eor	r24, r25
    2804:	88 23       	and	r24, r24
    2806:	31 f4       	brne	.+12     	; 0x2814 <LCD_enuWriteFloatNum+0x250>
    2808:	8f 85       	ldd	r24, Y+15	; 0x0f
    280a:	88 23       	and	r24, r24
    280c:	19 f4       	brne	.+6      	; 0x2814 <LCD_enuWriteFloatNum+0x250>
    280e:	88 89       	ldd	r24, Y+16	; 0x10
    2810:	88 23       	and	r24, r24
    2812:	09 f3       	breq	.-62     	; 0x27d6 <LCD_enuWriteFloatNum+0x212>

						if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2814:	8f 85       	ldd	r24, Y+15	; 0x0f
    2816:	88 23       	and	r24, r24
    2818:	09 f0       	breq	.+2      	; 0x281c <LCD_enuWriteFloatNum+0x258>
    281a:	92 c0       	rjmp	.+292    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    281c:	88 89       	ldd	r24, Y+16	; 0x10
    281e:	88 23       	and	r24, r24
    2820:	09 f0       	breq	.+2      	; 0x2824 <LCD_enuWriteFloatNum+0x260>
    2822:	8e c0       	rjmp	.+284    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
						{
							Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	61 e0       	ldi	r22, 0x01	; 1
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    282e:	8f 87       	std	Y+15, r24	; 0x0f
							Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2830:	86 e0       	ldi	r24, 0x06	; 6
    2832:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2836:	88 8b       	std	Y+16, r24	; 0x10

							if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2838:	8f 85       	ldd	r24, Y+15	; 0x0f
    283a:	88 23       	and	r24, r24
    283c:	09 f0       	breq	.+2      	; 0x2840 <LCD_enuWriteFloatNum+0x27c>
    283e:	80 c0       	rjmp	.+256    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    2840:	88 89       	ldd	r24, Y+16	; 0x10
    2842:	88 23       	and	r24, r24
    2844:	09 f0       	breq	.+2      	; 0x2848 <LCD_enuWriteFloatNum+0x284>
    2846:	7c c0       	rjmp	.+248    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
							{
								if(Local_f32_Fraction > 0.0f)
    2848:	69 81       	ldd	r22, Y+1	; 0x01
    284a:	7a 81       	ldd	r23, Y+2	; 0x02
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    285c:	18 16       	cp	r1, r24
    285e:	54 f4       	brge	.+20     	; 0x2874 <LCD_enuWriteFloatNum+0x2b0>
								{
									Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	61 e0       	ldi	r22, 0x01	; 1
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    286a:	8f 87       	std	Y+15, r24	; 0x0f
									Local_enuStatus[1] = LCD_enuWriteNLatch(DOT);
    286c:	8e e2       	ldi	r24, 0x2E	; 46
    286e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2872:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2874:	8f 85       	ldd	r24, Y+15	; 0x0f
    2876:	88 23       	and	r24, r24
    2878:	09 f0       	breq	.+2      	; 0x287c <LCD_enuWriteFloatNum+0x2b8>
    287a:	62 c0       	rjmp	.+196    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    287c:	88 89       	ldd	r24, Y+16	; 0x10
    287e:	88 23       	and	r24, r24
    2880:	09 f0       	breq	.+2      	; 0x2884 <LCD_enuWriteFloatNum+0x2c0>
    2882:	5e c0       	rjmp	.+188    	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
								{
									Local_u8DigitCounter =0;
    2884:	1d 86       	std	Y+13, r1	; 0x0d
    2886:	3e c0       	rjmp	.+124    	; 0x2904 <LCD_enuWriteFloatNum+0x340>
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
									{
										Local_u8DigitCounter++;
    2888:	8d 85       	ldd	r24, Y+13	; 0x0d
    288a:	8f 5f       	subi	r24, 0xFF	; 255
    288c:	8d 87       	std	Y+13, r24	; 0x0d
										Local_f32_Fraction *= 10.0;
    288e:	69 81       	ldd	r22, Y+1	; 0x01
    2890:	7a 81       	ldd	r23, Y+2	; 0x02
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e2       	ldi	r20, 0x20	; 32
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	9a 83       	std	Y+2, r25	; 0x02
    28aa:	ab 83       	std	Y+3, r26	; 0x03
    28ac:	bc 83       	std	Y+4, r27	; 0x04
										Local_u32Integer = (u32) Local_f32_Fraction;
    28ae:	69 81       	ldd	r22, Y+1	; 0x01
    28b0:	7a 81       	ldd	r23, Y+2	; 0x02
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	89 87       	std	Y+9, r24	; 0x09
    28c0:	9a 87       	std	Y+10, r25	; 0x0a
    28c2:	ab 87       	std	Y+11, r26	; 0x0b
    28c4:	bc 87       	std	Y+12, r27	; 0x0c
										Local_f32_Fraction -= Local_u32Integer;
    28c6:	69 85       	ldd	r22, Y+9	; 0x09
    28c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    28ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    28cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    28ce:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    28d2:	9b 01       	movw	r18, r22
    28d4:	ac 01       	movw	r20, r24
    28d6:	69 81       	ldd	r22, Y+1	; 0x01
    28d8:	7a 81       	ldd	r23, Y+2	; 0x02
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	9c 81       	ldd	r25, Y+4	; 0x04
    28de:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	ab 83       	std	Y+3, r26	; 0x03
    28ec:	bc 83       	std	Y+4, r27	; 0x04
										Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	61 e0       	ldi	r22, 0x01	; 1
    28f2:	41 e0       	ldi	r20, 0x01	; 1
    28f4:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    28f8:	8f 87       	std	Y+15, r24	; 0x0f
										Local_enuStatus[1] = LCD_enuWriteNLatch((ZERO_ASCII + Local_u32Integer));
    28fa:	89 85       	ldd	r24, Y+9	; 0x09
    28fc:	80 5d       	subi	r24, 0xD0	; 208
    28fe:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2902:	88 8b       	std	Y+16, r24	; 0x10
								}

								if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
								{
									Local_u8DigitCounter =0;
									while(Local_f32_Fraction > 0.0f  && Local_u8DigitCounter<6  && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK )
    2904:	1d 8a       	std	Y+21, r1	; 0x15
    2906:	69 81       	ldd	r22, Y+1	; 0x01
    2908:	7a 81       	ldd	r23, Y+2	; 0x02
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	9c 81       	ldd	r25, Y+4	; 0x04
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291a:	18 16       	cp	r1, r24
    291c:	14 f4       	brge	.+4      	; 0x2922 <LCD_enuWriteFloatNum+0x35e>
    291e:	91 e0       	ldi	r25, 0x01	; 1
    2920:	9d 8b       	std	Y+21, r25	; 0x15
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	9d 89       	ldd	r25, Y+21	; 0x15
    2926:	89 27       	eor	r24, r25
    2928:	88 23       	and	r24, r24
    292a:	51 f4       	brne	.+20     	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    292c:	8d 85       	ldd	r24, Y+13	; 0x0d
    292e:	86 30       	cpi	r24, 0x06	; 6
    2930:	38 f4       	brcc	.+14     	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    2932:	8f 85       	ldd	r24, Y+15	; 0x0f
    2934:	88 23       	and	r24, r24
    2936:	21 f4       	brne	.+8      	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    2938:	88 89       	ldd	r24, Y+16	; 0x10
    293a:	88 23       	and	r24, r24
    293c:	09 f4       	brne	.+2      	; 0x2940 <LCD_enuWriteFloatNum+0x37c>
    293e:	a4 cf       	rjmp	.-184    	; 0x2888 <LCD_enuWriteFloatNum+0x2c4>
				}
			}
		}
	}

	if( Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2940:	8f 85       	ldd	r24, Y+15	; 0x0f
    2942:	88 23       	and	r24, r24
    2944:	21 f4       	brne	.+8      	; 0x294e <LCD_enuWriteFloatNum+0x38a>
    2946:	88 89       	ldd	r24, Y+16	; 0x10
    2948:	88 23       	and	r24, r24
    294a:	09 f4       	brne	.+2      	; 0x294e <LCD_enuWriteFloatNum+0x38a>
		 	 Local_enuErrorState = ES_OK;
    294c:	1e 86       	std	Y+14, r1	; 0x0e

	return Local_enuErrorState ;
    294e:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    2950:	66 96       	adiw	r28, 0x16	; 22
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <LCD_enuWriteExtraPattern>:

/*		ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)		*/
ES_t LCD_enuWriteExtraPattern(u8 * Copy_pu8Pattern , u8 Copy_u8NumOfPatterns , u8 Copy_u8Start , u8 Copy_u8DisplayDirection)
{
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	2b 97       	sbiw	r28, 0x0b	; 11
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	6f 83       	std	Y+7, r22	; 0x07
    297c:	48 87       	std	Y+8, r20	; 0x08
    297e:	29 87       	std	Y+9, r18	; 0x09

	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
    2984:	88 85       	ldd	r24, Y+8	; 0x08
    2986:	85 36       	cpi	r24, 0x65	; 101
    2988:	08 f4       	brcc	.+2      	; 0x298c <LCD_enuWriteExtraPattern+0x2a>
    298a:	52 c0       	rjmp	.+164    	; 0x2a30 <LCD_enuWriteExtraPattern+0xce>
    298c:	88 85       	ldd	r24, Y+8	; 0x08
    298e:	8d 36       	cpi	r24, 0x6D	; 109
    2990:	08 f0       	brcs	.+2      	; 0x2994 <LCD_enuWriteExtraPattern+0x32>
    2992:	4e c0       	rjmp	.+156    	; 0x2a30 <LCD_enuWriteExtraPattern+0xce>
    2994:	88 85       	ldd	r24, Y+8	; 0x08
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	8f 81       	ldd	r24, Y+7	; 0x07
    299c:	88 2f       	mov	r24, r24
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	82 0f       	add	r24, r18
    29a2:	93 1f       	adc	r25, r19
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	8d 36       	cpi	r24, 0x6D	; 109
    29a8:	91 05       	cpc	r25, r1
    29aa:	0c f0       	brlt	.+2      	; 0x29ae <LCD_enuWriteExtraPattern+0x4c>
    29ac:	41 c0       	rjmp	.+130    	; 0x2a30 <LCD_enuWriteExtraPattern+0xce>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    29b8:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));
    29ba:	88 85       	ldd	r24, Y+8	; 0x08
    29bc:	88 2f       	mov	r24, r24
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	8d 55       	subi	r24, 0x5D	; 93
    29c2:	90 40       	sbci	r25, 0x00	; 0
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    29d4:	8c 83       	std	Y+4, r24	; 0x04

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    29d6:	19 82       	std	Y+1, r1	; 0x01
    29d8:	15 c0       	rjmp	.+42     	; 0x2a04 <LCD_enuWriteExtraPattern+0xa2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	61 e0       	ldi	r22, 0x01	; 1
    29de:	41 e0       	ldi	r20, 0x01	; 1
    29e0:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    29e4:	8b 83       	std	Y+3, r24	; 0x03
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	fc 01       	movw	r30, r24
    29f2:	e2 0f       	add	r30, r18
    29f4:	f3 1f       	adc	r31, r19
    29f6:	80 81       	ld	r24, Z
    29f8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    29fc:	8c 83       	std	Y+4, r24	; 0x04
	if( Copy_u8Start >= PATTERN_1  && Copy_u8Start <= PATTERN_8 && (Copy_u8Start+Copy_u8NumOfPatterns-1)<= PATTERN_8 )
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
		Local_enuStatus[1] = LCD_enuWriteNLatch(CGROM_BASE_ADD + PATTERN_BYTES*(Copy_u8Start-PATTERN_1));

		for (u8 Local_u8Counter = 0 ; Local_u8Counter < PATTERN_BYTES*Copy_u8NumOfPatterns && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK ; Local_u8Counter++)
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0c:	88 2f       	mov	r24, r24
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	88 0f       	add	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	88 0f       	add	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	28 17       	cp	r18, r24
    2a1e:	39 07       	cpc	r19, r25
    2a20:	4c f4       	brge	.+18     	; 0x2a34 <LCD_enuWriteExtraPattern+0xd2>
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	88 23       	and	r24, r24
    2a26:	31 f4       	brne	.+12     	; 0x2a34 <LCD_enuWriteExtraPattern+0xd2>
    2a28:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2a:	88 23       	and	r24, r24
    2a2c:	b1 f2       	breq	.-84     	; 0x29da <LCD_enuWriteExtraPattern+0x78>
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <LCD_enuWriteExtraPattern+0xd2>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
			Local_enuStatus[1] = LCD_enuWriteNLatch(Copy_pu8Pattern[Local_u8Counter]);
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    2a30:	82 e0       	ldi	r24, 0x02	; 2
    2a32:	8a 83       	std	Y+2, r24	; 0x02

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	82 30       	cpi	r24, 0x02	; 2
    2a38:	71 f1       	breq	.+92     	; 0x2a96 <LCD_enuWriteExtraPattern+0x134>
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	88 23       	and	r24, r24
    2a3e:	59 f5       	brne	.+86     	; 0x2a96 <LCD_enuWriteExtraPattern+0x134>
    2a40:	8c 81       	ldd	r24, Y+4	; 0x04
    2a42:	88 23       	and	r24, r24
    2a44:	41 f5       	brne	.+80     	; 0x2a96 <LCD_enuWriteExtraPattern+0x134>
	{
		if(Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT || Copy_u8DisplayDirection == DISPLAY_DIR_RIGHT )
    2a46:	89 85       	ldd	r24, Y+9	; 0x09
    2a48:	8e 36       	cpi	r24, 0x6E	; 110
    2a4a:	19 f0       	breq	.+6      	; 0x2a52 <LCD_enuWriteExtraPattern+0xf0>
    2a4c:	89 85       	ldd	r24, Y+9	; 0x09
    2a4e:	8e 36       	cpi	r24, 0x6E	; 110
    2a50:	01 f5       	brne	.+64     	; 0x2a92 <LCD_enuWriteExtraPattern+0x130>
		{
			Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	61 e0       	ldi	r22, 0x01	; 1
    2a56:	40 e0       	ldi	r20, 0x00	; 0
    2a58:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2a5c:	8b 83       	std	Y+3, r24	; 0x03

			switch(Copy_u8DisplayDirection)
    2a5e:	89 85       	ldd	r24, Y+9	; 0x09
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	3b 87       	std	Y+11, r19	; 0x0b
    2a66:	2a 87       	std	Y+10, r18	; 0x0a
    2a68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a6c:	8e 36       	cpi	r24, 0x6E	; 110
    2a6e:	91 05       	cpc	r25, r1
    2a70:	31 f0       	breq	.+12     	; 0x2a7e <LCD_enuWriteExtraPattern+0x11c>
    2a72:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a74:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a76:	2f 36       	cpi	r18, 0x6F	; 111
    2a78:	31 05       	cpc	r19, r1
    2a7a:	31 f0       	breq	.+12     	; 0x2a88 <LCD_enuWriteExtraPattern+0x126>
    2a7c:	0c c0       	rjmp	.+24     	; 0x2a96 <LCD_enuWriteExtraPattern+0x134>
			{
				case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2a7e:	86 e0       	ldi	r24, 0x06	; 6
    2a80:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2a84:	8c 83       	std	Y+4, r24	; 0x04
    2a86:	07 c0       	rjmp	.+14     	; 0x2a96 <LCD_enuWriteExtraPattern+0x134>
												break;
				case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    2a88:	84 e0       	ldi	r24, 0x04	; 4
    2a8a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2a8e:	8c 83       	std	Y+4, r24	; 0x04
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <LCD_enuWriteExtraPattern+0x134>
												break;
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    2a92:	82 e0       	ldi	r24, 0x02	; 2
    2a94:	8a 83       	std	Y+2, r24	; 0x02
	}

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	82 30       	cpi	r24, 0x02	; 2
    2a9a:	39 f0       	breq	.+14     	; 0x2aaa <LCD_enuWriteExtraPattern+0x148>
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	88 23       	and	r24, r24
    2aa0:	21 f4       	brne	.+8      	; 0x2aaa <LCD_enuWriteExtraPattern+0x148>
    2aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa4:	88 23       	and	r24, r24
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <LCD_enuWriteExtraPattern+0x148>
	 	 Local_enuErrorState = ES_OK;
    2aa8:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState;
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2aac:	2b 96       	adiw	r28, 0x0b	; 11
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	f8 94       	cli
    2ab2:	de bf       	out	0x3e, r29	; 62
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	cd bf       	out	0x3d, r28	; 61
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <LCD_enuSetTextDirection>:

ES_t LCD_enuSetTextDirection(u8 Copy_u8Direction)
{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <LCD_enuSetTextDirection+0x6>
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <LCD_enuSetTextDirection+0x8>
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <LCD_enuSetTextDirection+0xa>
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK , Local_enuStatus[2];
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Direction == DISPLAY_DIR_RIGHT || Copy_u8Direction == DISPLAY_DIR_RIGHT )
    2ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad4:	8e 36       	cpi	r24, 0x6E	; 110
    2ad6:	19 f0       	breq	.+6      	; 0x2ade <LCD_enuSetTextDirection+0x20>
    2ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ada:	8e 36       	cpi	r24, 0x6E	; 110
    2adc:	01 f5       	brne	.+64     	; 0x2b1e <LCD_enuSetTextDirection+0x60>
	{
		Local_enuStatus[0] = DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	61 e0       	ldi	r22, 0x01	; 1
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2ae8:	8a 83       	std	Y+2, r24	; 0x02

		switch(Copy_u8Direction)
    2aea:	8c 81       	ldd	r24, Y+4	; 0x04
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	3e 83       	std	Y+6, r19	; 0x06
    2af2:	2d 83       	std	Y+5, r18	; 0x05
    2af4:	8d 81       	ldd	r24, Y+5	; 0x05
    2af6:	9e 81       	ldd	r25, Y+6	; 0x06
    2af8:	8e 36       	cpi	r24, 0x6E	; 110
    2afa:	91 05       	cpc	r25, r1
    2afc:	31 f0       	breq	.+12     	; 0x2b0a <LCD_enuSetTextDirection+0x4c>
    2afe:	2d 81       	ldd	r18, Y+5	; 0x05
    2b00:	3e 81       	ldd	r19, Y+6	; 0x06
    2b02:	2f 36       	cpi	r18, 0x6F	; 111
    2b04:	31 05       	cpc	r19, r1
    2b06:	31 f0       	breq	.+12     	; 0x2b14 <LCD_enuSetTextDirection+0x56>
    2b08:	0c c0       	rjmp	.+24     	; 0x2b22 <LCD_enuSetTextDirection+0x64>
		{
			case DISPLAY_DIR_RIGHT :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x06);
    2b0a:	86 e0       	ldi	r24, 0x06	; 6
    2b0c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2b10:	8b 83       	std	Y+3, r24	; 0x03
    2b12:	07 c0       	rjmp	.+14     	; 0x2b22 <LCD_enuSetTextDirection+0x64>
											break;
			case DISPLAY_DIR_LEFT  :	Local_enuStatus[1] = LCD_enuWriteNLatch(0x04);
    2b14:	84 e0       	ldi	r24, 0x04	; 4
    2b16:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_enuWriteNLatch>
    2b1a:	8b 83       	std	Y+3, r24	; 0x03
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <LCD_enuSetTextDirection+0x64>
											break;
		}

	}
	else Local_enuErrorState = ES_OUT_RANGE;
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE && Local_enuStatus[0] == ES_OK && Local_enuStatus[1]== ES_OK)
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	82 30       	cpi	r24, 0x02	; 2
    2b26:	39 f0       	breq	.+14     	; 0x2b36 <LCD_enuSetTextDirection+0x78>
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	88 23       	and	r24, r24
    2b2c:	21 f4       	brne	.+8      	; 0x2b36 <LCD_enuSetTextDirection+0x78>
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	88 23       	and	r24, r24
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <LCD_enuSetTextDirection+0x78>
		 	 Local_enuErrorState = ES_OK;
    2b34:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b38:	26 96       	adiw	r28, 0x06	; 6
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <Keypad_enuInit>:
extern u8 Kpad_u8KeyValues[];
extern KP_Output_t KeyPadCols[];
extern KP_Input_t KeyPadRows[];

ES_t Keypad_enuInit(void)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <Keypad_enuInit+0x6>
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <Keypad_enuInit+0x8>
    2b52:	0f 92       	push	r0
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Iter=0 , Local_u8Flag = 0;
    2b5c:	1a 82       	std	Y+2, r1	; 0x02
    2b5e:	19 82       	std	Y+1, r1	; 0x01

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
    2b60:	90 91 f1 01 	lds	r25, 0x01F1
    2b64:	80 91 f0 01 	lds	r24, 0x01F0
    2b68:	89 17       	cp	r24, r25
    2b6a:	08 f4       	brcc	.+2      	; 0x2b6e <Keypad_enuInit+0x24>
    2b6c:	af c0       	rjmp	.+350    	; 0x2ccc <Keypad_enuInit+0x182>
    2b6e:	90 91 f2 01 	lds	r25, 0x01F2
    2b72:	80 91 f0 01 	lds	r24, 0x01F0
    2b76:	89 17       	cp	r24, r25
    2b78:	08 f4       	brcc	.+2      	; 0x2b7c <Keypad_enuInit+0x32>
    2b7a:	a8 c0       	rjmp	.+336    	; 0x2ccc <Keypad_enuInit+0x182>
    2b7c:	54 c0       	rjmp	.+168    	; 0x2c26 <Keypad_enuInit+0xdc>
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
		{
			Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , DIO_u8INPUT	);
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	28 2f       	mov	r18, r24
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	c9 01       	movw	r24, r18
    2b86:	88 0f       	add	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	82 0f       	add	r24, r18
    2b8c:	93 1f       	adc	r25, r19
    2b8e:	fc 01       	movw	r30, r24
    2b90:	e5 5f       	subi	r30, 0xF5	; 245
    2b92:	fd 4f       	sbci	r31, 0xFD	; 253
    2b94:	40 81       	ld	r20, Z
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	28 2f       	mov	r18, r24
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	c9 01       	movw	r24, r18
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	82 0f       	add	r24, r18
    2ba4:	93 1f       	adc	r25, r19
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	e4 5f       	subi	r30, 0xF4	; 244
    2baa:	fd 4f       	sbci	r31, 0xFD	; 253
    2bac:	90 81       	ld	r25, Z
    2bae:	84 2f       	mov	r24, r20
    2bb0:	69 2f       	mov	r22, r25
    2bb2:	40 e0       	ldi	r20, 0x00	; 0
    2bb4:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    2bb8:	8c 83       	std	Y+4, r24	; 0x04
			Local_enuError[1] = DIO_enuSetPinValue		( KeyPadRows[Local_u8Iter].InputGrp , KeyPadRows[Local_u8Iter].InputPin , KeyPadRows[Local_u8Iter].InputState	);
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	c9 01       	movw	r24, r18
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	82 0f       	add	r24, r18
    2bc8:	93 1f       	adc	r25, r19
    2bca:	fc 01       	movw	r30, r24
    2bcc:	e5 5f       	subi	r30, 0xF5	; 245
    2bce:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd0:	50 81       	ld	r21, Z
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	28 2f       	mov	r18, r24
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	c9 01       	movw	r24, r18
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	82 0f       	add	r24, r18
    2be0:	93 1f       	adc	r25, r19
    2be2:	fc 01       	movw	r30, r24
    2be4:	e4 5f       	subi	r30, 0xF4	; 244
    2be6:	fd 4f       	sbci	r31, 0xFD	; 253
    2be8:	40 81       	ld	r20, Z
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	c9 01       	movw	r24, r18
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	82 0f       	add	r24, r18
    2bf8:	93 1f       	adc	r25, r19
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	e3 5f       	subi	r30, 0xF3	; 243
    2bfe:	fd 4f       	sbci	r31, 0xFD	; 253
    2c00:	90 81       	ld	r25, Z
    2c02:	85 2f       	mov	r24, r21
    2c04:	64 2f       	mov	r22, r20
    2c06:	49 2f       	mov	r20, r25
    2c08:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2c0c:	8d 83       	std	Y+5, r24	; 0x05

			if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    2c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c10:	88 23       	and	r24, r24
    2c12:	19 f4       	brne	.+6      	; 0x2c1a <Keypad_enuInit+0xd0>
    2c14:	8d 81       	ldd	r24, Y+5	; 0x05
    2c16:	88 23       	and	r24, r24
    2c18:	19 f0       	breq	.+6      	; 0x2c20 <Keypad_enuInit+0xd6>
			{
				Local_u8Flag = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	09 c0       	rjmp	.+18     	; 0x2c32 <Keypad_enuInit+0xe8>
	ES_t Local_enuErrorState = ES_NOK , Local_enuError[2];
	u8 Local_u8Iter=0 , Local_u8Flag = 0;

	if( (Kpad_u8RowNum <= Kpad_u8MaxSideKeys) && (Kpad_u8ColNum <= Kpad_u8MaxSideKeys ) )
	{
		for( ; Local_u8Iter < Kpad_u8RowNum ; Local_u8Iter++)
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	8f 5f       	subi	r24, 0xFF	; 255
    2c24:	8a 83       	std	Y+2, r24	; 0x02
    2c26:	90 91 f1 01 	lds	r25, 0x01F1
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	89 17       	cp	r24, r25
    2c2e:	08 f4       	brcc	.+2      	; 0x2c32 <Keypad_enuInit+0xe8>
    2c30:	a6 cf       	rjmp	.-180    	; 0x2b7e <Keypad_enuInit+0x34>
			{
				Local_u8Flag = 1;
				break;
			}
		}
		if(!Local_u8Flag)
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	88 23       	and	r24, r24
    2c36:	09 f0       	breq	.+2      	; 0x2c3a <Keypad_enuInit+0xf0>
    2c38:	44 c0       	rjmp	.+136    	; 0x2cc2 <Keypad_enuInit+0x178>
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    2c3a:	1a 82       	std	Y+2, r1	; 0x02
    2c3c:	3c c0       	rjmp	.+120    	; 0x2cb6 <Keypad_enuInit+0x16c>
			{
				Local_enuError[0] = DIO_enuSetPinDirection	( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8OUTPUT );
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	88 2f       	mov	r24, r24
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	fc 01       	movw	r30, r24
    2c4a:	ed 5f       	subi	r30, 0xFD	; 253
    2c4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2c4e:	20 81       	ld	r18, Z
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	88 2f       	mov	r24, r24
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	ec 5f       	subi	r30, 0xFC	; 252
    2c5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c60:	90 81       	ld	r25, Z
    2c62:	82 2f       	mov	r24, r18
    2c64:	69 2f       	mov	r22, r25
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	0e 94 77 06 	call	0xcee	; 0xcee <DIO_enuSetPinDirection>
    2c6c:	8c 83       	std	Y+4, r24	; 0x04
				Local_enuError[1] = DIO_enuSetPinValue		( KeyPadCols[Local_u8Iter].OutputGrp , KeyPadCols[Local_u8Iter].OutputPin , DIO_u8HIGH	 );
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	88 2f       	mov	r24, r24
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	fc 01       	movw	r30, r24
    2c7a:	ed 5f       	subi	r30, 0xFD	; 253
    2c7c:	fd 4f       	sbci	r31, 0xFD	; 253
    2c7e:	20 81       	ld	r18, Z
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	88 2f       	mov	r24, r24
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	88 0f       	add	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	ec 5f       	subi	r30, 0xFC	; 252
    2c8e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c90:	90 81       	ld	r25, Z
    2c92:	82 2f       	mov	r24, r18
    2c94:	69 2f       	mov	r22, r25
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2c9c:	8d 83       	std	Y+5, r24	; 0x05

				if(Local_enuError[0] != ES_OK || Local_enuError[1] != ES_OK )
    2c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca0:	88 23       	and	r24, r24
    2ca2:	19 f4       	brne	.+6      	; 0x2caa <Keypad_enuInit+0x160>
    2ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca6:	88 23       	and	r24, r24
    2ca8:	19 f0       	breq	.+6      	; 0x2cb0 <Keypad_enuInit+0x166>
				{
					Local_u8Flag = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	09 c0       	rjmp	.+18     	; 0x2cc2 <Keypad_enuInit+0x178>
				break;
			}
		}
		if(!Local_u8Flag)
		{
			for(Local_u8Iter = 0 ; Local_u8Iter < Kpad_u8ColNum ; Local_u8Iter++)
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	8a 83       	std	Y+2, r24	; 0x02
    2cb6:	90 91 f2 01 	lds	r25, 0x01F2
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	89 17       	cp	r24, r25
    2cbe:	08 f4       	brcc	.+2      	; 0x2cc2 <Keypad_enuInit+0x178>
    2cc0:	be cf       	rjmp	.-132    	; 0x2c3e <Keypad_enuInit+0xf4>
					Local_u8Flag = 1;
					break;
				}
			}
		}
		if( !Local_u8Flag )
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	88 23       	and	r24, r24
    2cc6:	21 f4       	brne	.+8      	; 0x2cd0 <Keypad_enuInit+0x186>
			Local_enuErrorState = ES_OK;
    2cc8:	1b 82       	std	Y+3, r1	; 0x03
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <Keypad_enuInit+0x186>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    2ccc:	82 e0       	ldi	r24, 0x02	; 2
    2cce:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState;//DONE
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	08 95       	ret

00002ce2 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)

{
    2ce2:	df 93       	push	r29
    2ce4:	cf 93       	push	r28
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	65 97       	sbiw	r28, 0x15	; 21
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	9d 8b       	std	Y+21, r25	; 0x15
    2cf8:	8c 8b       	std	Y+20, r24	; 0x14
	ES_t Local_enuErrorState = ES_NOK;
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	8a 8b       	std	Y+18, r24	; 0x12

	if (Copy_pu8KeyValue != NULL)
    2cfe:	8c 89       	ldd	r24, Y+20	; 0x14
    2d00:	9d 89       	ldd	r25, Y+21	; 0x15
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <Keypad_enuGetPressedKey+0x26>
    2d06:	61 c1       	rjmp	.+706    	; 0x2fca <Keypad_enuGetPressedKey+0x2e8>
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	8b 8b       	std	Y+19, r24	; 0x13
    2d0c:	19 8a       	std	Y+17, r1	; 0x11

		*Copy_pu8KeyValue = 0xff;
    2d0e:	ec 89       	ldd	r30, Y+20	; 0x14
    2d10:	fd 89       	ldd	r31, Y+21	; 0x15
    2d12:	8f ef       	ldi	r24, 0xFF	; 255
    2d14:	80 83       	st	Z, r24

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    2d16:	18 8a       	std	Y+16, r1	; 0x10
    2d18:	51 c1       	rjmp	.+674    	; 0x2fbc <Keypad_enuGetPressedKey+0x2da>
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );
    2d1a:	88 89       	ldd	r24, Y+16	; 0x10
    2d1c:	88 2f       	mov	r24, r24
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	fc 01       	movw	r30, r24
    2d26:	ed 5f       	subi	r30, 0xFD	; 253
    2d28:	fd 4f       	sbci	r31, 0xFD	; 253
    2d2a:	20 81       	ld	r18, Z
    2d2c:	88 89       	ldd	r24, Y+16	; 0x10
    2d2e:	88 2f       	mov	r24, r24
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	fc 01       	movw	r30, r24
    2d38:	ec 5f       	subi	r30, 0xFC	; 252
    2d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d3c:	90 81       	ld	r25, Z
    2d3e:	82 2f       	mov	r24, r18
    2d40:	69 2f       	mov	r22, r25
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2d48:	8a 8b       	std	Y+18, r24	; 0x12

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    2d4a:	1f 86       	std	Y+15, r1	; 0x0f
    2d4c:	0d c1       	rjmp	.+538    	; 0x2f68 <Keypad_enuGetPressedKey+0x286>
			{
				Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    2d4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d50:	28 2f       	mov	r18, r24
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	c9 01       	movw	r24, r18
    2d56:	88 0f       	add	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	82 0f       	add	r24, r18
    2d5c:	93 1f       	adc	r25, r19
    2d5e:	fc 01       	movw	r30, r24
    2d60:	e5 5f       	subi	r30, 0xF5	; 245
    2d62:	fd 4f       	sbci	r31, 0xFD	; 253
    2d64:	40 81       	ld	r20, Z
    2d66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	c9 01       	movw	r24, r18
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	82 0f       	add	r24, r18
    2d74:	93 1f       	adc	r25, r19
    2d76:	fc 01       	movw	r30, r24
    2d78:	e4 5f       	subi	r30, 0xF4	; 244
    2d7a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d7c:	90 81       	ld	r25, Z
    2d7e:	9e 01       	movw	r18, r28
    2d80:	2d 5e       	subi	r18, 0xED	; 237
    2d82:	3f 4f       	sbci	r19, 0xFF	; 255
    2d84:	84 2f       	mov	r24, r20
    2d86:	69 2f       	mov	r22, r25
    2d88:	a9 01       	movw	r20, r18
    2d8a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enuGetPinValue>
    2d8e:	8a 8b       	std	Y+18, r24	; 0x12

				if( (Local_u8RowValue == DIO_u8LOW) && ( Local_enuErrorState == ES_OK) )
    2d90:	8b 89       	ldd	r24, Y+19	; 0x13
    2d92:	88 23       	and	r24, r24
    2d94:	09 f0       	breq	.+2      	; 0x2d98 <Keypad_enuGetPressedKey+0xb6>
    2d96:	e5 c0       	rjmp	.+458    	; 0x2f62 <Keypad_enuGetPressedKey+0x280>
    2d98:	8a 89       	ldd	r24, Y+18	; 0x12
    2d9a:	88 23       	and	r24, r24
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <Keypad_enuGetPressedKey+0xbe>
    2d9e:	e1 c0       	rjmp	.+450    	; 0x2f62 <Keypad_enuGetPressedKey+0x280>
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	a0 e2       	ldi	r26, 0x20	; 32
    2da6:	b1 e4       	ldi	r27, 0x41	; 65
    2da8:	8b 87       	std	Y+11, r24	; 0x0b
    2daa:	9c 87       	std	Y+12, r25	; 0x0c
    2dac:	ad 87       	std	Y+13, r26	; 0x0d
    2dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	4a e7       	ldi	r20, 0x7A	; 122
    2dbe:	55 e4       	ldi	r21, 0x45	; 69
    2dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	8f 83       	std	Y+7, r24	; 0x07
    2dca:	98 87       	std	Y+8, r25	; 0x08
    2dcc:	a9 87       	std	Y+9, r26	; 0x09
    2dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd2:	78 85       	ldd	r23, Y+8	; 0x08
    2dd4:	89 85       	ldd	r24, Y+9	; 0x09
    2dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e8       	ldi	r20, 0x80	; 128
    2dde:	5f e3       	ldi	r21, 0x3F	; 63
    2de0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de4:	88 23       	and	r24, r24
    2de6:	2c f4       	brge	.+10     	; 0x2df2 <Keypad_enuGetPressedKey+0x110>
		__ticks = 1;
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	9e 83       	std	Y+6, r25	; 0x06
    2dee:	8d 83       	std	Y+5, r24	; 0x05
    2df0:	3f c0       	rjmp	.+126    	; 0x2e70 <Keypad_enuGetPressedKey+0x18e>
	else if (__tmp > 65535)
    2df2:	6f 81       	ldd	r22, Y+7	; 0x07
    2df4:	78 85       	ldd	r23, Y+8	; 0x08
    2df6:	89 85       	ldd	r24, Y+9	; 0x09
    2df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	3f ef       	ldi	r19, 0xFF	; 255
    2dfe:	4f e7       	ldi	r20, 0x7F	; 127
    2e00:	57 e4       	ldi	r21, 0x47	; 71
    2e02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e06:	18 16       	cp	r1, r24
    2e08:	4c f5       	brge	.+82     	; 0x2e5c <Keypad_enuGetPressedKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e2       	ldi	r20, 0x20	; 32
    2e18:	51 e4       	ldi	r21, 0x41	; 65
    2e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	bc 01       	movw	r22, r24
    2e24:	cd 01       	movw	r24, r26
    2e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	9e 83       	std	Y+6, r25	; 0x06
    2e30:	8d 83       	std	Y+5, r24	; 0x05
    2e32:	0f c0       	rjmp	.+30     	; 0x2e52 <Keypad_enuGetPressedKey+0x170>
    2e34:	80 e9       	ldi	r24, 0x90	; 144
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	9c 83       	std	Y+4, r25	; 0x04
    2e3a:	8b 83       	std	Y+3, r24	; 0x03
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	f1 f7       	brne	.-4      	; 0x2e40 <Keypad_enuGetPressedKey+0x15e>
    2e44:	9c 83       	std	Y+4, r25	; 0x04
    2e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e48:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	9e 83       	std	Y+6, r25	; 0x06
    2e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e52:	8d 81       	ldd	r24, Y+5	; 0x05
    2e54:	9e 81       	ldd	r25, Y+6	; 0x06
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	69 f7       	brne	.-38     	; 0x2e34 <Keypad_enuGetPressedKey+0x152>
    2e5a:	14 c0       	rjmp	.+40     	; 0x2e84 <Keypad_enuGetPressedKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5e:	78 85       	ldd	r23, Y+8	; 0x08
    2e60:	89 85       	ldd	r24, Y+9	; 0x09
    2e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	9e 83       	std	Y+6, r25	; 0x06
    2e6e:	8d 83       	std	Y+5, r24	; 0x05
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	9a 83       	std	Y+2, r25	; 0x02
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <Keypad_enuGetPressedKey+0x19a>
    2e80:	9a 83       	std	Y+2, r25	; 0x02
    2e82:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(10);
					Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    2e84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e86:	28 2f       	mov	r18, r24
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	c9 01       	movw	r24, r18
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	82 0f       	add	r24, r18
    2e92:	93 1f       	adc	r25, r19
    2e94:	fc 01       	movw	r30, r24
    2e96:	e5 5f       	subi	r30, 0xF5	; 245
    2e98:	fd 4f       	sbci	r31, 0xFD	; 253
    2e9a:	40 81       	ld	r20, Z
    2e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	c9 01       	movw	r24, r18
    2ea4:	88 0f       	add	r24, r24
    2ea6:	99 1f       	adc	r25, r25
    2ea8:	82 0f       	add	r24, r18
    2eaa:	93 1f       	adc	r25, r19
    2eac:	fc 01       	movw	r30, r24
    2eae:	e4 5f       	subi	r30, 0xF4	; 244
    2eb0:	fd 4f       	sbci	r31, 0xFD	; 253
    2eb2:	90 81       	ld	r25, Z
    2eb4:	9e 01       	movw	r18, r28
    2eb6:	2d 5e       	subi	r18, 0xED	; 237
    2eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eba:	84 2f       	mov	r24, r20
    2ebc:	69 2f       	mov	r22, r25
    2ebe:	a9 01       	movw	r20, r18
    2ec0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enuGetPinValue>
    2ec4:	8a 8b       	std	Y+18, r24	; 0x12

					if( Local_enuErrorState == ES_OK  && Local_u8RowValue == DIO_u8LOW )
    2ec6:	8a 89       	ldd	r24, Y+18	; 0x12
    2ec8:	88 23       	and	r24, r24
    2eca:	09 f0       	breq	.+2      	; 0x2ece <Keypad_enuGetPressedKey+0x1ec>
    2ecc:	4a c0       	rjmp	.+148    	; 0x2f62 <Keypad_enuGetPressedKey+0x280>
    2ece:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed0:	88 23       	and	r24, r24
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <Keypad_enuGetPressedKey+0x1f4>
    2ed4:	46 c0       	rjmp	.+140    	; 0x2f62 <Keypad_enuGetPressedKey+0x280>
					{
						Local_u8Pressed = 1 ;
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	89 8b       	std	Y+17, r24	; 0x11
						*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];
    2eda:	8f 85       	ldd	r24, Y+15	; 0x0f
    2edc:	28 2f       	mov	r18, r24
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	80 91 f2 01 	lds	r24, 0x01F2
    2ee4:	88 2f       	mov	r24, r24
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a9 01       	movw	r20, r18
    2eea:	48 9f       	mul	r20, r24
    2eec:	90 01       	movw	r18, r0
    2eee:	49 9f       	mul	r20, r25
    2ef0:	30 0d       	add	r19, r0
    2ef2:	58 9f       	mul	r21, r24
    2ef4:	30 0d       	add	r19, r0
    2ef6:	11 24       	eor	r1, r1
    2ef8:	88 89       	ldd	r24, Y+16	; 0x10
    2efa:	88 2f       	mov	r24, r24
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	82 0f       	add	r24, r18
    2f00:	93 1f       	adc	r25, r19
    2f02:	fc 01       	movw	r30, r24
    2f04:	ed 50       	subi	r30, 0x0D	; 13
    2f06:	fe 4f       	sbci	r31, 0xFE	; 254
    2f08:	80 81       	ld	r24, Z
    2f0a:	ec 89       	ldd	r30, Y+20	; 0x14
    2f0c:	fd 89       	ldd	r31, Y+21	; 0x15
    2f0e:	80 83       	st	Z, r24
    2f10:	21 c0       	rjmp	.+66     	; 0x2f54 <Keypad_enuGetPressedKey+0x272>

						while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
						{
							Local_enuErrorState = DIO_enuGetPinValue( KeyPadRows[Local_u8RowIter].InputGrp , KeyPadRows[Local_u8RowIter].InputPin , &Local_u8RowValue);
    2f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	c9 01       	movw	r24, r18
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	82 0f       	add	r24, r18
    2f20:	93 1f       	adc	r25, r19
    2f22:	fc 01       	movw	r30, r24
    2f24:	e5 5f       	subi	r30, 0xF5	; 245
    2f26:	fd 4f       	sbci	r31, 0xFD	; 253
    2f28:	40 81       	ld	r20, Z
    2f2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2c:	28 2f       	mov	r18, r24
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	c9 01       	movw	r24, r18
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	82 0f       	add	r24, r18
    2f38:	93 1f       	adc	r25, r19
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	e4 5f       	subi	r30, 0xF4	; 244
    2f3e:	fd 4f       	sbci	r31, 0xFD	; 253
    2f40:	90 81       	ld	r25, Z
    2f42:	9e 01       	movw	r18, r28
    2f44:	2d 5e       	subi	r18, 0xED	; 237
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	84 2f       	mov	r24, r20
    2f4a:	69 2f       	mov	r22, r25
    2f4c:	a9 01       	movw	r20, r18
    2f4e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <DIO_enuGetPinValue>
    2f52:	8a 8b       	std	Y+18, r24	; 0x12
					if( Local_enuErrorState == ES_OK  && Local_u8RowValue == DIO_u8LOW )
					{
						Local_u8Pressed = 1 ;
						*Copy_pu8KeyValue = Kpad_u8KeyValues[( (Local_u8RowIter*Kpad_u8ColNum) + Local_u8ColIter) ];

						while( Local_u8RowValue == DIO_u8LOW  && Local_enuErrorState == ES_OK )
    2f54:	8b 89       	ldd	r24, Y+19	; 0x13
    2f56:	88 23       	and	r24, r24
    2f58:	81 f4       	brne	.+32     	; 0x2f7a <Keypad_enuGetPressedKey+0x298>
    2f5a:	8a 89       	ldd	r24, Y+18	; 0x12
    2f5c:	88 23       	and	r24, r24
    2f5e:	c9 f2       	breq	.-78     	; 0x2f12 <Keypad_enuGetPressedKey+0x230>
    2f60:	0c c0       	rjmp	.+24     	; 0x2f7a <Keypad_enuGetPressedKey+0x298>

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
		{
			Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8LOW );

			for(u8 Local_u8RowIter = 0 ;(Local_enuErrorState == ES_OK ) && ( Local_u8RowIter < Kpad_u8RowNum ) ; Local_u8RowIter++)
    2f62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f64:	8f 5f       	subi	r24, 0xFF	; 255
    2f66:	8f 87       	std	Y+15, r24	; 0x0f
    2f68:	8a 89       	ldd	r24, Y+18	; 0x12
    2f6a:	88 23       	and	r24, r24
    2f6c:	31 f4       	brne	.+12     	; 0x2f7a <Keypad_enuGetPressedKey+0x298>
    2f6e:	90 91 f1 01 	lds	r25, 0x01F1
    2f72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f74:	89 17       	cp	r24, r25
    2f76:	08 f4       	brcc	.+2      	; 0x2f7a <Keypad_enuGetPressedKey+0x298>
    2f78:	ea ce       	rjmp	.-556    	; 0x2d4e <Keypad_enuGetPressedKey+0x6c>
						break;
					}
				}
			}

			if( (Local_u8Pressed == 1) || (Local_enuErrorState != ES_OK) )
    2f7a:	89 89       	ldd	r24, Y+17	; 0x11
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	39 f1       	breq	.+78     	; 0x2fce <Keypad_enuGetPressedKey+0x2ec>
    2f80:	8a 89       	ldd	r24, Y+18	; 0x12
    2f82:	88 23       	and	r24, r24
    2f84:	21 f5       	brne	.+72     	; 0x2fce <Keypad_enuGetPressedKey+0x2ec>
				break;
			else
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
    2f86:	88 89       	ldd	r24, Y+16	; 0x10
    2f88:	88 2f       	mov	r24, r24
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	fc 01       	movw	r30, r24
    2f92:	ed 5f       	subi	r30, 0xFD	; 253
    2f94:	fd 4f       	sbci	r31, 0xFD	; 253
    2f96:	20 81       	ld	r18, Z
    2f98:	88 89       	ldd	r24, Y+16	; 0x10
    2f9a:	88 2f       	mov	r24, r24
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	88 0f       	add	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	ec 5f       	subi	r30, 0xFC	; 252
    2fa6:	fd 4f       	sbci	r31, 0xFD	; 253
    2fa8:	90 81       	ld	r25, Z
    2faa:	82 2f       	mov	r24, r18
    2fac:	69 2f       	mov	r22, r25
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	0e 94 63 07 	call	0xec6	; 0xec6 <DIO_enuSetPinValue>
    2fb4:	8a 8b       	std	Y+18, r24	; 0x12
	{
		u8 Local_u8RowValue = 1 ,  Local_u8Pressed = 0 ;

		*Copy_pu8KeyValue = 0xff;

		for(u8 Local_u8ColIter = 0 ;Local_u8ColIter < Kpad_u8ColNum ; Local_u8ColIter++)
    2fb6:	88 89       	ldd	r24, Y+16	; 0x10
    2fb8:	8f 5f       	subi	r24, 0xFF	; 255
    2fba:	88 8b       	std	Y+16, r24	; 0x10
    2fbc:	90 91 f2 01 	lds	r25, 0x01F2
    2fc0:	88 89       	ldd	r24, Y+16	; 0x10
    2fc2:	89 17       	cp	r24, r25
    2fc4:	08 f4       	brcc	.+2      	; 0x2fc8 <Keypad_enuGetPressedKey+0x2e6>
    2fc6:	a9 ce       	rjmp	.-686    	; 0x2d1a <Keypad_enuGetPressedKey+0x38>
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <Keypad_enuGetPressedKey+0x2ec>
				break;
			else
				Local_enuErrorState = DIO_enuSetPinValue( KeyPadCols[Local_u8ColIter].OutputGrp , KeyPadCols[Local_u8ColIter].OutputPin , DIO_u8HIGH );
		}
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    2fca:	83 e0       	ldi	r24, 0x03	; 3
    2fcc:	8a 8b       	std	Y+18, r24	; 0x12

	return Local_enuErrorState;//DONE
    2fce:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2fd0:	65 96       	adiw	r28, 0x15	; 21
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	f8 94       	cli
    2fd6:	de bf       	out	0x3e, r29	; 62
    2fd8:	0f be       	out	0x3f, r0	; 63
    2fda:	cd bf       	out	0x3d, r28	; 61
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <main>:
ES_t DetectPowerStatus(void);
ES_t ReadInputDigit(u8 *Copy_u8Digit);

int
main(void)
{
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <main+0x6>
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <main+0x8>
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <main+0xa>
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
	ES_t  Local_enuErrorState ;
	u8 Local_u8Key = KEYPAD_NOT_PRESSED ;
    2ff0:	8f ef       	ldi	r24, 0xFF	; 255
    2ff2:	8e 83       	std	Y+6, r24	; 0x06
	s32 Local_s32Num = 0 ;
    2ff4:	19 82       	std	Y+1, r1	; 0x01
    2ff6:	1a 82       	std	Y+2, r1	; 0x02
    2ff8:	1b 82       	std	Y+3, r1	; 0x03
    2ffa:	1c 82       	std	Y+4, r1	; 0x04


	LCD_enuInit();
    2ffc:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <LCD_enuInit>
	Keypad_enuInit();
    3000:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <Keypad_enuInit>
	LD_enuInit();
    3004:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LD_enuInit>
	Switch_enuInit();
    3008:	0e 94 7e 09 	call	0x12fc	; 0x12fc <Switch_enuInit>



	LCD_enuWriteCommand(0x08); //Turn Display OFF
    300c:	88 e0       	ldi	r24, 0x08	; 8
    300e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_enuWriteCommand>

	do
	{
		Local_enuErrorState = DetectPowerStatus();
    3012:	0e 94 6f 1a 	call	0x34de	; 0x34de <DetectPowerStatus>
    3016:	8d 83       	std	Y+5, r24	; 0x05
	}while(!Global_u8Power && Local_enuErrorState ==ES_OK);
    3018:	80 91 19 02 	lds	r24, 0x0219
    301c:	88 23       	and	r24, r24
    301e:	19 f4       	brne	.+6      	; 0x3026 <main+0x44>
    3020:	8d 81       	ldd	r24, Y+5	; 0x05
    3022:	88 23       	and	r24, r24
    3024:	b1 f3       	breq	.-20     	; 0x3012 <main+0x30>

	if(Global_u8Power)
    3026:	80 91 19 02 	lds	r24, 0x0219
    302a:	88 23       	and	r24, r24
    302c:	09 f4       	brne	.+2      	; 0x3030 <main+0x4e>
    302e:	82 c0       	rjmp	.+260    	; 0x3134 <main+0x152>
	{
		LCD_enuWriteCommand(0x0F);
    3030:	8f e0       	ldi	r24, 0x0F	; 15
    3032:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_enuWriteCommand>

		for(;;)
		{
			if(Global_u8Power)
    3036:	80 91 19 02 	lds	r24, 0x0219
    303a:	88 23       	and	r24, r24
    303c:	09 f4       	brne	.+2      	; 0x3040 <main+0x5e>
    303e:	5b c0       	rjmp	.+182    	; 0x30f6 <main+0x114>
			{
				LCD_enuWriteCommand(0x01);
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_enuWriteCommand>
				LCD_enuGoToPosition(1,1);
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	61 e0       	ldi	r22, 0x01	; 1
    304a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_enuGoToPosition>
				LCD_enuWriteString("Number=");
    304e:	80 e6       	ldi	r24, 0x60	; 96
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <LCD_enuWriteString>
    3056:	26 c0       	rjmp	.+76     	; 0x30a4 <main+0xc2>

				while(  (Local_enuErrorState = ReadInputDigit(&Local_u8Key) ) == ES_OK  )
				{
					if( Local_u8Key != 'C' )
    3058:	8e 81       	ldd	r24, Y+6	; 0x06
    305a:	83 34       	cpi	r24, 0x43	; 67
    305c:	59 f1       	breq	.+86     	; 0x30b4 <main+0xd2>
					{
						LCD_enuWriteData(Local_u8Key);
    305e:	8e 81       	ldd	r24, Y+6	; 0x06
    3060:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_enuWriteData>
						Local_s32Num = (Local_s32Num*10) + (Local_u8Key - '0');
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	ab 81       	ldd	r26, Y+3	; 0x03
    306a:	bc 81       	ldd	r27, Y+4	; 0x04
    306c:	2a e0       	ldi	r18, 0x0A	; 10
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e0       	ldi	r20, 0x00	; 0
    3072:	50 e0       	ldi	r21, 0x00	; 0
    3074:	bc 01       	movw	r22, r24
    3076:	cd 01       	movw	r24, r26
    3078:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__mulsi3>
    307c:	9b 01       	movw	r18, r22
    307e:	ac 01       	movw	r20, r24
    3080:	8e 81       	ldd	r24, Y+6	; 0x06
    3082:	88 2f       	mov	r24, r24
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	c0 97       	sbiw	r24, 0x30	; 48
    3088:	aa 27       	eor	r26, r26
    308a:	97 fd       	sbrc	r25, 7
    308c:	a0 95       	com	r26
    308e:	ba 2f       	mov	r27, r26
    3090:	82 0f       	add	r24, r18
    3092:	93 1f       	adc	r25, r19
    3094:	a4 1f       	adc	r26, r20
    3096:	b5 1f       	adc	r27, r21
    3098:	89 83       	std	Y+1, r24	; 0x01
    309a:	9a 83       	std	Y+2, r25	; 0x02
    309c:	ab 83       	std	Y+3, r26	; 0x03
    309e:	bc 83       	std	Y+4, r27	; 0x04
						Local_u8Key = KEYPAD_NOT_PRESSED;
    30a0:	8f ef       	ldi	r24, 0xFF	; 255
    30a2:	8e 83       	std	Y+6, r24	; 0x06
			{
				LCD_enuWriteCommand(0x01);
				LCD_enuGoToPosition(1,1);
				LCD_enuWriteString("Number=");

				while(  (Local_enuErrorState = ReadInputDigit(&Local_u8Key) ) == ES_OK  )
    30a4:	ce 01       	movw	r24, r28
    30a6:	06 96       	adiw	r24, 0x06	; 6
    30a8:	0e 94 b1 18 	call	0x3162	; 0x3162 <ReadInputDigit>
    30ac:	8d 83       	std	Y+5, r24	; 0x05
    30ae:	8d 81       	ldd	r24, Y+5	; 0x05
    30b0:	88 23       	and	r24, r24
    30b2:	91 f2       	breq	.-92     	; 0x3058 <main+0x76>
						Local_s32Num = (Local_s32Num*10) + (Local_u8Key - '0');
						Local_u8Key = KEYPAD_NOT_PRESSED;
					}
					else break;
				}
				if( Global_u8Restart )
    30b4:	80 91 1a 02 	lds	r24, 0x021A
    30b8:	88 23       	and	r24, r24
    30ba:	19 f0       	breq	.+6      	; 0x30c2 <main+0xe0>
				{
					Global_u8Restart = 0;
    30bc:	10 92 1a 02 	sts	0x021A, r1
    30c0:	ba cf       	rjmp	.-140    	; 0x3036 <main+0x54>
					continue;
				}
				if(Local_enuErrorState == ES_OK)
    30c2:	8d 81       	ldd	r24, Y+5	; 0x05
    30c4:	88 23       	and	r24, r24
    30c6:	59 f5       	brne	.+86     	; 0x311e <main+0x13c>
				{
					LCD_enuWriteCommand(0xC);
    30c8:	8c e0       	ldi	r24, 0x0C	; 12
    30ca:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_enuWriteCommand>
					LCD_enuWriteCommand(0x01);
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_enuWriteCommand>
					LCD_enuWriteString("Counter=");
    30d4:	88 e6       	ldi	r24, 0x68	; 104
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <LCD_enuWriteString>
					LCD_enuGoToPosition(2,5);
    30dc:	82 e0       	ldi	r24, 0x02	; 2
    30de:	65 e0       	ldi	r22, 0x05	; 5
    30e0:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_enuGoToPosition>
					LCD_enuWriteIntegerNum(Local_s32Num);
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	ab 81       	ldd	r26, Y+3	; 0x03
    30ea:	bc 81       	ldd	r27, Y+4	; 0x04
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	0e 94 c5 11 	call	0x238a	; 0x238a <LCD_enuWriteIntegerNum>
    30f4:	ff cf       	rjmp	.-2      	; 0x30f4 <main+0x112>
				}
				else break;
			}
			else
			{
				LCD_enuWriteCommand(0x01);
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_enuWriteCommand>
				LCD_enuGoToPosition(2,3);
    30fc:	82 e0       	ldi	r24, 0x02	; 2
    30fe:	63 e0       	ldi	r22, 0x03	; 3
    3100:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_enuGoToPosition>
				if( Local_enuErrorState == ES_OK  )
    3104:	8d 81       	ldd	r24, Y+5	; 0x05
    3106:	88 23       	and	r24, r24
    3108:	29 f4       	brne	.+10     	; 0x3114 <main+0x132>
				{
					LCD_enuWriteString("Bye..Bye..!");
    310a:	81 e7       	ldi	r24, 0x71	; 113
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <LCD_enuWriteString>
    3112:	91 cf       	rjmp	.-222    	; 0x3036 <main+0x54>
				}
				else
				{
					LCD_enuWriteString("***ERROR***");
    3114:	8d e7       	ldi	r24, 0x7D	; 125
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <LCD_enuWriteString>
    311c:	8c cf       	rjmp	.-232    	; 0x3036 <main+0x54>
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
		LCD_enuWriteString("Power Switch");
		LCD_enuGoToPosition(2,1);
		LCD_enuWriteString("ERROR...!!!");
		while(1);
	}
}
    3122:	26 96       	adiw	r28, 0x06	; 6
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret
			}
		}
	}
	else
	{
		LCD_enuWriteCommand(0x01);
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_enuWriteCommand>
		LCD_enuWriteCommand(0x0C);
    313a:	8c e0       	ldi	r24, 0x0C	; 12
    313c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_enuWriteCommand>
		LCD_enuGoToPosition(1,1);
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	61 e0       	ldi	r22, 0x01	; 1
    3144:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_enuGoToPosition>
		LCD_enuWriteString("Power Switch");
    3148:	89 e8       	ldi	r24, 0x89	; 137
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <LCD_enuWriteString>
		LCD_enuGoToPosition(2,1);
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	61 e0       	ldi	r22, 0x01	; 1
    3154:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_enuGoToPosition>
		LCD_enuWriteString("ERROR...!!!");
    3158:	86 e9       	ldi	r24, 0x96	; 150
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <LCD_enuWriteString>
    3160:	ff cf       	rjmp	.-2      	; 0x3160 <main+0x17e>

00003162 <ReadInputDigit>:
		while(1);
	}
}

ES_t ReadInputDigit(u8 *Copy_u8Digit)
{
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	ae 97       	sbiw	r28, 0x2e	; 46
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	9e a7       	std	Y+46, r25	; 0x2e
    3178:	8d a7       	std	Y+45, r24	; 0x2d
	ES_t Local_enuErrorState = ES_NOK;
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	8c a7       	std	Y+44, r24	; 0x2c

	if(Copy_u8Digit != NULL)
    317e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3180:	9e a5       	ldd	r25, Y+46	; 0x2e
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	09 f4       	brne	.+2      	; 0x3188 <ReadInputDigit+0x26>
    3186:	9f c1       	rjmp	.+830    	; 0x34c6 <ReadInputDigit+0x364>
    3188:	05 c0       	rjmp	.+10     	; 0x3194 <ReadInputDigit+0x32>
	{
		while( (Local_enuErrorState = Keypad_enuGetPressedKey(Copy_u8Digit)) == ES_OK  &&  *Copy_u8Digit == KEYPAD_NOT_PRESSED )
		{
			Local_enuErrorState = Keypad_enuGetPressedKey(Copy_u8Digit);
    318a:	8d a5       	ldd	r24, Y+45	; 0x2d
    318c:	9e a5       	ldd	r25, Y+46	; 0x2e
    318e:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <Keypad_enuGetPressedKey>
    3192:	8c a7       	std	Y+44, r24	; 0x2c
{
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_u8Digit != NULL)
	{
		while( (Local_enuErrorState = Keypad_enuGetPressedKey(Copy_u8Digit)) == ES_OK  &&  *Copy_u8Digit == KEYPAD_NOT_PRESSED )
    3194:	8d a5       	ldd	r24, Y+45	; 0x2d
    3196:	9e a5       	ldd	r25, Y+46	; 0x2e
    3198:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <Keypad_enuGetPressedKey>
    319c:	8c a7       	std	Y+44, r24	; 0x2c
    319e:	8c a5       	ldd	r24, Y+44	; 0x2c
    31a0:	88 23       	and	r24, r24
    31a2:	29 f4       	brne	.+10     	; 0x31ae <ReadInputDigit+0x4c>
    31a4:	ed a5       	ldd	r30, Y+45	; 0x2d
    31a6:	fe a5       	ldd	r31, Y+46	; 0x2e
    31a8:	80 81       	ld	r24, Z
    31aa:	8f 3f       	cpi	r24, 0xFF	; 255
    31ac:	71 f3       	breq	.-36     	; 0x318a <ReadInputDigit+0x28>
		{
			Local_enuErrorState = Keypad_enuGetPressedKey(Copy_u8Digit);
		}

		if( (*Copy_u8Digit<'0' || *Copy_u8Digit>'9') && *Copy_u8Digit != 'C' )
    31ae:	ed a5       	ldd	r30, Y+45	; 0x2d
    31b0:	fe a5       	ldd	r31, Y+46	; 0x2e
    31b2:	80 81       	ld	r24, Z
    31b4:	80 33       	cpi	r24, 0x30	; 48
    31b6:	30 f0       	brcs	.+12     	; 0x31c4 <ReadInputDigit+0x62>
    31b8:	ed a5       	ldd	r30, Y+45	; 0x2d
    31ba:	fe a5       	ldd	r31, Y+46	; 0x2e
    31bc:	80 81       	ld	r24, Z
    31be:	8a 33       	cpi	r24, 0x3A	; 58
    31c0:	08 f4       	brcc	.+2      	; 0x31c4 <ReadInputDigit+0x62>
    31c2:	83 c1       	rjmp	.+774    	; 0x34ca <ReadInputDigit+0x368>
    31c4:	ed a5       	ldd	r30, Y+45	; 0x2d
    31c6:	fe a5       	ldd	r31, Y+46	; 0x2e
    31c8:	80 81       	ld	r24, Z
    31ca:	83 34       	cpi	r24, 0x43	; 67
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <ReadInputDigit+0x6e>
    31ce:	7d c1       	rjmp	.+762    	; 0x34ca <ReadInputDigit+0x368>
		{
			Local_enuErrorState = ES_OUT_RANGE;
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	8c a7       	std	Y+44, r24	; 0x2c
			Global_u8Restart = 1 ;
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	80 93 1a 02 	sts	0x021A, r24
			LCD_enuGoToPosition(1,5);
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	65 e0       	ldi	r22, 0x05	; 5
    31de:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_enuGoToPosition>
			LCD_enuWriteString("NUMBERS");
    31e2:	82 ea       	ldi	r24, 0xA2	; 162
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <LCD_enuWriteString>
			LCD_enuGoToPosition(2,5);
    31ea:	82 e0       	ldi	r24, 0x02	; 2
    31ec:	65 e0       	ldi	r22, 0x05	; 5
    31ee:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_enuGoToPosition>
			LCD_enuWriteString("ONLY!!!");
    31f2:	8a ea       	ldi	r24, 0xAA	; 170
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <LCD_enuWriteString>
			for(u8 Local_u8Iter = 0; Local_u8Iter<5 ; Local_u8Iter++)
    31fa:	1b a6       	std	Y+43, r1	; 0x2b
    31fc:	ed c0       	rjmp	.+474    	; 0x33d8 <ReadInputDigit+0x276>
			{
				LCD_enuWriteCommand(0x08);
    31fe:	88 e0       	ldi	r24, 0x08	; 8
    3200:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_enuWriteCommand>
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	a0 e2       	ldi	r26, 0x20	; 32
    320a:	b1 e4       	ldi	r27, 0x41	; 65
    320c:	8f a3       	std	Y+39, r24	; 0x27
    320e:	98 a7       	std	Y+40, r25	; 0x28
    3210:	a9 a7       	std	Y+41, r26	; 0x29
    3212:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3214:	6f a1       	ldd	r22, Y+39	; 0x27
    3216:	78 a5       	ldd	r23, Y+40	; 0x28
    3218:	89 a5       	ldd	r24, Y+41	; 0x29
    321a:	9a a5       	ldd	r25, Y+42	; 0x2a
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	4a e7       	ldi	r20, 0x7A	; 122
    3222:	55 e4       	ldi	r21, 0x45	; 69
    3224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	8b a3       	std	Y+35, r24	; 0x23
    322e:	9c a3       	std	Y+36, r25	; 0x24
    3230:	ad a3       	std	Y+37, r26	; 0x25
    3232:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3234:	6b a1       	ldd	r22, Y+35	; 0x23
    3236:	7c a1       	ldd	r23, Y+36	; 0x24
    3238:	8d a1       	ldd	r24, Y+37	; 0x25
    323a:	9e a1       	ldd	r25, Y+38	; 0x26
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e8       	ldi	r20, 0x80	; 128
    3242:	5f e3       	ldi	r21, 0x3F	; 63
    3244:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3248:	88 23       	and	r24, r24
    324a:	2c f4       	brge	.+10     	; 0x3256 <ReadInputDigit+0xf4>
		__ticks = 1;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	9a a3       	std	Y+34, r25	; 0x22
    3252:	89 a3       	std	Y+33, r24	; 0x21
    3254:	3f c0       	rjmp	.+126    	; 0x32d4 <ReadInputDigit+0x172>
	else if (__tmp > 65535)
    3256:	6b a1       	ldd	r22, Y+35	; 0x23
    3258:	7c a1       	ldd	r23, Y+36	; 0x24
    325a:	8d a1       	ldd	r24, Y+37	; 0x25
    325c:	9e a1       	ldd	r25, Y+38	; 0x26
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	3f ef       	ldi	r19, 0xFF	; 255
    3262:	4f e7       	ldi	r20, 0x7F	; 127
    3264:	57 e4       	ldi	r21, 0x47	; 71
    3266:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326a:	18 16       	cp	r1, r24
    326c:	4c f5       	brge	.+82     	; 0x32c0 <ReadInputDigit+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326e:	6f a1       	ldd	r22, Y+39	; 0x27
    3270:	78 a5       	ldd	r23, Y+40	; 0x28
    3272:	89 a5       	ldd	r24, Y+41	; 0x29
    3274:	9a a5       	ldd	r25, Y+42	; 0x2a
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e2       	ldi	r20, 0x20	; 32
    327c:	51 e4       	ldi	r21, 0x41	; 65
    327e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	bc 01       	movw	r22, r24
    3288:	cd 01       	movw	r24, r26
    328a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	9a a3       	std	Y+34, r25	; 0x22
    3294:	89 a3       	std	Y+33, r24	; 0x21
    3296:	0f c0       	rjmp	.+30     	; 0x32b6 <ReadInputDigit+0x154>
    3298:	80 e9       	ldi	r24, 0x90	; 144
    329a:	91 e0       	ldi	r25, 0x01	; 1
    329c:	98 a3       	std	Y+32, r25	; 0x20
    329e:	8f 8f       	std	Y+31, r24	; 0x1f
    32a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32a2:	98 a1       	ldd	r25, Y+32	; 0x20
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <ReadInputDigit+0x142>
    32a8:	98 a3       	std	Y+32, r25	; 0x20
    32aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ac:	89 a1       	ldd	r24, Y+33	; 0x21
    32ae:	9a a1       	ldd	r25, Y+34	; 0x22
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	9a a3       	std	Y+34, r25	; 0x22
    32b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b6:	89 a1       	ldd	r24, Y+33	; 0x21
    32b8:	9a a1       	ldd	r25, Y+34	; 0x22
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	69 f7       	brne	.-38     	; 0x3298 <ReadInputDigit+0x136>
    32be:	14 c0       	rjmp	.+40     	; 0x32e8 <ReadInputDigit+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c0:	6b a1       	ldd	r22, Y+35	; 0x23
    32c2:	7c a1       	ldd	r23, Y+36	; 0x24
    32c4:	8d a1       	ldd	r24, Y+37	; 0x25
    32c6:	9e a1       	ldd	r25, Y+38	; 0x26
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9a a3       	std	Y+34, r25	; 0x22
    32d2:	89 a3       	std	Y+33, r24	; 0x21
    32d4:	89 a1       	ldd	r24, Y+33	; 0x21
    32d6:	9a a1       	ldd	r25, Y+34	; 0x22
    32d8:	9e 8f       	std	Y+30, r25	; 0x1e
    32da:	8d 8f       	std	Y+29, r24	; 0x1d
    32dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <ReadInputDigit+0x17e>
    32e4:	9e 8f       	std	Y+30, r25	; 0x1e
    32e6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);
				LCD_enuWriteCommand(0xC);
    32e8:	8c e0       	ldi	r24, 0x0C	; 12
    32ea:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_enuWriteCommand>
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	a6 e9       	ldi	r26, 0x96	; 150
    32f4:	b3 e4       	ldi	r27, 0x43	; 67
    32f6:	89 8f       	std	Y+25, r24	; 0x19
    32f8:	9a 8f       	std	Y+26, r25	; 0x1a
    32fa:	ab 8f       	std	Y+27, r26	; 0x1b
    32fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3300:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3302:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3304:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	4a e7       	ldi	r20, 0x7A	; 122
    330c:	55 e4       	ldi	r21, 0x45	; 69
    330e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	8d 8b       	std	Y+21, r24	; 0x15
    3318:	9e 8b       	std	Y+22, r25	; 0x16
    331a:	af 8b       	std	Y+23, r26	; 0x17
    331c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    331e:	6d 89       	ldd	r22, Y+21	; 0x15
    3320:	7e 89       	ldd	r23, Y+22	; 0x16
    3322:	8f 89       	ldd	r24, Y+23	; 0x17
    3324:	98 8d       	ldd	r25, Y+24	; 0x18
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e8       	ldi	r20, 0x80	; 128
    332c:	5f e3       	ldi	r21, 0x3F	; 63
    332e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3332:	88 23       	and	r24, r24
    3334:	2c f4       	brge	.+10     	; 0x3340 <ReadInputDigit+0x1de>
		__ticks = 1;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	9c 8b       	std	Y+20, r25	; 0x14
    333c:	8b 8b       	std	Y+19, r24	; 0x13
    333e:	3f c0       	rjmp	.+126    	; 0x33be <ReadInputDigit+0x25c>
	else if (__tmp > 65535)
    3340:	6d 89       	ldd	r22, Y+21	; 0x15
    3342:	7e 89       	ldd	r23, Y+22	; 0x16
    3344:	8f 89       	ldd	r24, Y+23	; 0x17
    3346:	98 8d       	ldd	r25, Y+24	; 0x18
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	3f ef       	ldi	r19, 0xFF	; 255
    334c:	4f e7       	ldi	r20, 0x7F	; 127
    334e:	57 e4       	ldi	r21, 0x47	; 71
    3350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3354:	18 16       	cp	r1, r24
    3356:	4c f5       	brge	.+82     	; 0x33aa <ReadInputDigit+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3358:	69 8d       	ldd	r22, Y+25	; 0x19
    335a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    335c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    335e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e2       	ldi	r20, 0x20	; 32
    3366:	51 e4       	ldi	r21, 0x41	; 65
    3368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	bc 01       	movw	r22, r24
    3372:	cd 01       	movw	r24, r26
    3374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	9c 8b       	std	Y+20, r25	; 0x14
    337e:	8b 8b       	std	Y+19, r24	; 0x13
    3380:	0f c0       	rjmp	.+30     	; 0x33a0 <ReadInputDigit+0x23e>
    3382:	80 e9       	ldi	r24, 0x90	; 144
    3384:	91 e0       	ldi	r25, 0x01	; 1
    3386:	9a 8b       	std	Y+18, r25	; 0x12
    3388:	89 8b       	std	Y+17, r24	; 0x11
    338a:	89 89       	ldd	r24, Y+17	; 0x11
    338c:	9a 89       	ldd	r25, Y+18	; 0x12
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	f1 f7       	brne	.-4      	; 0x338e <ReadInputDigit+0x22c>
    3392:	9a 8b       	std	Y+18, r25	; 0x12
    3394:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3396:	8b 89       	ldd	r24, Y+19	; 0x13
    3398:	9c 89       	ldd	r25, Y+20	; 0x14
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	9c 8b       	std	Y+20, r25	; 0x14
    339e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a0:	8b 89       	ldd	r24, Y+19	; 0x13
    33a2:	9c 89       	ldd	r25, Y+20	; 0x14
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	69 f7       	brne	.-38     	; 0x3382 <ReadInputDigit+0x220>
    33a8:	14 c0       	rjmp	.+40     	; 0x33d2 <ReadInputDigit+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33aa:	6d 89       	ldd	r22, Y+21	; 0x15
    33ac:	7e 89       	ldd	r23, Y+22	; 0x16
    33ae:	8f 89       	ldd	r24, Y+23	; 0x17
    33b0:	98 8d       	ldd	r25, Y+24	; 0x18
    33b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	9c 8b       	std	Y+20, r25	; 0x14
    33bc:	8b 8b       	std	Y+19, r24	; 0x13
    33be:	8b 89       	ldd	r24, Y+19	; 0x13
    33c0:	9c 89       	ldd	r25, Y+20	; 0x14
    33c2:	98 8b       	std	Y+16, r25	; 0x10
    33c4:	8f 87       	std	Y+15, r24	; 0x0f
    33c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c8:	98 89       	ldd	r25, Y+16	; 0x10
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	f1 f7       	brne	.-4      	; 0x33ca <ReadInputDigit+0x268>
    33ce:	98 8b       	std	Y+16, r25	; 0x10
    33d0:	8f 87       	std	Y+15, r24	; 0x0f
			Global_u8Restart = 1 ;
			LCD_enuGoToPosition(1,5);
			LCD_enuWriteString("NUMBERS");
			LCD_enuGoToPosition(2,5);
			LCD_enuWriteString("ONLY!!!");
			for(u8 Local_u8Iter = 0; Local_u8Iter<5 ; Local_u8Iter++)
    33d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    33d4:	8f 5f       	subi	r24, 0xFF	; 255
    33d6:	8b a7       	std	Y+43, r24	; 0x2b
    33d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    33da:	85 30       	cpi	r24, 0x05	; 5
    33dc:	08 f4       	brcc	.+2      	; 0x33e0 <ReadInputDigit+0x27e>
    33de:	0f cf       	rjmp	.-482    	; 0x31fe <ReadInputDigit+0x9c>
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	90 e8       	ldi	r25, 0x80	; 128
    33e4:	ab e3       	ldi	r26, 0x3B	; 59
    33e6:	b5 e4       	ldi	r27, 0x45	; 69
    33e8:	8b 87       	std	Y+11, r24	; 0x0b
    33ea:	9c 87       	std	Y+12, r25	; 0x0c
    33ec:	ad 87       	std	Y+13, r26	; 0x0d
    33ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	4a e7       	ldi	r20, 0x7A	; 122
    33fe:	55 e4       	ldi	r21, 0x45	; 69
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	8f 83       	std	Y+7, r24	; 0x07
    340a:	98 87       	std	Y+8, r25	; 0x08
    340c:	a9 87       	std	Y+9, r26	; 0x09
    340e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3410:	6f 81       	ldd	r22, Y+7	; 0x07
    3412:	78 85       	ldd	r23, Y+8	; 0x08
    3414:	89 85       	ldd	r24, Y+9	; 0x09
    3416:	9a 85       	ldd	r25, Y+10	; 0x0a
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e8       	ldi	r20, 0x80	; 128
    341e:	5f e3       	ldi	r21, 0x3F	; 63
    3420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3424:	88 23       	and	r24, r24
    3426:	2c f4       	brge	.+10     	; 0x3432 <ReadInputDigit+0x2d0>
		__ticks = 1;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	9e 83       	std	Y+6, r25	; 0x06
    342e:	8d 83       	std	Y+5, r24	; 0x05
    3430:	3f c0       	rjmp	.+126    	; 0x34b0 <ReadInputDigit+0x34e>
	else if (__tmp > 65535)
    3432:	6f 81       	ldd	r22, Y+7	; 0x07
    3434:	78 85       	ldd	r23, Y+8	; 0x08
    3436:	89 85       	ldd	r24, Y+9	; 0x09
    3438:	9a 85       	ldd	r25, Y+10	; 0x0a
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	3f ef       	ldi	r19, 0xFF	; 255
    343e:	4f e7       	ldi	r20, 0x7F	; 127
    3440:	57 e4       	ldi	r21, 0x47	; 71
    3442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3446:	18 16       	cp	r1, r24
    3448:	4c f5       	brge	.+82     	; 0x349c <ReadInputDigit+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344a:	6b 85       	ldd	r22, Y+11	; 0x0b
    344c:	7c 85       	ldd	r23, Y+12	; 0x0c
    344e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3450:	9e 85       	ldd	r25, Y+14	; 0x0e
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 e2       	ldi	r20, 0x20	; 32
    3458:	51 e4       	ldi	r21, 0x41	; 65
    345a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	bc 01       	movw	r22, r24
    3464:	cd 01       	movw	r24, r26
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
    3472:	0f c0       	rjmp	.+30     	; 0x3492 <ReadInputDigit+0x330>
    3474:	80 e9       	ldi	r24, 0x90	; 144
    3476:	91 e0       	ldi	r25, 0x01	; 1
    3478:	9c 83       	std	Y+4, r25	; 0x04
    347a:	8b 83       	std	Y+3, r24	; 0x03
    347c:	8b 81       	ldd	r24, Y+3	; 0x03
    347e:	9c 81       	ldd	r25, Y+4	; 0x04
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <ReadInputDigit+0x31e>
    3484:	9c 83       	std	Y+4, r25	; 0x04
    3486:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
    348a:	9e 81       	ldd	r25, Y+6	; 0x06
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	9e 81       	ldd	r25, Y+6	; 0x06
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	69 f7       	brne	.-38     	; 0x3474 <ReadInputDigit+0x312>
    349a:	17 c0       	rjmp	.+46     	; 0x34ca <ReadInputDigit+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349c:	6f 81       	ldd	r22, Y+7	; 0x07
    349e:	78 85       	ldd	r23, Y+8	; 0x08
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	9e 83       	std	Y+6, r25	; 0x06
    34ae:	8d 83       	std	Y+5, r24	; 0x05
    34b0:	8d 81       	ldd	r24, Y+5	; 0x05
    34b2:	9e 81       	ldd	r25, Y+6	; 0x06
    34b4:	9a 83       	std	Y+2, r25	; 0x02
    34b6:	89 83       	std	Y+1, r24	; 0x01
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	9a 81       	ldd	r25, Y+2	; 0x02
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	f1 f7       	brne	.-4      	; 0x34bc <ReadInputDigit+0x35a>
    34c0:	9a 83       	std	Y+2, r25	; 0x02
    34c2:	89 83       	std	Y+1, r24	; 0x01
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <ReadInputDigit+0x368>
			}
			_delay_ms(3000);
		}

	}
	else Local_enuErrorState = ES_NULL_POINTER;
    34c6:	83 e0       	ldi	r24, 0x03	; 3
    34c8:	8c a7       	std	Y+44, r24	; 0x2c



	return Local_enuErrorState;
    34ca:	8c a5       	ldd	r24, Y+44	; 0x2c

}
    34cc:	ae 96       	adiw	r28, 0x2e	; 46
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	08 95       	ret

000034de <DetectPowerStatus>:

ES_t DetectPowerStatus(void)
{
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	60 97       	sbiw	r28, 0x10	; 16
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Local_u8SwitchValue;


	if( (Local_enuErrorState = Switch_enuGetPressed ( SW_ONE , &Local_u8SwitchValue) ) == ES_OK )
    34f6:	9e 01       	movw	r18, r28
    34f8:	20 5f       	subi	r18, 0xF0	; 240
    34fa:	3f 4f       	sbci	r19, 0xFF	; 255
    34fc:	8a ec       	ldi	r24, 0xCA	; 202
    34fe:	b9 01       	movw	r22, r18
    3500:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Switch_enuGetPressed>
    3504:	8f 87       	std	Y+15, r24	; 0x0f
    3506:	8f 85       	ldd	r24, Y+15	; 0x0f
    3508:	88 23       	and	r24, r24
    350a:	09 f0       	breq	.+2      	; 0x350e <DetectPowerStatus+0x30>
    350c:	8a c0       	rjmp	.+276    	; 0x3622 <DetectPowerStatus+0x144>
	{
		if(Local_u8SwitchValue == DIO_u8HIGH)
    350e:	88 89       	ldd	r24, Y+16	; 0x10
    3510:	81 30       	cpi	r24, 0x01	; 1
    3512:	09 f0       	breq	.+2      	; 0x3516 <DetectPowerStatus+0x38>
    3514:	86 c0       	rjmp	.+268    	; 0x3622 <DetectPowerStatus+0x144>
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	a0 e2       	ldi	r26, 0x20	; 32
    351c:	b1 e4       	ldi	r27, 0x41	; 65
    351e:	8b 87       	std	Y+11, r24	; 0x0b
    3520:	9c 87       	std	Y+12, r25	; 0x0c
    3522:	ad 87       	std	Y+13, r26	; 0x0d
    3524:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3526:	6b 85       	ldd	r22, Y+11	; 0x0b
    3528:	7c 85       	ldd	r23, Y+12	; 0x0c
    352a:	8d 85       	ldd	r24, Y+13	; 0x0d
    352c:	9e 85       	ldd	r25, Y+14	; 0x0e
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	4a e7       	ldi	r20, 0x7A	; 122
    3534:	55 e4       	ldi	r21, 0x45	; 69
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	8f 83       	std	Y+7, r24	; 0x07
    3540:	98 87       	std	Y+8, r25	; 0x08
    3542:	a9 87       	std	Y+9, r26	; 0x09
    3544:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3546:	6f 81       	ldd	r22, Y+7	; 0x07
    3548:	78 85       	ldd	r23, Y+8	; 0x08
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	9a 85       	ldd	r25, Y+10	; 0x0a
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e8       	ldi	r20, 0x80	; 128
    3554:	5f e3       	ldi	r21, 0x3F	; 63
    3556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    355a:	88 23       	and	r24, r24
    355c:	2c f4       	brge	.+10     	; 0x3568 <DetectPowerStatus+0x8a>
		__ticks = 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	9e 83       	std	Y+6, r25	; 0x06
    3564:	8d 83       	std	Y+5, r24	; 0x05
    3566:	3f c0       	rjmp	.+126    	; 0x35e6 <DetectPowerStatus+0x108>
	else if (__tmp > 65535)
    3568:	6f 81       	ldd	r22, Y+7	; 0x07
    356a:	78 85       	ldd	r23, Y+8	; 0x08
    356c:	89 85       	ldd	r24, Y+9	; 0x09
    356e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	3f ef       	ldi	r19, 0xFF	; 255
    3574:	4f e7       	ldi	r20, 0x7F	; 127
    3576:	57 e4       	ldi	r21, 0x47	; 71
    3578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    357c:	18 16       	cp	r1, r24
    357e:	4c f5       	brge	.+82     	; 0x35d2 <DetectPowerStatus+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3580:	6b 85       	ldd	r22, Y+11	; 0x0b
    3582:	7c 85       	ldd	r23, Y+12	; 0x0c
    3584:	8d 85       	ldd	r24, Y+13	; 0x0d
    3586:	9e 85       	ldd	r25, Y+14	; 0x0e
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e2       	ldi	r20, 0x20	; 32
    358e:	51 e4       	ldi	r21, 0x41	; 65
    3590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	9e 83       	std	Y+6, r25	; 0x06
    35a6:	8d 83       	std	Y+5, r24	; 0x05
    35a8:	0f c0       	rjmp	.+30     	; 0x35c8 <DetectPowerStatus+0xea>
    35aa:	80 e9       	ldi	r24, 0x90	; 144
    35ac:	91 e0       	ldi	r25, 0x01	; 1
    35ae:	9c 83       	std	Y+4, r25	; 0x04
    35b0:	8b 83       	std	Y+3, r24	; 0x03
    35b2:	8b 81       	ldd	r24, Y+3	; 0x03
    35b4:	9c 81       	ldd	r25, Y+4	; 0x04
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <DetectPowerStatus+0xd8>
    35ba:	9c 83       	std	Y+4, r25	; 0x04
    35bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35be:	8d 81       	ldd	r24, Y+5	; 0x05
    35c0:	9e 81       	ldd	r25, Y+6	; 0x06
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	9e 83       	std	Y+6, r25	; 0x06
    35c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ca:	9e 81       	ldd	r25, Y+6	; 0x06
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	69 f7       	brne	.-38     	; 0x35aa <DetectPowerStatus+0xcc>
    35d0:	14 c0       	rjmp	.+40     	; 0x35fa <DetectPowerStatus+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d2:	6f 81       	ldd	r22, Y+7	; 0x07
    35d4:	78 85       	ldd	r23, Y+8	; 0x08
    35d6:	89 85       	ldd	r24, Y+9	; 0x09
    35d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	9e 83       	std	Y+6, r25	; 0x06
    35e4:	8d 83       	std	Y+5, r24	; 0x05
    35e6:	8d 81       	ldd	r24, Y+5	; 0x05
    35e8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ea:	9a 83       	std	Y+2, r25	; 0x02
    35ec:	89 83       	std	Y+1, r24	; 0x01
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	9a 81       	ldd	r25, Y+2	; 0x02
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <DetectPowerStatus+0x114>
    35f6:	9a 83       	std	Y+2, r25	; 0x02
    35f8:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(10);
			if ( ( Local_enuErrorState = Switch_enuGetPressed ( SW_ONE , &Local_u8SwitchValue) ) == ES_OK )
    35fa:	9e 01       	movw	r18, r28
    35fc:	20 5f       	subi	r18, 0xF0	; 240
    35fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3600:	8a ec       	ldi	r24, 0xCA	; 202
    3602:	b9 01       	movw	r22, r18
    3604:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Switch_enuGetPressed>
    3608:	8f 87       	std	Y+15, r24	; 0x0f
    360a:	8f 85       	ldd	r24, Y+15	; 0x0f
    360c:	88 23       	and	r24, r24
    360e:	49 f4       	brne	.+18     	; 0x3622 <DetectPowerStatus+0x144>
			{
				if(Local_u8SwitchValue == DIO_u8HIGH)
    3610:	88 89       	ldd	r24, Y+16	; 0x10
    3612:	81 30       	cpi	r24, 0x01	; 1
    3614:	31 f4       	brne	.+12     	; 0x3622 <DetectPowerStatus+0x144>
				{
					Global_u8Power ^= 1 ;
    3616:	80 91 19 02 	lds	r24, 0x0219
    361a:	91 e0       	ldi	r25, 0x01	; 1
    361c:	89 27       	eor	r24, r25
    361e:	80 93 19 02 	sts	0x0219, r24
				}
			}
		}
	}

	return Local_enuErrorState;
    3622:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3624:	60 96       	adiw	r28, 0x10	; 16
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <__mulsi3>:
    3636:	62 9f       	mul	r22, r18
    3638:	d0 01       	movw	r26, r0
    363a:	73 9f       	mul	r23, r19
    363c:	f0 01       	movw	r30, r0
    363e:	82 9f       	mul	r24, r18
    3640:	e0 0d       	add	r30, r0
    3642:	f1 1d       	adc	r31, r1
    3644:	64 9f       	mul	r22, r20
    3646:	e0 0d       	add	r30, r0
    3648:	f1 1d       	adc	r31, r1
    364a:	92 9f       	mul	r25, r18
    364c:	f0 0d       	add	r31, r0
    364e:	83 9f       	mul	r24, r19
    3650:	f0 0d       	add	r31, r0
    3652:	74 9f       	mul	r23, r20
    3654:	f0 0d       	add	r31, r0
    3656:	65 9f       	mul	r22, r21
    3658:	f0 0d       	add	r31, r0
    365a:	99 27       	eor	r25, r25
    365c:	72 9f       	mul	r23, r18
    365e:	b0 0d       	add	r27, r0
    3660:	e1 1d       	adc	r30, r1
    3662:	f9 1f       	adc	r31, r25
    3664:	63 9f       	mul	r22, r19
    3666:	b0 0d       	add	r27, r0
    3668:	e1 1d       	adc	r30, r1
    366a:	f9 1f       	adc	r31, r25
    366c:	bd 01       	movw	r22, r26
    366e:	cf 01       	movw	r24, r30
    3670:	11 24       	eor	r1, r1
    3672:	08 95       	ret

00003674 <__divmodhi4>:
    3674:	97 fb       	bst	r25, 7
    3676:	09 2e       	mov	r0, r25
    3678:	07 26       	eor	r0, r23
    367a:	0a d0       	rcall	.+20     	; 0x3690 <__divmodhi4_neg1>
    367c:	77 fd       	sbrc	r23, 7
    367e:	04 d0       	rcall	.+8      	; 0x3688 <__divmodhi4_neg2>
    3680:	49 d0       	rcall	.+146    	; 0x3714 <__udivmodhi4>
    3682:	06 d0       	rcall	.+12     	; 0x3690 <__divmodhi4_neg1>
    3684:	00 20       	and	r0, r0
    3686:	1a f4       	brpl	.+6      	; 0x368e <__divmodhi4_exit>

00003688 <__divmodhi4_neg2>:
    3688:	70 95       	com	r23
    368a:	61 95       	neg	r22
    368c:	7f 4f       	sbci	r23, 0xFF	; 255

0000368e <__divmodhi4_exit>:
    368e:	08 95       	ret

00003690 <__divmodhi4_neg1>:
    3690:	f6 f7       	brtc	.-4      	; 0x368e <__divmodhi4_exit>
    3692:	90 95       	com	r25
    3694:	81 95       	neg	r24
    3696:	9f 4f       	sbci	r25, 0xFF	; 255
    3698:	08 95       	ret

0000369a <__udivmodsi4>:
    369a:	a1 e2       	ldi	r26, 0x21	; 33
    369c:	1a 2e       	mov	r1, r26
    369e:	aa 1b       	sub	r26, r26
    36a0:	bb 1b       	sub	r27, r27
    36a2:	fd 01       	movw	r30, r26
    36a4:	0d c0       	rjmp	.+26     	; 0x36c0 <__udivmodsi4_ep>

000036a6 <__udivmodsi4_loop>:
    36a6:	aa 1f       	adc	r26, r26
    36a8:	bb 1f       	adc	r27, r27
    36aa:	ee 1f       	adc	r30, r30
    36ac:	ff 1f       	adc	r31, r31
    36ae:	a2 17       	cp	r26, r18
    36b0:	b3 07       	cpc	r27, r19
    36b2:	e4 07       	cpc	r30, r20
    36b4:	f5 07       	cpc	r31, r21
    36b6:	20 f0       	brcs	.+8      	; 0x36c0 <__udivmodsi4_ep>
    36b8:	a2 1b       	sub	r26, r18
    36ba:	b3 0b       	sbc	r27, r19
    36bc:	e4 0b       	sbc	r30, r20
    36be:	f5 0b       	sbc	r31, r21

000036c0 <__udivmodsi4_ep>:
    36c0:	66 1f       	adc	r22, r22
    36c2:	77 1f       	adc	r23, r23
    36c4:	88 1f       	adc	r24, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	1a 94       	dec	r1
    36ca:	69 f7       	brne	.-38     	; 0x36a6 <__udivmodsi4_loop>
    36cc:	60 95       	com	r22
    36ce:	70 95       	com	r23
    36d0:	80 95       	com	r24
    36d2:	90 95       	com	r25
    36d4:	9b 01       	movw	r18, r22
    36d6:	ac 01       	movw	r20, r24
    36d8:	bd 01       	movw	r22, r26
    36da:	cf 01       	movw	r24, r30
    36dc:	08 95       	ret

000036de <__divmodsi4>:
    36de:	97 fb       	bst	r25, 7
    36e0:	09 2e       	mov	r0, r25
    36e2:	05 26       	eor	r0, r21
    36e4:	0e d0       	rcall	.+28     	; 0x3702 <__divmodsi4_neg1>
    36e6:	57 fd       	sbrc	r21, 7
    36e8:	04 d0       	rcall	.+8      	; 0x36f2 <__divmodsi4_neg2>
    36ea:	d7 df       	rcall	.-82     	; 0x369a <__udivmodsi4>
    36ec:	0a d0       	rcall	.+20     	; 0x3702 <__divmodsi4_neg1>
    36ee:	00 1c       	adc	r0, r0
    36f0:	38 f4       	brcc	.+14     	; 0x3700 <__divmodsi4_exit>

000036f2 <__divmodsi4_neg2>:
    36f2:	50 95       	com	r21
    36f4:	40 95       	com	r20
    36f6:	30 95       	com	r19
    36f8:	21 95       	neg	r18
    36fa:	3f 4f       	sbci	r19, 0xFF	; 255
    36fc:	4f 4f       	sbci	r20, 0xFF	; 255
    36fe:	5f 4f       	sbci	r21, 0xFF	; 255

00003700 <__divmodsi4_exit>:
    3700:	08 95       	ret

00003702 <__divmodsi4_neg1>:
    3702:	f6 f7       	brtc	.-4      	; 0x3700 <__divmodsi4_exit>
    3704:	90 95       	com	r25
    3706:	80 95       	com	r24
    3708:	70 95       	com	r23
    370a:	61 95       	neg	r22
    370c:	7f 4f       	sbci	r23, 0xFF	; 255
    370e:	8f 4f       	sbci	r24, 0xFF	; 255
    3710:	9f 4f       	sbci	r25, 0xFF	; 255
    3712:	08 95       	ret

00003714 <__udivmodhi4>:
    3714:	aa 1b       	sub	r26, r26
    3716:	bb 1b       	sub	r27, r27
    3718:	51 e1       	ldi	r21, 0x11	; 17
    371a:	07 c0       	rjmp	.+14     	; 0x372a <__udivmodhi4_ep>

0000371c <__udivmodhi4_loop>:
    371c:	aa 1f       	adc	r26, r26
    371e:	bb 1f       	adc	r27, r27
    3720:	a6 17       	cp	r26, r22
    3722:	b7 07       	cpc	r27, r23
    3724:	10 f0       	brcs	.+4      	; 0x372a <__udivmodhi4_ep>
    3726:	a6 1b       	sub	r26, r22
    3728:	b7 0b       	sbc	r27, r23

0000372a <__udivmodhi4_ep>:
    372a:	88 1f       	adc	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	5a 95       	dec	r21
    3730:	a9 f7       	brne	.-22     	; 0x371c <__udivmodhi4_loop>
    3732:	80 95       	com	r24
    3734:	90 95       	com	r25
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	08 95       	ret

0000373c <__prologue_saves__>:
    373c:	2f 92       	push	r2
    373e:	3f 92       	push	r3
    3740:	4f 92       	push	r4
    3742:	5f 92       	push	r5
    3744:	6f 92       	push	r6
    3746:	7f 92       	push	r7
    3748:	8f 92       	push	r8
    374a:	9f 92       	push	r9
    374c:	af 92       	push	r10
    374e:	bf 92       	push	r11
    3750:	cf 92       	push	r12
    3752:	df 92       	push	r13
    3754:	ef 92       	push	r14
    3756:	ff 92       	push	r15
    3758:	0f 93       	push	r16
    375a:	1f 93       	push	r17
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	ca 1b       	sub	r28, r26
    3766:	db 0b       	sbc	r29, r27
    3768:	0f b6       	in	r0, 0x3f	; 63
    376a:	f8 94       	cli
    376c:	de bf       	out	0x3e, r29	; 62
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	cd bf       	out	0x3d, r28	; 61
    3772:	09 94       	ijmp

00003774 <__epilogue_restores__>:
    3774:	2a 88       	ldd	r2, Y+18	; 0x12
    3776:	39 88       	ldd	r3, Y+17	; 0x11
    3778:	48 88       	ldd	r4, Y+16	; 0x10
    377a:	5f 84       	ldd	r5, Y+15	; 0x0f
    377c:	6e 84       	ldd	r6, Y+14	; 0x0e
    377e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3780:	8c 84       	ldd	r8, Y+12	; 0x0c
    3782:	9b 84       	ldd	r9, Y+11	; 0x0b
    3784:	aa 84       	ldd	r10, Y+10	; 0x0a
    3786:	b9 84       	ldd	r11, Y+9	; 0x09
    3788:	c8 84       	ldd	r12, Y+8	; 0x08
    378a:	df 80       	ldd	r13, Y+7	; 0x07
    378c:	ee 80       	ldd	r14, Y+6	; 0x06
    378e:	fd 80       	ldd	r15, Y+5	; 0x05
    3790:	0c 81       	ldd	r16, Y+4	; 0x04
    3792:	1b 81       	ldd	r17, Y+3	; 0x03
    3794:	aa 81       	ldd	r26, Y+2	; 0x02
    3796:	b9 81       	ldd	r27, Y+1	; 0x01
    3798:	ce 0f       	add	r28, r30
    379a:	d1 1d       	adc	r29, r1
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	f8 94       	cli
    37a0:	de bf       	out	0x3e, r29	; 62
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	cd bf       	out	0x3d, r28	; 61
    37a6:	ed 01       	movw	r28, r26
    37a8:	08 95       	ret

000037aa <_exit>:
    37aa:	f8 94       	cli

000037ac <__stop_program>:
    37ac:	ff cf       	rjmp	.-2      	; 0x37ac <__stop_program>
